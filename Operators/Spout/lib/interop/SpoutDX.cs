// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace SpoutDX
{
    // DEBUG: class SPOUT_DLLEXP spoutDX {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	spoutDX();
    // DEBUG:     ~spoutDX();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// DIRECTX
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	bool OpenDirectX11(ID3D11Device* pDevice = nullptr);
    // DEBUG: 	ID3D11Device* GetDX11Device();
    // DEBUG: 	ID3D11DeviceContext* GetDX11Context();
    // DEBUG: 	void CloseDirectX11();
    // DEBUG: 	bool IsClassDevice();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// SENDER
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Set the sender name
    // DEBUG: 	bool SetSenderName(const char* sendername = nullptr);
    // DEBUG: 	// Set the sender texture format
    // DEBUG: 	void SetSenderFormat(DXGI_FORMAT format);
    // DEBUG: 	// Close sender and free resources
    // DEBUG: 	void ReleaseSender();
    // DEBUG: 	// Send the back buffer
    // DEBUG: 	bool SendBackBuffer();
    // DEBUG: 	// Send a texture
    // DEBUG: 	bool SendTexture(ID3D11Texture2D* pTexture);
    // DEBUG: 	// Send part of a texture
    // DEBUG: 	bool SendTexture(ID3D11Texture2D* pTexture,
    // DEBUG: 		unsigned int xoffset, unsigned int yoffset,
    // DEBUG: 		unsigned int width, unsigned int height); 
    // DEBUG: 	// Send an image
    // DEBUG: 	bool SendImage(const unsigned char * pData, unsigned int width, unsigned int height);
    // DEBUG: 	// Sender status
    // DEBUG: 	bool IsInitialized();
    // DEBUG: 	// Sender name
    // DEBUG: 	const char * GetName();
    // DEBUG: 	// Get width
    // DEBUG: 	unsigned int GetWidth();
    // DEBUG: 	// Get height
    // DEBUG: 	unsigned int GetHeight();
    // DEBUG: 	// Get frame rate
    // DEBUG: 	double GetFps();
    // DEBUG: 	// Get frame number
    // DEBUG: 	long GetFrame();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// RECEIVER
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Set the sender to connect to
    // DEBUG: 	void SetReceiverName(const char * sendername = nullptr);
    // DEBUG: 	// Close receiver and free resources
    // DEBUG: 	void ReleaseReceiver();
    // DEBUG: 	// Receive from a sender
    // DEBUG: 	bool ReceiveTexture();
    // DEBUG: 	// Receive a texture from a sender
    // DEBUG: 	bool ReceiveTexture(ID3D11Texture2D** ppTexture);
    // DEBUG: 	// Receive an image
    // DEBUG: 	bool ReceiveImage(unsigned char * pixels, unsigned int width, unsigned int height, bool bRGB = false, bool bInvert = false);
    // DEBUG: 	// Read pixels from texture
    // DEBUG: 	bool ReadTexurePixels(ID3D11Texture2D* ppTexture, unsigned char* pixels);
    // DEBUG: 
    // DEBUG: 	// Open sender selection dialog
    // DEBUG: 	bool SelectSender(HWND hwnd = NULL);
    // DEBUG: 	// Sender has changed
    // DEBUG: 	bool IsUpdated();
    // DEBUG: 	// Connected to a sender
    // DEBUG: 	bool IsConnected();
    // DEBUG: 	// Received frame is new
    // DEBUG: 	bool IsFrameNew();
    // DEBUG: 	// Received texture
    // DEBUG: 	ID3D11Texture2D* GetSenderTexture();
    // DEBUG: 	// Received sender share handle
    // DEBUG: 	HANDLE GetSenderHandle();
    // DEBUG: 	// Received sender texture format
    // DEBUG: 	DXGI_FORMAT GetSenderFormat();
    // DEBUG: 	// Received sender name
    // DEBUG: 	const char * GetSenderName();
    // DEBUG: 	// Received sender width
    // DEBUG: 	unsigned int GetSenderWidth();
    // DEBUG: 	// Received sender height
    // DEBUG: 	unsigned int GetSenderHeight();
    // DEBUG: 	// Received sender frame rate
    // DEBUG: 	double GetSenderFps();
    // DEBUG: 	// Received sender frame number
    // DEBUG: 	long GetSenderFrame();
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// COMMON
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps);
    // DEBUG: 	// Disable frame counting for this application
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Return frame count status
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Signal sync event 
    // DEBUG: 	void SetFrameSync(const char* SenderName);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0);
    // DEBUG: 
    // DEBUG: 								
    // DEBUG: 	//
    // DEBUG: 	// Sender names
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get number of senders
    // DEBUG: 	int  GetSenderCount();
    // DEBUG: 	// Get sender name for a given index
    // DEBUG: 	bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 	// Return a list of current senders
    // DEBUG: 	std::vector<std::string> GetSenderList();
    // DEBUG: 	// Sender index into the set of names
    // DEBUG: 	int GetSenderIndex(const char* sendername);
    // DEBUG: 	// Get sender details
    // DEBUG: 	bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 	// Get active sender name
    // DEBUG: 	bool GetActiveSender(char* sendername);
    // DEBUG: 	// set active sender name
    // DEBUG: 	bool SetActiveSender(const char* sendername);
    // DEBUG: 	// Get maximum senders allowed
    // DEBUG: 	int  GetMaxSenders();
    // DEBUG: 	// Set maximum senders allowed
    // DEBUG: 	void SetMaxSenders(int maxSenders);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Adapter functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get the number of graphics adapters in the system
    // DEBUG: 	int GetNumAdapters();
    // DEBUG: 	// Get the adapter name for a given index
    // DEBUG: 	bool GetAdapterName(int index, char *adaptername, int maxchars);
    // DEBUG: 	// Get the current adapter description
    // DEBUG: 	bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars);
    // DEBUG: 	// Get the current adapter index
    // DEBUG: 	int  GetAdapter();
    // DEBUG: 	// Set required graphics adapter for output (no args or -1 to reset)
    // DEBUG: 	bool SetAdapter(int index = -1);
    // DEBUG: 	// Get adapter pointer for a given adapter (-1 means current)
    // DEBUG: 	IDXGIAdapter* GetAdapterPointer(int index = -1);
    // DEBUG: 	// Set required graphics adapter for creating a device
    // DEBUG: 	void SetAdapterPointer(IDXGIAdapter* pAdapter);
    // DEBUG: 	// Get auto device switching status
    // DEBUG: 	bool GetAdapterAuto();
    // DEBUG: 	// Auto switch receiving device to use the same graphics adapter as the sender
    // DEBUG: 	void SetAdapterAuto(bool bAuto = true);
    // DEBUG: 	// Get sender adapter index and name for a given sender
    // DEBUG: 	int GetSenderAdapter(const char* sendername, char* adaptername = nullptr, int maxchars = 256);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Graphics preference
    // DEBUG: 	//
    // DEBUG: // Windows 10 Vers 1803, build 17134 or later
    // DEBUG: #ifdef NTDDI_WIN10_RS4
    // DEBUG: 
    // DEBUG: 	// Get the Windows graphics preference for an application
    // DEBUG: 	//     -1 - No preference
    // DEBUG: 	//      0 - Default
    // DEBUG: 	//      1 - Power saving
    // DEBUG: 	//      2 - High performance
    // DEBUG: 	// If no path is specified, use the current application path
    // DEBUG: 	int GetPerformancePreference(const char* path = nullptr);
    // DEBUG: 	// Set the Windows graphics preference for an application
    // DEBUG: 	//     -1 - No preference
    // DEBUG: 	//      0 - Default
    // DEBUG: 	//      1 - Power saving
    // DEBUG: 	//      2 - High performance
    // DEBUG: 	// If no path is specified, use the current application path
    // DEBUG: 	bool SetPerformancePreference(int preference, const char* path = nullptr);
    // DEBUG: 	// Get the graphics adapter name for a Windows preference
    // DEBUG: 	bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars);
    // DEBUG: 	// Set graphics adapter index for a Windows preference
    // DEBUG: 	bool SetPreferredAdapter(int preference);
    // DEBUG: 	// Windows graphics preference availability
    // DEBUG: 	bool IsPreferenceAvailable();
    // DEBUG: 	// Is the path a valid application
    // DEBUG: 	bool IsApplicationPath(const char* path);
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Sharing modes (2.006 compatibility)
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user selected DX9 mode (2.006)
    // DEBUG: 	bool GetDX9();
    // DEBUG: 	bool GetMemoryShareMode();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Utility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	void CheckSenderFormat(char * sendername);
    // DEBUG: 	bool CreateDX11texture(ID3D11Device* pd3dDevice,
    // DEBUG: 		unsigned int width, unsigned int height,
    // DEBUG: 		DXGI_FORMAT format, ID3D11Texture2D** ppTexture);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// SpoutUtils namespace functions for dll access
    // DEBUG: 	//
    // DEBUG: 	void OpenSpoutConsole();
    // DEBUG: 	void CloseSpoutConsole(bool bWarning = false);
    // DEBUG: 	void EnableSpoutLog();
    // DEBUG: 	void EnableSpoutLogFile(const char* filename, bool append = false);
    // DEBUG: 	void DisableSpoutLogFile();
    // DEBUG: 	void DisableSpoutLog();
    // DEBUG: 	int SpoutMessageBox(const char* message, DWORD dwMilliseconds = 0);
    // DEBUG: 	int SpoutMessageBox(const char* caption, UINT uType, const char* format, ...);
    // DEBUG: 	int SpoutMessageBox(HWND hwnd, LPCSTR message, LPCSTR caption, UINT uType, DWORD dwMilliseconds = 0);
    // DEBUG: 	int SpoutMessageBox(HWND hwnd, LPCSTR message, LPCSTR caption, UINT uType, const char* instruction, DWORD dwMilliseconds = 0);
    // DEBUG: 	int SpoutMessageBox(HWND hwnd, LPCSTR message, LPCSTR caption, UINT uType, std::string& text);
    // DEBUG: 	int SpoutMessageBox(HWND hwnd, LPCSTR message, LPCSTR caption, UINT uType, std::vector<std::string> items, int& selected);
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Data sharing
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Write data to shared memory
    // DEBUG: 	bool WriteMemoryBuffer(const char *name, const char* data, int length);
    // DEBUG: 	// Read data from shared memory
    // DEBUG: 	int  ReadMemoryBuffer(const char* name, char* data, int maxlength);
    // DEBUG: 	// Create a shared memory buffer
    // DEBUG: 	bool CreateMemoryBuffer(const char *name, int length);
    // DEBUG: 	// Delete a shared memory buffer
    // DEBUG: 	bool DeleteMemoryBuffer();
    // DEBUG: 	// Get the number of bytes available for data transfer
    // DEBUG: 	int  GetMemoryBufferSize(const char *name);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Options used for SpoutCam
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Mirror image
    // DEBUG: 	void SetMirror(bool bMirror = true);
    // DEBUG: 
    // DEBUG: 	// RGB <> BGR
    // DEBUG: 	void SetSwap(bool bSwap = true);
    // DEBUG: 
    // DEBUG: 	bool GetMirror();
    // DEBUG: 
    // DEBUG: 	bool GetSwap();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Public for external access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	spoutSenderNames sendernames;
    // DEBUG: 	spoutFrameCount frame;
    // DEBUG: 	spoutDirectX spoutdx;
    // DEBUG: 	spoutCopy spoutcopy;
    // DEBUG: 
    // DEBUG: protected :
    // DEBUG: 
    // DEBUG: 	ID3D11Device* m_pd3dDevice;
    // DEBUG: 	ID3D11DeviceContext* m_pImmediateContext;
    // DEBUG: 	ID3D11Texture2D* m_pSharedTexture;
    // DEBUG: 	ID3D11Texture2D* m_pTexture;
    // DEBUG: 	ID3D11Texture2D* m_pStaging[2];
    // DEBUG: 	int m_Index;
    // DEBUG: 	int m_NextIndex;
    // DEBUG: 
    // DEBUG: 	HANDLE m_dxShareHandle;
    // DEBUG: 	DWORD m_dwFormat;
    // DEBUG: 	SharedTextureInfo m_SenderInfo;
    // DEBUG: 	char m_SenderNameSetup[256];
    // DEBUG: 	char m_SenderName[256];
    // DEBUG: 	unsigned int m_Width;
    // DEBUG: 	unsigned int m_Height;
    // DEBUG: 	bool m_bUpdated;
    // DEBUG: 	bool m_bConnected;
    // DEBUG: 	bool m_bSpoutInitialized;
    // DEBUG: 	bool m_bSpoutPanelOpened;
    // DEBUG: 	bool m_bSpoutPanelActive;
    // DEBUG: 	bool m_bClassDevice;
    // DEBUG: 	bool m_bAdapt;
    // DEBUG: 	bool m_bMemoryShare; // Using 2.006 memoryshare methods
    // DEBUG: 	bool m_bMirror; // Mirror image
    // DEBUG: 	bool m_bSwapRB; // RGB <> BGR
    // DEBUG: 	SHELLEXECUTEINFOA m_ShExecInfo; // For ShellExecute
    // DEBUG: 
    // DEBUG: 	// For WriteMemoryBuffer/ReadMemoryBuffer
    // DEBUG: 	SpoutSharedMemory memorybuffer;
    // DEBUG: 
    // DEBUG: 	bool CheckSender(unsigned int width, unsigned int height, DWORD dwFormat);
    // DEBUG: 	ID3D11Texture2D* CheckSenderTexture(char *sendername, HANDLE dxShareHandle);
    // DEBUG: 
    // DEBUG: 	bool ReceiveSenderData();
    // DEBUG: 	void CreateReceiver(const char * sendername, unsigned int width, unsigned int height, DWORD dwFormat);
    // DEBUG: 	
    // DEBUG: 	// Read pixels from a staging texture
    // DEBUG: 	bool ReadPixelData(ID3D11Texture2D* pStagingSource, unsigned char* destpixels,
    // DEBUG: 		unsigned int width, unsigned int height, bool bRGB, bool bInvert, bool bSwap);
    // DEBUG: 	
    // DEBUG: 	// Create or update staging textures
    // DEBUG: 	bool CheckStagingTextures(unsigned int width, unsigned int height, DWORD dwFormat = DXGI_FORMAT_B8G8R8A8_UNORM);
    // DEBUG: 
    // DEBUG: 	// Create or update class texture
    // DEBUG: 	bool CheckTexture(unsigned int width, unsigned int height, DWORD dwFormat);
    // DEBUG: 
    // DEBUG: 	bool SelectSenderPanel(const char* message = nullptr);
    // DEBUG: 	bool CheckSpoutPanel(char *sendername, int maxchars = 256);
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutDX : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1864)]
        public partial struct __Internal
        {
            internal global::SpoutDX.SpoutSenderNames.__Internal sendernames;
            internal global::SpoutDX.SpoutFrameCount.__Internal frame;
            internal global::SpoutDX.SpoutDirectX.__Internal spoutdx;
            internal global::SpoutDX.SpoutCopy.__Internal spoutcopy;
            internal __IntPtr m_pd3dDevice;
            internal __IntPtr m_pImmediateContext;
            internal __IntPtr m_pSharedTexture;
            internal __IntPtr m_pTexture;
            internal fixed long m_pStaging[2];
            internal int m_Index;
            internal int m_NextIndex;
            internal __IntPtr m_dxShareHandle;
            internal uint m_dwFormat;
            internal global::SpoutDX.SharedTextureInfo.__Internal m_SenderInfo;
            internal fixed sbyte m_SenderNameSetup[256];
            internal fixed sbyte m_SenderName[256];
            internal uint m_Width;
            internal uint m_Height;
            internal byte m_bUpdated;
            internal byte m_bConnected;
            internal byte m_bSpoutInitialized;
            internal byte m_bSpoutPanelOpened;
            internal byte m_bSpoutPanelActive;
            internal byte m_bClassDevice;
            internal byte m_bAdapt;
            internal byte m_bMemoryShare;
            internal byte m_bMirror;
            internal byte m_bSwapRB;
            internal global::SHELLEXECUTEINFOA.__Internal m_ShExecInfo;
            internal global::SpoutDX.SpoutSharedMemory.__Internal memorybuffer;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0spoutDX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0spoutDX@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1spoutDX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?OpenDirectX11@spoutDX@@QEAA_NPEAUID3D11Device@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDirectX11(__IntPtr __instance, __IntPtr pDevice);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CloseDirectX11@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseDirectX11(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetSenderName@spoutDX@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReleaseSender@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SendTexture@spoutDX@@QEAA_NPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendTexture(__IntPtr __instance, __IntPtr pTexture);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SendTexture@spoutDX@@QEAA_NPEAUID3D11Texture2D@@IIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendTexture(__IntPtr __instance, __IntPtr pTexture, uint xoffset, uint yoffset, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SendImage@spoutDX@@QEAA_NPEBEII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendImage(__IntPtr __instance, byte* pData, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetReceiverName@spoutDX@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReceiverName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReleaseReceiver@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseReceiver(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReceiveTexture@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReceiveTexture@spoutDX@@QEAA_NPEAPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, __IntPtr ppTexture);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReceiveImage@spoutDX@@QEAA_NPEAEII_N1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, byte* pixels, uint width, uint height, bool bRGB, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReadTexurePixels@spoutDX@@QEAA_NPEAUID3D11Texture2D@@PEAE@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTexurePixels(__IntPtr __instance, __IntPtr ppTexture, byte* pixels);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?HoldFps@spoutDX@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?DisableFrameCount@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetFrameSync@spoutDX@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?WaitFrameSync@spoutDX@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSender@spoutDX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderIndex@spoutDX@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderIndex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderInfo@spoutDX@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetActiveSender@spoutDX@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetActiveSender@spoutDX@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetAdapterName@spoutDX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetAdapterInfo@spoutDX@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* renderdescription, sbyte* displaydescription, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetAdapter@spoutDX@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetAdapter(__IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderAdapter@spoutDX@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderAdapter(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetPerformancePreference@spoutDX@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPerformancePreference(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetPerformancePreference@spoutDX@@QEAA_NHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPerformancePreference(__IntPtr __instance, int preference, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetPreferredAdapterName@spoutDX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPreferredAdapterName(__IntPtr __instance, int preference, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetPreferredAdapter@spoutDX@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPreferredAdapter(__IntPtr __instance, int preference);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsApplicationPath@spoutDX@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsApplicationPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckSenderFormat@spoutDX@@QEAAXPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckSenderFormat(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?OpenSpoutConsole@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OpenSpoutConsole(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CloseSpoutConsole@spoutDX@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseSpoutConsole(__IntPtr __instance, bool bWarning);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?EnableSpoutLog@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableSpoutLog(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?EnableSpoutLogFile@spoutDX@@QEAAXPEBD_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableSpoutLogFile(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, bool append);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?DisableSpoutLogFile@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableSpoutLogFile(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?DisableSpoutLog@spoutDX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableSpoutLog(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SpoutMessageBox@spoutDX@@QEAAHPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SpoutMessageBox(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message, uint dwMilliseconds);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SpoutMessageBox@spoutDX@@QEAAHPEBDI0ZZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SpoutMessageBox(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string caption, uint uType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?WriteMemoryBuffer@spoutDX@@QEAA_NPEBD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string data, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReadMemoryBuffer@spoutDX@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, sbyte* data, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CreateMemoryBuffer@spoutDX@@QEAA_NPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?DeleteMemoryBuffer@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteMemoryBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetMemoryBufferSize@spoutDX@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckSender@spoutDX@@IEAA_NIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSender(__IntPtr __instance, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckSenderTexture@spoutDX@@IEAAPEAUID3D11Texture2D@@PEADPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr CheckSenderTexture(__IntPtr __instance, sbyte* sendername, __IntPtr dxShareHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReceiveSenderData@spoutDX@@IEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveSenderData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CreateReceiver@spoutDX@@IEAAXPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateReceiver(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ReadPixelData@spoutDX@@IEAA_NPEAUID3D11Texture2D@@PEAEII_N22@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadPixelData(__IntPtr __instance, __IntPtr pStagingSource, byte* destpixels, uint width, uint height, bool bRGB, bool bInvert, bool bSwap);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckStagingTextures@spoutDX@@IEAA_NIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckStagingTextures(__IntPtr __instance, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckTexture@spoutDX@@IEAA_NIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckTexture(__IntPtr __instance, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SelectSenderPanel@spoutDX@@IEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SelectSenderPanel(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?CheckSpoutPanel@spoutDX@@IEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSpoutPanel(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetDX11Device@spoutDX@@QEAAPEAUID3D11Device@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDX11Device(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetDX11Context@spoutDX@@QEAAPEAUID3D11DeviceContext@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDX11Context(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsClassDevice@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsClassDevice(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderName@spoutDX@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SendBackBuffer@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendBackBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsInitialized@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetName@spoutDX@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetWidth@spoutDX@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetHeight@spoutDX@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetFps@spoutDX@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetFrame@spoutDX@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsUpdated@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUpdated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsConnected@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsFrameNew@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderTexture@spoutDX@@QEAAPEAUID3D11Texture2D@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderHandle@spoutDX@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderWidth@spoutDX@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderHeight@spoutDX@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderFps@spoutDX@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderFrame@spoutDX@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsFrameCountEnabled@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSenderCount@spoutDX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetMaxSenders@spoutDX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetMaxSenders@spoutDX@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetNumAdapters@spoutDX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetAdapter@spoutDX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetAdapterAuto@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterAuto(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetAdapterAuto@spoutDX@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAdapterAuto(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?IsPreferenceAvailable@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreferenceAvailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetDX9@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetMemoryShareMode@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetMirror@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMirror(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetMirror@spoutDX@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMirror(__IntPtr __instance, bool bMirror);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?GetSwap@spoutDX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSwap(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?SetSwap@spoutDX@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSwap(__IntPtr __instance, bool bSwap);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutDX>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutDX>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SpoutDX managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SpoutDX>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SpoutDX managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutDX __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutDX(native.ToPointer(), skipVTables);
        }

        internal static SpoutDX __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutDX)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutDX __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutDX(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutDX(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutDX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutDX()
        public SpoutDX()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutDX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutDX
        public SpoutDX(global::SpoutDX.SpoutDX _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutDX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.SpoutDX.__Internal*) __Instance) = *((global::SpoutDX.SpoutDX.__Internal*) _0.__Instance);
        }

        ~SpoutDX()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: bool OpenDirectX11(ID3D11Device* pDevice = nullptr)
        public bool OpenDirectX11(global::SpoutDX.ID3D11Device pDevice)
        {
            var __arg0 = pDevice is null ? __IntPtr.Zero : pDevice.__Instance;
            var ___ret = __Internal.OpenDirectX11(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: void CloseDirectX11()
        public void CloseDirectX11()
        {
            __Internal.CloseDirectX11(__Instance);
        }

        // DEBUG: bool SetSenderName(const char* sendername = nullptr)
        public bool SetSenderName(string sendername)
        {
            var ___ret = __Internal.SetSenderName(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: void ReleaseSender()
        public void ReleaseSender()
        {
            __Internal.ReleaseSender(__Instance);
        }

        // DEBUG: bool SendTexture(ID3D11Texture2D* pTexture)
        public bool SendTexture(global::SpoutDX.ID3D11Texture2D pTexture)
        {
            var __arg0 = pTexture is null ? __IntPtr.Zero : pTexture.__Instance;
            var ___ret = __Internal.SendTexture(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: bool SendTexture(ID3D11Texture2D* pTexture,
        // DEBUG: 		unsigned int xoffset, unsigned int yoffset,
        // DEBUG: 		unsigned int width, unsigned int height)
        public bool SendTexture(global::SpoutDX.ID3D11Texture2D pTexture, uint xoffset, uint yoffset, uint width, uint height)
        {
            var __arg0 = pTexture is null ? __IntPtr.Zero : pTexture.__Instance;
            var ___ret = __Internal.SendTexture(__Instance, __arg0, xoffset, yoffset, width, height);
            return ___ret;
        }

        // DEBUG: bool SendImage(const unsigned char * pData, unsigned int width, unsigned int height)
        public bool SendImage(byte* pData, uint width, uint height)
        {
            var ___ret = __Internal.SendImage(__Instance, pData, width, height);
            return ___ret;
        }

        // DEBUG: void SetReceiverName(const char * sendername = nullptr)
        public void SetReceiverName(string sendername)
        {
            __Internal.SetReceiverName(__Instance, sendername);
        }

        // DEBUG: void ReleaseReceiver()
        public void ReleaseReceiver()
        {
            __Internal.ReleaseReceiver(__Instance);
        }

        // DEBUG: bool ReceiveTexture()
        public bool ReceiveTexture()
        {
            var ___ret = __Internal.ReceiveTexture(__Instance);
            return ___ret;
        }

        // DEBUG: bool ReceiveTexture(ID3D11Texture2D** ppTexture)
        public bool ReceiveTexture(global::SpoutDX.ID3D11Texture2D ppTexture)
        {
            var ____arg0 = ppTexture is null ? __IntPtr.Zero : ppTexture.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = __Internal.ReceiveTexture(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: bool ReceiveImage(unsigned char * pixels, unsigned int width, unsigned int height, bool bRGB = false, bool bInvert = false)
        public bool ReceiveImage(byte* pixels, uint width, uint height, bool bRGB, bool bInvert)
        {
            var ___ret = __Internal.ReceiveImage(__Instance, pixels, width, height, bRGB, bInvert);
            return ___ret;
        }

        // DEBUG: bool ReadTexurePixels(ID3D11Texture2D* ppTexture, unsigned char* pixels)
        public bool ReadTexurePixels(global::SpoutDX.ID3D11Texture2D ppTexture, byte* pixels)
        {
            var __arg0 = ppTexture is null ? __IntPtr.Zero : ppTexture.__Instance;
            var ___ret = __Internal.ReadTexurePixels(__Instance, __arg0, pixels);
            return ___ret;
        }

        // DEBUG: void HoldFps(int fps)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void SetFrameSync(const char* SenderName)
        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        // DEBUG: bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var ___ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return ___ret;
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var ___ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return ___ret;
        }

        // DEBUG: int GetSenderIndex(const char* sendername)
        public int GetSenderIndex(string sendername)
        {
            var ___ret = __Internal.GetSenderIndex(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool GetActiveSender(char* sendername)
        public bool GetActiveSender(sbyte* sendername)
        {
            var ___ret = __Internal.GetActiveSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool SetActiveSender(const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var ___ret = __Internal.SetActiveSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: bool GetAdapterInfo(char *renderdescription, char *displaydescription, int maxchars)
        public bool GetAdapterInfo(sbyte* renderdescription, sbyte* displaydescription, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, renderdescription, displaydescription, maxchars);
            return ___ret;
        }

        // DEBUG: bool SetAdapter(int index = -1)
        public bool SetAdapter(int index)
        {
            var ___ret = __Internal.SetAdapter(__Instance, index);
            return ___ret;
        }

        // DEBUG: int GetSenderAdapter(const char* sendername, char* adaptername = nullptr, int maxchars = 256)
        public int GetSenderAdapter(string sendername, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetSenderAdapter(__Instance, sendername, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: int GetPerformancePreference(const char* path = nullptr)
        public int GetPerformancePreference(string path)
        {
            var ___ret = __Internal.GetPerformancePreference(__Instance, path);
            return ___ret;
        }

        // DEBUG: bool SetPerformancePreference(int preference, const char* path = nullptr)
        public bool SetPerformancePreference(int preference, string path)
        {
            var ___ret = __Internal.SetPerformancePreference(__Instance, preference, path);
            return ___ret;
        }

        // DEBUG: bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars)
        public bool GetPreferredAdapterName(int preference, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetPreferredAdapterName(__Instance, preference, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: bool SetPreferredAdapter(int preference)
        public bool SetPreferredAdapter(int preference)
        {
            var ___ret = __Internal.SetPreferredAdapter(__Instance, preference);
            return ___ret;
        }

        // DEBUG: bool IsApplicationPath(const char* path)
        public bool IsApplicationPath(string path)
        {
            var ___ret = __Internal.IsApplicationPath(__Instance, path);
            return ___ret;
        }

        // DEBUG: void CheckSenderFormat(char * sendername)
        public void CheckSenderFormat(sbyte* sendername)
        {
            __Internal.CheckSenderFormat(__Instance, sendername);
        }

        // DEBUG: void OpenSpoutConsole()
        public void OpenSpoutConsole()
        {
            __Internal.OpenSpoutConsole(__Instance);
        }

        // DEBUG: void CloseSpoutConsole(bool bWarning = false)
        public void CloseSpoutConsole(bool bWarning)
        {
            __Internal.CloseSpoutConsole(__Instance, bWarning);
        }

        // DEBUG: void EnableSpoutLog()
        public void EnableSpoutLog()
        {
            __Internal.EnableSpoutLog(__Instance);
        }

        // DEBUG: void EnableSpoutLogFile(const char* filename, bool append = false)
        public void EnableSpoutLogFile(string filename, bool append)
        {
            __Internal.EnableSpoutLogFile(__Instance, filename, append);
        }

        // DEBUG: void DisableSpoutLogFile()
        public void DisableSpoutLogFile()
        {
            __Internal.DisableSpoutLogFile(__Instance);
        }

        // DEBUG: void DisableSpoutLog()
        public void DisableSpoutLog()
        {
            __Internal.DisableSpoutLog(__Instance);
        }

        // DEBUG: int SpoutMessageBox(const char* message, DWORD dwMilliseconds = 0)
        public int SpoutMessageBox(string message, uint dwMilliseconds)
        {
            var ___ret = __Internal.SpoutMessageBox(__Instance, message, dwMilliseconds);
            return ___ret;
        }

        // DEBUG: int SpoutMessageBox(const char* caption, UINT uType, const char* format, ...)
        public int SpoutMessageBox(string caption, uint uType, string format)
        {
            var ___ret = __Internal.SpoutMessageBox(__Instance, caption, uType, format);
            return ___ret;
        }

        // DEBUG: bool WriteMemoryBuffer(const char *name, const char* data, int length)
        public bool WriteMemoryBuffer(string name, string data, int length)
        {
            var ___ret = __Internal.WriteMemoryBuffer(__Instance, name, data, length);
            return ___ret;
        }

        // DEBUG: int  ReadMemoryBuffer(const char* name, char* data, int maxlength)
        public int ReadMemoryBuffer(string name, sbyte* data, int maxlength)
        {
            var ___ret = __Internal.ReadMemoryBuffer(__Instance, name, data, maxlength);
            return ___ret;
        }

        // DEBUG: bool CreateMemoryBuffer(const char *name, int length)
        public bool CreateMemoryBuffer(string name, int length)
        {
            var ___ret = __Internal.CreateMemoryBuffer(__Instance, name, length);
            return ___ret;
        }

        // DEBUG: bool DeleteMemoryBuffer()
        public bool DeleteMemoryBuffer()
        {
            var ___ret = __Internal.DeleteMemoryBuffer(__Instance);
            return ___ret;
        }

        // DEBUG: int  GetMemoryBufferSize(const char *name)
        public int GetMemoryBufferSize(string name)
        {
            var ___ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return ___ret;
        }

        // DEBUG: bool CheckSender(unsigned int width, unsigned int height, DWORD dwFormat)
        protected bool CheckSender(uint width, uint height, uint dwFormat)
        {
            var ___ret = __Internal.CheckSender(__Instance, width, height, dwFormat);
            return ___ret;
        }

        // DEBUG: ID3D11Texture2D* CheckSenderTexture(char *sendername, HANDLE dxShareHandle)
        protected global::SpoutDX.ID3D11Texture2D CheckSenderTexture(sbyte* sendername, __IntPtr dxShareHandle)
        {
            var ___ret = __Internal.CheckSenderTexture(__Instance, sendername, dxShareHandle);
            var __result0 = global::SpoutDX.ID3D11Texture2D.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        // DEBUG: bool ReceiveSenderData()
        protected bool ReceiveSenderData()
        {
            var ___ret = __Internal.ReceiveSenderData(__Instance);
            return ___ret;
        }

        // DEBUG: void CreateReceiver(const char * sendername, unsigned int width, unsigned int height, DWORD dwFormat)
        protected void CreateReceiver(string sendername, uint width, uint height, uint dwFormat)
        {
            __Internal.CreateReceiver(__Instance, sendername, width, height, dwFormat);
        }

        // DEBUG: bool ReadPixelData(ID3D11Texture2D* pStagingSource, unsigned char* destpixels,
        // DEBUG: 		unsigned int width, unsigned int height, bool bRGB, bool bInvert, bool bSwap)
        protected bool ReadPixelData(global::SpoutDX.ID3D11Texture2D pStagingSource, byte* destpixels, uint width, uint height, bool bRGB, bool bInvert, bool bSwap)
        {
            var __arg0 = pStagingSource is null ? __IntPtr.Zero : pStagingSource.__Instance;
            var ___ret = __Internal.ReadPixelData(__Instance, __arg0, destpixels, width, height, bRGB, bInvert, bSwap);
            return ___ret;
        }

        // DEBUG: bool CheckStagingTextures(unsigned int width, unsigned int height, DWORD dwFormat = DXGI_FORMAT_B8G8R8A8_UNORM)
        protected bool CheckStagingTextures(uint width, uint height, uint dwFormat)
        {
            var ___ret = __Internal.CheckStagingTextures(__Instance, width, height, dwFormat);
            return ___ret;
        }

        // DEBUG: bool CheckTexture(unsigned int width, unsigned int height, DWORD dwFormat)
        protected bool CheckTexture(uint width, uint height, uint dwFormat)
        {
            var ___ret = __Internal.CheckTexture(__Instance, width, height, dwFormat);
            return ___ret;
        }

        // DEBUG: bool SelectSenderPanel(const char* message = nullptr)
        protected bool SelectSenderPanel(string message)
        {
            var ___ret = __Internal.SelectSenderPanel(__Instance, message);
            return ___ret;
        }

        // DEBUG: bool CheckSpoutPanel(char *sendername, int maxchars = 256)
        protected bool CheckSpoutPanel(sbyte* sendername, int maxchars)
        {
            var ___ret = __Internal.CheckSpoutPanel(__Instance, sendername, maxchars);
            return ___ret;
        }

        public global::SpoutDX.SpoutSenderNames Sendernames
        {
            get
            {
                return global::SpoutDX.SpoutSenderNames.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->sendernames));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->sendernames = *(global::SpoutDX.SpoutSenderNames.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.SpoutFrameCount frame
        {
            get
            {
                return global::SpoutDX.SpoutFrameCount.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->frame));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->frame = *(global::SpoutDX.SpoutFrameCount.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.SpoutDirectX Spoutdx
        {
            get
            {
                return global::SpoutDX.SpoutDirectX.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutdx));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutdx = *(global::SpoutDX.SpoutDirectX.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.SpoutCopy Spoutcopy
        {
            get
            {
                return global::SpoutDX.SpoutCopy.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutcopy));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutcopy = *(global::SpoutDX.SpoutCopy.__Internal*) value.__Instance;
            }
        }

        protected global::SpoutDX.ID3D11Device MPd3dDevice
        {
            get
            {
                var __result0 = global::SpoutDX.ID3D11Device.__GetOrCreateInstance(((__Internal*)__Instance)->m_pd3dDevice, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pd3dDevice = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        protected global::SpoutDX.ID3D11DeviceContext MPImmediateContext
        {
            get
            {
                var __result0 = global::SpoutDX.ID3D11DeviceContext.__GetOrCreateInstance(((__Internal*)__Instance)->m_pImmediateContext, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pImmediateContext = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        protected global::SpoutDX.ID3D11Texture2D MPSharedTexture
        {
            get
            {
                var __result0 = global::SpoutDX.ID3D11Texture2D.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSharedTexture, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSharedTexture = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        protected global::SpoutDX.ID3D11Texture2D MPTexture
        {
            get
            {
                var __result0 = global::SpoutDX.ID3D11Texture2D.__GetOrCreateInstance(((__Internal*)__Instance)->m_pTexture, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pTexture = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        protected global::SpoutDX.ID3D11Texture2D[] MPStaging
        {
            get
            {
                global::SpoutDX.ID3D11Texture2D[] __value = null;
                if (((__Internal*)__Instance)->m_pStaging != null)
                {
                    __value = new global::SpoutDX.ID3D11Texture2D[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::SpoutDX.ID3D11Texture2D.__CreateInstance((__IntPtr) ((__Internal*)__Instance)->m_pStaging[i]);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_pStaging[i] = (long) value[i].__Instance;
                }
            }
        }

        protected int MIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_Index;
            }

            set
            {
                ((__Internal*)__Instance)->m_Index = value;
            }
        }

        protected int MNextIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_NextIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_NextIndex = value;
            }
        }

        protected __IntPtr MDxShareHandle
        {
            get
            {
                return ((__Internal*)__Instance)->m_dxShareHandle;
            }

            set
            {
                ((__Internal*)__Instance)->m_dxShareHandle = (__IntPtr) value;
            }
        }

        protected uint MDwFormat
        {
            get
            {
                return ((__Internal*)__Instance)->m_dwFormat;
            }

            set
            {
                ((__Internal*)__Instance)->m_dwFormat = value;
            }
        }

        protected global::SpoutDX.SharedTextureInfo MSenderInfo
        {
            get
            {
                return global::SpoutDX.SharedTextureInfo.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_SenderInfo));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_SenderInfo = *(global::SpoutDX.SharedTextureInfo.__Internal*) value.__Instance;
            }
        }

        protected sbyte[] MSenderNameSetup
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderNameSetup, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderNameSetup[i] = value[i];
                }
            }
        }

        protected sbyte[] MSenderName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderName[i] = value[i];
                }
            }
        }

        protected uint MWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_Width;
            }

            set
            {
                ((__Internal*)__Instance)->m_Width = value;
            }
        }

        protected uint MHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_Height;
            }

            set
            {
                ((__Internal*)__Instance)->m_Height = value;
            }
        }

        protected bool MBUpdated
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUpdated != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUpdated = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBConnected
        {
            get
            {
                return ((__Internal*)__Instance)->m_bConnected != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bConnected = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutInitialized
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutInitialized != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutInitialized = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelOpened
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelOpened != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelOpened = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelActive
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelActive != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelActive = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBClassDevice
        {
            get
            {
                return ((__Internal*)__Instance)->m_bClassDevice != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bClassDevice = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBAdapt
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAdapt != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAdapt = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBMemoryShare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMemoryShare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMemoryShare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBMirror
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMirror != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMirror = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSwapRB
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSwapRB != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSwapRB = (byte) (value ? 1 : 0);
            }
        }

        protected global::SpoutDX.SpoutSharedMemory Memorybuffer
        {
            get
            {
                return global::SpoutDX.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->memorybuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->memorybuffer = *(global::SpoutDX.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.ID3D11Device DX11Device
        {
            get
            {
                var ___ret = __Internal.GetDX11Device(__Instance);
                var __result0 = global::SpoutDX.ID3D11Device.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        public global::SpoutDX.ID3D11DeviceContext DX11Context
        {
            get
            {
                var ___ret = __Internal.GetDX11Context(__Instance);
                var __result0 = global::SpoutDX.ID3D11DeviceContext.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        public bool IsClassDevice
        {
            get
            {
                var ___ret = __Internal.IsClassDevice(__Instance);
                return ___ret;
            }
        }

        public string SenderName
        {
            get
            {
                var ___ret = __Internal.GetSenderName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }

            set
            {
                __Internal.SetSenderName(__Instance, value);
            }
        }

        public bool SendBackBuffer
        {
            get
            {
                var ___ret = __Internal.SendBackBuffer(__Instance);
                return ___ret;
            }
        }

        public bool IsInitialized
        {
            get
            {
                var ___ret = __Internal.IsInitialized(__Instance);
                return ___ret;
            }
        }

        public string Name
        {
            get
            {
                var ___ret = __Internal.GetName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public uint Width
        {
            get
            {
                var ___ret = __Internal.GetWidth(__Instance);
                return ___ret;
            }
        }

        public uint Height
        {
            get
            {
                var ___ret = __Internal.GetHeight(__Instance);
                return ___ret;
            }
        }

        public double Fps
        {
            get
            {
                var ___ret = __Internal.GetFps(__Instance);
                return ___ret;
            }
        }

        public int Frame
        {
            get
            {
                var ___ret = __Internal.GetFrame(__Instance);
                return ___ret;
            }
        }

        public bool IsUpdated
        {
            get
            {
                var ___ret = __Internal.IsUpdated(__Instance);
                return ___ret;
            }
        }

        public bool IsConnected
        {
            get
            {
                var ___ret = __Internal.IsConnected(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var ___ret = __Internal.IsFrameNew(__Instance);
                return ___ret;
            }
        }

        public global::SpoutDX.ID3D11Texture2D SenderTexture
        {
            get
            {
                var ___ret = __Internal.GetSenderTexture(__Instance);
                var __result0 = global::SpoutDX.ID3D11Texture2D.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        public __IntPtr SenderHandle
        {
            get
            {
                var ___ret = __Internal.GetSenderHandle(__Instance);
                return ___ret;
            }
        }

        public uint SenderWidth
        {
            get
            {
                var ___ret = __Internal.GetSenderWidth(__Instance);
                return ___ret;
            }
        }

        public uint SenderHeight
        {
            get
            {
                var ___ret = __Internal.GetSenderHeight(__Instance);
                return ___ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var ___ret = __Internal.GetSenderFps(__Instance);
                return ___ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var ___ret = __Internal.GetSenderFrame(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameCountEnabled(__Instance);
                return ___ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var ___ret = __Internal.GetSenderCount(__Instance);
                return ___ret;
            }
        }

        public int MaxSenders
        {
            get
            {
                var ___ret = __Internal.GetMaxSenders(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public int NumAdapters
        {
            get
            {
                var ___ret = __Internal.GetNumAdapters(__Instance);
                return ___ret;
            }
        }

        public int Adapter
        {
            get
            {
                var ___ret = __Internal.GetAdapter(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAdapter(__Instance, value);
            }
        }

        public bool AdapterAuto
        {
            get
            {
                var ___ret = __Internal.GetAdapterAuto(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAdapterAuto(__Instance, value);
            }
        }

        public bool IsPreferenceAvailable
        {
            get
            {
                var ___ret = __Internal.IsPreferenceAvailable(__Instance);
                return ___ret;
            }
        }

        public bool DX9
        {
            get
            {
                var ___ret = __Internal.GetDX9(__Instance);
                return ___ret;
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var ___ret = __Internal.GetMemoryShareMode(__Instance);
                return ___ret;
            }
        }

        public bool Mirror
        {
            get
            {
                var ___ret = __Internal.GetMirror(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMirror(__Instance, value);
            }
        }

        public bool Swap
        {
            get
            {
                var ___ret = __Internal.GetSwap(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetSwap(__Instance, value);
            }
        }
    }

    namespace Spoututils
    {
        // DEBUG: enum SpoutLogLevel {
        // DEBUG: 		// Disable all messages
        // DEBUG: 		SPOUT_LOG_SILENT,
        // DEBUG: 		// Show all messages
        // DEBUG: 		SPOUT_LOG_VERBOSE,
        // DEBUG: 		// Show information messages - default
        // DEBUG: 		SPOUT_LOG_NOTICE,
        // DEBUG: 		// Show warning, errors and fatal
        // DEBUG: 		SPOUT_LOG_WARNING,
        // DEBUG: 		// Show errors and fatal
        // DEBUG: 		SPOUT_LOG_ERROR,
        // DEBUG: 		// Show only fatal errors
        // DEBUG: 		SPOUT_LOG_FATAL,
        // DEBUG: 		// Ignore log levels
        // DEBUG: 		SPOUT_LOG_NONE
        // DEBUG: 	}
        public enum SpoutLogLevel
        {
            SPOUT_LOG_SILENT = 0,
            SPOUT_LOG_VERBOSE = 1,
            SPOUT_LOG_NOTICE = 2,
            SPOUT_LOG_WARNING = 3,
            SPOUT_LOG_ERROR = 4,
            SPOUT_LOG_FATAL = 5,
            SPOUT_LOG_NONE = 6
        }

        public unsafe partial class SpoutUtils
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsLaptop@spoututils@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool IsLaptop();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetExeVersion@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetExeVersion(__IntPtr @return, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetExePath@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetExePath(__IntPtr @return, bool bFull);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetExeName@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetExeName(__IntPtr @return);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemovePath@spoututils@@YAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void RemovePath(__IntPtr path);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemoveName@spoututils@@YAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void RemoveName(__IntPtr path);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenSpoutConsole@spoututils@@YAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void OpenSpoutConsole([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string title);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseSpoutConsole@spoututils@@YAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void CloseSpoutConsole(bool bWarning);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableSpoutLog@spoututils@@YAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void EnableSpoutLog([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string title);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableSpoutLogFile@spoututils@@YAXPEBD_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void EnableSpoutLogFile([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, bool bAppend);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableSpoutLogFile@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void DisableSpoutLogFile();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemoveSpoutLogFile@spoututils@@YAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void RemoveSpoutLogFile([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableSpoutLog@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void DisableSpoutLog();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableLogs@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void DisableLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableLogs@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void EnableLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LogsEnabled@spoututils@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool LogsEnabled();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LogFileEnabled@spoututils@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool LogFileEnabled();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutLogPath@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetSpoutLogPath(__IntPtr @return);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutLog@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetSpoutLog(__IntPtr @return, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filepath);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ShowSpoutLogs@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void ShowSpoutLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSpoutLogLevel@spoututils@@YAXW4SpoutLogLevel@1@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SetSpoutLogLevel(global::SpoutDX.Spoututils.SpoutLogLevel level);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLog@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLog([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogVerbose@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogVerbose([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogNotice@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogNotice([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogWarning@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogWarning([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogError@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogError([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutLogFatal@spoututils@@YAXPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SpoutLogFatal([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?_conprint@spoututils@@YAHPEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern int Conprint([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBox@spoututils@@YAHPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern int SpoutMessageBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message, uint dwMilliseconds);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBox@spoututils@@YAHPEBD0ZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern int SpoutMessageBox_1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string caption, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBox@spoututils@@YAHPEBDI0ZZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern int SpoutMessageBox([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string caption, uint uType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBoxIcon@spoututils@@YA_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool SpoutMessageBoxIcon(__IntPtr iconfile);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SpoutMessageBoxModeless@spoututils@@YA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool SpoutMessageBoxModeless(bool bMode);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenSpoutLogs@spoututils@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OpenSpoutLogs();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetRefreshRate@spoututils@@YANXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern double GetRefreshRate();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?StartTiming@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void StartTiming();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EndTiming@spoututils@@YAN_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern double EndTiming(bool microseconds);

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ElapsedMicroseconds@spoututils@@YANXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern double ElapsedMicroseconds();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?StartCounter@spoututils@@YAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void StartCounter();

                [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCounter@spoututils@@YANXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern double GetCounter();

                [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?_logtofile@?A0x0@spoututils@@YAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Logtofile(bool append);

                [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?_getLogPath@?A0x0@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetLogPath(__IntPtr @return);

                [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?_getLogFilePath@?A0x0@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void GetLogFilePath(__IntPtr @return, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename);

                [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?_levelName@?A0x0@spoututils@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4SpoutLogLevel@1@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void LevelName(__IntPtr @return, global::SpoutDX.Spoututils.SpoutLogLevel level);

                [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ExecuteProcess@?A0x0@spoututils@@YA_NPEBD0@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool ExecuteProcess([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string command);

                [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?OpenSpoutPanel@?A0x0@spoututils@@YA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OpenSpoutPanel([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);
            }

            // DEBUG: bool SPOUT_DLLEXP IsLaptop()
            public static bool IsLaptop()
            {
                var ___ret = __Internal.IsLaptop();
                return ___ret;
            }

            // DEBUG: std::string SPOUT_DLLEXP GetExeVersion(const char* path)
            public static string GetExeVersion(string path)
            {
                var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetExeVersion(new IntPtr(&___ret), path);
                var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: std::string SPOUT_DLLEXP GetExePath(bool bFull = false)
            public static string GetExePath(bool bFull)
            {
                var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetExePath(new IntPtr(&___ret), bFull);
                var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: std::string SPOUT_DLLEXP GetExeName()
            public static string GetExeName()
            {
                var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetExeName(new IntPtr(&___ret));
                var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: void SPOUT_DLLEXP RemovePath(std::string& path)
            public static void RemovePath(string path)
            {
                var __basicString0 = new global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>();
                global::Spout.Std.BasicStringExtensions.Assign(__basicString0, path);
                var __arg0 = __basicString0.__Instance;
                __Internal.RemovePath(__arg0);
                __basicString0.Dispose();
            }

            // DEBUG: void SPOUT_DLLEXP RemoveName(std::string& path)
            public static void RemoveName(string path)
            {
                var __basicString0 = new global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>();
                global::Spout.Std.BasicStringExtensions.Assign(__basicString0, path);
                var __arg0 = __basicString0.__Instance;
                __Internal.RemoveName(__arg0);
                __basicString0.Dispose();
            }

            // DEBUG: void SPOUT_DLLEXP OpenSpoutConsole(const char *title = nullptr)
            public static void OpenSpoutConsole(string title)
            {
                __Internal.OpenSpoutConsole(title);
            }

            // DEBUG: void SPOUT_DLLEXP CloseSpoutConsole(bool bWarning = false)
            public static void CloseSpoutConsole(bool bWarning)
            {
                __Internal.CloseSpoutConsole(bWarning);
            }

            // DEBUG: void SPOUT_DLLEXP EnableSpoutLog(const char* title = nullptr)
            public static void EnableSpoutLog(string title)
            {
                __Internal.EnableSpoutLog(title);
            }

            // DEBUG: void SPOUT_DLLEXP EnableSpoutLogFile(const char* filename = nullptr, bool bAppend = false)
            public static void EnableSpoutLogFile(string filename, bool bAppend)
            {
                __Internal.EnableSpoutLogFile(filename, bAppend);
            }

            // DEBUG: void SPOUT_DLLEXP DisableSpoutLogFile()
            public static void DisableSpoutLogFile()
            {
                __Internal.DisableSpoutLogFile();
            }

            // DEBUG: void SPOUT_DLLEXP RemoveSpoutLogFile(const char* filename = nullptr)
            public static void RemoveSpoutLogFile(string filename)
            {
                __Internal.RemoveSpoutLogFile(filename);
            }

            // DEBUG: void SPOUT_DLLEXP DisableSpoutLog()
            public static void DisableSpoutLog()
            {
                __Internal.DisableSpoutLog();
            }

            // DEBUG: void SPOUT_DLLEXP DisableLogs()
            public static void DisableLogs()
            {
                __Internal.DisableLogs();
            }

            // DEBUG: void SPOUT_DLLEXP EnableLogs()
            public static void EnableLogs()
            {
                __Internal.EnableLogs();
            }

            // DEBUG: bool SPOUT_DLLEXP LogsEnabled()
            public static bool LogsEnabled()
            {
                var ___ret = __Internal.LogsEnabled();
                return ___ret;
            }

            // DEBUG: bool SPOUT_DLLEXP LogFileEnabled()
            public static bool LogFileEnabled()
            {
                var ___ret = __Internal.LogFileEnabled();
                return ___ret;
            }

            // DEBUG: std::string SPOUT_DLLEXP GetSpoutLogPath()
            public static string GetSpoutLogPath()
            {
                var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetSpoutLogPath(new IntPtr(&___ret));
                var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: std::string SPOUT_DLLEXP GetSpoutLog(const char* filepath = nullptr)
            public static string GetSpoutLog(string filepath)
            {
                var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetSpoutLog(new IntPtr(&___ret), filepath);
                var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: void SPOUT_DLLEXP ShowSpoutLogs()
            public static void ShowSpoutLogs()
            {
                __Internal.ShowSpoutLogs();
            }

            // DEBUG: void SPOUT_DLLEXP SetSpoutLogLevel(SpoutLogLevel level)
            public static void SetSpoutLogLevel(global::SpoutDX.Spoututils.SpoutLogLevel level)
            {
                __Internal.SetSpoutLogLevel(level);
            }

            // DEBUG: void SPOUT_DLLEXP SpoutLog(const char* format, ...)
            public static void SpoutLog(string format)
            {
                __Internal.SpoutLog(format);
            }

            // DEBUG: void SPOUT_DLLEXP SpoutLogVerbose(const char* format, ...)
            public static void SpoutLogVerbose(string format)
            {
                __Internal.SpoutLogVerbose(format);
            }

            // DEBUG: void SPOUT_DLLEXP SpoutLogNotice(const char* format, ...)
            public static void SpoutLogNotice(string format)
            {
                __Internal.SpoutLogNotice(format);
            }

            // DEBUG: void SPOUT_DLLEXP SpoutLogWarning(const char* format, ...)
            public static void SpoutLogWarning(string format)
            {
                __Internal.SpoutLogWarning(format);
            }

            // DEBUG: void SPOUT_DLLEXP SpoutLogError(const char* format, ...)
            public static void SpoutLogError(string format)
            {
                __Internal.SpoutLogError(format);
            }

            // DEBUG: void SPOUT_DLLEXP SpoutLogFatal(const char* format, ...)
            public static void SpoutLogFatal(string format)
            {
                __Internal.SpoutLogFatal(format);
            }

            // DEBUG: int SPOUT_DLLEXP _conprint(const char* format, ...)
            public static int Conprint(string format)
            {
                var ___ret = __Internal.Conprint(format);
                return ___ret;
            }

            // DEBUG: int SPOUT_DLLEXP SpoutMessageBox(const char * message, DWORD dwMilliseconds = 0)
            public static int SpoutMessageBox(string message, uint dwMilliseconds)
            {
                var ___ret = __Internal.SpoutMessageBox(message, dwMilliseconds);
                return ___ret;
            }

            // DEBUG: int SPOUT_DLLEXP SpoutMessageBox(const char * caption, const char* format, ...)
            public static int SpoutMessageBox(string caption, string format)
            {
                var ___ret = __Internal.SpoutMessageBox_1(caption, format);
                return ___ret;
            }

            // DEBUG: int SPOUT_DLLEXP SpoutMessageBox(const char* caption, UINT uType, const char* format, ...)
            public static int SpoutMessageBox(string caption, uint uType, string format)
            {
                var ___ret = __Internal.SpoutMessageBox(caption, uType, format);
                return ___ret;
            }

            // DEBUG: bool SPOUT_DLLEXP SpoutMessageBoxIcon(std::string iconfile)
            public static bool SpoutMessageBoxIcon(string iconfile)
            {
                var __basicString0 = new global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>();
                global::Spout.Std.BasicStringExtensions.Assign(__basicString0, iconfile);
                var __arg0 = __basicString0.__Instance;
                var ___ret = __Internal.SpoutMessageBoxIcon(__arg0);
                __basicString0.Dispose(disposing: true, callNativeDtor:false);
                return ___ret;
            }

            // DEBUG: bool SPOUT_DLLEXP SpoutMessageBoxModeless(bool bMode = true)
            public static bool SpoutMessageBoxModeless(bool bMode)
            {
                var ___ret = __Internal.SpoutMessageBoxModeless(bMode);
                return ___ret;
            }

            // DEBUG: bool SPOUT_DLLEXP OpenSpoutLogs()
            public static bool OpenSpoutLogs()
            {
                var ___ret = __Internal.OpenSpoutLogs();
                return ___ret;
            }

            // DEBUG: double SPOUT_DLLEXP GetRefreshRate()
            public static double GetRefreshRate()
            {
                var ___ret = __Internal.GetRefreshRate();
                return ___ret;
            }

            // DEBUG: void SPOUT_DLLEXP StartTiming()
            public static void StartTiming()
            {
                __Internal.StartTiming();
            }

            // DEBUG: double SPOUT_DLLEXP EndTiming(bool microseconds = false)
            public static double EndTiming(bool microseconds)
            {
                var ___ret = __Internal.EndTiming(microseconds);
                return ___ret;
            }

            // DEBUG: double SPOUT_DLLEXP ElapsedMicroseconds()
            public static double ElapsedMicroseconds()
            {
                var ___ret = __Internal.ElapsedMicroseconds();
                return ___ret;
            }

            // DEBUG: void SPOUT_DLLEXP StartCounter()
            public static void StartCounter()
            {
                __Internal.StartCounter();
            }

            // DEBUG: double SPOUT_DLLEXP GetCounter()
            public static double GetCounter()
            {
                var ___ret = __Internal.GetCounter();
                return ___ret;
            }

            // DEBUG: void _logtofile(bool append = false)
            public static void Logtofile(bool append)
            {
                __Internal.Logtofile(append);
            }

            // DEBUG: std::string _getLogPath()
            public static string GetLogPath()
            {
                var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetLogPath(new IntPtr(&___ret));
                var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: std::string _getLogFilePath(const char *filename)
            public static string GetLogFilePath(string filename)
            {
                var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.GetLogFilePath(new IntPtr(&___ret), filename);
                var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: std::string _levelName(SpoutLogLevel level)
            public static string LevelName(global::SpoutDX.Spoututils.SpoutLogLevel level)
            {
                var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
                __Internal.LevelName(new IntPtr(&___ret), level);
                var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
                var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
                __basicStringRet0.Dispose();
                return __retString0;
            }

            // DEBUG: bool ExecuteProcess(const char* path, const char* command = nullptr)
            public static bool ExecuteProcess(string path, string command)
            {
                var ___ret = __Internal.ExecuteProcess(path, command);
                return ___ret;
            }

            // DEBUG: bool OpenSpoutPanel(const char* message)
            public static bool OpenSpoutPanel(string message)
            {
                var ___ret = __Internal.OpenSpoutPanel(message);
                return ___ret;
            }

            // DEBUG: bool bTopMost = false
            public static bool BTopMost { get; } = false;

            // DEBUG: bool bModeless = false
            public static bool BModeless { get; } = false;

            // DEBUG: bool bEdit = false
            public static bool BEdit { get; } = false;

            // DEBUG: std::string stredit
            public static string Stredit { get; } = "";

            // DEBUG: bool bCombo = false
            public static bool BCombo { get; } = false;

            // DEBUG: int comboindex = 0
            public static int Comboindex { get; } = 0;
        }
    }

    // DEBUG: enum D3D11_USAGE
    // DEBUG:     {
    // DEBUG:         D3D11_USAGE_DEFAULT	= 0,
    // DEBUG:         D3D11_USAGE_IMMUTABLE	= 1,
    // DEBUG:         D3D11_USAGE_DYNAMIC	= 2,
    // DEBUG:         D3D11_USAGE_STAGING	= 3
    // DEBUG:     }
    public enum D3D11USAGE
    {
        D3D11USAGE_DEFAULT = 0,
        D3D11USAGE_IMMUTABLE = 1,
        D3D11USAGE_DYNAMIC = 2,
        D3D11USAGE_STAGING = 3
    }

    // DEBUG: enum D3D11_RESOURCE_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_RESOURCE_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_RESOURCE_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D11_RESOURCE_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D11_RESOURCE_DIMENSION_TEXTURE2D	= 3,
    // DEBUG:         D3D11_RESOURCE_DIMENSION_TEXTURE3D	= 4
    // DEBUG:     }
    public enum D3D11RESOURCE_DIMENSION
    {
        D3D11RESOURCE_DIMENSION_UNKNOWN = 0,
        D3D11RESOURCE_DIMENSION_BUFFER = 1,
        D3D11RESOURCE_DIMENSION_TEXTURE1D = 2,
        D3D11RESOURCE_DIMENSION_TEXTURE2D = 3,
        D3D11RESOURCE_DIMENSION_TEXTURE3D = 4
    }

    // DEBUG: enum D3D11_UAV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_UAV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_UAV_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE1DARRAY	= 3,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE2D	= 4,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE2DARRAY	= 5,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE3D	= 8
    // DEBUG:     }
    public enum D3D11UAV_DIMENSION
    {
        D3D11UAV_DIMENSION_UNKNOWN = 0,
        D3D11UAV_DIMENSION_BUFFER = 1,
        D3D11UAV_DIMENSION_TEXTURE1D = 2,
        D3D11UAV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D11UAV_DIMENSION_TEXTURE2D = 4,
        D3D11UAV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D11UAV_DIMENSION_TEXTURE3D = 8
    }

    // DEBUG: enum D3D11_RTV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_RTV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_RTV_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE1DARRAY	= 3,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE2D	= 4,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE2DARRAY	= 5,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE2DMS	= 6,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE3D	= 8
    // DEBUG:     }
    public enum D3D11RTV_DIMENSION
    {
        D3D11RTV_DIMENSION_UNKNOWN = 0,
        D3D11RTV_DIMENSION_BUFFER = 1,
        D3D11RTV_DIMENSION_TEXTURE1D = 2,
        D3D11RTV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D11RTV_DIMENSION_TEXTURE2D = 4,
        D3D11RTV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D11RTV_DIMENSION_TEXTURE2DMS = 6,
        D3D11RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D11RTV_DIMENSION_TEXTURE3D = 8
    }

    // DEBUG: enum D3D11_DSV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_DSV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE1D	= 1,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE1DARRAY	= 2,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE2D	= 3,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE2DARRAY	= 4,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE2DMS	= 5,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY	= 6
    // DEBUG:     }
    public enum D3D11DSV_DIMENSION
    {
        D3D11DSV_DIMENSION_UNKNOWN = 0,
        D3D11DSV_DIMENSION_TEXTURE1D = 1,
        D3D11DSV_DIMENSION_TEXTURE1DARRAY = 2,
        D3D11DSV_DIMENSION_TEXTURE2D = 3,
        D3D11DSV_DIMENSION_TEXTURE2DARRAY = 4,
        D3D11DSV_DIMENSION_TEXTURE2DMS = 5,
        D3D11DSV_DIMENSION_TEXTURE2DMSARRAY = 6
    }

    // DEBUG: enum D3D11_INPUT_CLASSIFICATION
    // DEBUG:     {
    // DEBUG:         D3D11_INPUT_PER_VERTEX_DATA	= 0,
    // DEBUG:         D3D11_INPUT_PER_INSTANCE_DATA	= 1
    // DEBUG:     }
    public enum D3D11INPUT_CLASSIFICATION
    {
        D3D11INPUT_PER_VERTEX_DATA = 0,
        D3D11INPUT_PER_INSTANCE_DATA = 1
    }

    // DEBUG: enum D3D11_BLEND
    // DEBUG:     {
    // DEBUG:         D3D11_BLEND_ZERO	= 1,
    // DEBUG:         D3D11_BLEND_ONE	= 2,
    // DEBUG:         D3D11_BLEND_SRC_COLOR	= 3,
    // DEBUG:         D3D11_BLEND_INV_SRC_COLOR	= 4,
    // DEBUG:         D3D11_BLEND_SRC_ALPHA	= 5,
    // DEBUG:         D3D11_BLEND_INV_SRC_ALPHA	= 6,
    // DEBUG:         D3D11_BLEND_DEST_ALPHA	= 7,
    // DEBUG:         D3D11_BLEND_INV_DEST_ALPHA	= 8,
    // DEBUG:         D3D11_BLEND_DEST_COLOR	= 9,
    // DEBUG:         D3D11_BLEND_INV_DEST_COLOR	= 10,
    // DEBUG:         D3D11_BLEND_SRC_ALPHA_SAT	= 11,
    // DEBUG:         D3D11_BLEND_BLEND_FACTOR	= 14,
    // DEBUG:         D3D11_BLEND_INV_BLEND_FACTOR	= 15,
    // DEBUG:         D3D11_BLEND_SRC1_COLOR	= 16,
    // DEBUG:         D3D11_BLEND_INV_SRC1_COLOR	= 17,
    // DEBUG:         D3D11_BLEND_SRC1_ALPHA	= 18,
    // DEBUG:         D3D11_BLEND_INV_SRC1_ALPHA	= 19
    // DEBUG:     }
    public enum D3D11BLEND
    {
        D3D11BLEND_ZERO = 1,
        D3D11BLEND_ONE = 2,
        D3D11BLEND_SRC_COLOR = 3,
        D3D11BLEND_INV_SRC_COLOR = 4,
        D3D11BLEND_SRC_ALPHA = 5,
        D3D11BLEND_INV_SRC_ALPHA = 6,
        D3D11BLEND_DEST_ALPHA = 7,
        D3D11BLEND_INV_DEST_ALPHA = 8,
        D3D11BLEND_DEST_COLOR = 9,
        D3D11BLEND_INV_DEST_COLOR = 10,
        D3D11BLEND_SRC_ALPHA_SAT = 11,
        D3D11BLEND_BLEND_FACTOR = 14,
        D3D11BLEND_INV_BLEND_FACTOR = 15,
        D3D11BLEND_SRC1COLOR = 16,
        D3D11BLEND_INV_SRC1COLOR = 17,
        D3D11BLEND_SRC1ALPHA = 18,
        D3D11BLEND_INV_SRC1ALPHA = 19
    }

    // DEBUG: enum D3D11_BLEND_OP
    // DEBUG:     {
    // DEBUG:         D3D11_BLEND_OP_ADD	= 1,
    // DEBUG:         D3D11_BLEND_OP_SUBTRACT	= 2,
    // DEBUG:         D3D11_BLEND_OP_REV_SUBTRACT	= 3,
    // DEBUG:         D3D11_BLEND_OP_MIN	= 4,
    // DEBUG:         D3D11_BLEND_OP_MAX	= 5
    // DEBUG:     }
    public enum D3D11BLEND_OP
    {
        D3D11BLEND_OP_ADD = 1,
        D3D11BLEND_OP_SUBTRACT = 2,
        D3D11BLEND_OP_REV_SUBTRACT = 3,
        D3D11BLEND_OP_MIN = 4,
        D3D11BLEND_OP_MAX = 5
    }

    // DEBUG: enum D3D11_DEPTH_WRITE_MASK
    // DEBUG:     {
    // DEBUG:         D3D11_DEPTH_WRITE_MASK_ZERO	= 0,
    // DEBUG:         D3D11_DEPTH_WRITE_MASK_ALL	= 1
    // DEBUG:     }
    public enum D3D11DEPTH_WRITE_MASK
    {
        D3D11DEPTH_WRITE_MASK_ZERO = 0,
        D3D11DEPTH_WRITE_MASK_ALL = 1
    }

    // DEBUG: enum D3D11_COMPARISON_FUNC
    // DEBUG:     {
    // DEBUG:         D3D11_COMPARISON_NEVER	= 1,
    // DEBUG:         D3D11_COMPARISON_LESS	= 2,
    // DEBUG:         D3D11_COMPARISON_EQUAL	= 3,
    // DEBUG:         D3D11_COMPARISON_LESS_EQUAL	= 4,
    // DEBUG:         D3D11_COMPARISON_GREATER	= 5,
    // DEBUG:         D3D11_COMPARISON_NOT_EQUAL	= 6,
    // DEBUG:         D3D11_COMPARISON_GREATER_EQUAL	= 7,
    // DEBUG:         D3D11_COMPARISON_ALWAYS	= 8
    // DEBUG:     }
    public enum D3D11COMPARISON_FUNC
    {
        D3D11COMPARISON_NEVER = 1,
        D3D11COMPARISON_LESS = 2,
        D3D11COMPARISON_EQUAL = 3,
        D3D11COMPARISON_LESS_EQUAL = 4,
        D3D11COMPARISON_GREATER = 5,
        D3D11COMPARISON_NOT_EQUAL = 6,
        D3D11COMPARISON_GREATER_EQUAL = 7,
        D3D11COMPARISON_ALWAYS = 8
    }

    // DEBUG: enum D3D11_STENCIL_OP
    // DEBUG:     {
    // DEBUG:         D3D11_STENCIL_OP_KEEP	= 1,
    // DEBUG:         D3D11_STENCIL_OP_ZERO	= 2,
    // DEBUG:         D3D11_STENCIL_OP_REPLACE	= 3,
    // DEBUG:         D3D11_STENCIL_OP_INCR_SAT	= 4,
    // DEBUG:         D3D11_STENCIL_OP_DECR_SAT	= 5,
    // DEBUG:         D3D11_STENCIL_OP_INVERT	= 6,
    // DEBUG:         D3D11_STENCIL_OP_INCR	= 7,
    // DEBUG:         D3D11_STENCIL_OP_DECR	= 8
    // DEBUG:     }
    public enum D3D11STENCIL_OP
    {
        D3D11STENCIL_OP_KEEP = 1,
        D3D11STENCIL_OP_ZERO = 2,
        D3D11STENCIL_OP_REPLACE = 3,
        D3D11STENCIL_OP_INCR_SAT = 4,
        D3D11STENCIL_OP_DECR_SAT = 5,
        D3D11STENCIL_OP_INVERT = 6,
        D3D11STENCIL_OP_INCR = 7,
        D3D11STENCIL_OP_DECR = 8
    }

    // DEBUG: enum D3D11_FILL_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_FILL_WIREFRAME	= 2,
    // DEBUG:         D3D11_FILL_SOLID	= 3
    // DEBUG:     }
    public enum D3D11FILL_MODE
    {
        D3D11FILL_WIREFRAME = 2,
        D3D11FILL_SOLID = 3
    }

    // DEBUG: enum D3D11_CULL_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_CULL_NONE	= 1,
    // DEBUG:         D3D11_CULL_FRONT	= 2,
    // DEBUG:         D3D11_CULL_BACK	= 3
    // DEBUG:     }
    public enum D3D11CULL_MODE
    {
        D3D11CULL_NONE = 1,
        D3D11CULL_FRONT = 2,
        D3D11CULL_BACK = 3
    }

    // DEBUG: enum D3D11_FILTER
    // DEBUG:     {
    // DEBUG:         D3D11_FILTER_MIN_MAG_MIP_POINT	= 0,
    // DEBUG:         D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR	= 0x1,
    // DEBUG:         D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x4,
    // DEBUG:         D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR	= 0x5,
    // DEBUG:         D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT	= 0x10,
    // DEBUG:         D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x11,
    // DEBUG:         D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT	= 0x14,
    // DEBUG:         D3D11_FILTER_MIN_MAG_MIP_LINEAR	= 0x15,
    // DEBUG:         D3D11_FILTER_ANISOTROPIC	= 0x55,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT	= 0x80,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= 0x81,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x84,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= 0x85,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= 0x90,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x91,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= 0x94,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	= 0x95,
    // DEBUG:         D3D11_FILTER_COMPARISON_ANISOTROPIC	= 0xd5,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT	= 0x100,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x101,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x104,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x105,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x110,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x111,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x114,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR	= 0x115,
    // DEBUG:         D3D11_FILTER_MINIMUM_ANISOTROPIC	= 0x155,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT	= 0x180,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x181,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x184,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x185,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x190,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x191,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x194,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR	= 0x195,
    // DEBUG:         D3D11_FILTER_MAXIMUM_ANISOTROPIC	= 0x1d5
    // DEBUG:     }
    public enum D3D11FILTER
    {
        D3D11FILTER_MIN_MAG_MIP_POINT = 0,
        D3D11FILTER_MIN_MAG_POINT_MIP_LINEAR = 1,
        D3D11FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
        D3D11FILTER_MIN_POINT_MAG_MIP_LINEAR = 5,
        D3D11FILTER_MIN_LINEAR_MAG_MIP_POINT = 16,
        D3D11FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
        D3D11FILTER_MIN_MAG_LINEAR_MIP_POINT = 20,
        D3D11FILTER_MIN_MAG_MIP_LINEAR = 21,
        D3D11FILTER_ANISOTROPIC = 85,
        D3D11FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128,
        D3D11FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129,
        D3D11FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132,
        D3D11FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133,
        D3D11FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144,
        D3D11FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145,
        D3D11FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148,
        D3D11FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149,
        D3D11FILTER_COMPARISON_ANISOTROPIC = 213,
        D3D11FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256,
        D3D11FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257,
        D3D11FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260,
        D3D11FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261,
        D3D11FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272,
        D3D11FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273,
        D3D11FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276,
        D3D11FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277,
        D3D11FILTER_MINIMUM_ANISOTROPIC = 341,
        D3D11FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384,
        D3D11FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385,
        D3D11FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388,
        D3D11FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389,
        D3D11FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400,
        D3D11FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401,
        D3D11FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404,
        D3D11FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405,
        D3D11FILTER_MAXIMUM_ANISOTROPIC = 469
    }

    // DEBUG: enum D3D11_TEXTURE_ADDRESS_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_TEXTURE_ADDRESS_WRAP	= 1,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_MIRROR	= 2,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_CLAMP	= 3,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_BORDER	= 4,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_MIRROR_ONCE	= 5
    // DEBUG:     }
    public enum D3D11TEXTURE_ADDRESS_MODE
    {
        D3D11TEXTURE_ADDRESS_WRAP = 1,
        D3D11TEXTURE_ADDRESS_MIRROR = 2,
        D3D11TEXTURE_ADDRESS_CLAMP = 3,
        D3D11TEXTURE_ADDRESS_BORDER = 4,
        D3D11TEXTURE_ADDRESS_MIRROR_ONCE = 5
    }

    // DEBUG: enum D3D11_QUERY
    // DEBUG:     {
    // DEBUG:         D3D11_QUERY_EVENT	= 0,
    // DEBUG:         D3D11_QUERY_OCCLUSION	= ( D3D11_QUERY_EVENT + 1 ) ,
    // DEBUG:         D3D11_QUERY_TIMESTAMP	= ( D3D11_QUERY_OCCLUSION + 1 ) ,
    // DEBUG:         D3D11_QUERY_TIMESTAMP_DISJOINT	= ( D3D11_QUERY_TIMESTAMP + 1 ) ,
    // DEBUG:         D3D11_QUERY_PIPELINE_STATISTICS	= ( D3D11_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
    // DEBUG:         D3D11_QUERY_OCCLUSION_PREDICATE	= ( D3D11_QUERY_PIPELINE_STATISTICS + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS	= ( D3D11_QUERY_OCCLUSION_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE	= ( D3D11_QUERY_SO_STATISTICS + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS_STREAM0	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0	= ( D3D11_QUERY_SO_STATISTICS_STREAM0 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS_STREAM1	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1	= ( D3D11_QUERY_SO_STATISTICS_STREAM1 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS_STREAM2	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2	= ( D3D11_QUERY_SO_STATISTICS_STREAM2 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS_STREAM3	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3	= ( D3D11_QUERY_SO_STATISTICS_STREAM3 + 1 ) 
    // DEBUG:     }
    public enum D3D11QUERY
    {
        D3D11QUERY_EVENT = 0,
        D3D11QUERY_OCCLUSION = 1,
        D3D11QUERY_TIMESTAMP = 2,
        D3D11QUERY_TIMESTAMP_DISJOINT = 3,
        D3D11QUERY_PIPELINE_STATISTICS = 4,
        D3D11QUERY_OCCLUSION_PREDICATE = 5,
        D3D11QUERY_SO_STATISTICS = 6,
        D3D11QUERY_SO_OVERFLOW_PREDICATE = 7,
        D3D11QUERY_SO_STATISTICS_STREAM0 = 8,
        D3D11QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 9,
        D3D11QUERY_SO_STATISTICS_STREAM1 = 10,
        D3D11QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 11,
        D3D11QUERY_SO_STATISTICS_STREAM2 = 12,
        D3D11QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 13,
        D3D11QUERY_SO_STATISTICS_STREAM3 = 14,
        D3D11QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 15
    }

    // DEBUG: enum D3D11_COUNTER
    // DEBUG:     {
    // DEBUG:         D3D11_COUNTER_DEVICE_DEPENDENT_0	= 0x40000000
    // DEBUG:     }
    [Flags]
    public enum D3D11COUNTER
    {
        D3D11COUNTER_DEVICE_DEPENDENT_0 = 1073741824
    }

    // DEBUG: enum D3D11_MAP
    // DEBUG:     {
    // DEBUG:         D3D11_MAP_READ	= 1,
    // DEBUG:         D3D11_MAP_WRITE	= 2,
    // DEBUG:         D3D11_MAP_READ_WRITE	= 3,
    // DEBUG:         D3D11_MAP_WRITE_DISCARD	= 4,
    // DEBUG:         D3D11_MAP_WRITE_NO_OVERWRITE	= 5
    // DEBUG:     }
    public enum D3D11MAP
    {
        D3D11MAP_READ = 1,
        D3D11MAP_WRITE = 2,
        D3D11MAP_READ_WRITE = 3,
        D3D11MAP_WRITE_DISCARD = 4,
        D3D11MAP_WRITE_NO_OVERWRITE = 5
    }

    // DEBUG: enum D3D11_DEVICE_CONTEXT_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_DEVICE_CONTEXT_IMMEDIATE	= 0,
    // DEBUG:         D3D11_DEVICE_CONTEXT_DEFERRED	= ( D3D11_DEVICE_CONTEXT_IMMEDIATE + 1 ) 
    // DEBUG:     }
    public enum D3D11DEVICE_CONTEXT_TYPE
    {
        D3D11DEVICE_CONTEXT_IMMEDIATE = 0,
        D3D11DEVICE_CONTEXT_DEFERRED = 1
    }

    // DEBUG: enum D3D11_COUNTER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_COUNTER_TYPE_FLOAT32	= 0,
    // DEBUG:         D3D11_COUNTER_TYPE_UINT16	= ( D3D11_COUNTER_TYPE_FLOAT32 + 1 ) ,
    // DEBUG:         D3D11_COUNTER_TYPE_UINT32	= ( D3D11_COUNTER_TYPE_UINT16 + 1 ) ,
    // DEBUG:         D3D11_COUNTER_TYPE_UINT64	= ( D3D11_COUNTER_TYPE_UINT32 + 1 ) 
    // DEBUG:     }
    public enum D3D11COUNTER_TYPE
    {
        D3D11COUNTER_TYPE_FLOAT32 = 0,
        D3D11COUNTER_TYPE_UINT16 = 1,
        D3D11COUNTER_TYPE_UINT32 = 2,
        D3D11COUNTER_TYPE_UINT64 = 3
    }

    // DEBUG: enum D3D11_FEATURE
    // DEBUG:     {
    // DEBUG:         D3D11_FEATURE_THREADING	= 0,
    // DEBUG:         D3D11_FEATURE_DOUBLES	= ( D3D11_FEATURE_THREADING + 1 ) ,
    // DEBUG:         D3D11_FEATURE_FORMAT_SUPPORT	= ( D3D11_FEATURE_DOUBLES + 1 ) ,
    // DEBUG:         D3D11_FEATURE_FORMAT_SUPPORT2	= ( D3D11_FEATURE_FORMAT_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS	= ( D3D11_FEATURE_FORMAT_SUPPORT2 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS	= ( D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS + 1 ) ,
    // DEBUG:         D3D11_FEATURE_ARCHITECTURE_INFO	= ( D3D11_FEATURE_D3D11_OPTIONS + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D9_OPTIONS	= ( D3D11_FEATURE_ARCHITECTURE_INFO + 1 ) ,
    // DEBUG:         D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT	= ( D3D11_FEATURE_D3D9_OPTIONS + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D9_SHADOW_SUPPORT	= ( D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS1	= ( D3D11_FEATURE_D3D9_SHADOW_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT	= ( D3D11_FEATURE_D3D11_OPTIONS1 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_MARKER_SUPPORT	= ( D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D9_OPTIONS1	= ( D3D11_FEATURE_MARKER_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS2	= ( D3D11_FEATURE_D3D9_OPTIONS1 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS3	= ( D3D11_FEATURE_D3D11_OPTIONS2 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT	= ( D3D11_FEATURE_D3D11_OPTIONS3 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS4	= ( D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_SHADER_CACHE	= ( D3D11_FEATURE_D3D11_OPTIONS4 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS5	= ( D3D11_FEATURE_SHADER_CACHE + 1 ) ,
    // DEBUG:         D3D11_FEATURE_DISPLAYABLE	= ( D3D11_FEATURE_D3D11_OPTIONS5 + 1 ) 
    // DEBUG:     }
    public enum D3D11FEATURE
    {
        D3D11FEATURE_THREADING = 0,
        D3D11FEATURE_DOUBLES = 1,
        D3D11FEATURE_FORMAT_SUPPORT = 2,
        D3D11FEATURE_FORMAT_SUPPORT2 = 3,
        D3D11FEATURE_D3D10X_HARDWARE_OPTIONS = 4,
        D3D11FEATURE_D3D11OPTIONS = 5,
        D3D11FEATURE_ARCHITECTURE_INFO = 6,
        D3D11FEATURE_D3D9OPTIONS = 7,
        D3D11FEATURE_SHADER_MIN_PRECISION_SUPPORT = 8,
        D3D11FEATURE_D3D9SHADOW_SUPPORT = 9,
        D3D11FEATURE_D3D11OPTIONS1 = 10,
        D3D11FEATURE_D3D9SIMPLE_INSTANCING_SUPPORT = 11,
        D3D11FEATURE_MARKER_SUPPORT = 12,
        D3D11FEATURE_D3D9OPTIONS1 = 13,
        D3D11FEATURE_D3D11OPTIONS2 = 14,
        D3D11FEATURE_D3D11OPTIONS3 = 15,
        D3D11FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 16,
        D3D11FEATURE_D3D11OPTIONS4 = 17,
        D3D11FEATURE_SHADER_CACHE = 18,
        D3D11FEATURE_D3D11OPTIONS5 = 19,
        D3D11FEATURE_DISPLAYABLE = 20
    }

    // DEBUG: enum D3D11_VIDEO_FRAME_FORMAT
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE	= 0,
    // DEBUG:         D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST	= 1,
    // DEBUG:         D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST	= 2
    // DEBUG:     }
    public enum D3D11VIDEO_FRAME_FORMAT
    {
        D3D11VIDEO_FRAME_FORMAT_PROGRESSIVE = 0,
        D3D11VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1,
        D3D11VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
    }

    // DEBUG: enum D3D11_VIDEO_USAGE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_USAGE_PLAYBACK_NORMAL	= 0,
    // DEBUG:         D3D11_VIDEO_USAGE_OPTIMAL_SPEED	= 1,
    // DEBUG:         D3D11_VIDEO_USAGE_OPTIMAL_QUALITY	= 2
    // DEBUG:     }
    public enum D3D11VIDEO_USAGE
    {
        D3D11VIDEO_USAGE_PLAYBACK_NORMAL = 0,
        D3D11VIDEO_USAGE_OPTIMAL_SPEED = 1,
        D3D11VIDEO_USAGE_OPTIMAL_QUALITY = 2
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FILTER
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_HUE	= 2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_SATURATION	= 3,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION	= 4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT	= 5,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING	= 6,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT	= 7
    // DEBUG:     }
    public enum D3D11VIDEO_PROCESSOR_FILTER
    {
        D3D11VIDEO_PROCESSOR_FILTER_BRIGHTNESS = 0,
        D3D11VIDEO_PROCESSOR_FILTER_CONTRAST = 1,
        D3D11VIDEO_PROCESSOR_FILTER_HUE = 2,
        D3D11VIDEO_PROCESSOR_FILTER_SATURATION = 3,
        D3D11VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = 4,
        D3D11VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = 5,
        D3D11VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6,
        D3D11VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = 7
    }

    // DEBUG: enum D3D11_VDOV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_VDOV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_VDOV_DIMENSION_TEXTURE2D	= 1
    // DEBUG:     }
    public enum D3D11VDOV_DIMENSION
    {
        D3D11VDOV_DIMENSION_UNKNOWN = 0,
        D3D11VDOV_DIMENSION_TEXTURE2D = 1
    }

    // DEBUG: enum D3D11_VPIV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_VPIV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_VPIV_DIMENSION_TEXTURE2D	= 1
    // DEBUG:     }
    public enum D3D11VPIV_DIMENSION
    {
        D3D11VPIV_DIMENSION_UNKNOWN = 0,
        D3D11VPIV_DIMENSION_TEXTURE2D = 1
    }

    // DEBUG: enum D3D11_VPOV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_VPOV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_VPOV_DIMENSION_TEXTURE2D	= 1,
    // DEBUG:         D3D11_VPOV_DIMENSION_TEXTURE2DARRAY	= 2
    // DEBUG:     }
    public enum D3D11VPOV_DIMENSION
    {
        D3D11VPOV_DIMENSION_UNKNOWN = 0,
        D3D11VPOV_DIMENSION_TEXTURE2D = 1,
        D3D11VPOV_DIMENSION_TEXTURE2DARRAY = 2
    }

    // DEBUG: enum D3D11_VIDEO_DECODER_BUFFER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS	= 0,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL	= 1,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE	= 2,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL	= 3,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX	= 4,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL	= 5,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_BITSTREAM	= 6,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR	= 7,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN	= 8
    // DEBUG:     }
    public enum D3D11VIDEO_DECODER_BUFFER_TYPE
    {
        D3D11VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0,
        D3D11VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 1,
        D3D11VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 2,
        D3D11VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 3,
        D3D11VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4,
        D3D11VIDEO_DECODER_BUFFER_SLICE_CONTROL = 5,
        D3D11VIDEO_DECODER_BUFFER_BITSTREAM = 6,
        D3D11VIDEO_DECODER_BUFFER_MOTION_VECTOR = 7,
        D3D11VIDEO_DECODER_BUFFER_FILM_GRAIN = 8
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION	= 2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM	= 3
    // DEBUG:     }
    public enum D3D11VIDEO_PROCESSOR_ALPHA_FILL_MODE
    {
        D3D11VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = 0,
        D3D11VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = 1,
        D3D11VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = 2,
        D3D11VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM	= 2
    // DEBUG:     }
    public enum D3D11VIDEO_PROCESSOR_OUTPUT_RATE
    {
        D3D11VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0,
        D3D11VIDEO_PROCESSOR_OUTPUT_RATE_HALF = 1,
        D3D11VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL	= 2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE	= 3,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET	= 4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED	= 5,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED	= 6,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD	= 7
    // DEBUG:     }
    public enum D3D11VIDEO_PROCESSOR_STEREO_FORMAT
    {
        D3D11VIDEO_PROCESSOR_STEREO_FORMAT_MONO = 0,
        D3D11VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = 1,
        D3D11VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = 2,
        D3D11VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = 3,
        D3D11VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = 4,
        D3D11VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = 5,
        D3D11VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6,
        D3D11VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = 7
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1	= 2
    // DEBUG:     }
    public enum D3D11VIDEO_PROCESSOR_STEREO_FLIP_MODE
    {
        D3D11VIDEO_PROCESSOR_STEREO_FLIP_NONE = 0,
        D3D11VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1,
        D3D11VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_ROTATION
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ROTATION_90	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ROTATION_180	= 2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ROTATION_270	= 3
    // DEBUG:     }
    public enum D3D11VIDEO_PROCESSOR_ROTATION
    {
        D3D11VIDEO_PROCESSOR_ROTATION_IDENTITY = 0,
        D3D11VIDEO_PROCESSOR_ROTATION_90 = 1,
        D3D11VIDEO_PROCESSOR_ROTATION_180 = 2,
        D3D11VIDEO_PROCESSOR_ROTATION_270 = 3
    }

    // DEBUG: enum D3D11_AUTHENTICATED_CHANNEL_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_AUTHENTICATED_CHANNEL_D3D11	= 1,
    // DEBUG:         D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE	= 2,
    // DEBUG:         D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE	= 3
    // DEBUG:     }
    public enum D3D11AUTHENTICATED_CHANNEL_TYPE
    {
        D3D11AUTHENTICATED_CHANNEL_D3D11 = 1,
        D3D11AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2,
        D3D11AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3
    }

    // DEBUG: enum D3D11_BIND_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_BIND_VERTEX_BUFFER	= 0x1L,
    // DEBUG:         D3D11_BIND_INDEX_BUFFER	= 0x2L,
    // DEBUG:         D3D11_BIND_CONSTANT_BUFFER	= 0x4L,
    // DEBUG:         D3D11_BIND_SHADER_RESOURCE	= 0x8L,
    // DEBUG:         D3D11_BIND_STREAM_OUTPUT	= 0x10L,
    // DEBUG:         D3D11_BIND_RENDER_TARGET	= 0x20L,
    // DEBUG:         D3D11_BIND_DEPTH_STENCIL	= 0x40L,
    // DEBUG:         D3D11_BIND_UNORDERED_ACCESS	= 0x80L,
    // DEBUG:         D3D11_BIND_DECODER	= 0x200L,
    // DEBUG:         D3D11_BIND_VIDEO_ENCODER	= 0x400L
    // DEBUG:     }
    [Flags]
    public enum D3D11BIND_FLAG
    {
        D3D11BIND_VERTEX_BUFFER = 1,
        D3D11BIND_INDEX_BUFFER = 2,
        D3D11BIND_CONSTANT_BUFFER = 4,
        D3D11BIND_SHADER_RESOURCE = 8,
        D3D11BIND_STREAM_OUTPUT = 16,
        D3D11BIND_RENDER_TARGET = 32,
        D3D11BIND_DEPTH_STENCIL = 64,
        D3D11BIND_UNORDERED_ACCESS = 128,
        D3D11BIND_DECODER = 512,
        D3D11BIND_VIDEO_ENCODER = 1024
    }

    // DEBUG: enum D3D11_CPU_ACCESS_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_CPU_ACCESS_WRITE	= 0x10000L,
    // DEBUG:         D3D11_CPU_ACCESS_READ	= 0x20000L
    // DEBUG:     }
    [Flags]
    public enum D3D11CPU_ACCESS_FLAG
    {
        D3D11CPU_ACCESS_WRITE = 65536,
        D3D11CPU_ACCESS_READ = 131072
    }

    // DEBUG: enum D3D11_RESOURCE_MISC_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_RESOURCE_MISC_GENERATE_MIPS	= 0x1L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED	= 0x2L,
    // DEBUG:         D3D11_RESOURCE_MISC_TEXTURECUBE	= 0x4L,
    // DEBUG:         D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS	= 0x10L,
    // DEBUG:         D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS	= 0x20L,
    // DEBUG:         D3D11_RESOURCE_MISC_BUFFER_STRUCTURED	= 0x40L,
    // DEBUG:         D3D11_RESOURCE_MISC_RESOURCE_CLAMP	= 0x80L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX	= 0x100L,
    // DEBUG:         D3D11_RESOURCE_MISC_GDI_COMPATIBLE	= 0x200L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED_NTHANDLE	= 0x800L,
    // DEBUG:         D3D11_RESOURCE_MISC_RESTRICTED_CONTENT	= 0x1000L,
    // DEBUG:         D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE	= 0x2000L,
    // DEBUG:         D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER	= 0x4000L,
    // DEBUG:         D3D11_RESOURCE_MISC_GUARDED	= 0x8000L,
    // DEBUG:         D3D11_RESOURCE_MISC_TILE_POOL	= 0x20000L,
    // DEBUG:         D3D11_RESOURCE_MISC_TILED	= 0x40000L,
    // DEBUG:         D3D11_RESOURCE_MISC_HW_PROTECTED	= 0x80000L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE	= 0x100000L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER	= 0x200000L
    // DEBUG:     }
    [Flags]
    public enum D3D11RESOURCE_MISC_FLAG
    {
        D3D11RESOURCE_MISC_GENERATE_MIPS = 1,
        D3D11RESOURCE_MISC_SHARED = 2,
        D3D11RESOURCE_MISC_TEXTURECUBE = 4,
        D3D11RESOURCE_MISC_DRAWINDIRECT_ARGS = 16,
        D3D11RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 32,
        D3D11RESOURCE_MISC_BUFFER_STRUCTURED = 64,
        D3D11RESOURCE_MISC_RESOURCE_CLAMP = 128,
        D3D11RESOURCE_MISC_SHARED_KEYEDMUTEX = 256,
        D3D11RESOURCE_MISC_GDI_COMPATIBLE = 512,
        D3D11RESOURCE_MISC_SHARED_NTHANDLE = 2048,
        D3D11RESOURCE_MISC_RESTRICTED_CONTENT = 4096,
        D3D11RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 8192,
        D3D11RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 16384,
        D3D11RESOURCE_MISC_GUARDED = 32768,
        D3D11RESOURCE_MISC_TILE_POOL = 131072,
        D3D11RESOURCE_MISC_TILED = 262144,
        D3D11RESOURCE_MISC_HW_PROTECTED = 524288,
        D3D11RESOURCE_MISC_SHARED_DISPLAYABLE = 1048576,
        D3D11RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER = 2097152
    }

    // DEBUG: enum D3D11_MAP_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_MAP_FLAG_DO_NOT_WAIT	= 0x100000L
    // DEBUG:     }
    [Flags]
    public enum D3D11MAP_FLAG
    {
        D3D11MAP_FLAG_DO_NOT_WAIT = 1048576
    }

    // DEBUG: enum D3D11_RAISE_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR	= 0x1L
    // DEBUG:     }
    public enum D3D11RAISE_FLAG
    {
        D3D11RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1
    }

    // DEBUG: enum D3D11_CLEAR_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_CLEAR_DEPTH	= 0x1L,
    // DEBUG:         D3D11_CLEAR_STENCIL	= 0x2L
    // DEBUG:     }
    public enum D3D11CLEAR_FLAG
    {
        D3D11CLEAR_DEPTH = 1,
        D3D11CLEAR_STENCIL = 2
    }

    // DEBUG: enum D3D11_COLOR_WRITE_ENABLE
    // DEBUG:     {
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_RED	= 1,
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_GREEN	= 2,
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_BLUE	= 4,
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_ALPHA	= 8,
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_ALL	= ( ( ( D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN )  | D3D11_COLOR_WRITE_ENABLE_BLUE )  | D3D11_COLOR_WRITE_ENABLE_ALPHA ) 
    // DEBUG:     }
    public enum D3D11COLOR_WRITE_ENABLE
    {
        D3D11COLOR_WRITE_ENABLE_RED = 1,
        D3D11COLOR_WRITE_ENABLE_GREEN = 2,
        D3D11COLOR_WRITE_ENABLE_BLUE = 4,
        D3D11COLOR_WRITE_ENABLE_ALPHA = 8,
        D3D11COLOR_WRITE_ENABLE_ALL = 15
    }

    // DEBUG: enum D3D11_TEXTURECUBE_FACE
    // DEBUG:     {
    // DEBUG:         D3D11_TEXTURECUBE_FACE_POSITIVE_X	= 0,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_NEGATIVE_X	= 1,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_POSITIVE_Y	= 2,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_NEGATIVE_Y	= 3,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_POSITIVE_Z	= 4,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_NEGATIVE_Z	= 5
    // DEBUG:     }
    public enum D3D11TEXTURECUBE_FACE
    {
        D3D11TEXTURECUBE_FACE_POSITIVE_X = 0,
        D3D11TEXTURECUBE_FACE_NEGATIVE_X = 1,
        D3D11TEXTURECUBE_FACE_POSITIVE_Y = 2,
        D3D11TEXTURECUBE_FACE_NEGATIVE_Y = 3,
        D3D11TEXTURECUBE_FACE_POSITIVE_Z = 4,
        D3D11TEXTURECUBE_FACE_NEGATIVE_Z = 5
    }

    // DEBUG: enum D3D11_BUFFEREX_SRV_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_BUFFEREX_SRV_FLAG_RAW	= 0x1
    // DEBUG:     }
    public enum D3D11BUFFEREX_SRV_FLAG
    {
        D3D11BUFFEREX_SRV_FLAG_RAW = 1
    }

    // DEBUG: enum D3D11_DSV_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_DSV_READ_ONLY_DEPTH	= 0x1L,
    // DEBUG:         D3D11_DSV_READ_ONLY_STENCIL	= 0x2L
    // DEBUG:     }
    public enum D3D11DSV_FLAG
    {
        D3D11DSV_READ_ONLY_DEPTH = 1,
        D3D11DSV_READ_ONLY_STENCIL = 2
    }

    // DEBUG: enum D3D11_BUFFER_UAV_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_BUFFER_UAV_FLAG_RAW	= 0x1,
    // DEBUG:         D3D11_BUFFER_UAV_FLAG_APPEND	= 0x2,
    // DEBUG:         D3D11_BUFFER_UAV_FLAG_COUNTER	= 0x4
    // DEBUG:     }
    [Flags]
    public enum D3D11BUFFER_UAV_FLAG
    {
        D3D11BUFFER_UAV_FLAG_RAW = 1,
        D3D11BUFFER_UAV_FLAG_APPEND = 2,
        D3D11BUFFER_UAV_FLAG_COUNTER = 4
    }

    // DEBUG: enum D3D11_FILTER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_FILTER_TYPE_POINT	= 0,
    // DEBUG:         D3D11_FILTER_TYPE_LINEAR	= 1
    // DEBUG:     }
    public enum D3D11FILTER_TYPE
    {
        D3D11FILTER_TYPE_POINT = 0,
        D3D11FILTER_TYPE_LINEAR = 1
    }

    // DEBUG: enum D3D11_FILTER_REDUCTION_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_FILTER_REDUCTION_TYPE_STANDARD	= 0,
    // DEBUG:         D3D11_FILTER_REDUCTION_TYPE_COMPARISON	= 1,
    // DEBUG:         D3D11_FILTER_REDUCTION_TYPE_MINIMUM	= 2,
    // DEBUG:         D3D11_FILTER_REDUCTION_TYPE_MAXIMUM	= 3
    // DEBUG:     }
    public enum D3D11FILTER_REDUCTION_TYPE
    {
        D3D11FILTER_REDUCTION_TYPE_STANDARD = 0,
        D3D11FILTER_REDUCTION_TYPE_COMPARISON = 1,
        D3D11FILTER_REDUCTION_TYPE_MINIMUM = 2,
        D3D11FILTER_REDUCTION_TYPE_MAXIMUM = 3
    }

    // DEBUG: enum D3D11_FORMAT_SUPPORT
    // DEBUG:     {
    // DEBUG:         D3D11_FORMAT_SUPPORT_BUFFER	= 0x1,
    // DEBUG:         D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER	= 0x2,
    // DEBUG:         D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER	= 0x4,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SO_BUFFER	= 0x8,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TEXTURE1D	= 0x10,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TEXTURE2D	= 0x20,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TEXTURE3D	= 0x40,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TEXTURECUBE	= 0x80,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_LOAD	= 0x100,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_SAMPLE	= 0x200,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON	= 0x400,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT	= 0x800,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MIP	= 0x1000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MIP_AUTOGEN	= 0x2000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_RENDER_TARGET	= 0x4000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_BLENDABLE	= 0x8000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_DEPTH_STENCIL	= 0x10000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_CPU_LOCKABLE	= 0x20000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE	= 0x40000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_DISPLAY	= 0x80000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT	= 0x100000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET	= 0x200000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD	= 0x400000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_GATHER	= 0x800000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST	= 0x1000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW	= 0x2000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON	= 0x4000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_DECODER_OUTPUT	= 0x8000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT	= 0x10000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT	= 0x20000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_VIDEO_ENCODER	= 0x40000000
    // DEBUG:     }
    [Flags]
    public enum D3D11FORMAT_SUPPORT
    {
        D3D11FORMAT_SUPPORT_BUFFER = 1,
        D3D11FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2,
        D3D11FORMAT_SUPPORT_IA_INDEX_BUFFER = 4,
        D3D11FORMAT_SUPPORT_SO_BUFFER = 8,
        D3D11FORMAT_SUPPORT_TEXTURE1D = 16,
        D3D11FORMAT_SUPPORT_TEXTURE2D = 32,
        D3D11FORMAT_SUPPORT_TEXTURE3D = 64,
        D3D11FORMAT_SUPPORT_TEXTURECUBE = 128,
        D3D11FORMAT_SUPPORT_SHADER_LOAD = 256,
        D3D11FORMAT_SUPPORT_SHADER_SAMPLE = 512,
        D3D11FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024,
        D3D11FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048,
        D3D11FORMAT_SUPPORT_MIP = 4096,
        D3D11FORMAT_SUPPORT_MIP_AUTOGEN = 8192,
        D3D11FORMAT_SUPPORT_RENDER_TARGET = 16384,
        D3D11FORMAT_SUPPORT_BLENDABLE = 32768,
        D3D11FORMAT_SUPPORT_DEPTH_STENCIL = 65536,
        D3D11FORMAT_SUPPORT_CPU_LOCKABLE = 131072,
        D3D11FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144,
        D3D11FORMAT_SUPPORT_DISPLAY = 524288,
        D3D11FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576,
        D3D11FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152,
        D3D11FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304,
        D3D11FORMAT_SUPPORT_SHADER_GATHER = 8388608,
        D3D11FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216,
        D3D11FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 33554432,
        D3D11FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 67108864,
        D3D11FORMAT_SUPPORT_DECODER_OUTPUT = 134217728,
        D3D11FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 268435456,
        D3D11FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 536870912,
        D3D11FORMAT_SUPPORT_VIDEO_ENCODER = 1073741824
    }

    // DEBUG: enum D3D11_FORMAT_SUPPORT2
    // DEBUG:     {
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD	= 0x1,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS	= 0x2,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE	= 0x4,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE	= 0x8,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX	= 0x10,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX	= 0x20,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD	= 0x40,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE	= 0x80,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP	= 0x100,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_TILED	= 0x200,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_SHAREABLE	= 0x400,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY	= 0x4000,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_DISPLAYABLE	= 0x10000
    // DEBUG:     }
    [Flags]
    public enum D3D11FORMAT_SUPPORT2
    {
        D3D11FORMAT_SUPPORT2UAV_ATOMIC_ADD = 1,
        D3D11FORMAT_SUPPORT2UAV_ATOMIC_BITWISE_OPS = 2,
        D3D11FORMAT_SUPPORT2UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4,
        D3D11FORMAT_SUPPORT2UAV_ATOMIC_EXCHANGE = 8,
        D3D11FORMAT_SUPPORT2UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16,
        D3D11FORMAT_SUPPORT2UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32,
        D3D11FORMAT_SUPPORT2UAV_TYPED_LOAD = 64,
        D3D11FORMAT_SUPPORT2UAV_TYPED_STORE = 128,
        D3D11FORMAT_SUPPORT2OUTPUT_MERGER_LOGIC_OP = 256,
        D3D11FORMAT_SUPPORT2TILED = 512,
        D3D11FORMAT_SUPPORT2SHAREABLE = 1024,
        D3D11FORMAT_SUPPORT2MULTIPLANE_OVERLAY = 16384,
        D3D11FORMAT_SUPPORT2DISPLAYABLE = 65536
    }

    // DEBUG: enum D3D11_ASYNC_GETDATA_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_ASYNC_GETDATA_DONOTFLUSH	= 0x1
    // DEBUG:     }
    public enum D3D11ASYNC_GETDATA_FLAG
    {
        D3D11ASYNC_GETDATA_DONOTFLUSH = 1
    }

    // DEBUG: enum D3D11_QUERY_MISC_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_QUERY_MISC_PREDICATEHINT	= 0x1
    // DEBUG:     }
    public enum D3D11QUERY_MISC_FLAG
    {
        D3D11QUERY_MISC_PREDICATEHINT = 1
    }

    // DEBUG: enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    // DEBUG:     {
    // DEBUG:         D3D11_STANDARD_MULTISAMPLE_PATTERN	= 0xffffffff,
    // DEBUG:         D3D11_CENTER_MULTISAMPLE_PATTERN	= 0xfffffffe
    // DEBUG:     }
    public enum D3D11STANDARD_MULTISAMPLE_QUALITY_LEVELS
    {
        D3D11STANDARD_MULTISAMPLE_PATTERN = -1,
        D3D11CENTER_MULTISAMPLE_PATTERN = -2
    }

    // DEBUG: enum D3D11_SHADER_MIN_PRECISION_SUPPORT
    // DEBUG:     {
    // DEBUG:         D3D11_SHADER_MIN_PRECISION_10_BIT	= 0x1,
    // DEBUG:         D3D11_SHADER_MIN_PRECISION_16_BIT	= 0x2
    // DEBUG:     }
    public enum D3D11SHADER_MIN_PRECISION_SUPPORT
    {
        D3D11SHADER_MIN_PRECISION_10BIT = 1,
        D3D11SHADER_MIN_PRECISION_16BIT = 2
    }

    // DEBUG: enum D3D11_TILED_RESOURCES_TIER
    // DEBUG:     {
    // DEBUG:         D3D11_TILED_RESOURCES_NOT_SUPPORTED	= 0,
    // DEBUG:         D3D11_TILED_RESOURCES_TIER_1	= 1,
    // DEBUG:         D3D11_TILED_RESOURCES_TIER_2	= 2,
    // DEBUG:         D3D11_TILED_RESOURCES_TIER_3	= 3
    // DEBUG:     }
    public enum D3D11TILED_RESOURCES_TIER
    {
        D3D11TILED_RESOURCES_NOT_SUPPORTED = 0,
        D3D11TILED_RESOURCES_TIER_1 = 1,
        D3D11TILED_RESOURCES_TIER_2 = 2,
        D3D11TILED_RESOURCES_TIER_3 = 3
    }

    // DEBUG: enum D3D11_CONSERVATIVE_RASTERIZATION_TIER
    // DEBUG:     {
    // DEBUG:         D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED	= 0,
    // DEBUG:         D3D11_CONSERVATIVE_RASTERIZATION_TIER_1	= 1,
    // DEBUG:         D3D11_CONSERVATIVE_RASTERIZATION_TIER_2	= 2,
    // DEBUG:         D3D11_CONSERVATIVE_RASTERIZATION_TIER_3	= 3
    // DEBUG:     }
    public enum D3D11CONSERVATIVE_RASTERIZATION_TIER
    {
        D3D11CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0,
        D3D11CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
        D3D11CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
        D3D11CONSERVATIVE_RASTERIZATION_TIER_3 = 3
    }

    // DEBUG: enum D3D11_SHADER_CACHE_SUPPORT_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D11_SHADER_CACHE_SUPPORT_NONE	= 0,
    // DEBUG:         D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE	= 0x1,
    // DEBUG:         D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE	= 0x2
    // DEBUG:     }
    public enum D3D11SHADER_CACHE_SUPPORT_FLAGS
    {
        D3D11SHADER_CACHE_SUPPORT_NONE = 0,
        D3D11SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 1,
        D3D11SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 2
    }

    // DEBUG: enum D3D11_SHARED_RESOURCE_TIER
    // DEBUG:     {
    // DEBUG:         D3D11_SHARED_RESOURCE_TIER_0	= 0,
    // DEBUG:         D3D11_SHARED_RESOURCE_TIER_1	= ( D3D11_SHARED_RESOURCE_TIER_0 + 1 ) ,
    // DEBUG:         D3D11_SHARED_RESOURCE_TIER_2	= ( D3D11_SHARED_RESOURCE_TIER_1 + 1 ) ,
    // DEBUG:         D3D11_SHARED_RESOURCE_TIER_3	= ( D3D11_SHARED_RESOURCE_TIER_2 + 1 ) 
    // DEBUG:     }
    public enum D3D11SHARED_RESOURCE_TIER
    {
        D3D11SHARED_RESOURCE_TIER_0 = 0,
        D3D11SHARED_RESOURCE_TIER_1 = 1,
        D3D11SHARED_RESOURCE_TIER_2 = 2,
        D3D11SHARED_RESOURCE_TIER_3 = 3
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT	= 0x2
    // DEBUG:     }
    public enum D3D11VIDEO_PROCESSOR_FORMAT_SUPPORT
    {
        D3D11VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 1,
        D3D11VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 2
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE	= 0x10
    // DEBUG:     }
    [Flags]
    public enum D3D11VIDEO_PROCESSOR_DEVICE_CAPS
    {
        D3D11VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = 1,
        D3D11VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = 2,
        D3D11VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4,
        D3D11VIDEO_PROCESSOR_DEVICE_CAPS_YCbCrMATRIX_CONVERSION = 8,
        D3D11VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = 16
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO	= 0x20,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION	= 0x40,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM	= 0x80,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO	= 0x100,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR	= 0x200,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE	= 0x400,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10	= 0x800
    // DEBUG:     }
    [Flags]
    public enum D3D11VIDEO_PROCESSOR_FEATURE_CAPS
    {
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = 1,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = 2,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = 4,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = 8,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = 16,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = 32,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = 64,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = 128,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 256,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR = 512,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE = 1024,
        D3D11VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10 = 2048
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FILTER_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT	= 0x20,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING	= 0x40,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT	= 0x80
    // DEBUG:     }
    [Flags]
    public enum D3D11VIDEO_PROCESSOR_FILTER_CAPS
    {
        D3D11VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = 1,
        D3D11VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = 2,
        D3D11VIDEO_PROCESSOR_FILTER_CAPS_HUE = 4,
        D3D11VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = 8,
        D3D11VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = 16,
        D3D11VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = 32,
        D3D11VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 64,
        D3D11VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = 128
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED	= 0x8
    // DEBUG:     }
    [Flags]
    public enum D3D11VIDEO_PROCESSOR_FORMAT_CAPS
    {
        D3D11VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = 1,
        D3D11VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = 2,
        D3D11VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = 4,
        D3D11VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 8
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION	= 0x20,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION	= 0x40,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING	= 0x80
    // DEBUG:     }
    [Flags]
    public enum D3D11VIDEO_PROCESSOR_AUTO_STREAM_CAPS
    {
        D3D11VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = 1,
        D3D11VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = 2,
        D3D11VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = 4,
        D3D11VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = 8,
        D3D11VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = 16,
        D3D11VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 32,
        D3D11VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = 64,
        D3D11VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = 128
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE	= 0x10
    // DEBUG:     }
    [Flags]
    public enum D3D11VIDEO_PROCESSOR_STEREO_CAPS
    {
        D3D11VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = 1,
        D3D11VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = 2,
        D3D11VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 4,
        D3D11VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = 8,
        D3D11VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = 16
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION	= 0x20
    // DEBUG:     }
    [Flags]
    public enum D3D11VIDEO_PROCESSOR_PROCESSOR_CAPS
    {
        D3D11VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1,
        D3D11VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = 2,
        D3D11VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4,
        D3D11VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8,
        D3D11VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = 16,
        D3D11VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55	= 0x20,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64	= 0x40,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87	= 0x80,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223	= 0x100,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER	= 0x80000000
    // DEBUG:     }
    public enum D3D11VIDEO_PROCESSOR_ITELECINE_CAPS
    {
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_32 = 1,
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_22 = 2,
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = 4,
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = 8,
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = 16,
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_55 = 32,
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_64 = 64,
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_87 = 128,
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 256,
        D3D11VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = -2147483648
    }

    // DEBUG: enum D3D11_CONTENT_PROTECTION_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE	= 0x1,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE	= 0x2,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON	= 0x4,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION	= 0x8,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY	= 0x10,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY	= 0x20,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK	= 0x40,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY	= 0x80,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV	= 0x100,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY	= 0x200,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT	= 0x400,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED	= 0x800,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE	= 0x1000,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN	= 0x2000,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION	= 0x4000,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED	= 0x8000
    // DEBUG:     }
    [Flags]
    public enum D3D11CONTENT_PROTECTION_CAPS
    {
        D3D11CONTENT_PROTECTION_CAPS_SOFTWARE = 1,
        D3D11CONTENT_PROTECTION_CAPS_HARDWARE = 2,
        D3D11CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = 4,
        D3D11CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = 8,
        D3D11CONTENT_PROTECTION_CAPS_CONTENT_KEY = 16,
        D3D11CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = 32,
        D3D11CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = 64,
        D3D11CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = 128,
        D3D11CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = 256,
        D3D11CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = 512,
        D3D11CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = 1024,
        D3D11CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED = 2048,
        D3D11CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE = 4096,
        D3D11CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN = 8192,
        D3D11CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION = 16384,
        D3D11CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = 32768
    }

    // DEBUG: enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255	= 2
    // DEBUG:     }
    public enum D3D11VIDEO_PROCESSOR_NOMINAL_RANGE
    {
        D3D11VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0,
        D3D11VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = 1,
        D3D11VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = 2
    }

    // DEBUG: enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_PROCESSIDTYPE_UNKNOWN	= 0,
    // DEBUG:         D3D11_PROCESSIDTYPE_DWM	= 1,
    // DEBUG:         D3D11_PROCESSIDTYPE_HANDLE	= 2
    // DEBUG:     }
    public enum D3D11AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    {
        D3D11PROCESSIDTYPE_UNKNOWN = 0,
        D3D11PROCESSIDTYPE_DWM = 1,
        D3D11PROCESSIDTYPE_HANDLE = 2
    }

    // DEBUG: enum D3D11_BUS_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_BUS_TYPE_OTHER	= 0,
    // DEBUG:         D3D11_BUS_TYPE_PCI	= 0x1,
    // DEBUG:         D3D11_BUS_TYPE_PCIX	= 0x2,
    // DEBUG:         D3D11_BUS_TYPE_PCIEXPRESS	= 0x3,
    // DEBUG:         D3D11_BUS_TYPE_AGP	= 0x4,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET	= 0x10000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP	= 0x20000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET	= 0x30000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR	= 0x40000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE	= 0x50000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_NON_STANDARD	= 0x80000000
    // DEBUG:     }
    public enum D3D11BUS_TYPE
    {
        D3D11BUS_TYPE_OTHER = 0,
        D3D11BUS_TYPE_PCI = 1,
        D3D11BUS_TYPE_PCIX = 2,
        D3D11BUS_TYPE_PCIEXPRESS = 3,
        D3D11BUS_TYPE_AGP = 4,
        D3D11BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536,
        D3D11BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072,
        D3D11BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608,
        D3D11BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144,
        D3D11BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680,
        D3D11BUS_IMPL_MODIFIER_NON_STANDARD = -2147483648
    }

    // DEBUG: enum D3D11_CREATE_DEVICE_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_CREATE_DEVICE_SINGLETHREADED	= 0x1,
    // DEBUG:         D3D11_CREATE_DEVICE_DEBUG	= 0x2,
    // DEBUG:         D3D11_CREATE_DEVICE_SWITCH_TO_REF	= 0x4,
    // DEBUG:         D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS	= 0x8,
    // DEBUG:         D3D11_CREATE_DEVICE_BGRA_SUPPORT	= 0x20,
    // DEBUG:         D3D11_CREATE_DEVICE_DEBUGGABLE	= 0x40,
    // DEBUG:         D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY	= 0x80,
    // DEBUG:         D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT	= 0x100,
    // DEBUG:         D3D11_CREATE_DEVICE_VIDEO_SUPPORT	= 0x800
    // DEBUG:     }
    [Flags]
    public enum D3D11CREATE_DEVICE_FLAG
    {
        D3D11CREATE_DEVICE_SINGLETHREADED = 1,
        D3D11CREATE_DEVICE_DEBUG = 2,
        D3D11CREATE_DEVICE_SWITCH_TO_REF = 4,
        D3D11CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8,
        D3D11CREATE_DEVICE_BGRA_SUPPORT = 32,
        D3D11CREATE_DEVICE_DEBUGGABLE = 64,
        D3D11CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128,
        D3D11CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 256,
        D3D11CREATE_DEVICE_VIDEO_SUPPORT = 2048
    }

    // DEBUG: typedef 
    // DEBUG: enum D3D11_USAGE
    // DEBUG:     {
    // DEBUG:         D3D11_USAGE_DEFAULT	= 0,
    // DEBUG:         D3D11_USAGE_IMMUTABLE	= 1,
    // DEBUG:         D3D11_USAGE_DYNAMIC	= 2,
    // DEBUG:         D3D11_USAGE_STAGING	= 3
    // DEBUG:     } 	D3D11_USAGE
    // DEBUG: typedef struct D3D11_BUFFER_DESC
    // DEBUG:     {
    // DEBUG:     UINT ByteWidth;
    // DEBUG:     D3D11_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     UINT StructureByteStride;
    // DEBUG:     } 	D3D11_BUFFER_DESC
    // DEBUG: typedef struct D3D11_SUBRESOURCE_DATA
    // DEBUG:     {
    // DEBUG:     const void *pSysMem;
    // DEBUG:     UINT SysMemPitch;
    // DEBUG:     UINT SysMemSlicePitch;
    // DEBUG:     } 	D3D11_SUBRESOURCE_DATA
    // DEBUG: typedef interface ID3D11Device ID3D11Device
    // DEBUG: typedef 
    // DEBUG: enum D3D11_RESOURCE_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_RESOURCE_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_RESOURCE_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D11_RESOURCE_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D11_RESOURCE_DIMENSION_TEXTURE2D	= 3,
    // DEBUG:         D3D11_RESOURCE_DIMENSION_TEXTURE3D	= 4
    // DEBUG:     } 	D3D11_RESOURCE_DIMENSION
    // DEBUG: typedef struct D3D11_TEXTURE1D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D11_TEXTURE1D_DESC
    // DEBUG: typedef struct D3D11_TEXTURE2D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     DXGI_SAMPLE_DESC SampleDesc;
    // DEBUG:     D3D11_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D11_TEXTURE2D_DESC
    // DEBUG: typedef interface ID3D11Texture2D ID3D11Texture2D
    // DEBUG: typedef struct D3D11_TEXTURE3D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT Depth;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D11_TEXTURE3D_DESC
    // DEBUG: typedef D3D_SRV_DIMENSION D3D11_SRV_DIMENSION
    // DEBUG: typedef struct D3D11_BUFFER_SRV
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT FirstElement;
    // DEBUG:         UINT ElementOffset;
    // DEBUG:         } 	;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT NumElements;
    // DEBUG:         UINT ElementWidth;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_BUFFER_SRV
    // DEBUG: typedef struct D3D11_TEX1D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     } 	D3D11_TEX1D_SRV
    // DEBUG: typedef struct D3D11_TEX1D_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX1D_ARRAY_SRV
    // DEBUG: typedef struct D3D11_TEX2D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     } 	D3D11_TEX2D_SRV
    // DEBUG: typedef struct D3D11_TEX2D_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX2D_ARRAY_SRV
    // DEBUG: typedef struct D3D11_TEX2DMS_SRV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     } 	D3D11_TEX2DMS_SRV
    // DEBUG: typedef struct D3D11_TEX2DMS_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX2DMS_ARRAY_SRV
    // DEBUG: typedef struct D3D11_TEX3D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     } 	D3D11_TEX3D_SRV
    // DEBUG: typedef struct D3D11_TEXCUBE_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     } 	D3D11_TEXCUBE_SRV
    // DEBUG: typedef struct D3D11_TEXCUBE_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT First2DArrayFace;
    // DEBUG:     UINT NumCubes;
    // DEBUG:     } 	D3D11_TEXCUBE_ARRAY_SRV
    // DEBUG: typedef struct D3D11_BUFFEREX_SRV
    // DEBUG:     {
    // DEBUG:     UINT FirstElement;
    // DEBUG:     UINT NumElements;
    // DEBUG:     UINT Flags;
    // DEBUG:     } 	D3D11_BUFFEREX_SRV
    // DEBUG: typedef struct D3D11_SHADER_RESOURCE_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_SRV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_BUFFER_SRV Buffer;
    // DEBUG:         D3D11_TEX1D_SRV Texture1D;
    // DEBUG:         D3D11_TEX1D_ARRAY_SRV Texture1DArray;
    // DEBUG:         D3D11_TEX2D_SRV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_SRV Texture2DArray;
    // DEBUG:         D3D11_TEX2DMS_SRV Texture2DMS;
    // DEBUG:         D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    // DEBUG:         D3D11_TEX3D_SRV Texture3D;
    // DEBUG:         D3D11_TEXCUBE_SRV TextureCube;
    // DEBUG:         D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
    // DEBUG:         D3D11_BUFFEREX_SRV BufferEx;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_SHADER_RESOURCE_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_UAV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_UAV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_UAV_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE1DARRAY	= 3,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE2D	= 4,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE2DARRAY	= 5,
    // DEBUG:         D3D11_UAV_DIMENSION_TEXTURE3D	= 8
    // DEBUG:     } 	D3D11_UAV_DIMENSION
    // DEBUG: typedef struct D3D11_BUFFER_UAV
    // DEBUG:     {
    // DEBUG:     UINT FirstElement;
    // DEBUG:     UINT NumElements;
    // DEBUG:     UINT Flags;
    // DEBUG:     } 	D3D11_BUFFER_UAV
    // DEBUG: typedef struct D3D11_TEX1D_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D11_TEX1D_UAV
    // DEBUG: typedef struct D3D11_TEX1D_ARRAY_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX1D_ARRAY_UAV
    // DEBUG: typedef struct D3D11_TEX2D_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D11_TEX2D_UAV
    // DEBUG: typedef struct D3D11_TEX2D_ARRAY_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX2D_ARRAY_UAV
    // DEBUG: typedef struct D3D11_TEX3D_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstWSlice;
    // DEBUG:     UINT WSize;
    // DEBUG:     } 	D3D11_TEX3D_UAV
    // DEBUG: typedef struct D3D11_UNORDERED_ACCESS_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_UAV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_BUFFER_UAV Buffer;
    // DEBUG:         D3D11_TEX1D_UAV Texture1D;
    // DEBUG:         D3D11_TEX1D_ARRAY_UAV Texture1DArray;
    // DEBUG:         D3D11_TEX2D_UAV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_UAV Texture2DArray;
    // DEBUG:         D3D11_TEX3D_UAV Texture3D;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_UNORDERED_ACCESS_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_RTV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_RTV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_RTV_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE1DARRAY	= 3,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE2D	= 4,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE2DARRAY	= 5,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE2DMS	= 6,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    // DEBUG:         D3D11_RTV_DIMENSION_TEXTURE3D	= 8
    // DEBUG:     } 	D3D11_RTV_DIMENSION
    // DEBUG: typedef struct D3D11_BUFFER_RTV
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT FirstElement;
    // DEBUG:         UINT ElementOffset;
    // DEBUG:         } 	;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT NumElements;
    // DEBUG:         UINT ElementWidth;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_BUFFER_RTV
    // DEBUG: typedef struct D3D11_TEX1D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D11_TEX1D_RTV
    // DEBUG: typedef struct D3D11_TEX1D_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX1D_ARRAY_RTV
    // DEBUG: typedef struct D3D11_TEX2D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D11_TEX2D_RTV
    // DEBUG: typedef struct D3D11_TEX2D_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX2D_ARRAY_RTV
    // DEBUG: typedef struct D3D11_TEX2DMS_RTV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     } 	D3D11_TEX2DMS_RTV
    // DEBUG: typedef struct D3D11_TEX2DMS_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX2DMS_ARRAY_RTV
    // DEBUG: typedef struct D3D11_TEX3D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstWSlice;
    // DEBUG:     UINT WSize;
    // DEBUG:     } 	D3D11_TEX3D_RTV
    // DEBUG: typedef struct D3D11_RENDER_TARGET_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_RTV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_BUFFER_RTV Buffer;
    // DEBUG:         D3D11_TEX1D_RTV Texture1D;
    // DEBUG:         D3D11_TEX1D_ARRAY_RTV Texture1DArray;
    // DEBUG:         D3D11_TEX2D_RTV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_RTV Texture2DArray;
    // DEBUG:         D3D11_TEX2DMS_RTV Texture2DMS;
    // DEBUG:         D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
    // DEBUG:         D3D11_TEX3D_RTV Texture3D;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_RENDER_TARGET_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_DSV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_DSV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE1D	= 1,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE1DARRAY	= 2,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE2D	= 3,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE2DARRAY	= 4,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE2DMS	= 5,
    // DEBUG:         D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY	= 6
    // DEBUG:     } 	D3D11_DSV_DIMENSION
    // DEBUG: typedef struct D3D11_TEX1D_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D11_TEX1D_DSV
    // DEBUG: typedef struct D3D11_TEX1D_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX1D_ARRAY_DSV
    // DEBUG: typedef struct D3D11_TEX2D_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D11_TEX2D_DSV
    // DEBUG: typedef struct D3D11_TEX2D_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX2D_ARRAY_DSV
    // DEBUG: typedef struct D3D11_TEX2DMS_DSV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     } 	D3D11_TEX2DMS_DSV
    // DEBUG: typedef struct D3D11_TEX2DMS_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX2DMS_ARRAY_DSV
    // DEBUG: typedef struct D3D11_DEPTH_STENCIL_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_DSV_DIMENSION ViewDimension;
    // DEBUG:     UINT Flags;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_TEX1D_DSV Texture1D;
    // DEBUG:         D3D11_TEX1D_ARRAY_DSV Texture1DArray;
    // DEBUG:         D3D11_TEX2D_DSV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_DSV Texture2DArray;
    // DEBUG:         D3D11_TEX2DMS_DSV Texture2DMS;
    // DEBUG:         D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_DEPTH_STENCIL_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_INPUT_CLASSIFICATION
    // DEBUG:     {
    // DEBUG:         D3D11_INPUT_PER_VERTEX_DATA	= 0,
    // DEBUG:         D3D11_INPUT_PER_INSTANCE_DATA	= 1
    // DEBUG:     } 	D3D11_INPUT_CLASSIFICATION
    // DEBUG: typedef struct D3D11_INPUT_ELEMENT_DESC
    // DEBUG:     {
    // DEBUG:     LPCSTR SemanticName;
    // DEBUG:     UINT SemanticIndex;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     UINT InputSlot;
    // DEBUG:     UINT AlignedByteOffset;
    // DEBUG:     D3D11_INPUT_CLASSIFICATION InputSlotClass;
    // DEBUG:     UINT InstanceDataStepRate;
    // DEBUG:     } 	D3D11_INPUT_ELEMENT_DESC
    // DEBUG: typedef struct D3D11_CLASS_INSTANCE_DESC
    // DEBUG:     {
    // DEBUG:     UINT InstanceId;
    // DEBUG:     UINT InstanceIndex;
    // DEBUG:     UINT TypeId;
    // DEBUG:     UINT ConstantBuffer;
    // DEBUG:     UINT BaseConstantBufferOffset;
    // DEBUG:     UINT BaseTexture;
    // DEBUG:     UINT BaseSampler;
    // DEBUG:     BOOL Created;
    // DEBUG:     } 	D3D11_CLASS_INSTANCE_DESC
    // DEBUG: typedef struct D3D11_SO_DECLARATION_ENTRY
    // DEBUG:     {
    // DEBUG:     UINT Stream;
    // DEBUG:     LPCSTR SemanticName;
    // DEBUG:     UINT SemanticIndex;
    // DEBUG:     BYTE StartComponent;
    // DEBUG:     BYTE ComponentCount;
    // DEBUG:     BYTE OutputSlot;
    // DEBUG:     } 	D3D11_SO_DECLARATION_ENTRY
    // DEBUG: typedef 
    // DEBUG: enum D3D11_BLEND
    // DEBUG:     {
    // DEBUG:         D3D11_BLEND_ZERO	= 1,
    // DEBUG:         D3D11_BLEND_ONE	= 2,
    // DEBUG:         D3D11_BLEND_SRC_COLOR	= 3,
    // DEBUG:         D3D11_BLEND_INV_SRC_COLOR	= 4,
    // DEBUG:         D3D11_BLEND_SRC_ALPHA	= 5,
    // DEBUG:         D3D11_BLEND_INV_SRC_ALPHA	= 6,
    // DEBUG:         D3D11_BLEND_DEST_ALPHA	= 7,
    // DEBUG:         D3D11_BLEND_INV_DEST_ALPHA	= 8,
    // DEBUG:         D3D11_BLEND_DEST_COLOR	= 9,
    // DEBUG:         D3D11_BLEND_INV_DEST_COLOR	= 10,
    // DEBUG:         D3D11_BLEND_SRC_ALPHA_SAT	= 11,
    // DEBUG:         D3D11_BLEND_BLEND_FACTOR	= 14,
    // DEBUG:         D3D11_BLEND_INV_BLEND_FACTOR	= 15,
    // DEBUG:         D3D11_BLEND_SRC1_COLOR	= 16,
    // DEBUG:         D3D11_BLEND_INV_SRC1_COLOR	= 17,
    // DEBUG:         D3D11_BLEND_SRC1_ALPHA	= 18,
    // DEBUG:         D3D11_BLEND_INV_SRC1_ALPHA	= 19
    // DEBUG:     } 	D3D11_BLEND
    // DEBUG: typedef 
    // DEBUG: enum D3D11_BLEND_OP
    // DEBUG:     {
    // DEBUG:         D3D11_BLEND_OP_ADD	= 1,
    // DEBUG:         D3D11_BLEND_OP_SUBTRACT	= 2,
    // DEBUG:         D3D11_BLEND_OP_REV_SUBTRACT	= 3,
    // DEBUG:         D3D11_BLEND_OP_MIN	= 4,
    // DEBUG:         D3D11_BLEND_OP_MAX	= 5
    // DEBUG:     } 	D3D11_BLEND_OP
    // DEBUG: typedef struct D3D11_RENDER_TARGET_BLEND_DESC
    // DEBUG:     {
    // DEBUG:     BOOL BlendEnable;
    // DEBUG:     D3D11_BLEND SrcBlend;
    // DEBUG:     D3D11_BLEND DestBlend;
    // DEBUG:     D3D11_BLEND_OP BlendOp;
    // DEBUG:     D3D11_BLEND SrcBlendAlpha;
    // DEBUG:     D3D11_BLEND DestBlendAlpha;
    // DEBUG:     D3D11_BLEND_OP BlendOpAlpha;
    // DEBUG:     UINT8 RenderTargetWriteMask;
    // DEBUG:     } 	D3D11_RENDER_TARGET_BLEND_DESC
    // DEBUG: typedef struct D3D11_BLEND_DESC
    // DEBUG:     {
    // DEBUG:     BOOL AlphaToCoverageEnable;
    // DEBUG:     BOOL IndependentBlendEnable;
    // DEBUG:     D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[ 8 ];
    // DEBUG:     } 	D3D11_BLEND_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_DEPTH_WRITE_MASK
    // DEBUG:     {
    // DEBUG:         D3D11_DEPTH_WRITE_MASK_ZERO	= 0,
    // DEBUG:         D3D11_DEPTH_WRITE_MASK_ALL	= 1
    // DEBUG:     } 	D3D11_DEPTH_WRITE_MASK
    // DEBUG: typedef 
    // DEBUG: enum D3D11_COMPARISON_FUNC
    // DEBUG:     {
    // DEBUG:         D3D11_COMPARISON_NEVER	= 1,
    // DEBUG:         D3D11_COMPARISON_LESS	= 2,
    // DEBUG:         D3D11_COMPARISON_EQUAL	= 3,
    // DEBUG:         D3D11_COMPARISON_LESS_EQUAL	= 4,
    // DEBUG:         D3D11_COMPARISON_GREATER	= 5,
    // DEBUG:         D3D11_COMPARISON_NOT_EQUAL	= 6,
    // DEBUG:         D3D11_COMPARISON_GREATER_EQUAL	= 7,
    // DEBUG:         D3D11_COMPARISON_ALWAYS	= 8
    // DEBUG:     } 	D3D11_COMPARISON_FUNC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_STENCIL_OP
    // DEBUG:     {
    // DEBUG:         D3D11_STENCIL_OP_KEEP	= 1,
    // DEBUG:         D3D11_STENCIL_OP_ZERO	= 2,
    // DEBUG:         D3D11_STENCIL_OP_REPLACE	= 3,
    // DEBUG:         D3D11_STENCIL_OP_INCR_SAT	= 4,
    // DEBUG:         D3D11_STENCIL_OP_DECR_SAT	= 5,
    // DEBUG:         D3D11_STENCIL_OP_INVERT	= 6,
    // DEBUG:         D3D11_STENCIL_OP_INCR	= 7,
    // DEBUG:         D3D11_STENCIL_OP_DECR	= 8
    // DEBUG:     } 	D3D11_STENCIL_OP
    // DEBUG: typedef struct D3D11_DEPTH_STENCILOP_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_STENCIL_OP StencilFailOp;
    // DEBUG:     D3D11_STENCIL_OP StencilDepthFailOp;
    // DEBUG:     D3D11_STENCIL_OP StencilPassOp;
    // DEBUG:     D3D11_COMPARISON_FUNC StencilFunc;
    // DEBUG:     } 	D3D11_DEPTH_STENCILOP_DESC
    // DEBUG: typedef struct D3D11_DEPTH_STENCIL_DESC
    // DEBUG:     {
    // DEBUG:     BOOL DepthEnable;
    // DEBUG:     D3D11_DEPTH_WRITE_MASK DepthWriteMask;
    // DEBUG:     D3D11_COMPARISON_FUNC DepthFunc;
    // DEBUG:     BOOL StencilEnable;
    // DEBUG:     UINT8 StencilReadMask;
    // DEBUG:     UINT8 StencilWriteMask;
    // DEBUG:     D3D11_DEPTH_STENCILOP_DESC FrontFace;
    // DEBUG:     D3D11_DEPTH_STENCILOP_DESC BackFace;
    // DEBUG:     } 	D3D11_DEPTH_STENCIL_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_FILL_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_FILL_WIREFRAME	= 2,
    // DEBUG:         D3D11_FILL_SOLID	= 3
    // DEBUG:     } 	D3D11_FILL_MODE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_CULL_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_CULL_NONE	= 1,
    // DEBUG:         D3D11_CULL_FRONT	= 2,
    // DEBUG:         D3D11_CULL_BACK	= 3
    // DEBUG:     } 	D3D11_CULL_MODE
    // DEBUG: typedef struct D3D11_RASTERIZER_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_FILL_MODE FillMode;
    // DEBUG:     D3D11_CULL_MODE CullMode;
    // DEBUG:     BOOL FrontCounterClockwise;
    // DEBUG:     INT DepthBias;
    // DEBUG:     FLOAT DepthBiasClamp;
    // DEBUG:     FLOAT SlopeScaledDepthBias;
    // DEBUG:     BOOL DepthClipEnable;
    // DEBUG:     BOOL ScissorEnable;
    // DEBUG:     BOOL MultisampleEnable;
    // DEBUG:     BOOL AntialiasedLineEnable;
    // DEBUG:     } 	D3D11_RASTERIZER_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_FILTER
    // DEBUG:     {
    // DEBUG:         D3D11_FILTER_MIN_MAG_MIP_POINT	= 0,
    // DEBUG:         D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR	= 0x1,
    // DEBUG:         D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x4,
    // DEBUG:         D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR	= 0x5,
    // DEBUG:         D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT	= 0x10,
    // DEBUG:         D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x11,
    // DEBUG:         D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT	= 0x14,
    // DEBUG:         D3D11_FILTER_MIN_MAG_MIP_LINEAR	= 0x15,
    // DEBUG:         D3D11_FILTER_ANISOTROPIC	= 0x55,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT	= 0x80,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= 0x81,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x84,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= 0x85,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= 0x90,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x91,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= 0x94,
    // DEBUG:         D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	= 0x95,
    // DEBUG:         D3D11_FILTER_COMPARISON_ANISOTROPIC	= 0xd5,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT	= 0x100,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x101,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x104,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x105,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x110,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x111,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x114,
    // DEBUG:         D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR	= 0x115,
    // DEBUG:         D3D11_FILTER_MINIMUM_ANISOTROPIC	= 0x155,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT	= 0x180,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR	= 0x181,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x184,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR	= 0x185,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT	= 0x190,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x191,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT	= 0x194,
    // DEBUG:         D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR	= 0x195,
    // DEBUG:         D3D11_FILTER_MAXIMUM_ANISOTROPIC	= 0x1d5
    // DEBUG:     } 	D3D11_FILTER
    // DEBUG: typedef 
    // DEBUG: enum D3D11_TEXTURE_ADDRESS_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_TEXTURE_ADDRESS_WRAP	= 1,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_MIRROR	= 2,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_CLAMP	= 3,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_BORDER	= 4,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_MIRROR_ONCE	= 5
    // DEBUG:     } 	D3D11_TEXTURE_ADDRESS_MODE
    // DEBUG: typedef struct D3D11_SAMPLER_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_FILTER Filter;
    // DEBUG:     D3D11_TEXTURE_ADDRESS_MODE AddressU;
    // DEBUG:     D3D11_TEXTURE_ADDRESS_MODE AddressV;
    // DEBUG:     D3D11_TEXTURE_ADDRESS_MODE AddressW;
    // DEBUG:     FLOAT MipLODBias;
    // DEBUG:     UINT MaxAnisotropy;
    // DEBUG:     D3D11_COMPARISON_FUNC ComparisonFunc;
    // DEBUG:     FLOAT BorderColor[ 4 ];
    // DEBUG:     FLOAT MinLOD;
    // DEBUG:     FLOAT MaxLOD;
    // DEBUG:     } 	D3D11_SAMPLER_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_QUERY
    // DEBUG:     {
    // DEBUG:         D3D11_QUERY_EVENT	= 0,
    // DEBUG:         D3D11_QUERY_OCCLUSION	= ( D3D11_QUERY_EVENT + 1 ) ,
    // DEBUG:         D3D11_QUERY_TIMESTAMP	= ( D3D11_QUERY_OCCLUSION + 1 ) ,
    // DEBUG:         D3D11_QUERY_TIMESTAMP_DISJOINT	= ( D3D11_QUERY_TIMESTAMP + 1 ) ,
    // DEBUG:         D3D11_QUERY_PIPELINE_STATISTICS	= ( D3D11_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
    // DEBUG:         D3D11_QUERY_OCCLUSION_PREDICATE	= ( D3D11_QUERY_PIPELINE_STATISTICS + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS	= ( D3D11_QUERY_OCCLUSION_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE	= ( D3D11_QUERY_SO_STATISTICS + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS_STREAM0	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0	= ( D3D11_QUERY_SO_STATISTICS_STREAM0 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS_STREAM1	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1	= ( D3D11_QUERY_SO_STATISTICS_STREAM1 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS_STREAM2	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2	= ( D3D11_QUERY_SO_STATISTICS_STREAM2 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_STATISTICS_STREAM3	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1 ) ,
    // DEBUG:         D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3	= ( D3D11_QUERY_SO_STATISTICS_STREAM3 + 1 ) 
    // DEBUG:     } 	D3D11_QUERY
    // DEBUG: typedef struct D3D11_QUERY_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_QUERY Query;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D11_QUERY_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_COUNTER
    // DEBUG:     {
    // DEBUG:         D3D11_COUNTER_DEVICE_DEPENDENT_0	= 0x40000000
    // DEBUG:     } 	D3D11_COUNTER
    // DEBUG: typedef struct D3D11_COUNTER_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_COUNTER Counter;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D11_COUNTER_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_MAP
    // DEBUG:     {
    // DEBUG:         D3D11_MAP_READ	= 1,
    // DEBUG:         D3D11_MAP_WRITE	= 2,
    // DEBUG:         D3D11_MAP_READ_WRITE	= 3,
    // DEBUG:         D3D11_MAP_WRITE_DISCARD	= 4,
    // DEBUG:         D3D11_MAP_WRITE_NO_OVERWRITE	= 5
    // DEBUG:     } 	D3D11_MAP
    // DEBUG: typedef struct D3D11_MAPPED_SUBRESOURCE
    // DEBUG:     {
    // DEBUG:     void *pData;
    // DEBUG:     UINT RowPitch;
    // DEBUG:     UINT DepthPitch;
    // DEBUG:     } 	D3D11_MAPPED_SUBRESOURCE
    // DEBUG: typedef D3D_PRIMITIVE_TOPOLOGY D3D11_PRIMITIVE_TOPOLOGY
    // DEBUG: typedef struct D3D11_VIEWPORT
    // DEBUG:     {
    // DEBUG:     FLOAT TopLeftX;
    // DEBUG:     FLOAT TopLeftY;
    // DEBUG:     FLOAT Width;
    // DEBUG:     FLOAT Height;
    // DEBUG:     FLOAT MinDepth;
    // DEBUG:     FLOAT MaxDepth;
    // DEBUG:     } 	D3D11_VIEWPORT
    // DEBUG: typedef struct D3D11_BOX
    // DEBUG:     {
    // DEBUG:     UINT left;
    // DEBUG:     UINT top;
    // DEBUG:     UINT front;
    // DEBUG:     UINT right;
    // DEBUG:     UINT bottom;
    // DEBUG:     UINT back;
    // DEBUG:     } 	D3D11_BOX
    // DEBUG: typedef 
    // DEBUG: enum D3D11_DEVICE_CONTEXT_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_DEVICE_CONTEXT_IMMEDIATE	= 0,
    // DEBUG:         D3D11_DEVICE_CONTEXT_DEFERRED	= ( D3D11_DEVICE_CONTEXT_IMMEDIATE + 1 ) 
    // DEBUG:     } 	D3D11_DEVICE_CONTEXT_TYPE
    // DEBUG: typedef interface ID3D11DeviceContext ID3D11DeviceContext
    // DEBUG: typedef struct D3D11_COUNTER_INFO
    // DEBUG:     {
    // DEBUG:     D3D11_COUNTER LastDeviceDependentCounter;
    // DEBUG:     UINT NumSimultaneousCounters;
    // DEBUG:     UINT8 NumDetectableParallelUnits;
    // DEBUG:     } 	D3D11_COUNTER_INFO
    // DEBUG: typedef 
    // DEBUG: enum D3D11_COUNTER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_COUNTER_TYPE_FLOAT32	= 0,
    // DEBUG:         D3D11_COUNTER_TYPE_UINT16	= ( D3D11_COUNTER_TYPE_FLOAT32 + 1 ) ,
    // DEBUG:         D3D11_COUNTER_TYPE_UINT32	= ( D3D11_COUNTER_TYPE_UINT16 + 1 ) ,
    // DEBUG:         D3D11_COUNTER_TYPE_UINT64	= ( D3D11_COUNTER_TYPE_UINT32 + 1 ) 
    // DEBUG:     } 	D3D11_COUNTER_TYPE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_FEATURE
    // DEBUG:     {
    // DEBUG:         D3D11_FEATURE_THREADING	= 0,
    // DEBUG:         D3D11_FEATURE_DOUBLES	= ( D3D11_FEATURE_THREADING + 1 ) ,
    // DEBUG:         D3D11_FEATURE_FORMAT_SUPPORT	= ( D3D11_FEATURE_DOUBLES + 1 ) ,
    // DEBUG:         D3D11_FEATURE_FORMAT_SUPPORT2	= ( D3D11_FEATURE_FORMAT_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS	= ( D3D11_FEATURE_FORMAT_SUPPORT2 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS	= ( D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS + 1 ) ,
    // DEBUG:         D3D11_FEATURE_ARCHITECTURE_INFO	= ( D3D11_FEATURE_D3D11_OPTIONS + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D9_OPTIONS	= ( D3D11_FEATURE_ARCHITECTURE_INFO + 1 ) ,
    // DEBUG:         D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT	= ( D3D11_FEATURE_D3D9_OPTIONS + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D9_SHADOW_SUPPORT	= ( D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS1	= ( D3D11_FEATURE_D3D9_SHADOW_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT	= ( D3D11_FEATURE_D3D11_OPTIONS1 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_MARKER_SUPPORT	= ( D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D9_OPTIONS1	= ( D3D11_FEATURE_MARKER_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS2	= ( D3D11_FEATURE_D3D9_OPTIONS1 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS3	= ( D3D11_FEATURE_D3D11_OPTIONS2 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT	= ( D3D11_FEATURE_D3D11_OPTIONS3 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS4	= ( D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_FEATURE_SHADER_CACHE	= ( D3D11_FEATURE_D3D11_OPTIONS4 + 1 ) ,
    // DEBUG:         D3D11_FEATURE_D3D11_OPTIONS5	= ( D3D11_FEATURE_SHADER_CACHE + 1 ) ,
    // DEBUG:         D3D11_FEATURE_DISPLAYABLE	= ( D3D11_FEATURE_D3D11_OPTIONS5 + 1 ) 
    // DEBUG:     } 	D3D11_FEATURE
    // DEBUG: typedef struct D3D11_VIDEO_DECODER_DESC
    // DEBUG:     {
    // DEBUG:     GUID Guid;
    // DEBUG:     UINT SampleWidth;
    // DEBUG:     UINT SampleHeight;
    // DEBUG:     DXGI_FORMAT OutputFormat;
    // DEBUG:     } 	D3D11_VIDEO_DECODER_DESC
    // DEBUG: typedef struct D3D11_VIDEO_DECODER_CONFIG
    // DEBUG:     {
    // DEBUG:     GUID guidConfigBitstreamEncryption;
    // DEBUG:     GUID guidConfigMBcontrolEncryption;
    // DEBUG:     GUID guidConfigResidDiffEncryption;
    // DEBUG:     UINT ConfigBitstreamRaw;
    // DEBUG:     UINT ConfigMBcontrolRasterOrder;
    // DEBUG:     UINT ConfigResidDiffHost;
    // DEBUG:     UINT ConfigSpatialResid8;
    // DEBUG:     UINT ConfigResid8Subtraction;
    // DEBUG:     UINT ConfigSpatialHost8or9Clipping;
    // DEBUG:     UINT ConfigSpatialResidInterleaved;
    // DEBUG:     UINT ConfigIntraResidUnsigned;
    // DEBUG:     UINT ConfigResidDiffAccelerator;
    // DEBUG:     UINT ConfigHostInverseScan;
    // DEBUG:     UINT ConfigSpecificIDCT;
    // DEBUG:     UINT Config4GroupedCoefs;
    // DEBUG:     USHORT ConfigMinRenderTargetBuffCount;
    // DEBUG:     USHORT ConfigDecoderSpecific;
    // DEBUG:     } 	D3D11_VIDEO_DECODER_CONFIG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_FRAME_FORMAT
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE	= 0,
    // DEBUG:         D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST	= 1,
    // DEBUG:         D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST	= 2
    // DEBUG:     } 	D3D11_VIDEO_FRAME_FORMAT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_USAGE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_USAGE_PLAYBACK_NORMAL	= 0,
    // DEBUG:         D3D11_VIDEO_USAGE_OPTIMAL_SPEED	= 1,
    // DEBUG:         D3D11_VIDEO_USAGE_OPTIMAL_QUALITY	= 2
    // DEBUG:     } 	D3D11_VIDEO_USAGE
    // DEBUG: typedef struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
    // DEBUG:     DXGI_RATIONAL InputFrameRate;
    // DEBUG:     UINT InputWidth;
    // DEBUG:     UINT InputHeight;
    // DEBUG:     DXGI_RATIONAL OutputFrameRate;
    // DEBUG:     UINT OutputWidth;
    // DEBUG:     UINT OutputHeight;
    // DEBUG:     D3D11_VIDEO_USAGE Usage;
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_CONTENT_DESC
    // DEBUG: typedef struct D3D11_VIDEO_PROCESSOR_CAPS
    // DEBUG:     {
    // DEBUG:     UINT DeviceCaps;
    // DEBUG:     UINT FeatureCaps;
    // DEBUG:     UINT FilterCaps;
    // DEBUG:     UINT InputFormatCaps;
    // DEBUG:     UINT AutoStreamCaps;
    // DEBUG:     UINT StereoCaps;
    // DEBUG:     UINT RateConversionCapsCount;
    // DEBUG:     UINT MaxInputStreams;
    // DEBUG:     UINT MaxStreamStates;
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_CAPS
    // DEBUG: typedef struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
    // DEBUG:     {
    // DEBUG:     UINT PastFrames;
    // DEBUG:     UINT FutureFrames;
    // DEBUG:     UINT ProcessorCaps;
    // DEBUG:     UINT ITelecineCaps;
    // DEBUG:     UINT CustomRateCount;
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
    // DEBUG: typedef struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
    // DEBUG:     {
    // DEBUG:     DXGI_RATIONAL CustomRate;
    // DEBUG:     UINT OutputFrames;
    // DEBUG:     BOOL InputInterlaced;
    // DEBUG:     UINT InputFramesOrFields;
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FILTER
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_HUE	= 2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_SATURATION	= 3,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION	= 4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT	= 5,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING	= 6,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT	= 7
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_FILTER
    // DEBUG: typedef struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
    // DEBUG:     {
    // DEBUG:     int Minimum;
    // DEBUG:     int Maximum;
    // DEBUG:     int Default;
    // DEBUG:     float Multiplier;
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_FILTER_RANGE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VDOV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_VDOV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_VDOV_DIMENSION_TEXTURE2D	= 1
    // DEBUG:     } 	D3D11_VDOV_DIMENSION
    // DEBUG: typedef struct D3D11_TEX2D_VDOV
    // DEBUG:     {
    // DEBUG:     UINT ArraySlice;
    // DEBUG:     } 	D3D11_TEX2D_VDOV
    // DEBUG: typedef struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     GUID DecodeProfile;
    // DEBUG:     D3D11_VDOV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_TEX2D_VDOV Texture2D;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VPIV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_VPIV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_VPIV_DIMENSION_TEXTURE2D	= 1
    // DEBUG:     } 	D3D11_VPIV_DIMENSION
    // DEBUG: typedef struct D3D11_TEX2D_VPIV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT ArraySlice;
    // DEBUG:     } 	D3D11_TEX2D_VPIV
    // DEBUG: typedef struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     UINT FourCC;
    // DEBUG:     D3D11_VPIV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_TEX2D_VPIV Texture2D;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VPOV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D11_VPOV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D11_VPOV_DIMENSION_TEXTURE2D	= 1,
    // DEBUG:         D3D11_VPOV_DIMENSION_TEXTURE2DARRAY	= 2
    // DEBUG:     } 	D3D11_VPOV_DIMENSION
    // DEBUG: typedef struct D3D11_TEX2D_VPOV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D11_TEX2D_VPOV
    // DEBUG: typedef struct D3D11_TEX2D_ARRAY_VPOV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D11_TEX2D_ARRAY_VPOV
    // DEBUG: typedef struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_VPOV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_TEX2D_VPOV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_VPOV Texture2DArray;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_DECODER_BUFFER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS	= 0,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL	= 1,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE	= 2,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL	= 3,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX	= 4,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL	= 5,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_BITSTREAM	= 6,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR	= 7,
    // DEBUG:         D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN	= 8
    // DEBUG:     } 	D3D11_VIDEO_DECODER_BUFFER_TYPE
    // DEBUG: typedef struct D3D11_ENCRYPTED_BLOCK_INFO
    // DEBUG:     {
    // DEBUG:     UINT NumEncryptedBytesAtBeginning;
    // DEBUG:     UINT NumBytesInSkipPattern;
    // DEBUG:     UINT NumBytesInEncryptPattern;
    // DEBUG:     } 	D3D11_ENCRYPTED_BLOCK_INFO
    // DEBUG: typedef struct D3D11_VIDEO_DECODER_BUFFER_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
    // DEBUG:     UINT BufferIndex;
    // DEBUG:     UINT DataOffset;
    // DEBUG:     UINT DataSize;
    // DEBUG:     UINT FirstMBaddress;
    // DEBUG:     UINT NumMBsInBuffer;
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT Stride;
    // DEBUG:     UINT ReservedBits;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_opt_(IVSize)  void *pIV;
    // DEBUG:     UINT IVSize;
    // DEBUG:     BOOL PartialEncryption;
    // DEBUG:     D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
    // DEBUG:     } 	D3D11_VIDEO_DECODER_BUFFER_DESC
    // DEBUG: typedef HRESULT APP_DEPRECATED_HRESULT
    // DEBUG: typedef struct D3D11_VIDEO_DECODER_EXTENSION
    // DEBUG:     {
    // DEBUG:     UINT Function;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(PrivateInputDataSize)  void *pPrivateInputData;
    // DEBUG:     UINT PrivateInputDataSize;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(PrivateOutputDataSize)  void *pPrivateOutputData;
    // DEBUG:     UINT PrivateOutputDataSize;
    // DEBUG:     UINT ResourceCount;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_opt_(ResourceCount)  ID3D11Resource **ppResourceList;
    // DEBUG:     } 	D3D11_VIDEO_DECODER_EXTENSION
    // DEBUG: typedef struct D3D11_VIDEO_COLOR_YCbCrA
    // DEBUG:     {
    // DEBUG:     float Y;
    // DEBUG:     float Cb;
    // DEBUG:     float Cr;
    // DEBUG:     float A;
    // DEBUG:     } 	D3D11_VIDEO_COLOR_YCbCrA
    // DEBUG: typedef struct D3D11_VIDEO_COLOR_RGBA
    // DEBUG:     {
    // DEBUG:     float R;
    // DEBUG:     float G;
    // DEBUG:     float B;
    // DEBUG:     float A;
    // DEBUG:     } 	D3D11_VIDEO_COLOR_RGBA
    // DEBUG: typedef struct D3D11_VIDEO_COLOR
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_VIDEO_COLOR_YCbCrA YCbCr;
    // DEBUG:         D3D11_VIDEO_COLOR_RGBA RGBA;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D11_VIDEO_COLOR
    // DEBUG: typedef struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
    // DEBUG:     {
    // DEBUG:     UINT Usage	: 1;
    // DEBUG:     UINT RGB_Range	: 1;
    // DEBUG:     UINT YCbCr_Matrix	: 1;
    // DEBUG:     UINT YCbCr_xvYCC	: 1;
    // DEBUG:     UINT Nominal_Range	: 2;
    // DEBUG:     UINT Reserved	: 26;
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_COLOR_SPACE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION	= 2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM	= 3
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM	= 2
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL	= 2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE	= 3,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET	= 4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED	= 5,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED	= 6,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD	= 7
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1	= 2
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
    // DEBUG: typedef struct D3D11_VIDEO_PROCESSOR_STREAM
    // DEBUG:     {
    // DEBUG:     BOOL Enable;
    // DEBUG:     UINT OutputIndex;
    // DEBUG:     UINT InputFrameOrField;
    // DEBUG:     UINT PastFrames;
    // DEBUG:     UINT FutureFrames;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(PastFrames)  ID3D11VideoProcessorInputView **ppPastSurfaces;
    // DEBUG:     ID3D11VideoProcessorInputView *pInputSurface;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(FutureFrames)  ID3D11VideoProcessorInputView **ppFutureSurfaces;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_opt_(PastFrames)  ID3D11VideoProcessorInputView **ppPastSurfacesRight;
    // DEBUG:     ID3D11VideoProcessorInputView *pInputSurfaceRight;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(FutureFrames)  ID3D11VideoProcessorInputView **ppFutureSurfacesRight;
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_STREAM
    // DEBUG: typedef struct D3D11_OMAC
    // DEBUG:     {
    // DEBUG:     BYTE Omac[ 16 ];
    // DEBUG:     } 	D3D11_OMAC
    // DEBUG: typedef struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_OMAC omac;
    // DEBUG:     GUID ConfigureType;
    // DEBUG:     HANDLE hChannel;
    // DEBUG:     UINT SequenceNumber;
    // DEBUG:     HRESULT ReturnCode;
    // DEBUG:     } 	D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_ROTATION
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ROTATION_90	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ROTATION_180	= 2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ROTATION_270	= 3
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_ROTATION
    // DEBUG: typedef 
    // DEBUG: enum D3D11_AUTHENTICATED_CHANNEL_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_AUTHENTICATED_CHANNEL_D3D11	= 1,
    // DEBUG:         D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE	= 2,
    // DEBUG:         D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE	= 3
    // DEBUG:     } 	D3D11_AUTHENTICATED_CHANNEL_TYPE
    // DEBUG: typedef struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
    // DEBUG:     {
    // DEBUG:     UINT Caps;
    // DEBUG:     UINT KeyExchangeTypeCount;
    // DEBUG:     UINT BlockAlignmentSize;
    // DEBUG:     ULONGLONG ProtectedMemorySize;
    // DEBUG:     } 	D3D11_VIDEO_CONTENT_PROTECTION_CAPS
    // DEBUG: typedef D3D_PRIMITIVE D3D11_PRIMITIVE
    // DEBUG: typedef struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS
    // DEBUG:     {
    // DEBUG:     UINT VertexCountPerInstance;
    // DEBUG:     UINT InstanceCount;
    // DEBUG:     UINT StartVertexLocation;
    // DEBUG:     UINT StartInstanceLocation;
    // DEBUG:     } 	D3D11_DRAW_INSTANCED_INDIRECT_ARGS
    // DEBUG: typedef struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
    // DEBUG:     {
    // DEBUG:     UINT IndexCountPerInstance;
    // DEBUG:     UINT InstanceCount;
    // DEBUG:     UINT StartIndexLocation;
    // DEBUG:     INT BaseVertexLocation;
    // DEBUG:     UINT StartInstanceLocation;
    // DEBUG:     } 	D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_BIND_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_BIND_VERTEX_BUFFER	= 0x1L,
    // DEBUG:         D3D11_BIND_INDEX_BUFFER	= 0x2L,
    // DEBUG:         D3D11_BIND_CONSTANT_BUFFER	= 0x4L,
    // DEBUG:         D3D11_BIND_SHADER_RESOURCE	= 0x8L,
    // DEBUG:         D3D11_BIND_STREAM_OUTPUT	= 0x10L,
    // DEBUG:         D3D11_BIND_RENDER_TARGET	= 0x20L,
    // DEBUG:         D3D11_BIND_DEPTH_STENCIL	= 0x40L,
    // DEBUG:         D3D11_BIND_UNORDERED_ACCESS	= 0x80L,
    // DEBUG:         D3D11_BIND_DECODER	= 0x200L,
    // DEBUG:         D3D11_BIND_VIDEO_ENCODER	= 0x400L
    // DEBUG:     } 	D3D11_BIND_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_CPU_ACCESS_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_CPU_ACCESS_WRITE	= 0x10000L,
    // DEBUG:         D3D11_CPU_ACCESS_READ	= 0x20000L
    // DEBUG:     } 	D3D11_CPU_ACCESS_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_RESOURCE_MISC_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_RESOURCE_MISC_GENERATE_MIPS	= 0x1L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED	= 0x2L,
    // DEBUG:         D3D11_RESOURCE_MISC_TEXTURECUBE	= 0x4L,
    // DEBUG:         D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS	= 0x10L,
    // DEBUG:         D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS	= 0x20L,
    // DEBUG:         D3D11_RESOURCE_MISC_BUFFER_STRUCTURED	= 0x40L,
    // DEBUG:         D3D11_RESOURCE_MISC_RESOURCE_CLAMP	= 0x80L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX	= 0x100L,
    // DEBUG:         D3D11_RESOURCE_MISC_GDI_COMPATIBLE	= 0x200L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED_NTHANDLE	= 0x800L,
    // DEBUG:         D3D11_RESOURCE_MISC_RESTRICTED_CONTENT	= 0x1000L,
    // DEBUG:         D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE	= 0x2000L,
    // DEBUG:         D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER	= 0x4000L,
    // DEBUG:         D3D11_RESOURCE_MISC_GUARDED	= 0x8000L,
    // DEBUG:         D3D11_RESOURCE_MISC_TILE_POOL	= 0x20000L,
    // DEBUG:         D3D11_RESOURCE_MISC_TILED	= 0x40000L,
    // DEBUG:         D3D11_RESOURCE_MISC_HW_PROTECTED	= 0x80000L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE	= 0x100000L,
    // DEBUG:         D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER	= 0x200000L
    // DEBUG:     } 	D3D11_RESOURCE_MISC_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_MAP_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_MAP_FLAG_DO_NOT_WAIT	= 0x100000L
    // DEBUG:     } 	D3D11_MAP_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_RAISE_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR	= 0x1L
    // DEBUG:     } 	D3D11_RAISE_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_CLEAR_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_CLEAR_DEPTH	= 0x1L,
    // DEBUG:         D3D11_CLEAR_STENCIL	= 0x2L
    // DEBUG:     } 	D3D11_CLEAR_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_COLOR_WRITE_ENABLE
    // DEBUG:     {
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_RED	= 1,
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_GREEN	= 2,
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_BLUE	= 4,
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_ALPHA	= 8,
    // DEBUG:         D3D11_COLOR_WRITE_ENABLE_ALL	= ( ( ( D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN )  | D3D11_COLOR_WRITE_ENABLE_BLUE )  | D3D11_COLOR_WRITE_ENABLE_ALPHA ) 
    // DEBUG:     } 	D3D11_COLOR_WRITE_ENABLE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_TEXTURECUBE_FACE
    // DEBUG:     {
    // DEBUG:         D3D11_TEXTURECUBE_FACE_POSITIVE_X	= 0,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_NEGATIVE_X	= 1,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_POSITIVE_Y	= 2,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_NEGATIVE_Y	= 3,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_POSITIVE_Z	= 4,
    // DEBUG:         D3D11_TEXTURECUBE_FACE_NEGATIVE_Z	= 5
    // DEBUG:     } 	D3D11_TEXTURECUBE_FACE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_BUFFEREX_SRV_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_BUFFEREX_SRV_FLAG_RAW	= 0x1
    // DEBUG:     } 	D3D11_BUFFEREX_SRV_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_DSV_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_DSV_READ_ONLY_DEPTH	= 0x1L,
    // DEBUG:         D3D11_DSV_READ_ONLY_STENCIL	= 0x2L
    // DEBUG:     } 	D3D11_DSV_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_BUFFER_UAV_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_BUFFER_UAV_FLAG_RAW	= 0x1,
    // DEBUG:         D3D11_BUFFER_UAV_FLAG_APPEND	= 0x2,
    // DEBUG:         D3D11_BUFFER_UAV_FLAG_COUNTER	= 0x4
    // DEBUG:     } 	D3D11_BUFFER_UAV_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_FILTER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_FILTER_TYPE_POINT	= 0,
    // DEBUG:         D3D11_FILTER_TYPE_LINEAR	= 1
    // DEBUG:     } 	D3D11_FILTER_TYPE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_FILTER_REDUCTION_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_FILTER_REDUCTION_TYPE_STANDARD	= 0,
    // DEBUG:         D3D11_FILTER_REDUCTION_TYPE_COMPARISON	= 1,
    // DEBUG:         D3D11_FILTER_REDUCTION_TYPE_MINIMUM	= 2,
    // DEBUG:         D3D11_FILTER_REDUCTION_TYPE_MAXIMUM	= 3
    // DEBUG:     } 	D3D11_FILTER_REDUCTION_TYPE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_FORMAT_SUPPORT
    // DEBUG:     {
    // DEBUG:         D3D11_FORMAT_SUPPORT_BUFFER	= 0x1,
    // DEBUG:         D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER	= 0x2,
    // DEBUG:         D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER	= 0x4,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SO_BUFFER	= 0x8,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TEXTURE1D	= 0x10,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TEXTURE2D	= 0x20,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TEXTURE3D	= 0x40,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TEXTURECUBE	= 0x80,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_LOAD	= 0x100,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_SAMPLE	= 0x200,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON	= 0x400,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT	= 0x800,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MIP	= 0x1000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MIP_AUTOGEN	= 0x2000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_RENDER_TARGET	= 0x4000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_BLENDABLE	= 0x8000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_DEPTH_STENCIL	= 0x10000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_CPU_LOCKABLE	= 0x20000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE	= 0x40000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_DISPLAY	= 0x80000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT	= 0x100000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET	= 0x200000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD	= 0x400000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_GATHER	= 0x800000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST	= 0x1000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW	= 0x2000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON	= 0x4000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_DECODER_OUTPUT	= 0x8000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT	= 0x10000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT	= 0x20000000,
    // DEBUG:         D3D11_FORMAT_SUPPORT_VIDEO_ENCODER	= 0x40000000
    // DEBUG:     } 	D3D11_FORMAT_SUPPORT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_FORMAT_SUPPORT2
    // DEBUG:     {
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD	= 0x1,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS	= 0x2,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE	= 0x4,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE	= 0x8,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX	= 0x10,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX	= 0x20,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD	= 0x40,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE	= 0x80,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP	= 0x100,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_TILED	= 0x200,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_SHAREABLE	= 0x400,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY	= 0x4000,
    // DEBUG:         D3D11_FORMAT_SUPPORT2_DISPLAYABLE	= 0x10000
    // DEBUG:     } 	D3D11_FORMAT_SUPPORT2
    // DEBUG: typedef 
    // DEBUG: enum D3D11_ASYNC_GETDATA_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_ASYNC_GETDATA_DONOTFLUSH	= 0x1
    // DEBUG:     } 	D3D11_ASYNC_GETDATA_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D11_QUERY_MISC_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_QUERY_MISC_PREDICATEHINT	= 0x1
    // DEBUG:     } 	D3D11_QUERY_MISC_FLAG
    // DEBUG: typedef struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
    // DEBUG:     {
    // DEBUG:     UINT64 Frequency;
    // DEBUG:     BOOL Disjoint;
    // DEBUG:     } 	D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
    // DEBUG: typedef struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
    // DEBUG:     {
    // DEBUG:     UINT64 IAVertices;
    // DEBUG:     UINT64 IAPrimitives;
    // DEBUG:     UINT64 VSInvocations;
    // DEBUG:     UINT64 GSInvocations;
    // DEBUG:     UINT64 GSPrimitives;
    // DEBUG:     UINT64 CInvocations;
    // DEBUG:     UINT64 CPrimitives;
    // DEBUG:     UINT64 PSInvocations;
    // DEBUG:     UINT64 HSInvocations;
    // DEBUG:     UINT64 DSInvocations;
    // DEBUG:     UINT64 CSInvocations;
    // DEBUG:     } 	D3D11_QUERY_DATA_PIPELINE_STATISTICS
    // DEBUG: typedef struct D3D11_QUERY_DATA_SO_STATISTICS
    // DEBUG:     {
    // DEBUG:     UINT64 NumPrimitivesWritten;
    // DEBUG:     UINT64 PrimitivesStorageNeeded;
    // DEBUG:     } 	D3D11_QUERY_DATA_SO_STATISTICS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    // DEBUG:     {
    // DEBUG:         D3D11_STANDARD_MULTISAMPLE_PATTERN	= 0xffffffff,
    // DEBUG:         D3D11_CENTER_MULTISAMPLE_PATTERN	= 0xfffffffe
    // DEBUG:     } 	D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    // DEBUG: typedef struct D3D11_FEATURE_DATA_THREADING
    // DEBUG:     {
    // DEBUG:     BOOL DriverConcurrentCreates;
    // DEBUG:     BOOL DriverCommandLists;
    // DEBUG:     } 	D3D11_FEATURE_DATA_THREADING
    // DEBUG: typedef struct D3D11_FEATURE_DATA_DOUBLES
    // DEBUG:     {
    // DEBUG:     BOOL DoublePrecisionFloatShaderOps;
    // DEBUG:     } 	D3D11_FEATURE_DATA_DOUBLES
    // DEBUG: typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT InFormat;
    // DEBUG:     UINT OutFormatSupport;
    // DEBUG:     } 	D3D11_FEATURE_DATA_FORMAT_SUPPORT
    // DEBUG: typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT InFormat;
    // DEBUG:     UINT OutFormatSupport2;
    // DEBUG:     } 	D3D11_FEATURE_DATA_FORMAT_SUPPORT2
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    // DEBUG:     {
    // DEBUG:     BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS
    // DEBUG:     {
    // DEBUG:     BOOL OutputMergerLogicOp;
    // DEBUG:     BOOL UAVOnlyRenderingForcedSampleCount;
    // DEBUG:     BOOL DiscardAPIsSeenByDriver;
    // DEBUG:     BOOL FlagsForUpdateAndCopySeenByDriver;
    // DEBUG:     BOOL ClearView;
    // DEBUG:     BOOL CopyWithOverlap;
    // DEBUG:     BOOL ConstantBufferPartialUpdate;
    // DEBUG:     BOOL ConstantBufferOffsetting;
    // DEBUG:     BOOL MapNoOverwriteOnDynamicConstantBuffer;
    // DEBUG:     BOOL MapNoOverwriteOnDynamicBufferSRV;
    // DEBUG:     BOOL MultisampleRTVWithForcedSampleCountOne;
    // DEBUG:     BOOL SAD4ShaderInstructions;
    // DEBUG:     BOOL ExtendedDoublesShaderInstructions;
    // DEBUG:     BOOL ExtendedResourceSharing;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D11_OPTIONS
    // DEBUG: typedef struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
    // DEBUG:     {
    // DEBUG:     BOOL TileBasedDeferredRenderer;
    // DEBUG:     } 	D3D11_FEATURE_DATA_ARCHITECTURE_INFO
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS
    // DEBUG:     {
    // DEBUG:     BOOL FullNonPow2TextureSupport;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D9_OPTIONS
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
    // DEBUG:     {
    // DEBUG:     BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_SHADER_MIN_PRECISION_SUPPORT
    // DEBUG:     {
    // DEBUG:         D3D11_SHADER_MIN_PRECISION_10_BIT	= 0x1,
    // DEBUG:         D3D11_SHADER_MIN_PRECISION_16_BIT	= 0x2
    // DEBUG:     } 	D3D11_SHADER_MIN_PRECISION_SUPPORT
    // DEBUG: typedef struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
    // DEBUG:     {
    // DEBUG:     UINT PixelShaderMinPrecision;
    // DEBUG:     UINT AllOtherShaderStagesMinPrecision;
    // DEBUG:     } 	D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_TILED_RESOURCES_TIER
    // DEBUG:     {
    // DEBUG:         D3D11_TILED_RESOURCES_NOT_SUPPORTED	= 0,
    // DEBUG:         D3D11_TILED_RESOURCES_TIER_1	= 1,
    // DEBUG:         D3D11_TILED_RESOURCES_TIER_2	= 2,
    // DEBUG:         D3D11_TILED_RESOURCES_TIER_3	= 3
    // DEBUG:     } 	D3D11_TILED_RESOURCES_TIER
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
    // DEBUG:     {
    // DEBUG:     D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
    // DEBUG:     BOOL MinMaxFiltering;
    // DEBUG:     BOOL ClearViewAlsoSupportsDepthOnlyFormats;
    // DEBUG:     BOOL MapOnDefaultBuffers;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D11_OPTIONS1
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
    // DEBUG:     {
    // DEBUG:     BOOL SimpleInstancingSupported;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
    // DEBUG: typedef struct D3D11_FEATURE_DATA_MARKER_SUPPORT
    // DEBUG:     {
    // DEBUG:     BOOL Profile;
    // DEBUG:     } 	D3D11_FEATURE_DATA_MARKER_SUPPORT
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
    // DEBUG:     {
    // DEBUG:     BOOL FullNonPow2TextureSupported;
    // DEBUG:     BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
    // DEBUG:     BOOL SimpleInstancingSupported;
    // DEBUG:     BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D9_OPTIONS1
    // DEBUG: typedef 
    // DEBUG: enum D3D11_CONSERVATIVE_RASTERIZATION_TIER
    // DEBUG:     {
    // DEBUG:         D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED	= 0,
    // DEBUG:         D3D11_CONSERVATIVE_RASTERIZATION_TIER_1	= 1,
    // DEBUG:         D3D11_CONSERVATIVE_RASTERIZATION_TIER_2	= 2,
    // DEBUG:         D3D11_CONSERVATIVE_RASTERIZATION_TIER_3	= 3
    // DEBUG:     } 	D3D11_CONSERVATIVE_RASTERIZATION_TIER
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
    // DEBUG:     {
    // DEBUG:     BOOL PSSpecifiedStencilRefSupported;
    // DEBUG:     BOOL TypedUAVLoadAdditionalFormats;
    // DEBUG:     BOOL ROVsSupported;
    // DEBUG:     D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    // DEBUG:     D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
    // DEBUG:     BOOL MapOnDefaultTextures;
    // DEBUG:     BOOL StandardSwizzle;
    // DEBUG:     BOOL UnifiedMemoryArchitecture;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D11_OPTIONS2
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
    // DEBUG:     {
    // DEBUG:     BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D11_OPTIONS3
    // DEBUG: typedef struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    // DEBUG:     {
    // DEBUG:     UINT MaxGPUVirtualAddressBitsPerResource;
    // DEBUG:     UINT MaxGPUVirtualAddressBitsPerProcess;
    // DEBUG:     } 	D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_SHADER_CACHE_SUPPORT_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D11_SHADER_CACHE_SUPPORT_NONE	= 0,
    // DEBUG:         D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE	= 0x1,
    // DEBUG:         D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE	= 0x2
    // DEBUG:     } 	D3D11_SHADER_CACHE_SUPPORT_FLAGS
    // DEBUG: typedef struct D3D11_FEATURE_DATA_SHADER_CACHE
    // DEBUG:     {
    // DEBUG:     UINT SupportFlags;
    // DEBUG:     } 	D3D11_FEATURE_DATA_SHADER_CACHE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_SHARED_RESOURCE_TIER
    // DEBUG:     {
    // DEBUG:         D3D11_SHARED_RESOURCE_TIER_0	= 0,
    // DEBUG:         D3D11_SHARED_RESOURCE_TIER_1	= ( D3D11_SHARED_RESOURCE_TIER_0 + 1 ) ,
    // DEBUG:         D3D11_SHARED_RESOURCE_TIER_2	= ( D3D11_SHARED_RESOURCE_TIER_1 + 1 ) ,
    // DEBUG:         D3D11_SHARED_RESOURCE_TIER_3	= ( D3D11_SHARED_RESOURCE_TIER_2 + 1 ) 
    // DEBUG:     } 	D3D11_SHARED_RESOURCE_TIER
    // DEBUG: typedef struct D3D11_FEATURE_DATA_DISPLAYABLE
    // DEBUG:     {
    // DEBUG:     BOOL DisplayableTexture;
    // DEBUG:     D3D11_SHARED_RESOURCE_TIER SharedResourceTier;
    // DEBUG:     } 	D3D11_FEATURE_DATA_DISPLAYABLE
    // DEBUG: typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS5
    // DEBUG:     {
    // DEBUG:     D3D11_SHARED_RESOURCE_TIER SharedResourceTier;
    // DEBUG:     } 	D3D11_FEATURE_DATA_D3D11_OPTIONS5
    // DEBUG: typedef struct _D3D11_AES_CTR_IV
    // DEBUG:     {
    // DEBUG:     UINT64 IV;
    // DEBUG:     UINT64 Count;
    // DEBUG:     } 	D3D11_AES_CTR_IV
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT	= 0x2
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE	= 0x10
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO	= 0x20,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION	= 0x40,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM	= 0x80,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO	= 0x100,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR	= 0x200,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE	= 0x400,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10	= 0x800
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FILTER_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT	= 0x20,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING	= 0x40,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT	= 0x80
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_FILTER_CAPS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED	= 0x8
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION	= 0x20,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION	= 0x40,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING	= 0x80
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE	= 0x10
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_STEREO_CAPS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION	= 0x20
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32	= 0x1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22	= 0x2,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224	= 0x4,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332	= 0x8,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322	= 0x10,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55	= 0x20,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64	= 0x40,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87	= 0x80,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223	= 0x100,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER	= 0x80000000
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_CONTENT_PROTECTION_CAPS
    // DEBUG:     {
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE	= 0x1,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE	= 0x2,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON	= 0x4,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION	= 0x8,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY	= 0x10,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY	= 0x20,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK	= 0x40,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY	= 0x80,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV	= 0x100,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY	= 0x200,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT	= 0x400,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED	= 0x800,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE	= 0x1000,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN	= 0x2000,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION	= 0x4000,
    // DEBUG:         D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED	= 0x8000
    // DEBUG:     } 	D3D11_CONTENT_PROTECTION_CAPS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
    // DEBUG:     {
    // DEBUG:         D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED	= 0,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235	= 1,
    // DEBUG:         D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255	= 2
    // DEBUG:     } 	D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_INPUT
    // DEBUG:     {
    // DEBUG:     GUID QueryType;
    // DEBUG:     HANDLE hChannel;
    // DEBUG:     UINT SequenceNumber;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_OMAC omac;
    // DEBUG:     GUID QueryType;
    // DEBUG:     HANDLE hChannel;
    // DEBUG:     UINT SequenceNumber;
    // DEBUG:     HRESULT ReturnCode;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_OUTPUT
    // DEBUG: typedef union D3D11_AUTHENTICATED_PROTECTION_FLAGS
    // DEBUG:     {
    // DEBUG:     struct __MIDL___MIDL_itf_d3d11_0000_0034_0001
    // DEBUG:         {
    // DEBUG:         UINT ProtectionEnabled	: 1;
    // DEBUG:         UINT OverlayOrFullscreenRequired	: 1;
    // DEBUG:         UINT Reserved	: 30;
    // DEBUG:         } 	Flags;
    // DEBUG:     UINT Value;
    // DEBUG:     } 	D3D11_AUTHENTICATED_PROTECTION_FLAGS
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     HANDLE DecoderHandle;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     HANDLE DecoderHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT RestrictedSharedResourceProcessCount;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     UINT ProcessIndex;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_PROCESSIDTYPE_UNKNOWN	= 0,
    // DEBUG:         D3D11_PROCESSIDTYPE_DWM	= 1,
    // DEBUG:         D3D11_PROCESSIDTYPE_HANDLE	= 2
    // DEBUG:     } 	D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT ProcessIndex;
    // DEBUG:     D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
    // DEBUG:     HANDLE ProcessHandle;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT UnrestrictedProtectedSharedResourceCount;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     UINT OutputIDCount;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     UINT OutputIDIndex;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     UINT OutputIDIndex;
    // DEBUG:     UINT64 OutputID;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_BUS_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_BUS_TYPE_OTHER	= 0,
    // DEBUG:         D3D11_BUS_TYPE_PCI	= 0x1,
    // DEBUG:         D3D11_BUS_TYPE_PCIX	= 0x2,
    // DEBUG:         D3D11_BUS_TYPE_PCIEXPRESS	= 0x3,
    // DEBUG:         D3D11_BUS_TYPE_AGP	= 0x4,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET	= 0x10000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP	= 0x20000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET	= 0x30000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR	= 0x40000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE	= 0x50000,
    // DEBUG:         D3D11_BUS_IMPL_MODIFIER_NON_STANDARD	= 0x80000000
    // DEBUG:     } 	D3D11_BUS_TYPE
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     D3D11_BUS_TYPE BusType;
    // DEBUG:     BOOL AccessibleInContiguousBlocks;
    // DEBUG:     BOOL AccessibleInNonContiguousBlocks;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT EncryptionGuidCount;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     UINT EncryptionGuidIndex;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT EncryptionGuidIndex;
    // DEBUG:     GUID EncryptionGuid;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     GUID EncryptionGuid;
    // DEBUG:     } 	D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_OMAC omac;
    // DEBUG:     GUID ConfigureType;
    // DEBUG:     HANDLE hChannel;
    // DEBUG:     UINT SequenceNumber;
    // DEBUG:     } 	D3D11_AUTHENTICATED_CONFIGURE_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     UINT StartSequenceQuery;
    // DEBUG:     UINT StartSequenceConfigure;
    // DEBUG:     } 	D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
    // DEBUG:     } 	D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     HANDLE DecoderHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     } 	D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
    // DEBUG:     HANDLE ProcessHandle;
    // DEBUG:     BOOL AllowAccess;
    // DEBUG:     } 	D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
    // DEBUG: typedef struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     GUID EncryptionGuid;
    // DEBUG:     } 	D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
    // DEBUG: typedef 
    // DEBUG: enum D3D11_CREATE_DEVICE_FLAG
    // DEBUG:     {
    // DEBUG:         D3D11_CREATE_DEVICE_SINGLETHREADED	= 0x1,
    // DEBUG:         D3D11_CREATE_DEVICE_DEBUG	= 0x2,
    // DEBUG:         D3D11_CREATE_DEVICE_SWITCH_TO_REF	= 0x4,
    // DEBUG:         D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS	= 0x8,
    // DEBUG:         D3D11_CREATE_DEVICE_BGRA_SUPPORT	= 0x20,
    // DEBUG:         D3D11_CREATE_DEVICE_DEBUGGABLE	= 0x40,
    // DEBUG:         D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY	= 0x80,
    // DEBUG:         D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT	= 0x100,
    // DEBUG:         D3D11_CREATE_DEVICE_VIDEO_SUPPORT	= 0x800
    // DEBUG:     } 	D3D11_CREATE_DEVICE_FLAG
    // DEBUG: struct CD3D11_DEFAULT {}
    public unsafe partial class CD3D11DEFAULT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_DEFAULT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.CD3D11DEFAULT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.CD3D11DEFAULT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.CD3D11DEFAULT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.CD3D11DEFAULT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.CD3D11DEFAULT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static CD3D11DEFAULT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11DEFAULT(native.ToPointer(), skipVTables);
        }

        internal static CD3D11DEFAULT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11DEFAULT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11DEFAULT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11DEFAULT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11DEFAULT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11DEFAULT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: CD3D11_DEFAULT
        public CD3D11DEFAULT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11DEFAULT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: CD3D11_DEFAULT
        public CD3D11DEFAULT(global::SpoutDX.CD3D11DEFAULT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11DEFAULT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.CD3D11DEFAULT.__Internal*) __Instance) = *((global::SpoutDX.CD3D11DEFAULT.__Internal*) _0.__Instance);
        }

        ~CD3D11DEFAULT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_INPUT_ELEMENT_DESC
    // DEBUG:     {
    // DEBUG:     LPCSTR SemanticName;
    // DEBUG:     UINT SemanticIndex;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     UINT InputSlot;
    // DEBUG:     UINT AlignedByteOffset;
    // DEBUG:     D3D11_INPUT_CLASSIFICATION InputSlotClass;
    // DEBUG:     UINT InstanceDataStepRate;
    // DEBUG:     }
    public unsafe partial class D3D11INPUT_ELEMENT_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal __IntPtr SemanticName;
            internal uint SemanticIndex;
            internal global::DXGI_FORMAT Format;
            internal uint InputSlot;
            internal uint AlignedByteOffset;
            internal global::SpoutDX.D3D11INPUT_CLASSIFICATION InputSlotClass;
            internal uint InstanceDataStepRate;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11INPUT_ELEMENT_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11INPUT_ELEMENT_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11INPUT_ELEMENT_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11INPUT_ELEMENT_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11INPUT_ELEMENT_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __SemanticName_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static D3D11INPUT_ELEMENT_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11INPUT_ELEMENT_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11INPUT_ELEMENT_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11INPUT_ELEMENT_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11INPUT_ELEMENT_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11INPUT_ELEMENT_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11INPUT_ELEMENT_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11INPUT_ELEMENT_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11INPUT_ELEMENT_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__SemanticName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->SemanticName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string SemanticName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->SemanticName);
            }

            set
            {
                if (__SemanticName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->SemanticName);
                __SemanticName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->SemanticName = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->SemanticName = (__IntPtr) __bytePtr0;
            }
        }

        public uint SemanticIndex
        {
            get
            {
                return ((__Internal*)__Instance)->SemanticIndex;
            }

            set
            {
                ((__Internal*)__Instance)->SemanticIndex = value;
            }
        }

        public uint InputSlot
        {
            get
            {
                return ((__Internal*)__Instance)->InputSlot;
            }

            set
            {
                ((__Internal*)__Instance)->InputSlot = value;
            }
        }

        public uint AlignedByteOffset
        {
            get
            {
                return ((__Internal*)__Instance)->AlignedByteOffset;
            }

            set
            {
                ((__Internal*)__Instance)->AlignedByteOffset = value;
            }
        }

        public global::SpoutDX.D3D11INPUT_CLASSIFICATION InputSlotClass
        {
            get
            {
                return ((__Internal*)__Instance)->InputSlotClass;
            }

            set
            {
                ((__Internal*)__Instance)->InputSlotClass = value;
            }
        }

        public uint InstanceDataStepRate
        {
            get
            {
                return ((__Internal*)__Instance)->InstanceDataStepRate;
            }

            set
            {
                ((__Internal*)__Instance)->InstanceDataStepRate = value;
            }
        }
    }

    // DEBUG: struct D3D11_SO_DECLARATION_ENTRY
    // DEBUG:     {
    // DEBUG:     UINT Stream;
    // DEBUG:     LPCSTR SemanticName;
    // DEBUG:     UINT SemanticIndex;
    // DEBUG:     BYTE StartComponent;
    // DEBUG:     BYTE ComponentCount;
    // DEBUG:     BYTE OutputSlot;
    // DEBUG:     }
    public unsafe partial class D3D11SO_DECLARATION_ENTRY : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal uint Stream;
            internal __IntPtr SemanticName;
            internal uint SemanticIndex;
            internal byte StartComponent;
            internal byte ComponentCount;
            internal byte OutputSlot;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11SO_DECLARATION_ENTRY>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11SO_DECLARATION_ENTRY>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11SO_DECLARATION_ENTRY managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11SO_DECLARATION_ENTRY>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11SO_DECLARATION_ENTRY managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __SemanticName_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static D3D11SO_DECLARATION_ENTRY __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11SO_DECLARATION_ENTRY(native.ToPointer(), skipVTables);
        }

        internal static D3D11SO_DECLARATION_ENTRY __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11SO_DECLARATION_ENTRY)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11SO_DECLARATION_ENTRY __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11SO_DECLARATION_ENTRY(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11SO_DECLARATION_ENTRY(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11SO_DECLARATION_ENTRY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11SO_DECLARATION_ENTRY()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__SemanticName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->SemanticName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Stream
        {
            get
            {
                return ((__Internal*)__Instance)->Stream;
            }

            set
            {
                ((__Internal*)__Instance)->Stream = value;
            }
        }

        public string SemanticName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->SemanticName);
            }

            set
            {
                if (__SemanticName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->SemanticName);
                __SemanticName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->SemanticName = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->SemanticName = (__IntPtr) __bytePtr0;
            }
        }

        public uint SemanticIndex
        {
            get
            {
                return ((__Internal*)__Instance)->SemanticIndex;
            }

            set
            {
                ((__Internal*)__Instance)->SemanticIndex = value;
            }
        }

        public byte StartComponent
        {
            get
            {
                return ((__Internal*)__Instance)->StartComponent;
            }

            set
            {
                ((__Internal*)__Instance)->StartComponent = value;
            }
        }

        public byte ComponentCount
        {
            get
            {
                return ((__Internal*)__Instance)->ComponentCount;
            }

            set
            {
                ((__Internal*)__Instance)->ComponentCount = value;
            }
        }

        public byte OutputSlot
        {
            get
            {
                return ((__Internal*)__Instance)->OutputSlot;
            }

            set
            {
                ((__Internal*)__Instance)->OutputSlot = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIEWPORT
    // DEBUG:     {
    // DEBUG:     FLOAT TopLeftX;
    // DEBUG:     FLOAT TopLeftY;
    // DEBUG:     FLOAT Width;
    // DEBUG:     FLOAT Height;
    // DEBUG:     FLOAT MinDepth;
    // DEBUG:     FLOAT MaxDepth;
    // DEBUG:     }
    public unsafe partial class D3D11VIEWPORT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal float TopLeftX;
            internal float TopLeftY;
            internal float Width;
            internal float Height;
            internal float MinDepth;
            internal float MaxDepth;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIEWPORT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIEWPORT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIEWPORT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIEWPORT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIEWPORT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIEWPORT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIEWPORT(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIEWPORT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIEWPORT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIEWPORT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIEWPORT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIEWPORT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIEWPORT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11VIEWPORT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float TopLeftX
        {
            get
            {
                return ((__Internal*)__Instance)->TopLeftX;
            }

            set
            {
                ((__Internal*)__Instance)->TopLeftX = value;
            }
        }

        public float TopLeftY
        {
            get
            {
                return ((__Internal*)__Instance)->TopLeftY;
            }

            set
            {
                ((__Internal*)__Instance)->TopLeftY = value;
            }
        }

        public float Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public float Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        public float MinDepth
        {
            get
            {
                return ((__Internal*)__Instance)->MinDepth;
            }

            set
            {
                ((__Internal*)__Instance)->MinDepth = value;
            }
        }

        public float MaxDepth
        {
            get
            {
                return ((__Internal*)__Instance)->MaxDepth;
            }

            set
            {
                ((__Internal*)__Instance)->MaxDepth = value;
            }
        }
    }

    // DEBUG: struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS
    // DEBUG:     {
    // DEBUG:     UINT VertexCountPerInstance;
    // DEBUG:     UINT InstanceCount;
    // DEBUG:     UINT StartVertexLocation;
    // DEBUG:     UINT StartInstanceLocation;
    // DEBUG:     }
    public unsafe partial class D3D11DRAW_INSTANCED_INDIRECT_ARGS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint VertexCountPerInstance;
            internal uint InstanceCount;
            internal uint StartVertexLocation;
            internal uint StartInstanceLocation;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_DRAW_INSTANCED_INDIRECT_ARGS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11DRAW_INSTANCED_INDIRECT_ARGS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11DRAW_INSTANCED_INDIRECT_ARGS(native.ToPointer(), skipVTables);
        }

        internal static D3D11DRAW_INSTANCED_INDIRECT_ARGS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11DRAW_INSTANCED_INDIRECT_ARGS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11DRAW_INSTANCED_INDIRECT_ARGS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11DRAW_INSTANCED_INDIRECT_ARGS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11DRAW_INSTANCED_INDIRECT_ARGS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11DRAW_INSTANCED_INDIRECT_ARGS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_DRAW_INSTANCED_INDIRECT_ARGS
        public D3D11DRAW_INSTANCED_INDIRECT_ARGS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_DRAW_INSTANCED_INDIRECT_ARGS
        public D3D11DRAW_INSTANCED_INDIRECT_ARGS(global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS.__Internal*) __Instance) = *((global::SpoutDX.D3D11DRAW_INSTANCED_INDIRECT_ARGS.__Internal*) _0.__Instance);
        }

        ~D3D11DRAW_INSTANCED_INDIRECT_ARGS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint VertexCountPerInstance
        {
            get
            {
                return ((__Internal*)__Instance)->VertexCountPerInstance;
            }

            set
            {
                ((__Internal*)__Instance)->VertexCountPerInstance = value;
            }
        }

        public uint InstanceCount
        {
            get
            {
                return ((__Internal*)__Instance)->InstanceCount;
            }

            set
            {
                ((__Internal*)__Instance)->InstanceCount = value;
            }
        }

        public uint StartVertexLocation
        {
            get
            {
                return ((__Internal*)__Instance)->StartVertexLocation;
            }

            set
            {
                ((__Internal*)__Instance)->StartVertexLocation = value;
            }
        }

        public uint StartInstanceLocation
        {
            get
            {
                return ((__Internal*)__Instance)->StartInstanceLocation;
            }

            set
            {
                ((__Internal*)__Instance)->StartInstanceLocation = value;
            }
        }
    }

    // DEBUG: struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
    // DEBUG:     {
    // DEBUG:     UINT IndexCountPerInstance;
    // DEBUG:     UINT InstanceCount;
    // DEBUG:     UINT StartIndexLocation;
    // DEBUG:     INT BaseVertexLocation;
    // DEBUG:     UINT StartInstanceLocation;
    // DEBUG:     }
    public unsafe partial class D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 20)]
        public partial struct __Internal
        {
            internal uint IndexCountPerInstance;
            internal uint InstanceCount;
            internal uint StartIndexLocation;
            internal int BaseVertexLocation;
            internal uint StartInstanceLocation;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS(native.ToPointer(), skipVTables);
        }

        internal static D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
        public D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
        public D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS(global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS.__Internal*) __Instance) = *((global::SpoutDX.D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS.__Internal*) _0.__Instance);
        }

        ~D3D11DRAW_INDEXED_INSTANCED_INDIRECT_ARGS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint IndexCountPerInstance
        {
            get
            {
                return ((__Internal*)__Instance)->IndexCountPerInstance;
            }

            set
            {
                ((__Internal*)__Instance)->IndexCountPerInstance = value;
            }
        }

        public uint InstanceCount
        {
            get
            {
                return ((__Internal*)__Instance)->InstanceCount;
            }

            set
            {
                ((__Internal*)__Instance)->InstanceCount = value;
            }
        }

        public uint StartIndexLocation
        {
            get
            {
                return ((__Internal*)__Instance)->StartIndexLocation;
            }

            set
            {
                ((__Internal*)__Instance)->StartIndexLocation = value;
            }
        }

        public int BaseVertexLocation
        {
            get
            {
                return ((__Internal*)__Instance)->BaseVertexLocation;
            }

            set
            {
                ((__Internal*)__Instance)->BaseVertexLocation = value;
            }
        }

        public uint StartInstanceLocation
        {
            get
            {
                return ((__Internal*)__Instance)->StartInstanceLocation;
            }

            set
            {
                ((__Internal*)__Instance)->StartInstanceLocation = value;
            }
        }
    }

    // DEBUG: struct CD3D11_RECT : public D3D11_RECT
    // DEBUG: {
    // DEBUG:     CD3D11_RECT() = default;
    // DEBUG:     explicit CD3D11_RECT( const D3D11_RECT& o ) :
    // DEBUG:         D3D11_RECT( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_RECT(
    // DEBUG:         LONG Left,
    // DEBUG:         LONG Top,
    // DEBUG:         LONG Right,
    // DEBUG:         LONG Bottom )
    // DEBUG:     {
    // DEBUG:         left = Left;
    // DEBUG:         top = Top;
    // DEBUG:         right = Right;
    // DEBUG:         bottom = Bottom;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_RECT() {}
    // DEBUG: }
    public unsafe partial class CD3D11RECT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal int left;
            internal int top;
            internal int right;
            internal int bottom;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_RECT@@QEAA@JJJJ@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, int Left, int Top, int Right, int Bottom);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_RECT@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.CD3D11RECT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.CD3D11RECT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.CD3D11RECT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.CD3D11RECT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.CD3D11RECT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static CD3D11RECT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11RECT(native.ToPointer(), skipVTables);
        }

        internal static CD3D11RECT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11RECT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11RECT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11RECT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11RECT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11RECT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: CD3D11_RECT() = default
        public CD3D11RECT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11RECT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_RECT(
        // DEBUG:         LONG Left,
        // DEBUG:         LONG Top,
        // DEBUG:         LONG Right,
        // DEBUG:         LONG Bottom )
        // DEBUG:     {
        // DEBUG:         left = Left;
        // DEBUG:         top = Top;
        // DEBUG:         right = Right;
        // DEBUG:         bottom = Bottom;
        // DEBUG:     }
        public CD3D11RECT(int Left, int Top, int Right, int Bottom)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11RECT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance, Left, Top, Right, Bottom);
        }

        ~CD3D11RECT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_BOX
    // DEBUG:     {
    // DEBUG:     UINT left;
    // DEBUG:     UINT top;
    // DEBUG:     UINT front;
    // DEBUG:     UINT right;
    // DEBUG:     UINT bottom;
    // DEBUG:     UINT back;
    // DEBUG:     }
    public unsafe partial class D3D11BOX : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal uint left;
            internal uint top;
            internal uint front;
            internal uint right;
            internal uint bottom;
            internal uint back;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BOX>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BOX>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11BOX managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11BOX>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11BOX managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11BOX __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11BOX(native.ToPointer(), skipVTables);
        }

        internal static D3D11BOX __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11BOX)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11BOX __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11BOX(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11BOX(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11BOX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11BOX()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Left
        {
            get
            {
                return ((__Internal*)__Instance)->left;
            }

            set
            {
                ((__Internal*)__Instance)->left = value;
            }
        }

        public uint Top
        {
            get
            {
                return ((__Internal*)__Instance)->top;
            }

            set
            {
                ((__Internal*)__Instance)->top = value;
            }
        }

        public uint Front
        {
            get
            {
                return ((__Internal*)__Instance)->front;
            }

            set
            {
                ((__Internal*)__Instance)->front = value;
            }
        }

        public uint Right
        {
            get
            {
                return ((__Internal*)__Instance)->right;
            }

            set
            {
                ((__Internal*)__Instance)->right = value;
            }
        }

        public uint Bottom
        {
            get
            {
                return ((__Internal*)__Instance)->bottom;
            }

            set
            {
                ((__Internal*)__Instance)->bottom = value;
            }
        }

        public uint Back
        {
            get
            {
                return ((__Internal*)__Instance)->back;
            }

            set
            {
                ((__Internal*)__Instance)->back = value;
            }
        }
    }

    // DEBUG: struct CD3D11_BOX : public D3D11_BOX
    // DEBUG: {
    // DEBUG:     CD3D11_BOX() = default;
    // DEBUG:     explicit CD3D11_BOX( const D3D11_BOX& o ) :
    // DEBUG:         D3D11_BOX( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_BOX(
    // DEBUG:         LONG Left,
    // DEBUG:         LONG Top,
    // DEBUG:         LONG Front,
    // DEBUG:         LONG Right,
    // DEBUG:         LONG Bottom,
    // DEBUG:         LONG Back )
    // DEBUG:     {
    // DEBUG:         left = Left;
    // DEBUG:         top = Top;
    // DEBUG:         front = Front;
    // DEBUG:         right = Right;
    // DEBUG:         bottom = Bottom;
    // DEBUG:         back = Back;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_BOX() {}
    // DEBUG: }
    public unsafe partial class CD3D11BOX : global::SpoutDX.D3D11BOX, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public new partial struct __Internal
        {
            internal uint left;
            internal uint top;
            internal uint front;
            internal uint right;
            internal uint bottom;
            internal uint back;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_BOX@@QEAA@AEBUD3D11_BOX@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_BOX@@QEAA@JJJJJJ@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, int Left, int Top, int Front, int Right, int Bottom, int Back);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_BOX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11BOX __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11BOX(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11BOX __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11BOX)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11BOX __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11BOX(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11BOX(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11BOX(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_BOX() = default
        public CD3D11BOX()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11BOX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_BOX( const D3D11_BOX& o ) :
        // DEBUG:         D3D11_BOX( o )
        // DEBUG:     {}
        public CD3D11BOX(global::SpoutDX.D3D11BOX o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11BOX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D11_BOX(
        // DEBUG:         LONG Left,
        // DEBUG:         LONG Top,
        // DEBUG:         LONG Front,
        // DEBUG:         LONG Right,
        // DEBUG:         LONG Bottom,
        // DEBUG:         LONG Back )
        // DEBUG:     {
        // DEBUG:         left = Left;
        // DEBUG:         top = Top;
        // DEBUG:         front = Front;
        // DEBUG:         right = Right;
        // DEBUG:         bottom = Bottom;
        // DEBUG:         back = Back;
        // DEBUG:     }
        public CD3D11BOX(int Left, int Top, int Front, int Right, int Bottom, int Back)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11BOX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance, Left, Top, Front, Right, Bottom, Back);
        }

        ~CD3D11BOX()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_DEPTH_STENCILOP_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_STENCIL_OP StencilFailOp;
    // DEBUG:     D3D11_STENCIL_OP StencilDepthFailOp;
    // DEBUG:     D3D11_STENCIL_OP StencilPassOp;
    // DEBUG:     D3D11_COMPARISON_FUNC StencilFunc;
    // DEBUG:     }
    public unsafe partial class D3D11DEPTH_STENCILOP_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11STENCIL_OP StencilFailOp;
            internal global::SpoutDX.D3D11STENCIL_OP StencilDepthFailOp;
            internal global::SpoutDX.D3D11STENCIL_OP StencilPassOp;
            internal global::SpoutDX.D3D11COMPARISON_FUNC StencilFunc;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DEPTH_STENCILOP_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DEPTH_STENCILOP_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11DEPTH_STENCILOP_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11DEPTH_STENCILOP_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11DEPTH_STENCILOP_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11DEPTH_STENCILOP_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11DEPTH_STENCILOP_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11DEPTH_STENCILOP_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11DEPTH_STENCILOP_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11DEPTH_STENCILOP_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11DEPTH_STENCILOP_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11DEPTH_STENCILOP_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11DEPTH_STENCILOP_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11DEPTH_STENCILOP_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11STENCIL_OP StencilFailOp
        {
            get
            {
                return ((__Internal*)__Instance)->StencilFailOp;
            }

            set
            {
                ((__Internal*)__Instance)->StencilFailOp = value;
            }
        }

        public global::SpoutDX.D3D11STENCIL_OP StencilDepthFailOp
        {
            get
            {
                return ((__Internal*)__Instance)->StencilDepthFailOp;
            }

            set
            {
                ((__Internal*)__Instance)->StencilDepthFailOp = value;
            }
        }

        public global::SpoutDX.D3D11STENCIL_OP StencilPassOp
        {
            get
            {
                return ((__Internal*)__Instance)->StencilPassOp;
            }

            set
            {
                ((__Internal*)__Instance)->StencilPassOp = value;
            }
        }

        public global::SpoutDX.D3D11COMPARISON_FUNC StencilFunc
        {
            get
            {
                return ((__Internal*)__Instance)->StencilFunc;
            }

            set
            {
                ((__Internal*)__Instance)->StencilFunc = value;
            }
        }
    }

    // DEBUG: struct D3D11_DEPTH_STENCIL_DESC
    // DEBUG:     {
    // DEBUG:     BOOL DepthEnable;
    // DEBUG:     D3D11_DEPTH_WRITE_MASK DepthWriteMask;
    // DEBUG:     D3D11_COMPARISON_FUNC DepthFunc;
    // DEBUG:     BOOL StencilEnable;
    // DEBUG:     UINT8 StencilReadMask;
    // DEBUG:     UINT8 StencilWriteMask;
    // DEBUG:     D3D11_DEPTH_STENCILOP_DESC FrontFace;
    // DEBUG:     D3D11_DEPTH_STENCILOP_DESC BackFace;
    // DEBUG:     }
    public unsafe partial class D3D11DEPTH_STENCIL_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 52)]
        public partial struct __Internal
        {
            internal int DepthEnable;
            internal global::SpoutDX.D3D11DEPTH_WRITE_MASK DepthWriteMask;
            internal global::SpoutDX.D3D11COMPARISON_FUNC DepthFunc;
            internal int StencilEnable;
            internal byte StencilReadMask;
            internal byte StencilWriteMask;
            internal global::SpoutDX.D3D11DEPTH_STENCILOP_DESC.__Internal FrontFace;
            internal global::SpoutDX.D3D11DEPTH_STENCILOP_DESC.__Internal BackFace;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DEPTH_STENCIL_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DEPTH_STENCIL_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11DEPTH_STENCIL_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11DEPTH_STENCIL_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11DEPTH_STENCIL_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11DEPTH_STENCIL_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11DEPTH_STENCIL_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11DEPTH_STENCIL_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11DEPTH_STENCIL_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11DEPTH_STENCIL_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11DEPTH_STENCIL_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11DEPTH_STENCIL_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11DEPTH_STENCIL_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11DEPTH_STENCIL_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int DepthEnable
        {
            get
            {
                return ((__Internal*)__Instance)->DepthEnable;
            }

            set
            {
                ((__Internal*)__Instance)->DepthEnable = value;
            }
        }

        public global::SpoutDX.D3D11DEPTH_WRITE_MASK DepthWriteMask
        {
            get
            {
                return ((__Internal*)__Instance)->DepthWriteMask;
            }

            set
            {
                ((__Internal*)__Instance)->DepthWriteMask = value;
            }
        }

        public global::SpoutDX.D3D11COMPARISON_FUNC DepthFunc
        {
            get
            {
                return ((__Internal*)__Instance)->DepthFunc;
            }

            set
            {
                ((__Internal*)__Instance)->DepthFunc = value;
            }
        }

        public int StencilEnable
        {
            get
            {
                return ((__Internal*)__Instance)->StencilEnable;
            }

            set
            {
                ((__Internal*)__Instance)->StencilEnable = value;
            }
        }

        public byte StencilReadMask
        {
            get
            {
                return ((__Internal*)__Instance)->StencilReadMask;
            }

            set
            {
                ((__Internal*)__Instance)->StencilReadMask = value;
            }
        }

        public byte StencilWriteMask
        {
            get
            {
                return ((__Internal*)__Instance)->StencilWriteMask;
            }

            set
            {
                ((__Internal*)__Instance)->StencilWriteMask = value;
            }
        }

        public global::SpoutDX.D3D11DEPTH_STENCILOP_DESC FrontFace
        {
            get
            {
                return global::SpoutDX.D3D11DEPTH_STENCILOP_DESC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->FrontFace));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->FrontFace = *(global::SpoutDX.D3D11DEPTH_STENCILOP_DESC.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11DEPTH_STENCILOP_DESC BackFace
        {
            get
            {
                return global::SpoutDX.D3D11DEPTH_STENCILOP_DESC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->BackFace));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->BackFace = *(global::SpoutDX.D3D11DEPTH_STENCILOP_DESC.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct CD3D11_DEPTH_STENCIL_DESC : public D3D11_DEPTH_STENCIL_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_DEPTH_STENCIL_DESC() = default;
    // DEBUG:     explicit CD3D11_DEPTH_STENCIL_DESC( const D3D11_DEPTH_STENCIL_DESC& o ) :
    // DEBUG:         D3D11_DEPTH_STENCIL_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_DEPTH_STENCIL_DESC( CD3D11_DEFAULT )
    // DEBUG:     {
    // DEBUG:         DepthEnable = TRUE;
    // DEBUG:         DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL;
    // DEBUG:         DepthFunc = D3D11_COMPARISON_LESS;
    // DEBUG:         StencilEnable = FALSE;
    // DEBUG:         StencilReadMask = D3D11_DEFAULT_STENCIL_READ_MASK;
    // DEBUG:         StencilWriteMask = D3D11_DEFAULT_STENCIL_WRITE_MASK;
    // DEBUG:         const D3D11_DEPTH_STENCILOP_DESC defaultStencilOp =
    // DEBUG:         { D3D11_STENCIL_OP_KEEP, D3D11_STENCIL_OP_KEEP, D3D11_STENCIL_OP_KEEP, D3D11_COMPARISON_ALWAYS };
    // DEBUG:         FrontFace = defaultStencilOp;
    // DEBUG:         BackFace = defaultStencilOp;
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_DEPTH_STENCIL_DESC(
    // DEBUG:         BOOL depthEnable,
    // DEBUG:         D3D11_DEPTH_WRITE_MASK depthWriteMask,
    // DEBUG:         D3D11_COMPARISON_FUNC depthFunc,
    // DEBUG:         BOOL stencilEnable,
    // DEBUG:         UINT8 stencilReadMask,
    // DEBUG:         UINT8 stencilWriteMask,
    // DEBUG:         D3D11_STENCIL_OP frontStencilFailOp,
    // DEBUG:         D3D11_STENCIL_OP frontStencilDepthFailOp,
    // DEBUG:         D3D11_STENCIL_OP frontStencilPassOp,
    // DEBUG:         D3D11_COMPARISON_FUNC frontStencilFunc,
    // DEBUG:         D3D11_STENCIL_OP backStencilFailOp,
    // DEBUG:         D3D11_STENCIL_OP backStencilDepthFailOp,
    // DEBUG:         D3D11_STENCIL_OP backStencilPassOp,
    // DEBUG:         D3D11_COMPARISON_FUNC backStencilFunc )
    // DEBUG:     {
    // DEBUG:         DepthEnable = depthEnable;
    // DEBUG:         DepthWriteMask = depthWriteMask;
    // DEBUG:         DepthFunc = depthFunc;
    // DEBUG:         StencilEnable = stencilEnable;
    // DEBUG:         StencilReadMask = stencilReadMask;
    // DEBUG:         StencilWriteMask = stencilWriteMask;
    // DEBUG:         FrontFace.StencilFailOp = frontStencilFailOp;
    // DEBUG:         FrontFace.StencilDepthFailOp = frontStencilDepthFailOp;
    // DEBUG:         FrontFace.StencilPassOp = frontStencilPassOp;
    // DEBUG:         FrontFace.StencilFunc = frontStencilFunc;
    // DEBUG:         BackFace.StencilFailOp = backStencilFailOp;
    // DEBUG:         BackFace.StencilDepthFailOp = backStencilDepthFailOp;
    // DEBUG:         BackFace.StencilPassOp = backStencilPassOp;
    // DEBUG:         BackFace.StencilFunc = backStencilFunc;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_DEPTH_STENCIL_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11DEPTH_STENCIL_DESC : global::SpoutDX.D3D11DEPTH_STENCIL_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 52)]
        public new partial struct __Internal
        {
            internal int DepthEnable;
            internal global::SpoutDX.D3D11DEPTH_WRITE_MASK DepthWriteMask;
            internal global::SpoutDX.D3D11COMPARISON_FUNC DepthFunc;
            internal int StencilEnable;
            internal byte StencilReadMask;
            internal byte StencilWriteMask;
            internal global::SpoutDX.D3D11DEPTH_STENCILOP_DESC.__Internal FrontFace;
            internal global::SpoutDX.D3D11DEPTH_STENCILOP_DESC.__Internal BackFace;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_DEPTH_STENCIL_DESC@@QEAA@AEBUD3D11_DEPTH_STENCIL_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_DEPTH_STENCIL_DESC@@QEAA@UCD3D11_DEFAULT@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, global::SpoutDX.CD3D11DEFAULT.__Internal _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_DEPTH_STENCIL_DESC@@QEAA@HW4D3D11_DEPTH_WRITE_MASK@@W4D3D11_COMPARISON_FUNC@@HEEW4D3D11_STENCIL_OP@@2212221@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, int depthEnable, global::SpoutDX.D3D11DEPTH_WRITE_MASK depthWriteMask, global::SpoutDX.D3D11COMPARISON_FUNC depthFunc, int stencilEnable, byte stencilReadMask, byte stencilWriteMask, global::SpoutDX.D3D11STENCIL_OP frontStencilFailOp, global::SpoutDX.D3D11STENCIL_OP frontStencilDepthFailOp, global::SpoutDX.D3D11STENCIL_OP frontStencilPassOp, global::SpoutDX.D3D11COMPARISON_FUNC frontStencilFunc, global::SpoutDX.D3D11STENCIL_OP backStencilFailOp, global::SpoutDX.D3D11STENCIL_OP backStencilDepthFailOp, global::SpoutDX.D3D11STENCIL_OP backStencilPassOp, global::SpoutDX.D3D11COMPARISON_FUNC backStencilFunc);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_DEPTH_STENCIL_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11DEPTH_STENCIL_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11DEPTH_STENCIL_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11DEPTH_STENCIL_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11DEPTH_STENCIL_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11DEPTH_STENCIL_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11DEPTH_STENCIL_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11DEPTH_STENCIL_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11DEPTH_STENCIL_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_DEPTH_STENCIL_DESC() = default
        public CD3D11DEPTH_STENCIL_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11DEPTH_STENCIL_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_DEPTH_STENCIL_DESC( const D3D11_DEPTH_STENCIL_DESC& o ) :
        // DEBUG:         D3D11_DEPTH_STENCIL_DESC( o )
        // DEBUG:     {}
        public CD3D11DEPTH_STENCIL_DESC(global::SpoutDX.D3D11DEPTH_STENCIL_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11DEPTH_STENCIL_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D11_DEPTH_STENCIL_DESC( CD3D11_DEFAULT )
        // DEBUG:     {
        // DEBUG:         DepthEnable = TRUE;
        // DEBUG:         DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL;
        // DEBUG:         DepthFunc = D3D11_COMPARISON_LESS;
        // DEBUG:         StencilEnable = FALSE;
        // DEBUG:         StencilReadMask = D3D11_DEFAULT_STENCIL_READ_MASK;
        // DEBUG:         StencilWriteMask = D3D11_DEFAULT_STENCIL_WRITE_MASK;
        // DEBUG:         const D3D11_DEPTH_STENCILOP_DESC defaultStencilOp =
        // DEBUG:         { D3D11_STENCIL_OP_KEEP, D3D11_STENCIL_OP_KEEP, D3D11_STENCIL_OP_KEEP, D3D11_COMPARISON_ALWAYS };
        // DEBUG:         FrontFace = defaultStencilOp;
        // DEBUG:         BackFace = defaultStencilOp;
        // DEBUG:     }
        public CD3D11DEPTH_STENCIL_DESC(global::SpoutDX.CD3D11DEFAULT _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11DEPTH_STENCIL_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
            var __arg0 = _0.__Instance;
            __Internal.ctor(__Instance, *(global::SpoutDX.CD3D11DEFAULT.__Internal*) __arg0);
        }

        // DEBUG: explicit CD3D11_DEPTH_STENCIL_DESC(
        // DEBUG:         BOOL depthEnable,
        // DEBUG:         D3D11_DEPTH_WRITE_MASK depthWriteMask,
        // DEBUG:         D3D11_COMPARISON_FUNC depthFunc,
        // DEBUG:         BOOL stencilEnable,
        // DEBUG:         UINT8 stencilReadMask,
        // DEBUG:         UINT8 stencilWriteMask,
        // DEBUG:         D3D11_STENCIL_OP frontStencilFailOp,
        // DEBUG:         D3D11_STENCIL_OP frontStencilDepthFailOp,
        // DEBUG:         D3D11_STENCIL_OP frontStencilPassOp,
        // DEBUG:         D3D11_COMPARISON_FUNC frontStencilFunc,
        // DEBUG:         D3D11_STENCIL_OP backStencilFailOp,
        // DEBUG:         D3D11_STENCIL_OP backStencilDepthFailOp,
        // DEBUG:         D3D11_STENCIL_OP backStencilPassOp,
        // DEBUG:         D3D11_COMPARISON_FUNC backStencilFunc )
        // DEBUG:     {
        // DEBUG:         DepthEnable = depthEnable;
        // DEBUG:         DepthWriteMask = depthWriteMask;
        // DEBUG:         DepthFunc = depthFunc;
        // DEBUG:         StencilEnable = stencilEnable;
        // DEBUG:         StencilReadMask = stencilReadMask;
        // DEBUG:         StencilWriteMask = stencilWriteMask;
        // DEBUG:         FrontFace.StencilFailOp = frontStencilFailOp;
        // DEBUG:         FrontFace.StencilDepthFailOp = frontStencilDepthFailOp;
        // DEBUG:         FrontFace.StencilPassOp = frontStencilPassOp;
        // DEBUG:         FrontFace.StencilFunc = frontStencilFunc;
        // DEBUG:         BackFace.StencilFailOp = backStencilFailOp;
        // DEBUG:         BackFace.StencilDepthFailOp = backStencilDepthFailOp;
        // DEBUG:         BackFace.StencilPassOp = backStencilPassOp;
        // DEBUG:         BackFace.StencilFunc = backStencilFunc;
        // DEBUG:     }
        public CD3D11DEPTH_STENCIL_DESC(int depthEnable, global::SpoutDX.D3D11DEPTH_WRITE_MASK depthWriteMask, global::SpoutDX.D3D11COMPARISON_FUNC depthFunc, int stencilEnable, byte stencilReadMask, byte stencilWriteMask, global::SpoutDX.D3D11STENCIL_OP frontStencilFailOp, global::SpoutDX.D3D11STENCIL_OP frontStencilDepthFailOp, global::SpoutDX.D3D11STENCIL_OP frontStencilPassOp, global::SpoutDX.D3D11COMPARISON_FUNC frontStencilFunc, global::SpoutDX.D3D11STENCIL_OP backStencilFailOp, global::SpoutDX.D3D11STENCIL_OP backStencilDepthFailOp, global::SpoutDX.D3D11STENCIL_OP backStencilPassOp, global::SpoutDX.D3D11COMPARISON_FUNC backStencilFunc)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11DEPTH_STENCIL_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance, depthEnable, depthWriteMask, depthFunc, stencilEnable, stencilReadMask, stencilWriteMask, frontStencilFailOp, frontStencilDepthFailOp, frontStencilPassOp, frontStencilFunc, backStencilFailOp, backStencilDepthFailOp, backStencilPassOp, backStencilFunc);
        }

        ~CD3D11DEPTH_STENCIL_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static explicit operator global::SpoutDX.CD3D11DEPTH_STENCIL_DESC(global::SpoutDX.CD3D11DEFAULT _0)
        {
            return new global::SpoutDX.CD3D11DEPTH_STENCIL_DESC(_0);
        }
    }

    // DEBUG: struct D3D11_RENDER_TARGET_BLEND_DESC
    // DEBUG:     {
    // DEBUG:     BOOL BlendEnable;
    // DEBUG:     D3D11_BLEND SrcBlend;
    // DEBUG:     D3D11_BLEND DestBlend;
    // DEBUG:     D3D11_BLEND_OP BlendOp;
    // DEBUG:     D3D11_BLEND SrcBlendAlpha;
    // DEBUG:     D3D11_BLEND DestBlendAlpha;
    // DEBUG:     D3D11_BLEND_OP BlendOpAlpha;
    // DEBUG:     UINT8 RenderTargetWriteMask;
    // DEBUG:     }
    public unsafe partial class D3D11RENDER_TARGET_BLEND_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal int BlendEnable;
            internal global::SpoutDX.D3D11BLEND SrcBlend;
            internal global::SpoutDX.D3D11BLEND DestBlend;
            internal global::SpoutDX.D3D11BLEND_OP BlendOp;
            internal global::SpoutDX.D3D11BLEND SrcBlendAlpha;
            internal global::SpoutDX.D3D11BLEND DestBlendAlpha;
            internal global::SpoutDX.D3D11BLEND_OP BlendOpAlpha;
            internal byte RenderTargetWriteMask;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11RENDER_TARGET_BLEND_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11RENDER_TARGET_BLEND_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11RENDER_TARGET_BLEND_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11RENDER_TARGET_BLEND_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11RENDER_TARGET_BLEND_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11RENDER_TARGET_BLEND_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11RENDER_TARGET_BLEND_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11RENDER_TARGET_BLEND_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11RENDER_TARGET_BLEND_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int BlendEnable
        {
            get
            {
                return ((__Internal*)__Instance)->BlendEnable;
            }

            set
            {
                ((__Internal*)__Instance)->BlendEnable = value;
            }
        }

        public global::SpoutDX.D3D11BLEND SrcBlend
        {
            get
            {
                return ((__Internal*)__Instance)->SrcBlend;
            }

            set
            {
                ((__Internal*)__Instance)->SrcBlend = value;
            }
        }

        public global::SpoutDX.D3D11BLEND DestBlend
        {
            get
            {
                return ((__Internal*)__Instance)->DestBlend;
            }

            set
            {
                ((__Internal*)__Instance)->DestBlend = value;
            }
        }

        public global::SpoutDX.D3D11BLEND_OP BlendOp
        {
            get
            {
                return ((__Internal*)__Instance)->BlendOp;
            }

            set
            {
                ((__Internal*)__Instance)->BlendOp = value;
            }
        }

        public global::SpoutDX.D3D11BLEND SrcBlendAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->SrcBlendAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->SrcBlendAlpha = value;
            }
        }

        public global::SpoutDX.D3D11BLEND DestBlendAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->DestBlendAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->DestBlendAlpha = value;
            }
        }

        public global::SpoutDX.D3D11BLEND_OP BlendOpAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->BlendOpAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->BlendOpAlpha = value;
            }
        }

        public byte RenderTargetWriteMask
        {
            get
            {
                return ((__Internal*)__Instance)->RenderTargetWriteMask;
            }

            set
            {
                ((__Internal*)__Instance)->RenderTargetWriteMask = value;
            }
        }
    }

    // DEBUG: struct D3D11_BLEND_DESC
    // DEBUG:     {
    // DEBUG:     BOOL AlphaToCoverageEnable;
    // DEBUG:     BOOL IndependentBlendEnable;
    // DEBUG:     D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[ 8 ];
    // DEBUG:     }
    public unsafe partial class D3D11BLEND_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 264)]
        public partial struct __Internal
        {
            internal int AlphaToCoverageEnable;
            internal int IndependentBlendEnable;
            internal fixed byte RenderTarget[256];
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BLEND_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BLEND_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11BLEND_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11BLEND_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11BLEND_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11BLEND_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11BLEND_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11BLEND_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11BLEND_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11BLEND_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11BLEND_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11BLEND_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11BLEND_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11BLEND_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int AlphaToCoverageEnable
        {
            get
            {
                return ((__Internal*)__Instance)->AlphaToCoverageEnable;
            }

            set
            {
                ((__Internal*)__Instance)->AlphaToCoverageEnable = value;
            }
        }

        public int IndependentBlendEnable
        {
            get
            {
                return ((__Internal*)__Instance)->IndependentBlendEnable;
            }

            set
            {
                ((__Internal*)__Instance)->IndependentBlendEnable = value;
            }
        }

        public global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC[] RenderTarget
        {
            get
            {
                global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC[] __value = null;
                if (((__Internal*)__Instance)->RenderTarget != null)
                {
                    __value = new global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC.__GetOrCreateInstance((IntPtr)((global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC.__Internal*)&(((__Internal*)__Instance)->RenderTarget[i * sizeof(global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC.__Internal)])), true, true);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 8)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 8; i++)
                        *(global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC.__Internal*) &((__Internal*)__Instance)->RenderTarget[i * sizeof(global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC.__Internal)] = *(global::SpoutDX.D3D11RENDER_TARGET_BLEND_DESC.__Internal*)value[i].__Instance;
                }
            }
        }
    }

    // DEBUG: struct CD3D11_BLEND_DESC : public D3D11_BLEND_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_BLEND_DESC() = default;
    // DEBUG:     explicit CD3D11_BLEND_DESC( const D3D11_BLEND_DESC& o ) :
    // DEBUG:         D3D11_BLEND_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_BLEND_DESC( CD3D11_DEFAULT )
    // DEBUG:     {
    // DEBUG:         AlphaToCoverageEnable = FALSE;
    // DEBUG:         IndependentBlendEnable = FALSE;
    // DEBUG:         const D3D11_RENDER_TARGET_BLEND_DESC defaultRenderTargetBlendDesc =
    // DEBUG:         {
    // DEBUG:             FALSE,
    // DEBUG:             D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
    // DEBUG:             D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
    // DEBUG:             D3D11_COLOR_WRITE_ENABLE_ALL,
    // DEBUG:         };
    // DEBUG:         for (UINT i = 0; i < D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT; ++i)
    // DEBUG:             RenderTarget[ i ] = defaultRenderTargetBlendDesc;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_BLEND_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11BLEND_DESC : global::SpoutDX.D3D11BLEND_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 264)]
        public new partial struct __Internal
        {
            internal int AlphaToCoverageEnable;
            internal int IndependentBlendEnable;
            internal fixed byte RenderTarget[256];

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_BLEND_DESC@@QEAA@AEBUD3D11_BLEND_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_BLEND_DESC@@QEAA@UCD3D11_DEFAULT@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, global::SpoutDX.CD3D11DEFAULT.__Internal _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_BLEND_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11BLEND_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11BLEND_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11BLEND_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11BLEND_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11BLEND_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11BLEND_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11BLEND_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11BLEND_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_BLEND_DESC() = default
        public CD3D11BLEND_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11BLEND_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_BLEND_DESC( const D3D11_BLEND_DESC& o ) :
        // DEBUG:         D3D11_BLEND_DESC( o )
        // DEBUG:     {}
        public CD3D11BLEND_DESC(global::SpoutDX.D3D11BLEND_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11BLEND_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D11_BLEND_DESC( CD3D11_DEFAULT )
        // DEBUG:     {
        // DEBUG:         AlphaToCoverageEnable = FALSE;
        // DEBUG:         IndependentBlendEnable = FALSE;
        // DEBUG:         const D3D11_RENDER_TARGET_BLEND_DESC defaultRenderTargetBlendDesc =
        // DEBUG:         {
        // DEBUG:             FALSE,
        // DEBUG:             D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
        // DEBUG:             D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
        // DEBUG:             D3D11_COLOR_WRITE_ENABLE_ALL,
        // DEBUG:         };
        // DEBUG:         for (UINT i = 0; i < D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT; ++i)
        // DEBUG:             RenderTarget[ i ] = defaultRenderTargetBlendDesc;
        // DEBUG:     }
        public CD3D11BLEND_DESC(global::SpoutDX.CD3D11DEFAULT _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11BLEND_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
            var __arg0 = _0.__Instance;
            __Internal.ctor(__Instance, *(global::SpoutDX.CD3D11DEFAULT.__Internal*) __arg0);
        }

        ~CD3D11BLEND_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static explicit operator global::SpoutDX.CD3D11BLEND_DESC(global::SpoutDX.CD3D11DEFAULT _0)
        {
            return new global::SpoutDX.CD3D11BLEND_DESC(_0);
        }
    }

    // DEBUG: struct D3D11_RASTERIZER_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_FILL_MODE FillMode;
    // DEBUG:     D3D11_CULL_MODE CullMode;
    // DEBUG:     BOOL FrontCounterClockwise;
    // DEBUG:     INT DepthBias;
    // DEBUG:     FLOAT DepthBiasClamp;
    // DEBUG:     FLOAT SlopeScaledDepthBias;
    // DEBUG:     BOOL DepthClipEnable;
    // DEBUG:     BOOL ScissorEnable;
    // DEBUG:     BOOL MultisampleEnable;
    // DEBUG:     BOOL AntialiasedLineEnable;
    // DEBUG:     }
    public unsafe partial class D3D11RASTERIZER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11FILL_MODE FillMode;
            internal global::SpoutDX.D3D11CULL_MODE CullMode;
            internal int FrontCounterClockwise;
            internal int DepthBias;
            internal float DepthBiasClamp;
            internal float SlopeScaledDepthBias;
            internal int DepthClipEnable;
            internal int ScissorEnable;
            internal int MultisampleEnable;
            internal int AntialiasedLineEnable;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11RASTERIZER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11RASTERIZER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11RASTERIZER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11RASTERIZER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11RASTERIZER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11RASTERIZER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11RASTERIZER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11RASTERIZER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11RASTERIZER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11RASTERIZER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11RASTERIZER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11RASTERIZER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11RASTERIZER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11RASTERIZER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11FILL_MODE FillMode
        {
            get
            {
                return ((__Internal*)__Instance)->FillMode;
            }

            set
            {
                ((__Internal*)__Instance)->FillMode = value;
            }
        }

        public global::SpoutDX.D3D11CULL_MODE CullMode
        {
            get
            {
                return ((__Internal*)__Instance)->CullMode;
            }

            set
            {
                ((__Internal*)__Instance)->CullMode = value;
            }
        }

        public int FrontCounterClockwise
        {
            get
            {
                return ((__Internal*)__Instance)->FrontCounterClockwise;
            }

            set
            {
                ((__Internal*)__Instance)->FrontCounterClockwise = value;
            }
        }

        public int DepthBias
        {
            get
            {
                return ((__Internal*)__Instance)->DepthBias;
            }

            set
            {
                ((__Internal*)__Instance)->DepthBias = value;
            }
        }

        public float DepthBiasClamp
        {
            get
            {
                return ((__Internal*)__Instance)->DepthBiasClamp;
            }

            set
            {
                ((__Internal*)__Instance)->DepthBiasClamp = value;
            }
        }

        public float SlopeScaledDepthBias
        {
            get
            {
                return ((__Internal*)__Instance)->SlopeScaledDepthBias;
            }

            set
            {
                ((__Internal*)__Instance)->SlopeScaledDepthBias = value;
            }
        }

        public int DepthClipEnable
        {
            get
            {
                return ((__Internal*)__Instance)->DepthClipEnable;
            }

            set
            {
                ((__Internal*)__Instance)->DepthClipEnable = value;
            }
        }

        public int ScissorEnable
        {
            get
            {
                return ((__Internal*)__Instance)->ScissorEnable;
            }

            set
            {
                ((__Internal*)__Instance)->ScissorEnable = value;
            }
        }

        public int MultisampleEnable
        {
            get
            {
                return ((__Internal*)__Instance)->MultisampleEnable;
            }

            set
            {
                ((__Internal*)__Instance)->MultisampleEnable = value;
            }
        }

        public int AntialiasedLineEnable
        {
            get
            {
                return ((__Internal*)__Instance)->AntialiasedLineEnable;
            }

            set
            {
                ((__Internal*)__Instance)->AntialiasedLineEnable = value;
            }
        }
    }

    // DEBUG: struct CD3D11_RASTERIZER_DESC : public D3D11_RASTERIZER_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_RASTERIZER_DESC() = default;
    // DEBUG:     explicit CD3D11_RASTERIZER_DESC( const D3D11_RASTERIZER_DESC& o ) :
    // DEBUG:         D3D11_RASTERIZER_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_RASTERIZER_DESC( CD3D11_DEFAULT )
    // DEBUG:     {
    // DEBUG:         FillMode = D3D11_FILL_SOLID;
    // DEBUG:         CullMode = D3D11_CULL_BACK;
    // DEBUG:         FrontCounterClockwise = FALSE;
    // DEBUG:         DepthBias = D3D11_DEFAULT_DEPTH_BIAS;
    // DEBUG:         DepthBiasClamp = D3D11_DEFAULT_DEPTH_BIAS_CLAMP;
    // DEBUG:         SlopeScaledDepthBias = D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS;
    // DEBUG:         DepthClipEnable = TRUE;
    // DEBUG:         ScissorEnable = FALSE;
    // DEBUG:         MultisampleEnable = FALSE;
    // DEBUG:         AntialiasedLineEnable = FALSE;
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_RASTERIZER_DESC(
    // DEBUG:         D3D11_FILL_MODE fillMode,
    // DEBUG:         D3D11_CULL_MODE cullMode,
    // DEBUG:         BOOL frontCounterClockwise,
    // DEBUG:         INT depthBias,
    // DEBUG:         FLOAT depthBiasClamp,
    // DEBUG:         FLOAT slopeScaledDepthBias,
    // DEBUG:         BOOL depthClipEnable,
    // DEBUG:         BOOL scissorEnable,
    // DEBUG:         BOOL multisampleEnable,
    // DEBUG:         BOOL antialiasedLineEnable )
    // DEBUG:     {
    // DEBUG:         FillMode = fillMode;
    // DEBUG:         CullMode = cullMode;
    // DEBUG:         FrontCounterClockwise = frontCounterClockwise;
    // DEBUG:         DepthBias = depthBias;
    // DEBUG:         DepthBiasClamp = depthBiasClamp;
    // DEBUG:         SlopeScaledDepthBias = slopeScaledDepthBias;
    // DEBUG:         DepthClipEnable = depthClipEnable;
    // DEBUG:         ScissorEnable = scissorEnable;
    // DEBUG:         MultisampleEnable = multisampleEnable;
    // DEBUG:         AntialiasedLineEnable = antialiasedLineEnable;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_RASTERIZER_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11RASTERIZER_DESC : global::SpoutDX.D3D11RASTERIZER_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public new partial struct __Internal
        {
            internal global::SpoutDX.D3D11FILL_MODE FillMode;
            internal global::SpoutDX.D3D11CULL_MODE CullMode;
            internal int FrontCounterClockwise;
            internal int DepthBias;
            internal float DepthBiasClamp;
            internal float SlopeScaledDepthBias;
            internal int DepthClipEnable;
            internal int ScissorEnable;
            internal int MultisampleEnable;
            internal int AntialiasedLineEnable;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_RASTERIZER_DESC@@QEAA@AEBUD3D11_RASTERIZER_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_RASTERIZER_DESC@@QEAA@UCD3D11_DEFAULT@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, global::SpoutDX.CD3D11DEFAULT.__Internal _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_RASTERIZER_DESC@@QEAA@W4D3D11_FILL_MODE@@W4D3D11_CULL_MODE@@HHMMHHHH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, global::SpoutDX.D3D11FILL_MODE fillMode, global::SpoutDX.D3D11CULL_MODE cullMode, int frontCounterClockwise, int depthBias, float depthBiasClamp, float slopeScaledDepthBias, int depthClipEnable, int scissorEnable, int multisampleEnable, int antialiasedLineEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_RASTERIZER_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11RASTERIZER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11RASTERIZER_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11RASTERIZER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11RASTERIZER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11RASTERIZER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11RASTERIZER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11RASTERIZER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11RASTERIZER_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_RASTERIZER_DESC() = default
        public CD3D11RASTERIZER_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11RASTERIZER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_RASTERIZER_DESC( const D3D11_RASTERIZER_DESC& o ) :
        // DEBUG:         D3D11_RASTERIZER_DESC( o )
        // DEBUG:     {}
        public CD3D11RASTERIZER_DESC(global::SpoutDX.D3D11RASTERIZER_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11RASTERIZER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D11_RASTERIZER_DESC( CD3D11_DEFAULT )
        // DEBUG:     {
        // DEBUG:         FillMode = D3D11_FILL_SOLID;
        // DEBUG:         CullMode = D3D11_CULL_BACK;
        // DEBUG:         FrontCounterClockwise = FALSE;
        // DEBUG:         DepthBias = D3D11_DEFAULT_DEPTH_BIAS;
        // DEBUG:         DepthBiasClamp = D3D11_DEFAULT_DEPTH_BIAS_CLAMP;
        // DEBUG:         SlopeScaledDepthBias = D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS;
        // DEBUG:         DepthClipEnable = TRUE;
        // DEBUG:         ScissorEnable = FALSE;
        // DEBUG:         MultisampleEnable = FALSE;
        // DEBUG:         AntialiasedLineEnable = FALSE;
        // DEBUG:     }
        public CD3D11RASTERIZER_DESC(global::SpoutDX.CD3D11DEFAULT _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11RASTERIZER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
            var __arg0 = _0.__Instance;
            __Internal.ctor(__Instance, *(global::SpoutDX.CD3D11DEFAULT.__Internal*) __arg0);
        }

        // DEBUG: explicit CD3D11_RASTERIZER_DESC(
        // DEBUG:         D3D11_FILL_MODE fillMode,
        // DEBUG:         D3D11_CULL_MODE cullMode,
        // DEBUG:         BOOL frontCounterClockwise,
        // DEBUG:         INT depthBias,
        // DEBUG:         FLOAT depthBiasClamp,
        // DEBUG:         FLOAT slopeScaledDepthBias,
        // DEBUG:         BOOL depthClipEnable,
        // DEBUG:         BOOL scissorEnable,
        // DEBUG:         BOOL multisampleEnable,
        // DEBUG:         BOOL antialiasedLineEnable )
        // DEBUG:     {
        // DEBUG:         FillMode = fillMode;
        // DEBUG:         CullMode = cullMode;
        // DEBUG:         FrontCounterClockwise = frontCounterClockwise;
        // DEBUG:         DepthBias = depthBias;
        // DEBUG:         DepthBiasClamp = depthBiasClamp;
        // DEBUG:         SlopeScaledDepthBias = slopeScaledDepthBias;
        // DEBUG:         DepthClipEnable = depthClipEnable;
        // DEBUG:         ScissorEnable = scissorEnable;
        // DEBUG:         MultisampleEnable = multisampleEnable;
        // DEBUG:         AntialiasedLineEnable = antialiasedLineEnable;
        // DEBUG:     }
        public CD3D11RASTERIZER_DESC(global::SpoutDX.D3D11FILL_MODE fillMode, global::SpoutDX.D3D11CULL_MODE cullMode, int frontCounterClockwise, int depthBias, float depthBiasClamp, float slopeScaledDepthBias, int depthClipEnable, int scissorEnable, int multisampleEnable, int antialiasedLineEnable)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11RASTERIZER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance, fillMode, cullMode, frontCounterClockwise, depthBias, depthBiasClamp, slopeScaledDepthBias, depthClipEnable, scissorEnable, multisampleEnable, antialiasedLineEnable);
        }

        ~CD3D11RASTERIZER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static explicit operator global::SpoutDX.CD3D11RASTERIZER_DESC(global::SpoutDX.CD3D11DEFAULT _0)
        {
            return new global::SpoutDX.CD3D11RASTERIZER_DESC(_0);
        }
    }

    // DEBUG: struct D3D11_SUBRESOURCE_DATA
    // DEBUG:     {
    // DEBUG:     const void *pSysMem;
    // DEBUG:     UINT SysMemPitch;
    // DEBUG:     UINT SysMemSlicePitch;
    // DEBUG:     }
    public unsafe partial class D3D11SUBRESOURCE_DATA : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr pSysMem;
            internal uint SysMemPitch;
            internal uint SysMemSlicePitch;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11SUBRESOURCE_DATA>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11SUBRESOURCE_DATA>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11SUBRESOURCE_DATA managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11SUBRESOURCE_DATA>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11SUBRESOURCE_DATA managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11SUBRESOURCE_DATA __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11SUBRESOURCE_DATA(native.ToPointer(), skipVTables);
        }

        internal static D3D11SUBRESOURCE_DATA __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11SUBRESOURCE_DATA)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11SUBRESOURCE_DATA __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11SUBRESOURCE_DATA(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11SUBRESOURCE_DATA(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11SUBRESOURCE_DATA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11SUBRESOURCE_DATA()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public __IntPtr PSysMem
        {
            get
            {
                return ((__Internal*)__Instance)->pSysMem;
            }
        }

        public uint SysMemPitch
        {
            get
            {
                return ((__Internal*)__Instance)->SysMemPitch;
            }

            set
            {
                ((__Internal*)__Instance)->SysMemPitch = value;
            }
        }

        public uint SysMemSlicePitch
        {
            get
            {
                return ((__Internal*)__Instance)->SysMemSlicePitch;
            }

            set
            {
                ((__Internal*)__Instance)->SysMemSlicePitch = value;
            }
        }
    }

    // DEBUG: struct D3D11_MAPPED_SUBRESOURCE
    // DEBUG:     {
    // DEBUG:     void *pData;
    // DEBUG:     UINT RowPitch;
    // DEBUG:     UINT DepthPitch;
    // DEBUG:     }
    public unsafe partial class D3D11MAPPED_SUBRESOURCE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr pData;
            internal uint RowPitch;
            internal uint DepthPitch;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11MAPPED_SUBRESOURCE>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11MAPPED_SUBRESOURCE>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11MAPPED_SUBRESOURCE managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11MAPPED_SUBRESOURCE>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11MAPPED_SUBRESOURCE managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11MAPPED_SUBRESOURCE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11MAPPED_SUBRESOURCE(native.ToPointer(), skipVTables);
        }

        internal static D3D11MAPPED_SUBRESOURCE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11MAPPED_SUBRESOURCE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11MAPPED_SUBRESOURCE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11MAPPED_SUBRESOURCE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11MAPPED_SUBRESOURCE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11MAPPED_SUBRESOURCE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11MAPPED_SUBRESOURCE()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public __IntPtr PData
        {
            get
            {
                return ((__Internal*)__Instance)->pData;
            }

            set
            {
                ((__Internal*)__Instance)->pData = (__IntPtr) value;
            }
        }

        public uint RowPitch
        {
            get
            {
                return ((__Internal*)__Instance)->RowPitch;
            }

            set
            {
                ((__Internal*)__Instance)->RowPitch = value;
            }
        }

        public uint DepthPitch
        {
            get
            {
                return ((__Internal*)__Instance)->DepthPitch;
            }

            set
            {
                ((__Internal*)__Instance)->DepthPitch = value;
            }
        }
    }

    // DEBUG: struct D3D11_BUFFER_DESC
    // DEBUG:     {
    // DEBUG:     UINT ByteWidth;
    // DEBUG:     D3D11_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     UINT StructureByteStride;
    // DEBUG:     }
    public unsafe partial class D3D11BUFFER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal uint ByteWidth;
            internal global::SpoutDX.D3D11USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;
            internal uint StructureByteStride;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11BUFFER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11BUFFER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11BUFFER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11BUFFER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11BUFFER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11BUFFER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11BUFFER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11BUFFER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11BUFFER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11BUFFER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11BUFFER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11BUFFER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ByteWidth
        {
            get
            {
                return ((__Internal*)__Instance)->ByteWidth;
            }

            set
            {
                ((__Internal*)__Instance)->ByteWidth = value;
            }
        }

        public global::SpoutDX.D3D11USAGE Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }

        public uint BindFlags
        {
            get
            {
                return ((__Internal*)__Instance)->BindFlags;
            }

            set
            {
                ((__Internal*)__Instance)->BindFlags = value;
            }
        }

        public uint CPUAccessFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CPUAccessFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CPUAccessFlags = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }

        public uint StructureByteStride
        {
            get
            {
                return ((__Internal*)__Instance)->StructureByteStride;
            }

            set
            {
                ((__Internal*)__Instance)->StructureByteStride = value;
            }
        }
    }

    // DEBUG: struct CD3D11_BUFFER_DESC : public D3D11_BUFFER_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_BUFFER_DESC() = default;
    // DEBUG:     explicit CD3D11_BUFFER_DESC( const D3D11_BUFFER_DESC& o ) :
    // DEBUG:         D3D11_BUFFER_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_BUFFER_DESC(
    // DEBUG:         UINT byteWidth,
    // DEBUG:         UINT bindFlags,
    // DEBUG:         D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
    // DEBUG:         UINT cpuaccessFlags = 0,
    // DEBUG:         UINT miscFlags = 0,
    // DEBUG:         UINT structureByteStride = 0 )
    // DEBUG:     {
    // DEBUG:         ByteWidth = byteWidth;
    // DEBUG:         Usage = usage;
    // DEBUG:         BindFlags = bindFlags;
    // DEBUG:         CPUAccessFlags = cpuaccessFlags ;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:         StructureByteStride = structureByteStride;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_BUFFER_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11BUFFER_DESC : global::SpoutDX.D3D11BUFFER_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public new partial struct __Internal
        {
            internal uint ByteWidth;
            internal global::SpoutDX.D3D11USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;
            internal uint StructureByteStride;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_BUFFER_DESC@@QEAA@AEBUD3D11_BUFFER_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_BUFFER_DESC@@QEAA@IIW4D3D11_USAGE@@III@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, uint byteWidth, uint bindFlags, global::SpoutDX.D3D11USAGE usage, uint cpuaccessFlags, uint miscFlags, uint structureByteStride);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_BUFFER_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11BUFFER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11BUFFER_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11BUFFER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11BUFFER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11BUFFER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11BUFFER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11BUFFER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11BUFFER_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_BUFFER_DESC() = default
        public CD3D11BUFFER_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_BUFFER_DESC( const D3D11_BUFFER_DESC& o ) :
        // DEBUG:         D3D11_BUFFER_DESC( o )
        // DEBUG:     {}
        public CD3D11BUFFER_DESC(global::SpoutDX.D3D11BUFFER_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D11_BUFFER_DESC(
        // DEBUG:         UINT byteWidth,
        // DEBUG:         UINT bindFlags,
        // DEBUG:         D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
        // DEBUG:         UINT cpuaccessFlags = 0,
        // DEBUG:         UINT miscFlags = 0,
        // DEBUG:         UINT structureByteStride = 0 )
        // DEBUG:     {
        // DEBUG:         ByteWidth = byteWidth;
        // DEBUG:         Usage = usage;
        // DEBUG:         BindFlags = bindFlags;
        // DEBUG:         CPUAccessFlags = cpuaccessFlags ;
        // DEBUG:         MiscFlags = miscFlags;
        // DEBUG:         StructureByteStride = structureByteStride;
        // DEBUG:     }
        public CD3D11BUFFER_DESC(uint byteWidth, uint bindFlags, global::SpoutDX.D3D11USAGE usage, uint cpuaccessFlags, uint miscFlags, uint structureByteStride)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance, byteWidth, bindFlags, usage, cpuaccessFlags, miscFlags, structureByteStride);
        }

        ~CD3D11BUFFER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_TEXTURE1D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D11TEXTURE1D_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal uint Width;
            internal uint MipLevels;
            internal uint ArraySize;
            internal global::DXGI_FORMAT Format;
            internal global::SpoutDX.D3D11USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXTURE1D_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXTURE1D_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEXTURE1D_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEXTURE1D_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEXTURE1D_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEXTURE1D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEXTURE1D_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEXTURE1D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEXTURE1D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEXTURE1D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEXTURE1D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEXTURE1D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEXTURE1D_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEXTURE1D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }

        public global::SpoutDX.D3D11USAGE Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }

        public uint BindFlags
        {
            get
            {
                return ((__Internal*)__Instance)->BindFlags;
            }

            set
            {
                ((__Internal*)__Instance)->BindFlags = value;
            }
        }

        public uint CPUAccessFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CPUAccessFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CPUAccessFlags = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct CD3D11_TEXTURE1D_DESC : public D3D11_TEXTURE1D_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_TEXTURE1D_DESC() = default;
    // DEBUG:     explicit CD3D11_TEXTURE1D_DESC( const D3D11_TEXTURE1D_DESC& o ) :
    // DEBUG:         D3D11_TEXTURE1D_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_TEXTURE1D_DESC(
    // DEBUG:         DXGI_FORMAT format,
    // DEBUG:         UINT width,
    // DEBUG:         UINT arraySize = 1,
    // DEBUG:         UINT mipLevels = 0,
    // DEBUG:         UINT bindFlags = D3D11_BIND_SHADER_RESOURCE,
    // DEBUG:         D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
    // DEBUG:         UINT cpuaccessFlags= 0,
    // DEBUG:         UINT miscFlags = 0 )
    // DEBUG:     {
    // DEBUG:         Width = width;
    // DEBUG:         MipLevels = mipLevels;
    // DEBUG:         ArraySize = arraySize;
    // DEBUG:         Format = format;
    // DEBUG:         Usage = usage;
    // DEBUG:         BindFlags = bindFlags;
    // DEBUG:         CPUAccessFlags = cpuaccessFlags;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_TEXTURE1D_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11TEXTURE1D_DESC : global::SpoutDX.D3D11TEXTURE1D_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public new partial struct __Internal
        {
            internal uint Width;
            internal uint MipLevels;
            internal uint ArraySize;
            internal global::DXGI_FORMAT Format;
            internal global::SpoutDX.D3D11USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_TEXTURE1D_DESC@@QEAA@AEBUD3D11_TEXTURE1D_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_TEXTURE1D_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11TEXTURE1D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11TEXTURE1D_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11TEXTURE1D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11TEXTURE1D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11TEXTURE1D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11TEXTURE1D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11TEXTURE1D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11TEXTURE1D_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_TEXTURE1D_DESC() = default
        public CD3D11TEXTURE1D_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11TEXTURE1D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_TEXTURE1D_DESC( const D3D11_TEXTURE1D_DESC& o ) :
        // DEBUG:         D3D11_TEXTURE1D_DESC( o )
        // DEBUG:     {}
        public CD3D11TEXTURE1D_DESC(global::SpoutDX.D3D11TEXTURE1D_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11TEXTURE1D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        ~CD3D11TEXTURE1D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_TEXTURE2D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     DXGI_SAMPLE_DESC SampleDesc;
    // DEBUG:     D3D11_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D11TEXTURE2D_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 44)]
        public partial struct __Internal
        {
            internal uint Width;
            internal uint Height;
            internal uint MipLevels;
            internal uint ArraySize;
            internal global::DXGI_FORMAT Format;
            internal global::DXGI_SAMPLE_DESC.__Internal SampleDesc;
            internal global::SpoutDX.D3D11USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXTURE2D_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXTURE2D_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEXTURE2D_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEXTURE2D_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEXTURE2D_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEXTURE2D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEXTURE2D_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEXTURE2D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEXTURE2D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEXTURE2D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEXTURE2D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEXTURE2D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEXTURE2D_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEXTURE2D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }

        public global::SpoutDX.D3D11USAGE Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }

        public uint BindFlags
        {
            get
            {
                return ((__Internal*)__Instance)->BindFlags;
            }

            set
            {
                ((__Internal*)__Instance)->BindFlags = value;
            }
        }

        public uint CPUAccessFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CPUAccessFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CPUAccessFlags = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct CD3D11_TEXTURE2D_DESC : public D3D11_TEXTURE2D_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_TEXTURE2D_DESC() = default;
    // DEBUG:     explicit CD3D11_TEXTURE2D_DESC( const D3D11_TEXTURE2D_DESC& o ) :
    // DEBUG:         D3D11_TEXTURE2D_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_TEXTURE2D_DESC(
    // DEBUG:         DXGI_FORMAT format,
    // DEBUG:         UINT width,
    // DEBUG:         UINT height,
    // DEBUG:         UINT arraySize = 1,
    // DEBUG:         UINT mipLevels = 0,
    // DEBUG:         UINT bindFlags = D3D11_BIND_SHADER_RESOURCE,
    // DEBUG:         D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
    // DEBUG:         UINT cpuaccessFlags = 0,
    // DEBUG:         UINT sampleCount = 1,
    // DEBUG:         UINT sampleQuality = 0,
    // DEBUG:         UINT miscFlags = 0 )
    // DEBUG:     {
    // DEBUG:         Width = width;
    // DEBUG:         Height = height;
    // DEBUG:         MipLevels = mipLevels;
    // DEBUG:         ArraySize = arraySize;
    // DEBUG:         Format = format;
    // DEBUG:         SampleDesc.Count = sampleCount;
    // DEBUG:         SampleDesc.Quality = sampleQuality;
    // DEBUG:         Usage = usage;
    // DEBUG:         BindFlags = bindFlags;
    // DEBUG:         CPUAccessFlags = cpuaccessFlags;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_TEXTURE2D_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11TEXTURE2D_DESC : global::SpoutDX.D3D11TEXTURE2D_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 44)]
        public new partial struct __Internal
        {
            internal uint Width;
            internal uint Height;
            internal uint MipLevels;
            internal uint ArraySize;
            internal global::DXGI_FORMAT Format;
            internal global::DXGI_SAMPLE_DESC.__Internal SampleDesc;
            internal global::SpoutDX.D3D11USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_TEXTURE2D_DESC@@QEAA@AEBUD3D11_TEXTURE2D_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_TEXTURE2D_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11TEXTURE2D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11TEXTURE2D_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11TEXTURE2D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11TEXTURE2D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11TEXTURE2D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11TEXTURE2D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11TEXTURE2D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11TEXTURE2D_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_TEXTURE2D_DESC() = default
        public CD3D11TEXTURE2D_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11TEXTURE2D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_TEXTURE2D_DESC( const D3D11_TEXTURE2D_DESC& o ) :
        // DEBUG:         D3D11_TEXTURE2D_DESC( o )
        // DEBUG:     {}
        public CD3D11TEXTURE2D_DESC(global::SpoutDX.D3D11TEXTURE2D_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11TEXTURE2D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        ~CD3D11TEXTURE2D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: MIDL_INTERFACE("6f15aaf2-d208-4e89-9ab4-489535d34f9c")
    // DEBUG:     ID3D11Texture2D : public ID3D11Resource
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual void STDMETHODCALLTYPE GetDesc( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_  D3D11_TEXTURE2D_DESC *pDesc) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class ID3D11Texture2D : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3D11Texture2D>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3D11Texture2D>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.ID3D11Texture2D managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.ID3D11Texture2D>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.ID3D11Texture2D managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static ID3D11Texture2D __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new ID3D11Texture2DInternal(native.ToPointer(), skipVTables);
        }

        internal static ID3D11Texture2D __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ID3D11Texture2D)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ID3D11Texture2D __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (ID3D11Texture2D)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static ID3D11Texture2D __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ID3D11Texture2DInternal(native, skipVTables);
        }

        protected ID3D11Texture2D(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~ID3D11Texture2D()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual void STDMETHODCALLTYPE GetDesc( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  D3D11_TEXTURE2D_DESC *pDesc) = 0
        public abstract void GetDesc(global::SpoutDX.D3D11TEXTURE2D_DESC pDesc);

        #region Virtual table interop

        // void STDMETHODCALLTYPE GetDesc( /* [annotation] */ _Out_ D3D11_TEXTURE2D_DESC *pDesc) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr___IntPtr _GetDescDelegateInstance;

        private static void _GetDescDelegateHook(__IntPtr __instance, __IntPtr pDesc)
        {
            var __target = global::SpoutDX.ID3D11Texture2D.__GetInstance(__instance);
            var __result0 = global::SpoutDX.D3D11TEXTURE2D_DESC.__GetOrCreateInstance(pDesc, false);
            __target.GetDesc(__result0);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetDescDelegateInstance += _GetDescDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetDescDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 11, 0);
                            ManagedVTables[0][10] = Thunks[0];
                            VTables.Methods[0] = new Delegate[11];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct D3D11_TEXTURE3D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT Depth;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D11TEXTURE3D_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 36)]
        public partial struct __Internal
        {
            internal uint Width;
            internal uint Height;
            internal uint Depth;
            internal uint MipLevels;
            internal global::DXGI_FORMAT Format;
            internal global::SpoutDX.D3D11USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXTURE3D_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXTURE3D_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEXTURE3D_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEXTURE3D_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEXTURE3D_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEXTURE3D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEXTURE3D_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEXTURE3D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEXTURE3D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEXTURE3D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEXTURE3D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEXTURE3D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEXTURE3D_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEXTURE3D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        public uint Depth
        {
            get
            {
                return ((__Internal*)__Instance)->Depth;
            }

            set
            {
                ((__Internal*)__Instance)->Depth = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public global::SpoutDX.D3D11USAGE Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }

        public uint BindFlags
        {
            get
            {
                return ((__Internal*)__Instance)->BindFlags;
            }

            set
            {
                ((__Internal*)__Instance)->BindFlags = value;
            }
        }

        public uint CPUAccessFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CPUAccessFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CPUAccessFlags = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct CD3D11_TEXTURE3D_DESC : public D3D11_TEXTURE3D_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_TEXTURE3D_DESC() = default;
    // DEBUG:     explicit CD3D11_TEXTURE3D_DESC( const D3D11_TEXTURE3D_DESC& o ) :
    // DEBUG:         D3D11_TEXTURE3D_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_TEXTURE3D_DESC(
    // DEBUG:         DXGI_FORMAT format,
    // DEBUG:         UINT width,
    // DEBUG:         UINT height,
    // DEBUG:         UINT depth,
    // DEBUG:         UINT mipLevels = 0,
    // DEBUG:         UINT bindFlags = D3D11_BIND_SHADER_RESOURCE,
    // DEBUG:         D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
    // DEBUG:         UINT cpuaccessFlags = 0,
    // DEBUG:         UINT miscFlags = 0 )
    // DEBUG:     {
    // DEBUG:         Width = width;
    // DEBUG:         Height = height;
    // DEBUG:         Depth = depth;
    // DEBUG:         MipLevels = mipLevels;
    // DEBUG:         Format = format;
    // DEBUG:         Usage = usage;
    // DEBUG:         BindFlags = bindFlags;
    // DEBUG:         CPUAccessFlags = cpuaccessFlags;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_TEXTURE3D_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11TEXTURE3D_DESC : global::SpoutDX.D3D11TEXTURE3D_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 36)]
        public new partial struct __Internal
        {
            internal uint Width;
            internal uint Height;
            internal uint Depth;
            internal uint MipLevels;
            internal global::DXGI_FORMAT Format;
            internal global::SpoutDX.D3D11USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_TEXTURE3D_DESC@@QEAA@AEBUD3D11_TEXTURE3D_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_TEXTURE3D_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11TEXTURE3D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11TEXTURE3D_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11TEXTURE3D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11TEXTURE3D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11TEXTURE3D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11TEXTURE3D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11TEXTURE3D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11TEXTURE3D_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_TEXTURE3D_DESC() = default
        public CD3D11TEXTURE3D_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11TEXTURE3D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_TEXTURE3D_DESC( const D3D11_TEXTURE3D_DESC& o ) :
        // DEBUG:         D3D11_TEXTURE3D_DESC( o )
        // DEBUG:     {}
        public CD3D11TEXTURE3D_DESC(global::SpoutDX.D3D11TEXTURE3D_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11TEXTURE3D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        ~CD3D11TEXTURE3D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_BUFFER_SRV
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT FirstElement;
    // DEBUG:         UINT ElementOffset;
    // DEBUG:         } 	;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT NumElements;
    // DEBUG:         UINT ElementWidth;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11BUFFER_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint FirstElement;

            [FieldOffset(0)]
            internal uint ElementOffset;

            [FieldOffset(4)]
            internal uint FirstElement1;

            [FieldOffset(4)]
            internal uint ElementOffset1;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFER_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFER_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11BUFFER_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11BUFFER_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11BUFFER_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11BUFFER_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11BUFFER_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11BUFFER_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11BUFFER_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11BUFFER_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11BUFFER_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11BUFFER_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11BUFFER_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11BUFFER_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstElement
        {
            get
            {
                return ((__Internal*)__Instance)->FirstElement;
            }

            set
            {
                ((__Internal*)__Instance)->FirstElement = value;
            }
        }

        public uint ElementOffset
        {
            get
            {
                return ((__Internal*)__Instance)->ElementOffset;
            }

            set
            {
                ((__Internal*)__Instance)->ElementOffset = value;
            }
        }
    }

    // DEBUG: struct D3D11_BUFFEREX_SRV
    // DEBUG:     {
    // DEBUG:     UINT FirstElement;
    // DEBUG:     UINT NumElements;
    // DEBUG:     UINT Flags;
    // DEBUG:     }
    public unsafe partial class D3D11BUFFEREX_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint FirstElement;
            internal uint NumElements;
            internal uint Flags;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFEREX_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFEREX_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11BUFFEREX_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11BUFFEREX_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11BUFFEREX_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11BUFFEREX_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11BUFFEREX_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11BUFFEREX_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11BUFFEREX_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11BUFFEREX_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11BUFFEREX_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11BUFFEREX_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11BUFFEREX_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11BUFFEREX_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstElement
        {
            get
            {
                return ((__Internal*)__Instance)->FirstElement;
            }

            set
            {
                ((__Internal*)__Instance)->FirstElement = value;
            }
        }

        public uint NumElements
        {
            get
            {
                return ((__Internal*)__Instance)->NumElements;
            }

            set
            {
                ((__Internal*)__Instance)->NumElements = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((__Internal*)__Instance)->Flags;
            }

            set
            {
                ((__Internal*)__Instance)->Flags = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX1D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     }
    public unsafe partial class D3D11TEX1D_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX1D_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX1D_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX1D_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX1D_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX1D_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX1D_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX1D_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX1D_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX1D_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX1D_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX1D_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX1D_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX1D_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX1D_ARRAY_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX1D_ARRAY_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX1D_ARRAY_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX1D_ARRAY_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX1D_ARRAY_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX1D_ARRAY_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX1D_ARRAY_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX1D_ARRAY_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX1D_ARRAY_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX1D_ARRAY_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX1D_ARRAY_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX1D_ARRAY_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2D_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_ARRAY_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_ARRAY_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_ARRAY_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_ARRAY_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_ARRAY_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_ARRAY_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_ARRAY_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_ARRAY_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_ARRAY_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_ARRAY_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_ARRAY_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2D_ARRAY_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX3D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     }
    public unsafe partial class D3D11TEX3D_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX3D_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX3D_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX3D_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX3D_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX3D_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX3D_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX3D_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX3D_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX3D_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX3D_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX3D_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX3D_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX3D_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX3D_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEXCUBE_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     }
    public unsafe partial class D3D11TEXCUBE_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXCUBE_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXCUBE_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEXCUBE_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEXCUBE_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEXCUBE_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEXCUBE_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEXCUBE_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEXCUBE_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEXCUBE_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEXCUBE_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEXCUBE_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEXCUBE_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEXCUBE_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEXCUBE_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEXCUBE_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT First2DArrayFace;
    // DEBUG:     UINT NumCubes;
    // DEBUG:     }
    public unsafe partial class D3D11TEXCUBE_ARRAY_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
            internal uint First2DArrayFace;
            internal uint NumCubes;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEXCUBE_ARRAY_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEXCUBE_ARRAY_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEXCUBE_ARRAY_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEXCUBE_ARRAY_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEXCUBE_ARRAY_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEXCUBE_ARRAY_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEXCUBE_ARRAY_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEXCUBE_ARRAY_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEXCUBE_ARRAY_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint First2DArrayFace
        {
            get
            {
                return ((__Internal*)__Instance)->First2DArrayFace;
            }

            set
            {
                ((__Internal*)__Instance)->First2DArrayFace = value;
            }
        }

        public uint NumCubes
        {
            get
            {
                return ((__Internal*)__Instance)->NumCubes;
            }

            set
            {
                ((__Internal*)__Instance)->NumCubes = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2DMS_SRV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2DMS_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint UnusedField_NothingToDefine;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2DMS_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2DMS_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2DMS_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2DMS_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2DMS_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2DMS_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2DMS_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2DMS_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2DMS_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2DMS_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2DMS_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint UnusedFieldNothingToDefine
        {
            get
            {
                return ((__Internal*)__Instance)->UnusedField_NothingToDefine;
            }

            set
            {
                ((__Internal*)__Instance)->UnusedField_NothingToDefine = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2DMS_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2DMS_ARRAY_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2DMS_ARRAY_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2DMS_ARRAY_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2DMS_ARRAY_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2DMS_ARRAY_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2DMS_ARRAY_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2DMS_ARRAY_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2DMS_ARRAY_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2DMS_ARRAY_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2DMS_ARRAY_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_SHADER_RESOURCE_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_SRV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_BUFFER_SRV Buffer;
    // DEBUG:         D3D11_TEX1D_SRV Texture1D;
    // DEBUG:         D3D11_TEX1D_ARRAY_SRV Texture1DArray;
    // DEBUG:         D3D11_TEX2D_SRV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_SRV Texture2DArray;
    // DEBUG:         D3D11_TEX2DMS_SRV Texture2DMS;
    // DEBUG:         D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    // DEBUG:         D3D11_TEX3D_SRV Texture3D;
    // DEBUG:         D3D11_TEXCUBE_SRV TextureCube;
    // DEBUG:         D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
    // DEBUG:         D3D11_BUFFEREX_SRV BufferEx;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11SHADER_RESOURCE_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D_SRV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11BUFFER_SRV.__Internal Buffer;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_SRV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_ARRAY_SRV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_SRV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_ARRAY_SRV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2DMS_SRV.__Internal Texture2DMS;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV.__Internal Texture2DMSArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX3D_SRV.__Internal Texture3D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEXCUBE_SRV.__Internal TextureCube;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV.__Internal TextureCubeArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11BUFFEREX_SRV.__Internal BufferEx;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11SHADER_RESOURCE_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11SHADER_RESOURCE_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11SHADER_RESOURCE_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11SHADER_RESOURCE_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11SHADER_RESOURCE_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11SHADER_RESOURCE_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11SHADER_RESOURCE_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11SHADER_RESOURCE_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11SHADER_RESOURCE_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11SHADER_RESOURCE_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11SHADER_RESOURCE_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11SHADER_RESOURCE_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11SHADER_RESOURCE_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11SHADER_RESOURCE_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D_SRV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D11BUFFER_SRV Buffer
        {
            get
            {
                return global::SpoutDX.D3D11BUFFER_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Buffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Buffer = *(global::SpoutDX.D3D11BUFFER_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX1D_SRV Texture1D
        {
            get
            {
                return global::SpoutDX.D3D11TEX1D_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1D = *(global::SpoutDX.D3D11TEX1D_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX1D_ARRAY_SRV Texture1DArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX1D_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1DArray = *(global::SpoutDX.D3D11TEX1D_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2D_SRV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D11TEX2D_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2D_ARRAY_SRV Texture2DArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DArray = *(global::SpoutDX.D3D11TEX2D_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2DMS_SRV Texture2DMS
        {
            get
            {
                return global::SpoutDX.D3D11TEX2DMS_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMS));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMS = *(global::SpoutDX.D3D11TEX2DMS_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV Texture2DMSArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMSArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMSArray = *(global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX3D_SRV Texture3D
        {
            get
            {
                return global::SpoutDX.D3D11TEX3D_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture3D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture3D = *(global::SpoutDX.D3D11TEX3D_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEXCUBE_SRV TextureCube
        {
            get
            {
                return global::SpoutDX.D3D11TEXCUBE_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->TextureCube));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->TextureCube = *(global::SpoutDX.D3D11TEXCUBE_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV TextureCubeArray
        {
            get
            {
                return global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->TextureCubeArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->TextureCubeArray = *(global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11BUFFEREX_SRV BufferEx
        {
            get
            {
                return global::SpoutDX.D3D11BUFFEREX_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->BufferEx));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->BufferEx = *(global::SpoutDX.D3D11BUFFEREX_SRV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct CD3D11_SHADER_RESOURCE_VIEW_DESC : public D3D11_SHADER_RESOURCE_VIEW_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_SHADER_RESOURCE_VIEW_DESC() = default;
    // DEBUG:     explicit CD3D11_SHADER_RESOURCE_VIEW_DESC( const D3D11_SHADER_RESOURCE_VIEW_DESC& o ) :
    // DEBUG:         D3D11_SHADER_RESOURCE_VIEW_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
    // DEBUG:         D3D11_SRV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mostDetailedMip = 0, // FirstElement for BUFFER
    // DEBUG:         UINT mipLevels = -1, // NumElements for BUFFER
    // DEBUG:         UINT firstArraySlice = 0, // First2DArrayFace for TEXTURECUBEARRAY
    // DEBUG:         UINT arraySize = -1, // NumCubes for TEXTURECUBEARRAY
    // DEBUG:         UINT flags = 0 ) // BUFFEREX only
    // DEBUG:     {
    // DEBUG:         Format = format;
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_SRV_DIMENSION_BUFFER:
    // DEBUG:             Buffer.FirstElement = mostDetailedMip;
    // DEBUG:             Buffer.NumElements = mipLevels;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE1D:
    // DEBUG:             Texture1D.MostDetailedMip = mostDetailedMip;
    // DEBUG:             Texture1D.MipLevels = mipLevels;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE1DARRAY:
    // DEBUG:             Texture1DArray.MostDetailedMip = mostDetailedMip;
    // DEBUG:             Texture1DArray.MipLevels = mipLevels;
    // DEBUG:             Texture1DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture1DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE2D:
    // DEBUG:             Texture2D.MostDetailedMip = mostDetailedMip;
    // DEBUG:             Texture2D.MipLevels = mipLevels;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE2DARRAY:
    // DEBUG:             Texture2DArray.MostDetailedMip = mostDetailedMip;
    // DEBUG:             Texture2DArray.MipLevels = mipLevels;
    // DEBUG:             Texture2DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE2DMS:
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY:
    // DEBUG:             Texture2DMSArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DMSArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE3D:
    // DEBUG:             Texture3D.MostDetailedMip = mostDetailedMip;
    // DEBUG:             Texture3D.MipLevels = mipLevels;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURECUBE:
    // DEBUG:             TextureCube.MostDetailedMip = mostDetailedMip;
    // DEBUG:             TextureCube.MipLevels = mipLevels;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURECUBEARRAY:
    // DEBUG:             TextureCubeArray.MostDetailedMip = mostDetailedMip;
    // DEBUG:             TextureCubeArray.MipLevels = mipLevels;
    // DEBUG:             TextureCubeArray.First2DArrayFace = firstArraySlice;
    // DEBUG:             TextureCubeArray.NumCubes = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_BUFFEREX:
    // DEBUG:             BufferEx.FirstElement = mostDetailedMip;
    // DEBUG:             BufferEx.NumElements = mipLevels;
    // DEBUG:             BufferEx.Flags = flags;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Buffer*,
    // DEBUG:         DXGI_FORMAT format,
    // DEBUG:         UINT firstElement,
    // DEBUG:         UINT numElements,
    // DEBUG:         UINT flags = 0 )
    // DEBUG:     {
    // DEBUG:         Format = format;
    // DEBUG:         ViewDimension = D3D11_SRV_DIMENSION_BUFFEREX;
    // DEBUG:         BufferEx.FirstElement = firstElement;
    // DEBUG:         BufferEx.NumElements = numElements;
    // DEBUG:         BufferEx.Flags = flags;
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture1D* pTex1D,
    // DEBUG:         D3D11_SRV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mostDetailedMip = 0,
    // DEBUG:         UINT mipLevels = -1,
    // DEBUG:         UINT firstArraySlice = 0,
    // DEBUG:         UINT arraySize = -1 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format || (UINT)-1 == mipLevels ||
    // DEBUG:             ((UINT)-1 == arraySize && D3D11_SRV_DIMENSION_TEXTURE1DARRAY == viewDimension))
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE1D_DESC TexDesc;
    // DEBUG:             pTex1D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == mipLevels) mipLevels = TexDesc.MipLevels - mostDetailedMip;
    // DEBUG:             if ((UINT)-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE1D:
    // DEBUG:             Texture1D.MostDetailedMip = mostDetailedMip;
    // DEBUG:             Texture1D.MipLevels = mipLevels;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE1DARRAY:
    // DEBUG:             Texture1DArray.MostDetailedMip = mostDetailedMip;
    // DEBUG:             Texture1DArray.MipLevels = mipLevels;
    // DEBUG:             Texture1DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture1DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture2D* pTex2D,
    // DEBUG:         D3D11_SRV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mostDetailedMip = 0,
    // DEBUG:         UINT mipLevels = -1,
    // DEBUG:         UINT firstArraySlice = 0, // First2DArrayFace for TEXTURECUBEARRAY
    // DEBUG:         UINT arraySize = -1 ) // NumCubes for TEXTURECUBEARRAY
    // DEBUG:     {
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format || 
    // DEBUG:             ((UINT)-1 == mipLevels &&
    // DEBUG:                 D3D11_SRV_DIMENSION_TEXTURE2DMS != viewDimension &&
    // DEBUG:                 D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY != viewDimension) ||
    // DEBUG:             ((UINT)-1 == arraySize &&
    // DEBUG:                 (D3D11_SRV_DIMENSION_TEXTURE2DARRAY == viewDimension ||
    // DEBUG:                 D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY == viewDimension ||
    // DEBUG:                 D3D11_SRV_DIMENSION_TEXTURECUBEARRAY == viewDimension)))
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE2D_DESC TexDesc;
    // DEBUG:             pTex2D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == mipLevels) mipLevels = TexDesc.MipLevels - mostDetailedMip;
    // DEBUG:             if ((UINT)-1 == arraySize)
    // DEBUG:             {
    // DEBUG:                 arraySize = TexDesc.ArraySize - firstArraySlice;
    // DEBUG:                 if (D3D11_SRV_DIMENSION_TEXTURECUBEARRAY == viewDimension) arraySize /= 6;
    // DEBUG:             }
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE2D:
    // DEBUG:             Texture2D.MostDetailedMip = mostDetailedMip;
    // DEBUG:             Texture2D.MipLevels = mipLevels;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE2DARRAY:
    // DEBUG:             Texture2DArray.MostDetailedMip = mostDetailedMip;
    // DEBUG:             Texture2DArray.MipLevels = mipLevels;
    // DEBUG:             Texture2DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE2DMS:
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY:
    // DEBUG:             Texture2DMSArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DMSArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURECUBE:
    // DEBUG:             TextureCube.MostDetailedMip = mostDetailedMip;
    // DEBUG:             TextureCube.MipLevels = mipLevels;
    // DEBUG:             break;
    // DEBUG:         case D3D11_SRV_DIMENSION_TEXTURECUBEARRAY:
    // DEBUG:             TextureCubeArray.MostDetailedMip = mostDetailedMip;
    // DEBUG:             TextureCubeArray.MipLevels = mipLevels;
    // DEBUG:             TextureCubeArray.First2DArrayFace = firstArraySlice;
    // DEBUG:             TextureCubeArray.NumCubes = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture3D* pTex3D,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mostDetailedMip = 0,
    // DEBUG:         UINT mipLevels = -1 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = D3D11_SRV_DIMENSION_TEXTURE3D;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format || (UINT)-1 == mipLevels)
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE3D_DESC TexDesc;
    // DEBUG:             pTex3D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == mipLevels) mipLevels = TexDesc.MipLevels - mostDetailedMip;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         Texture3D.MostDetailedMip = mostDetailedMip;
    // DEBUG:         Texture3D.MipLevels = mipLevels;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_SHADER_RESOURCE_VIEW_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11SHADER_RESOURCE_VIEW_DESC : global::SpoutDX.D3D11SHADER_RESOURCE_VIEW_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D_SRV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11BUFFER_SRV.__Internal Buffer;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_SRV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_ARRAY_SRV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_SRV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_ARRAY_SRV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2DMS_SRV.__Internal Texture2DMS;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2DMS_ARRAY_SRV.__Internal Texture2DMSArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX3D_SRV.__Internal Texture3D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEXCUBE_SRV.__Internal TextureCube;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEXCUBE_ARRAY_SRV.__Internal TextureCubeArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11BUFFEREX_SRV.__Internal BufferEx;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_SHADER_RESOURCE_VIEW_DESC@@QEAA@AEBUD3D11_SHADER_RESOURCE_VIEW_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_SHADER_RESOURCE_VIEW_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11SHADER_RESOURCE_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11SHADER_RESOURCE_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11SHADER_RESOURCE_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11SHADER_RESOURCE_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11SHADER_RESOURCE_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11SHADER_RESOURCE_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11SHADER_RESOURCE_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11SHADER_RESOURCE_VIEW_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_SHADER_RESOURCE_VIEW_DESC() = default
        public CD3D11SHADER_RESOURCE_VIEW_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11SHADER_RESOURCE_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_SHADER_RESOURCE_VIEW_DESC( const D3D11_SHADER_RESOURCE_VIEW_DESC& o ) :
        // DEBUG:         D3D11_SHADER_RESOURCE_VIEW_DESC( o )
        // DEBUG:     {}
        public CD3D11SHADER_RESOURCE_VIEW_DESC(global::SpoutDX.D3D11SHADER_RESOURCE_VIEW_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11SHADER_RESOURCE_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        ~CD3D11SHADER_RESOURCE_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_BUFFER_RTV
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT FirstElement;
    // DEBUG:         UINT ElementOffset;
    // DEBUG:         } 	;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT NumElements;
    // DEBUG:         UINT ElementWidth;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11BUFFER_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint FirstElement;

            [FieldOffset(0)]
            internal uint ElementOffset;

            [FieldOffset(4)]
            internal uint FirstElement1;

            [FieldOffset(4)]
            internal uint ElementOffset1;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFER_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFER_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11BUFFER_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11BUFFER_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11BUFFER_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11BUFFER_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11BUFFER_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D11BUFFER_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11BUFFER_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11BUFFER_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11BUFFER_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11BUFFER_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11BUFFER_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11BUFFER_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstElement
        {
            get
            {
                return ((__Internal*)__Instance)->FirstElement;
            }

            set
            {
                ((__Internal*)__Instance)->FirstElement = value;
            }
        }

        public uint ElementOffset
        {
            get
            {
                return ((__Internal*)__Instance)->ElementOffset;
            }

            set
            {
                ((__Internal*)__Instance)->ElementOffset = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX1D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D11TEX1D_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX1D_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX1D_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX1D_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX1D_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX1D_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX1D_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX1D_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX1D_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX1D_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX1D_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX1D_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX1D_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX1D_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX1D_ARRAY_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX1D_ARRAY_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX1D_ARRAY_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX1D_ARRAY_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX1D_ARRAY_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX1D_ARRAY_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX1D_ARRAY_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX1D_ARRAY_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX1D_ARRAY_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX1D_ARRAY_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX1D_ARRAY_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX1D_ARRAY_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2D_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2DMS_RTV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2DMS_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint UnusedField_NothingToDefine;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2DMS_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2DMS_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2DMS_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2DMS_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2DMS_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2DMS_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2DMS_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2DMS_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2DMS_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2DMS_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2DMS_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint UnusedFieldNothingToDefine
        {
            get
            {
                return ((__Internal*)__Instance)->UnusedField_NothingToDefine;
            }

            set
            {
                ((__Internal*)__Instance)->UnusedField_NothingToDefine = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_ARRAY_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_ARRAY_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_ARRAY_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_ARRAY_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_ARRAY_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_ARRAY_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_ARRAY_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_ARRAY_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_ARRAY_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_ARRAY_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_ARRAY_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2D_ARRAY_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2DMS_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2DMS_ARRAY_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2DMS_ARRAY_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2DMS_ARRAY_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2DMS_ARRAY_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2DMS_ARRAY_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2DMS_ARRAY_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2DMS_ARRAY_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2DMS_ARRAY_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2DMS_ARRAY_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2DMS_ARRAY_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX3D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstWSlice;
    // DEBUG:     UINT WSize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX3D_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstWSlice;
            internal uint WSize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX3D_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX3D_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX3D_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX3D_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX3D_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX3D_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX3D_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX3D_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX3D_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX3D_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX3D_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX3D_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX3D_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX3D_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstWSlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstWSlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstWSlice = value;
            }
        }

        public uint WSize
        {
            get
            {
                return ((__Internal*)__Instance)->WSize;
            }

            set
            {
                ((__Internal*)__Instance)->WSize = value;
            }
        }
    }

    // DEBUG: struct D3D11_RENDER_TARGET_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_RTV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_BUFFER_RTV Buffer;
    // DEBUG:         D3D11_TEX1D_RTV Texture1D;
    // DEBUG:         D3D11_TEX1D_ARRAY_RTV Texture1DArray;
    // DEBUG:         D3D11_TEX2D_RTV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_RTV Texture2DArray;
    // DEBUG:         D3D11_TEX2DMS_RTV Texture2DMS;
    // DEBUG:         D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
    // DEBUG:         D3D11_TEX3D_RTV Texture3D;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11RENDER_TARGET_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D11RTV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11BUFFER_RTV.__Internal Buffer;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_RTV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_ARRAY_RTV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_RTV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_ARRAY_RTV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2DMS_RTV.__Internal Texture2DMS;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV.__Internal Texture2DMSArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX3D_RTV.__Internal Texture3D;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11RENDER_TARGET_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11RENDER_TARGET_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11RENDER_TARGET_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11RENDER_TARGET_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11RENDER_TARGET_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11RENDER_TARGET_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11RENDER_TARGET_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11RENDER_TARGET_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11RENDER_TARGET_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11RENDER_TARGET_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11RENDER_TARGET_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11RENDER_TARGET_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11RENDER_TARGET_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11RENDER_TARGET_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11RTV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D11BUFFER_RTV Buffer
        {
            get
            {
                return global::SpoutDX.D3D11BUFFER_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Buffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Buffer = *(global::SpoutDX.D3D11BUFFER_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX1D_RTV Texture1D
        {
            get
            {
                return global::SpoutDX.D3D11TEX1D_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1D = *(global::SpoutDX.D3D11TEX1D_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX1D_ARRAY_RTV Texture1DArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX1D_ARRAY_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1DArray = *(global::SpoutDX.D3D11TEX1D_ARRAY_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2D_RTV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D11TEX2D_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2D_ARRAY_RTV Texture2DArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_ARRAY_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DArray = *(global::SpoutDX.D3D11TEX2D_ARRAY_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2DMS_RTV Texture2DMS
        {
            get
            {
                return global::SpoutDX.D3D11TEX2DMS_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMS));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMS = *(global::SpoutDX.D3D11TEX2DMS_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV Texture2DMSArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMSArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMSArray = *(global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX3D_RTV Texture3D
        {
            get
            {
                return global::SpoutDX.D3D11TEX3D_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture3D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture3D = *(global::SpoutDX.D3D11TEX3D_RTV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct CD3D11_RENDER_TARGET_VIEW_DESC : public D3D11_RENDER_TARGET_VIEW_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_RENDER_TARGET_VIEW_DESC() = default;
    // DEBUG:     explicit CD3D11_RENDER_TARGET_VIEW_DESC( const D3D11_RENDER_TARGET_VIEW_DESC& o ) :
    // DEBUG:         D3D11_RENDER_TARGET_VIEW_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_RENDER_TARGET_VIEW_DESC(
    // DEBUG:         D3D11_RTV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0, // FirstElement for BUFFER
    // DEBUG:         UINT firstArraySlice = 0, // NumElements for BUFFER, FirstWSlice for TEXTURE3D
    // DEBUG:         UINT arraySize = -1 ) // WSize for TEXTURE3D
    // DEBUG:     {
    // DEBUG:         Format = format;
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_RTV_DIMENSION_BUFFER:
    // DEBUG:             Buffer.FirstElement = mipSlice;
    // DEBUG:             Buffer.NumElements = firstArraySlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE1D:
    // DEBUG:             Texture1D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
    // DEBUG:             Texture1DArray.MipSlice = mipSlice;
    // DEBUG:             Texture1DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture1DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2D:
    // DEBUG:             Texture2D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
    // DEBUG:             Texture2DArray.MipSlice = mipSlice;
    // DEBUG:             Texture2DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2DMS:
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
    // DEBUG:             Texture2DMSArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DMSArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE3D:
    // DEBUG:             Texture3D.MipSlice = mipSlice;
    // DEBUG:             Texture3D.FirstWSlice = firstArraySlice;
    // DEBUG:             Texture3D.WSize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_RENDER_TARGET_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Buffer*,
    // DEBUG:         DXGI_FORMAT format,
    // DEBUG:         UINT firstElement,
    // DEBUG:         UINT numElements )
    // DEBUG:     {
    // DEBUG:         Format = format;
    // DEBUG:         ViewDimension = D3D11_RTV_DIMENSION_BUFFER;
    // DEBUG:         Buffer.FirstElement = firstElement;
    // DEBUG:         Buffer.NumElements = numElements;
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_RENDER_TARGET_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture1D* pTex1D,
    // DEBUG:         D3D11_RTV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0,
    // DEBUG:         UINT firstArraySlice = 0,
    // DEBUG:         UINT arraySize = -1 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format ||
    // DEBUG:             ((UINT)-1 == arraySize && D3D11_RTV_DIMENSION_TEXTURE1DARRAY == viewDimension))
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE1D_DESC TexDesc;
    // DEBUG:             pTex1D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE1D:
    // DEBUG:             Texture1D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
    // DEBUG:             Texture1DArray.MipSlice = mipSlice;
    // DEBUG:             Texture1DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture1DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_RENDER_TARGET_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture2D* pTex2D,
    // DEBUG:         D3D11_RTV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0,
    // DEBUG:         UINT firstArraySlice = 0,
    // DEBUG:         UINT arraySize = -1 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format || 
    // DEBUG:             ((UINT)-1 == arraySize &&
    // DEBUG:                 (D3D11_RTV_DIMENSION_TEXTURE2DARRAY == viewDimension ||
    // DEBUG:                 D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY == viewDimension)))
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE2D_DESC TexDesc;
    // DEBUG:             pTex2D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2D:
    // DEBUG:             Texture2D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
    // DEBUG:             Texture2DArray.MipSlice = mipSlice;
    // DEBUG:             Texture2DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2DMS:
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
    // DEBUG:             Texture2DMSArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DMSArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_RENDER_TARGET_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture3D* pTex3D,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0,
    // DEBUG:         UINT firstWSlice = 0,
    // DEBUG:         UINT wSize = -1 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = D3D11_RTV_DIMENSION_TEXTURE3D;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format || (UINT)-1 == wSize)
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE3D_DESC TexDesc;
    // DEBUG:             pTex3D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == wSize) wSize = TexDesc.Depth - firstWSlice;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         Texture3D.MipSlice = mipSlice;
    // DEBUG:         Texture3D.FirstWSlice = firstWSlice;
    // DEBUG:         Texture3D.WSize = wSize;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_RENDER_TARGET_VIEW_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11RENDER_TARGET_VIEW_DESC : global::SpoutDX.D3D11RENDER_TARGET_VIEW_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D11RTV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11BUFFER_RTV.__Internal Buffer;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_RTV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_ARRAY_RTV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_RTV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_ARRAY_RTV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2DMS_RTV.__Internal Texture2DMS;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2DMS_ARRAY_RTV.__Internal Texture2DMSArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX3D_RTV.__Internal Texture3D;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_RENDER_TARGET_VIEW_DESC@@QEAA@AEBUD3D11_RENDER_TARGET_VIEW_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_RENDER_TARGET_VIEW_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11RENDER_TARGET_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11RENDER_TARGET_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11RENDER_TARGET_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11RENDER_TARGET_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11RENDER_TARGET_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11RENDER_TARGET_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11RENDER_TARGET_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11RENDER_TARGET_VIEW_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_RENDER_TARGET_VIEW_DESC() = default
        public CD3D11RENDER_TARGET_VIEW_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11RENDER_TARGET_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_RENDER_TARGET_VIEW_DESC( const D3D11_RENDER_TARGET_VIEW_DESC& o ) :
        // DEBUG:         D3D11_RENDER_TARGET_VIEW_DESC( o )
        // DEBUG:     {}
        public CD3D11RENDER_TARGET_VIEW_DESC(global::SpoutDX.D3D11RENDER_TARGET_VIEW_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11RENDER_TARGET_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        ~CD3D11RENDER_TARGET_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct CD3D11_VIEWPORT : public D3D11_VIEWPORT
    // DEBUG: {
    // DEBUG:     CD3D11_VIEWPORT() = default;
    // DEBUG:     explicit CD3D11_VIEWPORT( const D3D11_VIEWPORT& o ) :
    // DEBUG:         D3D11_VIEWPORT( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_VIEWPORT(
    // DEBUG:         FLOAT topLeftX,
    // DEBUG:         FLOAT topLeftY,
    // DEBUG:         FLOAT width,
    // DEBUG:         FLOAT height,
    // DEBUG:         FLOAT minDepth = D3D11_MIN_DEPTH,
    // DEBUG:         FLOAT maxDepth = D3D11_MAX_DEPTH )
    // DEBUG:     {
    // DEBUG:         TopLeftX = topLeftX;
    // DEBUG:         TopLeftY = topLeftY;
    // DEBUG:         Width = width;
    // DEBUG:         Height = height;
    // DEBUG:         MinDepth = minDepth;
    // DEBUG:         MaxDepth = maxDepth;
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_VIEWPORT(
    // DEBUG:         _In_ ID3D11Buffer*,
    // DEBUG:         _In_ ID3D11RenderTargetView* pRTView,
    // DEBUG:         FLOAT topLeftX = 0.0f,
    // DEBUG:         FLOAT minDepth = D3D11_MIN_DEPTH,
    // DEBUG:         FLOAT maxDepth = D3D11_MAX_DEPTH )
    // DEBUG:     {
    // DEBUG:         D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
    // DEBUG:         pRTView->GetDesc( &RTVDesc );
    // DEBUG:         UINT NumElements = 0;
    // DEBUG:         switch (RTVDesc.ViewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_RTV_DIMENSION_BUFFER:
    // DEBUG:             NumElements = RTVDesc.Buffer.NumElements;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:         TopLeftX = topLeftX;
    // DEBUG:         TopLeftY = 0.0f;
    // DEBUG:         Width = static_cast<FLOAT>(NumElements) - topLeftX;
    // DEBUG:         Height = 1.0f;
    // DEBUG:         MinDepth = minDepth;
    // DEBUG:         MaxDepth = maxDepth;
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_VIEWPORT(
    // DEBUG:         _In_ ID3D11Texture1D* pTex1D,
    // DEBUG:         _In_ ID3D11RenderTargetView* pRTView,
    // DEBUG:         FLOAT topLeftX = 0.0f,
    // DEBUG:         FLOAT minDepth = D3D11_MIN_DEPTH,
    // DEBUG:         FLOAT maxDepth = D3D11_MAX_DEPTH )
    // DEBUG:     {
    // DEBUG:         D3D11_TEXTURE1D_DESC TexDesc;
    // DEBUG:         pTex1D->GetDesc( &TexDesc );
    // DEBUG:         D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
    // DEBUG:         pRTView->GetDesc( &RTVDesc );
    // DEBUG:         UINT MipSlice = 0;
    // DEBUG:         switch (RTVDesc.ViewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE1D:
    // DEBUG:             MipSlice = RTVDesc.Texture1D.MipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
    // DEBUG:             MipSlice = RTVDesc.Texture1DArray.MipSlice;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:         const UINT SubResourceWidth = TexDesc.Width / (UINT( 1 ) << MipSlice);
    // DEBUG:         TopLeftX = topLeftX;
    // DEBUG:         TopLeftY = 0.0f;
    // DEBUG:         Width = static_cast<FLOAT>(SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
    // DEBUG:         Height = 1.0f;
    // DEBUG:         MinDepth = minDepth;
    // DEBUG:         MaxDepth = maxDepth;
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_VIEWPORT(
    // DEBUG:         _In_ ID3D11Texture2D* pTex2D,
    // DEBUG:         _In_ ID3D11RenderTargetView* pRTView,
    // DEBUG:         FLOAT topLeftX = 0.0f,
    // DEBUG:         FLOAT topLeftY = 0.0f,
    // DEBUG:         FLOAT minDepth = D3D11_MIN_DEPTH,
    // DEBUG:         FLOAT maxDepth = D3D11_MAX_DEPTH )
    // DEBUG:     {
    // DEBUG:         D3D11_TEXTURE2D_DESC TexDesc;
    // DEBUG:         pTex2D->GetDesc( &TexDesc );
    // DEBUG:         D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
    // DEBUG:         pRTView->GetDesc( &RTVDesc );
    // DEBUG:         UINT MipSlice = 0;
    // DEBUG:         switch (RTVDesc.ViewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2D:
    // DEBUG:             MipSlice = RTVDesc.Texture2D.MipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
    // DEBUG:             MipSlice = RTVDesc.Texture2DArray.MipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2DMS:
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:         const UINT SubResourceWidth = TexDesc.Width / (UINT( 1 ) << MipSlice);
    // DEBUG:         const UINT SubResourceHeight = TexDesc.Height / (UINT( 1 ) << MipSlice);
    // DEBUG:         TopLeftX = topLeftX;
    // DEBUG:         TopLeftY = topLeftY;
    // DEBUG:         Width = static_cast<FLOAT>(SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
    // DEBUG:         Height = static_cast<FLOAT>(SubResourceHeight ? SubResourceHeight : 1) - topLeftY;
    // DEBUG:         MinDepth = minDepth;
    // DEBUG:         MaxDepth = maxDepth;
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_VIEWPORT(
    // DEBUG:         _In_ ID3D11Texture3D* pTex3D,
    // DEBUG:         _In_ ID3D11RenderTargetView* pRTView,
    // DEBUG:         FLOAT topLeftX = 0.0f,
    // DEBUG:         FLOAT topLeftY = 0.0f,
    // DEBUG:         FLOAT minDepth = D3D11_MIN_DEPTH,
    // DEBUG:         FLOAT maxDepth = D3D11_MAX_DEPTH )
    // DEBUG:     {
    // DEBUG:         D3D11_TEXTURE3D_DESC TexDesc;
    // DEBUG:         pTex3D->GetDesc( &TexDesc );
    // DEBUG:         D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
    // DEBUG:         pRTView->GetDesc( &RTVDesc );
    // DEBUG:         UINT MipSlice = 0;
    // DEBUG:         switch (RTVDesc.ViewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_RTV_DIMENSION_TEXTURE3D:
    // DEBUG:             MipSlice = RTVDesc.Texture3D.MipSlice;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:         const UINT SubResourceWidth = TexDesc.Width / (UINT( 1 ) << MipSlice);
    // DEBUG:         const UINT SubResourceHeight = TexDesc.Height / (UINT( 1 ) << MipSlice);
    // DEBUG:         TopLeftX = topLeftX;
    // DEBUG:         TopLeftY = topLeftY;
    // DEBUG:         Width = static_cast<FLOAT>(SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
    // DEBUG:         Height = static_cast<FLOAT>(SubResourceHeight ? SubResourceHeight : 1) - topLeftY;
    // DEBUG:         MinDepth = minDepth;
    // DEBUG:         MaxDepth = maxDepth;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_VIEWPORT() {}
    // DEBUG: }
    public unsafe partial class CD3D11VIEWPORT : global::SpoutDX.D3D11VIEWPORT, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public new partial struct __Internal
        {
            internal float TopLeftX;
            internal float TopLeftY;
            internal float Width;
            internal float Height;
            internal float MinDepth;
            internal float MaxDepth;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_VIEWPORT@@QEAA@AEBUD3D11_VIEWPORT@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_VIEWPORT@@QEAA@MMMMMM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, float topLeftX, float topLeftY, float width, float height, float minDepth, float maxDepth);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_VIEWPORT@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11VIEWPORT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11VIEWPORT(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11VIEWPORT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11VIEWPORT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11VIEWPORT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11VIEWPORT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11VIEWPORT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11VIEWPORT(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_VIEWPORT() = default
        public CD3D11VIEWPORT()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11VIEWPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_VIEWPORT( const D3D11_VIEWPORT& o ) :
        // DEBUG:         D3D11_VIEWPORT( o )
        // DEBUG:     {}
        public CD3D11VIEWPORT(global::SpoutDX.D3D11VIEWPORT o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11VIEWPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D11_VIEWPORT(
        // DEBUG:         FLOAT topLeftX,
        // DEBUG:         FLOAT topLeftY,
        // DEBUG:         FLOAT width,
        // DEBUG:         FLOAT height,
        // DEBUG:         FLOAT minDepth = D3D11_MIN_DEPTH,
        // DEBUG:         FLOAT maxDepth = D3D11_MAX_DEPTH )
        // DEBUG:     {
        // DEBUG:         TopLeftX = topLeftX;
        // DEBUG:         TopLeftY = topLeftY;
        // DEBUG:         Width = width;
        // DEBUG:         Height = height;
        // DEBUG:         MinDepth = minDepth;
        // DEBUG:         MaxDepth = maxDepth;
        // DEBUG:     }
        public CD3D11VIEWPORT(float topLeftX, float topLeftY, float width, float height, float minDepth, float maxDepth)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11VIEWPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance, topLeftX, topLeftY, width, height, minDepth, maxDepth);
        }

        ~CD3D11VIEWPORT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_TEX1D_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D11TEX1D_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX1D_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX1D_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX1D_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX1D_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX1D_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX1D_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX1D_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX1D_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX1D_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX1D_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX1D_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX1D_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX1D_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX1D_ARRAY_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX1D_ARRAY_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX1D_ARRAY_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX1D_ARRAY_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX1D_ARRAY_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX1D_ARRAY_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX1D_ARRAY_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX1D_ARRAY_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX1D_ARRAY_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX1D_ARRAY_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX1D_ARRAY_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX1D_ARRAY_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2D_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_ARRAY_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_ARRAY_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_ARRAY_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_ARRAY_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_ARRAY_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_ARRAY_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_ARRAY_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_ARRAY_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_ARRAY_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_ARRAY_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_ARRAY_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2D_ARRAY_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2DMS_DSV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2DMS_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint UnusedField_NothingToDefine;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2DMS_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2DMS_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2DMS_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2DMS_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2DMS_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2DMS_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2DMS_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2DMS_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2DMS_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2DMS_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2DMS_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint UnusedFieldNothingToDefine
        {
            get
            {
                return ((__Internal*)__Instance)->UnusedField_NothingToDefine;
            }

            set
            {
                ((__Internal*)__Instance)->UnusedField_NothingToDefine = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2DMS_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2DMS_ARRAY_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2DMS_ARRAY_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2DMS_ARRAY_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2DMS_ARRAY_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2DMS_ARRAY_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2DMS_ARRAY_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2DMS_ARRAY_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2DMS_ARRAY_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2DMS_ARRAY_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2DMS_ARRAY_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_DEPTH_STENCIL_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_DSV_DIMENSION ViewDimension;
    // DEBUG:     UINT Flags;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_TEX1D_DSV Texture1D;
    // DEBUG:         D3D11_TEX1D_ARRAY_DSV Texture1DArray;
    // DEBUG:         D3D11_TEX2D_DSV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_DSV Texture2DArray;
    // DEBUG:         D3D11_TEX2DMS_DSV Texture2DMS;
    // DEBUG:         D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11DEPTH_STENCIL_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D11DSV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal uint Flags;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX1D_DSV.__Internal Texture1D;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX1D_ARRAY_DSV.__Internal Texture1DArray;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX2D_DSV.__Internal Texture2D;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX2D_ARRAY_DSV.__Internal Texture2DArray;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX2DMS_DSV.__Internal Texture2DMS;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV.__Internal Texture2DMSArray;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DEPTH_STENCIL_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11DEPTH_STENCIL_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11DEPTH_STENCIL_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11DEPTH_STENCIL_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11DEPTH_STENCIL_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11DEPTH_STENCIL_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11DEPTH_STENCIL_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11DEPTH_STENCIL_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11DEPTH_STENCIL_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11DEPTH_STENCIL_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11DEPTH_STENCIL_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11DEPTH_STENCIL_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11DEPTH_STENCIL_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11DEPTH_STENCIL_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11DSV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((__Internal*)__Instance)->Flags;
            }

            set
            {
                ((__Internal*)__Instance)->Flags = value;
            }
        }

        public global::SpoutDX.D3D11TEX1D_DSV Texture1D
        {
            get
            {
                return global::SpoutDX.D3D11TEX1D_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1D = *(global::SpoutDX.D3D11TEX1D_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX1D_ARRAY_DSV Texture1DArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX1D_ARRAY_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1DArray = *(global::SpoutDX.D3D11TEX1D_ARRAY_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2D_DSV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D11TEX2D_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2D_ARRAY_DSV Texture2DArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_ARRAY_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DArray = *(global::SpoutDX.D3D11TEX2D_ARRAY_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2DMS_DSV Texture2DMS
        {
            get
            {
                return global::SpoutDX.D3D11TEX2DMS_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMS));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMS = *(global::SpoutDX.D3D11TEX2DMS_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV Texture2DMSArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMSArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMSArray = *(global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct CD3D11_DEPTH_STENCIL_VIEW_DESC : public D3D11_DEPTH_STENCIL_VIEW_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_DEPTH_STENCIL_VIEW_DESC() = default;
    // DEBUG:     explicit CD3D11_DEPTH_STENCIL_VIEW_DESC( const D3D11_DEPTH_STENCIL_VIEW_DESC& o ) :
    // DEBUG:         D3D11_DEPTH_STENCIL_VIEW_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_DEPTH_STENCIL_VIEW_DESC(
    // DEBUG:         D3D11_DSV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0,
    // DEBUG:         UINT firstArraySlice = 0,
    // DEBUG:         UINT arraySize = -1,
    // DEBUG:         UINT flags = 0 )
    // DEBUG:     {
    // DEBUG:         Format = format;
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         Flags = flags;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE1D:
    // DEBUG:             Texture1D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE1DARRAY:
    // DEBUG:             Texture1DArray.MipSlice = mipSlice;
    // DEBUG:             Texture1DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture1DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE2D:
    // DEBUG:             Texture2D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE2DARRAY:
    // DEBUG:             Texture2DArray.MipSlice = mipSlice;
    // DEBUG:             Texture2DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE2DMS:
    // DEBUG:             break;
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY:
    // DEBUG:             Texture2DMSArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DMSArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_DEPTH_STENCIL_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture1D* pTex1D,
    // DEBUG:         D3D11_DSV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0,
    // DEBUG:         UINT firstArraySlice = 0,
    // DEBUG:         UINT arraySize = -1,
    // DEBUG:         UINT flags = 0 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         Flags = flags;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format ||
    // DEBUG:             ((UINT)-1 == arraySize && D3D11_DSV_DIMENSION_TEXTURE1DARRAY == viewDimension))
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE1D_DESC TexDesc;
    // DEBUG:             pTex1D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE1D:
    // DEBUG:             Texture1D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE1DARRAY:
    // DEBUG:             Texture1DArray.MipSlice = mipSlice;
    // DEBUG:             Texture1DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture1DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_DEPTH_STENCIL_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture2D* pTex2D,
    // DEBUG:         D3D11_DSV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0,
    // DEBUG:         UINT firstArraySlice = 0,
    // DEBUG:         UINT arraySize = -1,
    // DEBUG:         UINT flags = 0 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         Flags = flags;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format || 
    // DEBUG:             ((UINT)-1 == arraySize &&
    // DEBUG:                 (D3D11_DSV_DIMENSION_TEXTURE2DARRAY == viewDimension ||
    // DEBUG:                 D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY == viewDimension)))
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE2D_DESC TexDesc;
    // DEBUG:             pTex2D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE2D:
    // DEBUG:             Texture2D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE2DARRAY:
    // DEBUG:             Texture2DArray.MipSlice = mipSlice;
    // DEBUG:             Texture2DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE2DMS:
    // DEBUG:             break;
    // DEBUG:         case D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY:
    // DEBUG:             Texture2DMSArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DMSArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     ~CD3D11_DEPTH_STENCIL_VIEW_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11DEPTH_STENCIL_VIEW_DESC : global::SpoutDX.D3D11DEPTH_STENCIL_VIEW_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D11DSV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal uint Flags;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX1D_DSV.__Internal Texture1D;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX1D_ARRAY_DSV.__Internal Texture1DArray;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX2D_DSV.__Internal Texture2D;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX2D_ARRAY_DSV.__Internal Texture2DArray;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX2DMS_DSV.__Internal Texture2DMS;

            [FieldOffset(12)]
            internal global::SpoutDX.D3D11TEX2DMS_ARRAY_DSV.__Internal Texture2DMSArray;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_DEPTH_STENCIL_VIEW_DESC@@QEAA@AEBUD3D11_DEPTH_STENCIL_VIEW_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_DEPTH_STENCIL_VIEW_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11DEPTH_STENCIL_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11DEPTH_STENCIL_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11DEPTH_STENCIL_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11DEPTH_STENCIL_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11DEPTH_STENCIL_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11DEPTH_STENCIL_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11DEPTH_STENCIL_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11DEPTH_STENCIL_VIEW_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_DEPTH_STENCIL_VIEW_DESC() = default
        public CD3D11DEPTH_STENCIL_VIEW_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11DEPTH_STENCIL_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_DEPTH_STENCIL_VIEW_DESC( const D3D11_DEPTH_STENCIL_VIEW_DESC& o ) :
        // DEBUG:         D3D11_DEPTH_STENCIL_VIEW_DESC( o )
        // DEBUG:     {}
        public CD3D11DEPTH_STENCIL_VIEW_DESC(global::SpoutDX.D3D11DEPTH_STENCIL_VIEW_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11DEPTH_STENCIL_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        ~CD3D11DEPTH_STENCIL_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_BUFFER_UAV
    // DEBUG:     {
    // DEBUG:     UINT FirstElement;
    // DEBUG:     UINT NumElements;
    // DEBUG:     UINT Flags;
    // DEBUG:     }
    public unsafe partial class D3D11BUFFER_UAV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint FirstElement;
            internal uint NumElements;
            internal uint Flags;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFER_UAV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11BUFFER_UAV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11BUFFER_UAV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11BUFFER_UAV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11BUFFER_UAV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11BUFFER_UAV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11BUFFER_UAV(native.ToPointer(), skipVTables);
        }

        internal static D3D11BUFFER_UAV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11BUFFER_UAV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11BUFFER_UAV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11BUFFER_UAV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11BUFFER_UAV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11BUFFER_UAV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11BUFFER_UAV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstElement
        {
            get
            {
                return ((__Internal*)__Instance)->FirstElement;
            }

            set
            {
                ((__Internal*)__Instance)->FirstElement = value;
            }
        }

        public uint NumElements
        {
            get
            {
                return ((__Internal*)__Instance)->NumElements;
            }

            set
            {
                ((__Internal*)__Instance)->NumElements = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((__Internal*)__Instance)->Flags;
            }

            set
            {
                ((__Internal*)__Instance)->Flags = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX1D_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D11TEX1D_UAV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_UAV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_UAV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX1D_UAV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX1D_UAV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX1D_UAV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX1D_UAV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX1D_UAV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX1D_UAV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX1D_UAV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX1D_UAV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX1D_UAV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX1D_UAV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX1D_UAV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX1D_UAV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX1D_ARRAY_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX1D_ARRAY_UAV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_UAV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_UAV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX1D_ARRAY_UAV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX1D_ARRAY_UAV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX1D_ARRAY_UAV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX1D_ARRAY_UAV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX1D_ARRAY_UAV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX1D_ARRAY_UAV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX1D_ARRAY_UAV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX1D_ARRAY_UAV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX1D_ARRAY_UAV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX1D_ARRAY_UAV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX1D_ARRAY_UAV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX1D_ARRAY_UAV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_UAV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_UAV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_UAV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_UAV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_UAV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_UAV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_UAV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_UAV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_UAV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_UAV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_UAV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_UAV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_UAV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_UAV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2D_UAV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_ARRAY_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_ARRAY_UAV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_UAV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_UAV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_ARRAY_UAV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_UAV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_ARRAY_UAV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_ARRAY_UAV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_ARRAY_UAV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_ARRAY_UAV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_ARRAY_UAV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_ARRAY_UAV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_ARRAY_UAV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_ARRAY_UAV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_ARRAY_UAV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX2D_ARRAY_UAV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX3D_UAV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstWSlice;
    // DEBUG:     UINT WSize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX3D_UAV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstWSlice;
            internal uint WSize;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX3D_UAV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX3D_UAV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX3D_UAV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX3D_UAV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX3D_UAV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX3D_UAV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX3D_UAV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX3D_UAV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX3D_UAV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX3D_UAV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX3D_UAV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX3D_UAV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX3D_UAV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11TEX3D_UAV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstWSlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstWSlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstWSlice = value;
            }
        }

        public uint WSize
        {
            get
            {
                return ((__Internal*)__Instance)->WSize;
            }

            set
            {
                ((__Internal*)__Instance)->WSize = value;
            }
        }
    }

    // DEBUG: struct D3D11_UNORDERED_ACCESS_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D11_UAV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_BUFFER_UAV Buffer;
    // DEBUG:         D3D11_TEX1D_UAV Texture1D;
    // DEBUG:         D3D11_TEX1D_ARRAY_UAV Texture1DArray;
    // DEBUG:         D3D11_TEX2D_UAV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_UAV Texture2DArray;
    // DEBUG:         D3D11_TEX3D_UAV Texture3D;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11UNORDERED_ACCESS_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D11UAV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11BUFFER_UAV.__Internal Buffer;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_UAV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_ARRAY_UAV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_UAV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_ARRAY_UAV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX3D_UAV.__Internal Texture3D;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11UNORDERED_ACCESS_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11UNORDERED_ACCESS_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11UNORDERED_ACCESS_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11UNORDERED_ACCESS_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11UNORDERED_ACCESS_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11UNORDERED_ACCESS_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11UNORDERED_ACCESS_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11UNORDERED_ACCESS_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11UNORDERED_ACCESS_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11UNORDERED_ACCESS_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11UNORDERED_ACCESS_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11UNORDERED_ACCESS_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11UNORDERED_ACCESS_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11UNORDERED_ACCESS_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11UAV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D11BUFFER_UAV Buffer
        {
            get
            {
                return global::SpoutDX.D3D11BUFFER_UAV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Buffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Buffer = *(global::SpoutDX.D3D11BUFFER_UAV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX1D_UAV Texture1D
        {
            get
            {
                return global::SpoutDX.D3D11TEX1D_UAV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1D = *(global::SpoutDX.D3D11TEX1D_UAV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX1D_ARRAY_UAV Texture1DArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX1D_ARRAY_UAV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1DArray = *(global::SpoutDX.D3D11TEX1D_ARRAY_UAV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2D_UAV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_UAV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D11TEX2D_UAV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2D_ARRAY_UAV Texture2DArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_ARRAY_UAV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DArray = *(global::SpoutDX.D3D11TEX2D_ARRAY_UAV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX3D_UAV Texture3D
        {
            get
            {
                return global::SpoutDX.D3D11TEX3D_UAV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture3D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture3D = *(global::SpoutDX.D3D11TEX3D_UAV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct CD3D11_UNORDERED_ACCESS_VIEW_DESC : public D3D11_UNORDERED_ACCESS_VIEW_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_UNORDERED_ACCESS_VIEW_DESC() = default;
    // DEBUG:     explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC( const D3D11_UNORDERED_ACCESS_VIEW_DESC& o ) :
    // DEBUG:         D3D11_UNORDERED_ACCESS_VIEW_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
    // DEBUG:         D3D11_UAV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0, // FirstElement for BUFFER
    // DEBUG:         UINT firstArraySlice = 0, // NumElements for BUFFER, FirstWSlice for TEXTURE3D
    // DEBUG:         UINT arraySize = -1, // WSize for TEXTURE3D
    // DEBUG:         UINT flags = 0 ) // BUFFER only
    // DEBUG:     {
    // DEBUG:         Format = format;
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_UAV_DIMENSION_BUFFER:
    // DEBUG:             Buffer.FirstElement = mipSlice;
    // DEBUG:             Buffer.NumElements = firstArraySlice;
    // DEBUG:             Buffer.Flags = flags;
    // DEBUG:             break;
    // DEBUG:         case D3D11_UAV_DIMENSION_TEXTURE1D:
    // DEBUG:             Texture1D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_UAV_DIMENSION_TEXTURE1DARRAY:
    // DEBUG:             Texture1DArray.MipSlice = mipSlice;
    // DEBUG:             Texture1DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture1DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_UAV_DIMENSION_TEXTURE2D:
    // DEBUG:             Texture2D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_UAV_DIMENSION_TEXTURE2DARRAY:
    // DEBUG:             Texture2DArray.MipSlice = mipSlice;
    // DEBUG:             Texture2DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         case D3D11_UAV_DIMENSION_TEXTURE3D:
    // DEBUG:             Texture3D.MipSlice = mipSlice;
    // DEBUG:             Texture3D.FirstWSlice = firstArraySlice;
    // DEBUG:             Texture3D.WSize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Buffer*,
    // DEBUG:         DXGI_FORMAT format,
    // DEBUG:         UINT firstElement,
    // DEBUG:         UINT numElements,
    // DEBUG:         UINT flags = 0 )
    // DEBUG:     {
    // DEBUG:         Format = format;
    // DEBUG:         ViewDimension = D3D11_UAV_DIMENSION_BUFFER;
    // DEBUG:         Buffer.FirstElement = firstElement;
    // DEBUG:         Buffer.NumElements = numElements;
    // DEBUG:         Buffer.Flags = flags;
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture1D* pTex1D,
    // DEBUG:         D3D11_UAV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0,
    // DEBUG:         UINT firstArraySlice = 0,
    // DEBUG:         UINT arraySize = -1 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format ||
    // DEBUG:             ((UINT)-1 == arraySize && D3D11_UAV_DIMENSION_TEXTURE1DARRAY == viewDimension))
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE1D_DESC TexDesc;
    // DEBUG:             pTex1D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_UAV_DIMENSION_TEXTURE1D:
    // DEBUG:             Texture1D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_UAV_DIMENSION_TEXTURE1DARRAY:
    // DEBUG:             Texture1DArray.MipSlice = mipSlice;
    // DEBUG:             Texture1DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture1DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture2D* pTex2D,
    // DEBUG:         D3D11_UAV_DIMENSION viewDimension,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0,
    // DEBUG:         UINT firstArraySlice = 0,
    // DEBUG:         UINT arraySize = -1 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = viewDimension;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format || 
    // DEBUG:             ((UINT)-1 == arraySize && D3D11_UAV_DIMENSION_TEXTURE2DARRAY == viewDimension))
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE2D_DESC TexDesc;
    // DEBUG:             pTex2D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         switch (viewDimension)
    // DEBUG:         {
    // DEBUG:         case D3D11_UAV_DIMENSION_TEXTURE2D:
    // DEBUG:             Texture2D.MipSlice = mipSlice;
    // DEBUG:             break;
    // DEBUG:         case D3D11_UAV_DIMENSION_TEXTURE2DARRAY:
    // DEBUG:             Texture2DArray.MipSlice = mipSlice;
    // DEBUG:             Texture2DArray.FirstArraySlice = firstArraySlice;
    // DEBUG:             Texture2DArray.ArraySize = arraySize;
    // DEBUG:             break;
    // DEBUG:         default: break;
    // DEBUG:         }
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
    // DEBUG:         _In_ ID3D11Texture3D* pTex3D,
    // DEBUG:         DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
    // DEBUG:         UINT mipSlice = 0,
    // DEBUG:         UINT firstWSlice = 0,
    // DEBUG:         UINT wSize = -1 )
    // DEBUG:     {
    // DEBUG:         ViewDimension = D3D11_UAV_DIMENSION_TEXTURE3D;
    // DEBUG:         if (DXGI_FORMAT_UNKNOWN == format || (UINT)-1 == wSize)
    // DEBUG:         {
    // DEBUG:             D3D11_TEXTURE3D_DESC TexDesc;
    // DEBUG:             pTex3D->GetDesc( &TexDesc );
    // DEBUG:             if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
    // DEBUG:             if ((UINT)-1 == wSize) wSize = TexDesc.Depth - firstWSlice;
    // DEBUG:         }
    // DEBUG:         Format = format;
    // DEBUG:         Texture3D.MipSlice = mipSlice;
    // DEBUG:         Texture3D.FirstWSlice = firstWSlice;
    // DEBUG:         Texture3D.WSize = wSize;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_UNORDERED_ACCESS_VIEW_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11UNORDERED_ACCESS_VIEW_DESC : global::SpoutDX.D3D11UNORDERED_ACCESS_VIEW_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D11UAV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11BUFFER_UAV.__Internal Buffer;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_UAV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX1D_ARRAY_UAV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_UAV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_ARRAY_UAV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX3D_UAV.__Internal Texture3D;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_UNORDERED_ACCESS_VIEW_DESC@@QEAA@AEBUD3D11_UNORDERED_ACCESS_VIEW_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_UNORDERED_ACCESS_VIEW_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11UNORDERED_ACCESS_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11UNORDERED_ACCESS_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11UNORDERED_ACCESS_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11UNORDERED_ACCESS_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11UNORDERED_ACCESS_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11UNORDERED_ACCESS_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11UNORDERED_ACCESS_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11UNORDERED_ACCESS_VIEW_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_UNORDERED_ACCESS_VIEW_DESC() = default
        public CD3D11UNORDERED_ACCESS_VIEW_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11UNORDERED_ACCESS_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC( const D3D11_UNORDERED_ACCESS_VIEW_DESC& o ) :
        // DEBUG:         D3D11_UNORDERED_ACCESS_VIEW_DESC( o )
        // DEBUG:     {}
        public CD3D11UNORDERED_ACCESS_VIEW_DESC(global::SpoutDX.D3D11UNORDERED_ACCESS_VIEW_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11UNORDERED_ACCESS_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        ~CD3D11UNORDERED_ACCESS_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_SAMPLER_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_FILTER Filter;
    // DEBUG:     D3D11_TEXTURE_ADDRESS_MODE AddressU;
    // DEBUG:     D3D11_TEXTURE_ADDRESS_MODE AddressV;
    // DEBUG:     D3D11_TEXTURE_ADDRESS_MODE AddressW;
    // DEBUG:     FLOAT MipLODBias;
    // DEBUG:     UINT MaxAnisotropy;
    // DEBUG:     D3D11_COMPARISON_FUNC ComparisonFunc;
    // DEBUG:     FLOAT BorderColor[ 4 ];
    // DEBUG:     FLOAT MinLOD;
    // DEBUG:     FLOAT MaxLOD;
    // DEBUG:     }
    public unsafe partial class D3D11SAMPLER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 52)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11FILTER Filter;
            internal global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE AddressU;
            internal global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE AddressV;
            internal global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE AddressW;
            internal float MipLODBias;
            internal uint MaxAnisotropy;
            internal global::SpoutDX.D3D11COMPARISON_FUNC ComparisonFunc;
            internal fixed float BorderColor[4];
            internal float MinLOD;
            internal float MaxLOD;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11SAMPLER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11SAMPLER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11SAMPLER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11SAMPLER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11SAMPLER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11SAMPLER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11SAMPLER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11SAMPLER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11SAMPLER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11SAMPLER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11SAMPLER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11SAMPLER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11SAMPLER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11SAMPLER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11FILTER Filter
        {
            get
            {
                return ((__Internal*)__Instance)->Filter;
            }

            set
            {
                ((__Internal*)__Instance)->Filter = value;
            }
        }

        public global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE AddressU
        {
            get
            {
                return ((__Internal*)__Instance)->AddressU;
            }

            set
            {
                ((__Internal*)__Instance)->AddressU = value;
            }
        }

        public global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE AddressV
        {
            get
            {
                return ((__Internal*)__Instance)->AddressV;
            }

            set
            {
                ((__Internal*)__Instance)->AddressV = value;
            }
        }

        public global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE AddressW
        {
            get
            {
                return ((__Internal*)__Instance)->AddressW;
            }

            set
            {
                ((__Internal*)__Instance)->AddressW = value;
            }
        }

        public float MipLODBias
        {
            get
            {
                return ((__Internal*)__Instance)->MipLODBias;
            }

            set
            {
                ((__Internal*)__Instance)->MipLODBias = value;
            }
        }

        public uint MaxAnisotropy
        {
            get
            {
                return ((__Internal*)__Instance)->MaxAnisotropy;
            }

            set
            {
                ((__Internal*)__Instance)->MaxAnisotropy = value;
            }
        }

        public global::SpoutDX.D3D11COMPARISON_FUNC ComparisonFunc
        {
            get
            {
                return ((__Internal*)__Instance)->ComparisonFunc;
            }

            set
            {
                ((__Internal*)__Instance)->ComparisonFunc = value;
            }
        }

        public float[] BorderColor
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<float>(((__Internal*)__Instance)->BorderColor, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->BorderColor[i] = value[i];
                }
            }
        }

        public float MinLOD
        {
            get
            {
                return ((__Internal*)__Instance)->MinLOD;
            }

            set
            {
                ((__Internal*)__Instance)->MinLOD = value;
            }
        }

        public float MaxLOD
        {
            get
            {
                return ((__Internal*)__Instance)->MaxLOD;
            }

            set
            {
                ((__Internal*)__Instance)->MaxLOD = value;
            }
        }
    }

    // DEBUG: struct CD3D11_SAMPLER_DESC : public D3D11_SAMPLER_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_SAMPLER_DESC() = default;
    // DEBUG:     explicit CD3D11_SAMPLER_DESC( const D3D11_SAMPLER_DESC& o ) :
    // DEBUG:         D3D11_SAMPLER_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_SAMPLER_DESC( CD3D11_DEFAULT )
    // DEBUG:     {
    // DEBUG:         Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
    // DEBUG:         AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;
    // DEBUG:         AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;
    // DEBUG:         AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;
    // DEBUG:         MipLODBias = 0;
    // DEBUG:         MaxAnisotropy = 1;
    // DEBUG:         ComparisonFunc = D3D11_COMPARISON_NEVER;
    // DEBUG:         BorderColor[ 0 ] = 1.0f;
    // DEBUG:         BorderColor[ 1 ] = 1.0f;
    // DEBUG:         BorderColor[ 2 ] = 1.0f;
    // DEBUG:         BorderColor[ 3 ] = 1.0f;
    // DEBUG:         MinLOD = -3.402823466e+38F; // -FLT_MAX
    // DEBUG:         MaxLOD = 3.402823466e+38F; // FLT_MAX
    // DEBUG:     }
    // DEBUG:     explicit CD3D11_SAMPLER_DESC(
    // DEBUG:         D3D11_FILTER filter,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_MODE addressU,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_MODE addressV,
    // DEBUG:         D3D11_TEXTURE_ADDRESS_MODE addressW,
    // DEBUG:         FLOAT mipLODBias,
    // DEBUG:         UINT maxAnisotropy,
    // DEBUG:         D3D11_COMPARISON_FUNC comparisonFunc,
    // DEBUG:         _In_reads_opt_( 4 ) const FLOAT* borderColor, // RGBA
    // DEBUG:         FLOAT minLOD,
    // DEBUG:         FLOAT maxLOD )
    // DEBUG:     {
    // DEBUG:         Filter = filter;
    // DEBUG:         AddressU = addressU;
    // DEBUG:         AddressV = addressV;
    // DEBUG:         AddressW = addressW;
    // DEBUG:         MipLODBias = mipLODBias;
    // DEBUG:         MaxAnisotropy = maxAnisotropy;
    // DEBUG:         ComparisonFunc = comparisonFunc;
    // DEBUG:         const float defaultColor[ 4 ] = { 1.0f, 1.0f, 1.0f, 1.0f };
    // DEBUG:         if (!borderColor) borderColor = defaultColor;
    // DEBUG:         BorderColor[ 0 ] = borderColor[ 0 ];
    // DEBUG:         BorderColor[ 1 ] = borderColor[ 1 ];
    // DEBUG:         BorderColor[ 2 ] = borderColor[ 2 ];
    // DEBUG:         BorderColor[ 3 ] = borderColor[ 3 ];
    // DEBUG:         MinLOD = minLOD;
    // DEBUG:         MaxLOD = maxLOD;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_SAMPLER_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11SAMPLER_DESC : global::SpoutDX.D3D11SAMPLER_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 52)]
        public new partial struct __Internal
        {
            internal global::SpoutDX.D3D11FILTER Filter;
            internal global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE AddressU;
            internal global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE AddressV;
            internal global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE AddressW;
            internal float MipLODBias;
            internal uint MaxAnisotropy;
            internal global::SpoutDX.D3D11COMPARISON_FUNC ComparisonFunc;
            internal fixed float BorderColor[4];
            internal float MinLOD;
            internal float MaxLOD;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_SAMPLER_DESC@@QEAA@AEBUD3D11_SAMPLER_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_SAMPLER_DESC@@QEAA@UCD3D11_DEFAULT@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, global::SpoutDX.CD3D11DEFAULT.__Internal _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_SAMPLER_DESC@@QEAA@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@11MIW4D3D11_COMPARISON_FUNC@@PEBMMM@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, global::SpoutDX.D3D11FILTER filter, global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE addressU, global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE addressV, global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE addressW, float mipLODBias, uint maxAnisotropy, global::SpoutDX.D3D11COMPARISON_FUNC comparisonFunc, float* borderColor, float minLOD, float maxLOD);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_SAMPLER_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11SAMPLER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11SAMPLER_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11SAMPLER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11SAMPLER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11SAMPLER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11SAMPLER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11SAMPLER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11SAMPLER_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_SAMPLER_DESC() = default
        public CD3D11SAMPLER_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11SAMPLER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_SAMPLER_DESC( const D3D11_SAMPLER_DESC& o ) :
        // DEBUG:         D3D11_SAMPLER_DESC( o )
        // DEBUG:     {}
        public CD3D11SAMPLER_DESC(global::SpoutDX.D3D11SAMPLER_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11SAMPLER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D11_SAMPLER_DESC( CD3D11_DEFAULT )
        // DEBUG:     {
        // DEBUG:         Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
        // DEBUG:         AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;
        // DEBUG:         AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;
        // DEBUG:         AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;
        // DEBUG:         MipLODBias = 0;
        // DEBUG:         MaxAnisotropy = 1;
        // DEBUG:         ComparisonFunc = D3D11_COMPARISON_NEVER;
        // DEBUG:         BorderColor[ 0 ] = 1.0f;
        // DEBUG:         BorderColor[ 1 ] = 1.0f;
        // DEBUG:         BorderColor[ 2 ] = 1.0f;
        // DEBUG:         BorderColor[ 3 ] = 1.0f;
        // DEBUG:         MinLOD = -3.402823466e+38F; // -FLT_MAX
        // DEBUG:         MaxLOD = 3.402823466e+38F; // FLT_MAX
        // DEBUG:     }
        public CD3D11SAMPLER_DESC(global::SpoutDX.CD3D11DEFAULT _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11SAMPLER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
            var __arg0 = _0.__Instance;
            __Internal.ctor(__Instance, *(global::SpoutDX.CD3D11DEFAULT.__Internal*) __arg0);
        }

        // DEBUG: explicit CD3D11_SAMPLER_DESC(
        // DEBUG:         D3D11_FILTER filter,
        // DEBUG:         D3D11_TEXTURE_ADDRESS_MODE addressU,
        // DEBUG:         D3D11_TEXTURE_ADDRESS_MODE addressV,
        // DEBUG:         D3D11_TEXTURE_ADDRESS_MODE addressW,
        // DEBUG:         FLOAT mipLODBias,
        // DEBUG:         UINT maxAnisotropy,
        // DEBUG:         D3D11_COMPARISON_FUNC comparisonFunc,
        // DEBUG:         _In_reads_opt_( 4 ) const FLOAT* borderColor, // RGBA
        // DEBUG:         FLOAT minLOD,
        // DEBUG:         FLOAT maxLOD )
        // DEBUG:     {
        // DEBUG:         Filter = filter;
        // DEBUG:         AddressU = addressU;
        // DEBUG:         AddressV = addressV;
        // DEBUG:         AddressW = addressW;
        // DEBUG:         MipLODBias = mipLODBias;
        // DEBUG:         MaxAnisotropy = maxAnisotropy;
        // DEBUG:         ComparisonFunc = comparisonFunc;
        // DEBUG:         const float defaultColor[ 4 ] = { 1.0f, 1.0f, 1.0f, 1.0f };
        // DEBUG:         if (!borderColor) borderColor = defaultColor;
        // DEBUG:         BorderColor[ 0 ] = borderColor[ 0 ];
        // DEBUG:         BorderColor[ 1 ] = borderColor[ 1 ];
        // DEBUG:         BorderColor[ 2 ] = borderColor[ 2 ];
        // DEBUG:         BorderColor[ 3 ] = borderColor[ 3 ];
        // DEBUG:         MinLOD = minLOD;
        // DEBUG:         MaxLOD = maxLOD;
        // DEBUG:     }
        public CD3D11SAMPLER_DESC(global::SpoutDX.D3D11FILTER filter, global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE addressU, global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE addressV, global::SpoutDX.D3D11TEXTURE_ADDRESS_MODE addressW, float mipLODBias, uint maxAnisotropy, global::SpoutDX.D3D11COMPARISON_FUNC comparisonFunc, ref float borderColor, float minLOD, float maxLOD)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11SAMPLER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            fixed (float* __borderColor7 = &borderColor)
            {
                var __arg7 = __borderColor7;
                __Internal.ctor(__Instance, filter, addressU, addressV, addressW, mipLODBias, maxAnisotropy, comparisonFunc, __arg7, minLOD, maxLOD);
            }
        }

        ~CD3D11SAMPLER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static explicit operator global::SpoutDX.CD3D11SAMPLER_DESC(global::SpoutDX.CD3D11DEFAULT _0)
        {
            return new global::SpoutDX.CD3D11SAMPLER_DESC(_0);
        }
    }

    // DEBUG: struct D3D11_QUERY_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_QUERY Query;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D11QUERY_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11QUERY Query;
            internal uint MiscFlags;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11QUERY_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11QUERY_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11QUERY_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11QUERY_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11QUERY_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11QUERY_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11QUERY_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11QUERY_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11QUERY_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11QUERY_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11QUERY_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11QUERY_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11QUERY_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11QUERY_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11QUERY Query
        {
            get
            {
                return ((__Internal*)__Instance)->Query;
            }

            set
            {
                ((__Internal*)__Instance)->Query = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct CD3D11_QUERY_DESC : public D3D11_QUERY_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_QUERY_DESC() = default;
    // DEBUG:     explicit CD3D11_QUERY_DESC( const D3D11_QUERY_DESC& o ) :
    // DEBUG:         D3D11_QUERY_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_QUERY_DESC(
    // DEBUG:         D3D11_QUERY query,
    // DEBUG:         UINT miscFlags = 0 )
    // DEBUG:     {
    // DEBUG:         Query = query;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_QUERY_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11QUERY_DESC : global::SpoutDX.D3D11QUERY_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public new partial struct __Internal
        {
            internal global::SpoutDX.D3D11QUERY Query;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_QUERY_DESC@@QEAA@AEBUD3D11_QUERY_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_QUERY_DESC@@QEAA@W4D3D11_QUERY@@I@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, global::SpoutDX.D3D11QUERY query, uint miscFlags);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_QUERY_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11QUERY_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11QUERY_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11QUERY_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11QUERY_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11QUERY_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11QUERY_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11QUERY_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11QUERY_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_QUERY_DESC() = default
        public CD3D11QUERY_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11QUERY_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_QUERY_DESC( const D3D11_QUERY_DESC& o ) :
        // DEBUG:         D3D11_QUERY_DESC( o )
        // DEBUG:     {}
        public CD3D11QUERY_DESC(global::SpoutDX.D3D11QUERY_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11QUERY_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D11_QUERY_DESC(
        // DEBUG:         D3D11_QUERY query,
        // DEBUG:         UINT miscFlags = 0 )
        // DEBUG:     {
        // DEBUG:         Query = query;
        // DEBUG:         MiscFlags = miscFlags;
        // DEBUG:     }
        public CD3D11QUERY_DESC(global::SpoutDX.D3D11QUERY query, uint miscFlags)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11QUERY_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance, query, miscFlags);
        }

        ~CD3D11QUERY_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
    // DEBUG:     {
    // DEBUG:     UINT64 Frequency;
    // DEBUG:     BOOL Disjoint;
    // DEBUG:     }
    public unsafe partial class D3D11QUERY_DATA_TIMESTAMP_DISJOINT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ulong Frequency;
            internal int Disjoint;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_QUERY_DATA_TIMESTAMP_DISJOINT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11QUERY_DATA_TIMESTAMP_DISJOINT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11QUERY_DATA_TIMESTAMP_DISJOINT(native.ToPointer(), skipVTables);
        }

        internal static D3D11QUERY_DATA_TIMESTAMP_DISJOINT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11QUERY_DATA_TIMESTAMP_DISJOINT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11QUERY_DATA_TIMESTAMP_DISJOINT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11QUERY_DATA_TIMESTAMP_DISJOINT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11QUERY_DATA_TIMESTAMP_DISJOINT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11QUERY_DATA_TIMESTAMP_DISJOINT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
        public D3D11QUERY_DATA_TIMESTAMP_DISJOINT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
        public D3D11QUERY_DATA_TIMESTAMP_DISJOINT(global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT.__Internal*) __Instance) = *((global::SpoutDX.D3D11QUERY_DATA_TIMESTAMP_DISJOINT.__Internal*) _0.__Instance);
        }

        ~D3D11QUERY_DATA_TIMESTAMP_DISJOINT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Frequency
        {
            get
            {
                return ((__Internal*)__Instance)->Frequency;
            }

            set
            {
                ((__Internal*)__Instance)->Frequency = value;
            }
        }

        public int Disjoint
        {
            get
            {
                return ((__Internal*)__Instance)->Disjoint;
            }

            set
            {
                ((__Internal*)__Instance)->Disjoint = value;
            }
        }
    }

    // DEBUG: struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
    // DEBUG:     {
    // DEBUG:     UINT64 IAVertices;
    // DEBUG:     UINT64 IAPrimitives;
    // DEBUG:     UINT64 VSInvocations;
    // DEBUG:     UINT64 GSInvocations;
    // DEBUG:     UINT64 GSPrimitives;
    // DEBUG:     UINT64 CInvocations;
    // DEBUG:     UINT64 CPrimitives;
    // DEBUG:     UINT64 PSInvocations;
    // DEBUG:     UINT64 HSInvocations;
    // DEBUG:     UINT64 DSInvocations;
    // DEBUG:     UINT64 CSInvocations;
    // DEBUG:     }
    public unsafe partial class D3D11QUERY_DATA_PIPELINE_STATISTICS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 88)]
        public partial struct __Internal
        {
            internal ulong IAVertices;
            internal ulong IAPrimitives;
            internal ulong VSInvocations;
            internal ulong GSInvocations;
            internal ulong GSPrimitives;
            internal ulong CInvocations;
            internal ulong CPrimitives;
            internal ulong PSInvocations;
            internal ulong HSInvocations;
            internal ulong DSInvocations;
            internal ulong CSInvocations;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_QUERY_DATA_PIPELINE_STATISTICS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11QUERY_DATA_PIPELINE_STATISTICS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11QUERY_DATA_PIPELINE_STATISTICS(native.ToPointer(), skipVTables);
        }

        internal static D3D11QUERY_DATA_PIPELINE_STATISTICS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11QUERY_DATA_PIPELINE_STATISTICS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11QUERY_DATA_PIPELINE_STATISTICS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11QUERY_DATA_PIPELINE_STATISTICS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11QUERY_DATA_PIPELINE_STATISTICS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11QUERY_DATA_PIPELINE_STATISTICS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_QUERY_DATA_PIPELINE_STATISTICS
        public D3D11QUERY_DATA_PIPELINE_STATISTICS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_QUERY_DATA_PIPELINE_STATISTICS
        public D3D11QUERY_DATA_PIPELINE_STATISTICS(global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS.__Internal*) __Instance) = *((global::SpoutDX.D3D11QUERY_DATA_PIPELINE_STATISTICS.__Internal*) _0.__Instance);
        }

        ~D3D11QUERY_DATA_PIPELINE_STATISTICS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong IAVertices
        {
            get
            {
                return ((__Internal*)__Instance)->IAVertices;
            }

            set
            {
                ((__Internal*)__Instance)->IAVertices = value;
            }
        }

        public ulong IAPrimitives
        {
            get
            {
                return ((__Internal*)__Instance)->IAPrimitives;
            }

            set
            {
                ((__Internal*)__Instance)->IAPrimitives = value;
            }
        }

        public ulong VSInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->VSInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->VSInvocations = value;
            }
        }

        public ulong GSInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->GSInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->GSInvocations = value;
            }
        }

        public ulong GSPrimitives
        {
            get
            {
                return ((__Internal*)__Instance)->GSPrimitives;
            }

            set
            {
                ((__Internal*)__Instance)->GSPrimitives = value;
            }
        }

        public ulong CInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->CInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->CInvocations = value;
            }
        }

        public ulong CPrimitives
        {
            get
            {
                return ((__Internal*)__Instance)->CPrimitives;
            }

            set
            {
                ((__Internal*)__Instance)->CPrimitives = value;
            }
        }

        public ulong PSInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->PSInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->PSInvocations = value;
            }
        }

        public ulong HSInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->HSInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->HSInvocations = value;
            }
        }

        public ulong DSInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->DSInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->DSInvocations = value;
            }
        }

        public ulong CSInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->CSInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->CSInvocations = value;
            }
        }
    }

    // DEBUG: struct D3D11_QUERY_DATA_SO_STATISTICS
    // DEBUG:     {
    // DEBUG:     UINT64 NumPrimitivesWritten;
    // DEBUG:     UINT64 PrimitivesStorageNeeded;
    // DEBUG:     }
    public unsafe partial class D3D11QUERY_DATA_SO_STATISTICS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ulong NumPrimitivesWritten;
            internal ulong PrimitivesStorageNeeded;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_QUERY_DATA_SO_STATISTICS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11QUERY_DATA_SO_STATISTICS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11QUERY_DATA_SO_STATISTICS(native.ToPointer(), skipVTables);
        }

        internal static D3D11QUERY_DATA_SO_STATISTICS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11QUERY_DATA_SO_STATISTICS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11QUERY_DATA_SO_STATISTICS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11QUERY_DATA_SO_STATISTICS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11QUERY_DATA_SO_STATISTICS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11QUERY_DATA_SO_STATISTICS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_QUERY_DATA_SO_STATISTICS
        public D3D11QUERY_DATA_SO_STATISTICS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_QUERY_DATA_SO_STATISTICS
        public D3D11QUERY_DATA_SO_STATISTICS(global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS.__Internal*) __Instance) = *((global::SpoutDX.D3D11QUERY_DATA_SO_STATISTICS.__Internal*) _0.__Instance);
        }

        ~D3D11QUERY_DATA_SO_STATISTICS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong NumPrimitivesWritten
        {
            get
            {
                return ((__Internal*)__Instance)->NumPrimitivesWritten;
            }

            set
            {
                ((__Internal*)__Instance)->NumPrimitivesWritten = value;
            }
        }

        public ulong PrimitivesStorageNeeded
        {
            get
            {
                return ((__Internal*)__Instance)->PrimitivesStorageNeeded;
            }

            set
            {
                ((__Internal*)__Instance)->PrimitivesStorageNeeded = value;
            }
        }
    }

    // DEBUG: struct D3D11_COUNTER_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_COUNTER Counter;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D11COUNTER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11COUNTER Counter;
            internal uint MiscFlags;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11COUNTER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11COUNTER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11COUNTER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11COUNTER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11COUNTER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11COUNTER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11COUNTER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11COUNTER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11COUNTER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11COUNTER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11COUNTER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11COUNTER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11COUNTER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11COUNTER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11COUNTER Counter
        {
            get
            {
                return ((__Internal*)__Instance)->Counter;
            }

            set
            {
                ((__Internal*)__Instance)->Counter = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct CD3D11_COUNTER_DESC : public D3D11_COUNTER_DESC
    // DEBUG: {
    // DEBUG:     CD3D11_COUNTER_DESC() = default;
    // DEBUG:     explicit CD3D11_COUNTER_DESC( const D3D11_COUNTER_DESC& o ) :
    // DEBUG:         D3D11_COUNTER_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D11_COUNTER_DESC(
    // DEBUG:         D3D11_COUNTER counter,
    // DEBUG:         UINT miscFlags = 0 )
    // DEBUG:     {
    // DEBUG:         Counter = counter;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:     }
    // DEBUG:     ~CD3D11_COUNTER_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D11COUNTER_DESC : global::SpoutDX.D3D11COUNTER_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public new partial struct __Internal
        {
            internal global::SpoutDX.D3D11COUNTER Counter;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_COUNTER_DESC@@QEAA@AEBUD3D11_COUNTER_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_COUNTER_DESC@@QEAA@W4D3D11_COUNTER@@I@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, global::SpoutDX.D3D11COUNTER counter, uint miscFlags);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D11_COUNTER_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D11COUNTER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11COUNTER_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D11COUNTER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11COUNTER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11COUNTER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11COUNTER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11COUNTER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11COUNTER_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D11_COUNTER_DESC() = default
        public CD3D11COUNTER_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11COUNTER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D11_COUNTER_DESC( const D3D11_COUNTER_DESC& o ) :
        // DEBUG:         D3D11_COUNTER_DESC( o )
        // DEBUG:     {}
        public CD3D11COUNTER_DESC(global::SpoutDX.D3D11COUNTER_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11COUNTER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D11_COUNTER_DESC(
        // DEBUG:         D3D11_COUNTER counter,
        // DEBUG:         UINT miscFlags = 0 )
        // DEBUG:     {
        // DEBUG:         Counter = counter;
        // DEBUG:         MiscFlags = miscFlags;
        // DEBUG:     }
        public CD3D11COUNTER_DESC(global::SpoutDX.D3D11COUNTER counter, uint miscFlags)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11COUNTER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance, counter, miscFlags);
        }

        ~CD3D11COUNTER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_COUNTER_INFO
    // DEBUG:     {
    // DEBUG:     D3D11_COUNTER LastDeviceDependentCounter;
    // DEBUG:     UINT NumSimultaneousCounters;
    // DEBUG:     UINT8 NumDetectableParallelUnits;
    // DEBUG:     }
    public unsafe partial class D3D11COUNTER_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11COUNTER LastDeviceDependentCounter;
            internal uint NumSimultaneousCounters;
            internal byte NumDetectableParallelUnits;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11COUNTER_INFO>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11COUNTER_INFO>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11COUNTER_INFO managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11COUNTER_INFO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11COUNTER_INFO managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11COUNTER_INFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11COUNTER_INFO(native.ToPointer(), skipVTables);
        }

        internal static D3D11COUNTER_INFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11COUNTER_INFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11COUNTER_INFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11COUNTER_INFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11COUNTER_INFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11COUNTER_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11COUNTER_INFO()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11COUNTER LastDeviceDependentCounter
        {
            get
            {
                return ((__Internal*)__Instance)->LastDeviceDependentCounter;
            }

            set
            {
                ((__Internal*)__Instance)->LastDeviceDependentCounter = value;
            }
        }

        public uint NumSimultaneousCounters
        {
            get
            {
                return ((__Internal*)__Instance)->NumSimultaneousCounters;
            }

            set
            {
                ((__Internal*)__Instance)->NumSimultaneousCounters = value;
            }
        }

        public byte NumDetectableParallelUnits
        {
            get
            {
                return ((__Internal*)__Instance)->NumDetectableParallelUnits;
            }

            set
            {
                ((__Internal*)__Instance)->NumDetectableParallelUnits = value;
            }
        }
    }

    // DEBUG: struct D3D11_CLASS_INSTANCE_DESC
    // DEBUG:     {
    // DEBUG:     UINT InstanceId;
    // DEBUG:     UINT InstanceIndex;
    // DEBUG:     UINT TypeId;
    // DEBUG:     UINT ConstantBuffer;
    // DEBUG:     UINT BaseConstantBufferOffset;
    // DEBUG:     UINT BaseTexture;
    // DEBUG:     UINT BaseSampler;
    // DEBUG:     BOOL Created;
    // DEBUG:     }
    public unsafe partial class D3D11CLASS_INSTANCE_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal uint InstanceId;
            internal uint InstanceIndex;
            internal uint TypeId;
            internal uint ConstantBuffer;
            internal uint BaseConstantBufferOffset;
            internal uint BaseTexture;
            internal uint BaseSampler;
            internal int Created;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11CLASS_INSTANCE_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11CLASS_INSTANCE_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11CLASS_INSTANCE_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11CLASS_INSTANCE_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11CLASS_INSTANCE_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11CLASS_INSTANCE_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11CLASS_INSTANCE_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11CLASS_INSTANCE_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11CLASS_INSTANCE_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11CLASS_INSTANCE_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11CLASS_INSTANCE_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11CLASS_INSTANCE_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11CLASS_INSTANCE_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~D3D11CLASS_INSTANCE_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint InstanceId
        {
            get
            {
                return ((__Internal*)__Instance)->InstanceId;
            }

            set
            {
                ((__Internal*)__Instance)->InstanceId = value;
            }
        }

        public uint InstanceIndex
        {
            get
            {
                return ((__Internal*)__Instance)->InstanceIndex;
            }

            set
            {
                ((__Internal*)__Instance)->InstanceIndex = value;
            }
        }

        public uint TypeId
        {
            get
            {
                return ((__Internal*)__Instance)->TypeId;
            }

            set
            {
                ((__Internal*)__Instance)->TypeId = value;
            }
        }

        public uint ConstantBuffer
        {
            get
            {
                return ((__Internal*)__Instance)->ConstantBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->ConstantBuffer = value;
            }
        }

        public uint BaseConstantBufferOffset
        {
            get
            {
                return ((__Internal*)__Instance)->BaseConstantBufferOffset;
            }

            set
            {
                ((__Internal*)__Instance)->BaseConstantBufferOffset = value;
            }
        }

        public uint BaseTexture
        {
            get
            {
                return ((__Internal*)__Instance)->BaseTexture;
            }

            set
            {
                ((__Internal*)__Instance)->BaseTexture = value;
            }
        }

        public uint BaseSampler
        {
            get
            {
                return ((__Internal*)__Instance)->BaseSampler;
            }

            set
            {
                ((__Internal*)__Instance)->BaseSampler = value;
            }
        }

        public int Created
        {
            get
            {
                return ((__Internal*)__Instance)->Created;
            }

            set
            {
                ((__Internal*)__Instance)->Created = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_THREADING
    // DEBUG:     {
    // DEBUG:     BOOL DriverConcurrentCreates;
    // DEBUG:     BOOL DriverCommandLists;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_THREADING : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal int DriverConcurrentCreates;
            internal int DriverCommandLists;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_THREADING@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_THREADING>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_THREADING>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_THREADING managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_THREADING>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_THREADING managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_THREADING __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_THREADING(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_THREADING __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_THREADING)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_THREADING __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_THREADING(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_THREADING(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_THREADING(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_THREADING
        public D3D11FEATURE_DATA_THREADING()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_THREADING.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_THREADING
        public D3D11FEATURE_DATA_THREADING(global::SpoutDX.D3D11FEATURE_DATA_THREADING _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_THREADING.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_THREADING.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_THREADING.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_THREADING()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int DriverConcurrentCreates
        {
            get
            {
                return ((__Internal*)__Instance)->DriverConcurrentCreates;
            }

            set
            {
                ((__Internal*)__Instance)->DriverConcurrentCreates = value;
            }
        }

        public int DriverCommandLists
        {
            get
            {
                return ((__Internal*)__Instance)->DriverCommandLists;
            }

            set
            {
                ((__Internal*)__Instance)->DriverCommandLists = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_DOUBLES
    // DEBUG:     {
    // DEBUG:     BOOL DoublePrecisionFloatShaderOps;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_DOUBLES : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal int DoublePrecisionFloatShaderOps;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_DOUBLES@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_DOUBLES>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_DOUBLES>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_DOUBLES managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_DOUBLES>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_DOUBLES managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_DOUBLES __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_DOUBLES(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_DOUBLES __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_DOUBLES)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_DOUBLES __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_DOUBLES(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_DOUBLES(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_DOUBLES(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_DOUBLES
        public D3D11FEATURE_DATA_DOUBLES()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_DOUBLES.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_DOUBLES
        public D3D11FEATURE_DATA_DOUBLES(global::SpoutDX.D3D11FEATURE_DATA_DOUBLES _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_DOUBLES.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_DOUBLES.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_DOUBLES.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_DOUBLES()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int DoublePrecisionFloatShaderOps
        {
            get
            {
                return ((__Internal*)__Instance)->DoublePrecisionFloatShaderOps;
            }

            set
            {
                ((__Internal*)__Instance)->DoublePrecisionFloatShaderOps = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT InFormat;
    // DEBUG:     UINT OutFormatSupport;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_FORMAT_SUPPORT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal global::DXGI_FORMAT InFormat;
            internal uint OutFormatSupport;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_FORMAT_SUPPORT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_FORMAT_SUPPORT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_FORMAT_SUPPORT(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_FORMAT_SUPPORT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_FORMAT_SUPPORT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_FORMAT_SUPPORT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_FORMAT_SUPPORT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_FORMAT_SUPPORT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_FORMAT_SUPPORT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_FORMAT_SUPPORT
        public D3D11FEATURE_DATA_FORMAT_SUPPORT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_FORMAT_SUPPORT
        public D3D11FEATURE_DATA_FORMAT_SUPPORT(global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_FORMAT_SUPPORT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint OutFormatSupport
        {
            get
            {
                return ((__Internal*)__Instance)->OutFormatSupport;
            }

            set
            {
                ((__Internal*)__Instance)->OutFormatSupport = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT InFormat;
    // DEBUG:     UINT OutFormatSupport2;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_FORMAT_SUPPORT2 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal global::DXGI_FORMAT InFormat;
            internal uint OutFormatSupport2;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_FORMAT_SUPPORT2@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_FORMAT_SUPPORT2 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_FORMAT_SUPPORT2(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_FORMAT_SUPPORT2 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_FORMAT_SUPPORT2)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_FORMAT_SUPPORT2 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_FORMAT_SUPPORT2(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_FORMAT_SUPPORT2(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_FORMAT_SUPPORT2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_FORMAT_SUPPORT2
        public D3D11FEATURE_DATA_FORMAT_SUPPORT2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_FORMAT_SUPPORT2
        public D3D11FEATURE_DATA_FORMAT_SUPPORT2(global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_FORMAT_SUPPORT2.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_FORMAT_SUPPORT2()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint OutFormatSupport2
        {
            get
            {
                return ((__Internal*)__Instance)->OutFormatSupport2;
            }

            set
            {
                ((__Internal*)__Instance)->OutFormatSupport2 = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    // DEBUG:     {
    // DEBUG:     BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal int ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
        public D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
        public D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS(global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D10X_HARDWARE_OPTIONS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int ComputeShadersPlusRawAndStructuredBuffersViaShader4_x
        {
            get
            {
                return ((__Internal*)__Instance)->ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
            }

            set
            {
                ((__Internal*)__Instance)->ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D11_OPTIONS
    // DEBUG:     {
    // DEBUG:     BOOL OutputMergerLogicOp;
    // DEBUG:     BOOL UAVOnlyRenderingForcedSampleCount;
    // DEBUG:     BOOL DiscardAPIsSeenByDriver;
    // DEBUG:     BOOL FlagsForUpdateAndCopySeenByDriver;
    // DEBUG:     BOOL ClearView;
    // DEBUG:     BOOL CopyWithOverlap;
    // DEBUG:     BOOL ConstantBufferPartialUpdate;
    // DEBUG:     BOOL ConstantBufferOffsetting;
    // DEBUG:     BOOL MapNoOverwriteOnDynamicConstantBuffer;
    // DEBUG:     BOOL MapNoOverwriteOnDynamicBufferSRV;
    // DEBUG:     BOOL MultisampleRTVWithForcedSampleCountOne;
    // DEBUG:     BOOL SAD4ShaderInstructions;
    // DEBUG:     BOOL ExtendedDoublesShaderInstructions;
    // DEBUG:     BOOL ExtendedResourceSharing;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D11OPTIONS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal int OutputMergerLogicOp;
            internal int UAVOnlyRenderingForcedSampleCount;
            internal int DiscardAPIsSeenByDriver;
            internal int FlagsForUpdateAndCopySeenByDriver;
            internal int ClearView;
            internal int CopyWithOverlap;
            internal int ConstantBufferPartialUpdate;
            internal int ConstantBufferOffsetting;
            internal int MapNoOverwriteOnDynamicConstantBuffer;
            internal int MapNoOverwriteOnDynamicBufferSRV;
            internal int MultisampleRTVWithForcedSampleCountOne;
            internal int SAD4ShaderInstructions;
            internal int ExtendedDoublesShaderInstructions;
            internal int ExtendedResourceSharing;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D11_OPTIONS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D11OPTIONS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D11OPTIONS(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D11OPTIONS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D11OPTIONS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D11OPTIONS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D11OPTIONS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS
        public D3D11FEATURE_DATA_D3D11OPTIONS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS
        public D3D11FEATURE_DATA_D3D11OPTIONS(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D11OPTIONS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int OutputMergerLogicOp
        {
            get
            {
                return ((__Internal*)__Instance)->OutputMergerLogicOp;
            }

            set
            {
                ((__Internal*)__Instance)->OutputMergerLogicOp = value;
            }
        }

        public int UAVOnlyRenderingForcedSampleCount
        {
            get
            {
                return ((__Internal*)__Instance)->UAVOnlyRenderingForcedSampleCount;
            }

            set
            {
                ((__Internal*)__Instance)->UAVOnlyRenderingForcedSampleCount = value;
            }
        }

        public int DiscardAPIsSeenByDriver
        {
            get
            {
                return ((__Internal*)__Instance)->DiscardAPIsSeenByDriver;
            }

            set
            {
                ((__Internal*)__Instance)->DiscardAPIsSeenByDriver = value;
            }
        }

        public int FlagsForUpdateAndCopySeenByDriver
        {
            get
            {
                return ((__Internal*)__Instance)->FlagsForUpdateAndCopySeenByDriver;
            }

            set
            {
                ((__Internal*)__Instance)->FlagsForUpdateAndCopySeenByDriver = value;
            }
        }

        public int ClearView
        {
            get
            {
                return ((__Internal*)__Instance)->ClearView;
            }

            set
            {
                ((__Internal*)__Instance)->ClearView = value;
            }
        }

        public int CopyWithOverlap
        {
            get
            {
                return ((__Internal*)__Instance)->CopyWithOverlap;
            }

            set
            {
                ((__Internal*)__Instance)->CopyWithOverlap = value;
            }
        }

        public int ConstantBufferPartialUpdate
        {
            get
            {
                return ((__Internal*)__Instance)->ConstantBufferPartialUpdate;
            }

            set
            {
                ((__Internal*)__Instance)->ConstantBufferPartialUpdate = value;
            }
        }

        public int ConstantBufferOffsetting
        {
            get
            {
                return ((__Internal*)__Instance)->ConstantBufferOffsetting;
            }

            set
            {
                ((__Internal*)__Instance)->ConstantBufferOffsetting = value;
            }
        }

        public int MapNoOverwriteOnDynamicConstantBuffer
        {
            get
            {
                return ((__Internal*)__Instance)->MapNoOverwriteOnDynamicConstantBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->MapNoOverwriteOnDynamicConstantBuffer = value;
            }
        }

        public int MapNoOverwriteOnDynamicBufferSRV
        {
            get
            {
                return ((__Internal*)__Instance)->MapNoOverwriteOnDynamicBufferSRV;
            }

            set
            {
                ((__Internal*)__Instance)->MapNoOverwriteOnDynamicBufferSRV = value;
            }
        }

        public int MultisampleRTVWithForcedSampleCountOne
        {
            get
            {
                return ((__Internal*)__Instance)->MultisampleRTVWithForcedSampleCountOne;
            }

            set
            {
                ((__Internal*)__Instance)->MultisampleRTVWithForcedSampleCountOne = value;
            }
        }

        public int SAD4ShaderInstructions
        {
            get
            {
                return ((__Internal*)__Instance)->SAD4ShaderInstructions;
            }

            set
            {
                ((__Internal*)__Instance)->SAD4ShaderInstructions = value;
            }
        }

        public int ExtendedDoublesShaderInstructions
        {
            get
            {
                return ((__Internal*)__Instance)->ExtendedDoublesShaderInstructions;
            }

            set
            {
                ((__Internal*)__Instance)->ExtendedDoublesShaderInstructions = value;
            }
        }

        public int ExtendedResourceSharing
        {
            get
            {
                return ((__Internal*)__Instance)->ExtendedResourceSharing;
            }

            set
            {
                ((__Internal*)__Instance)->ExtendedResourceSharing = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
    // DEBUG:     {
    // DEBUG:     BOOL TileBasedDeferredRenderer;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_ARCHITECTURE_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal int TileBasedDeferredRenderer;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_ARCHITECTURE_INFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_ARCHITECTURE_INFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_ARCHITECTURE_INFO(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_ARCHITECTURE_INFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_ARCHITECTURE_INFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_ARCHITECTURE_INFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_ARCHITECTURE_INFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_ARCHITECTURE_INFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_ARCHITECTURE_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_ARCHITECTURE_INFO
        public D3D11FEATURE_DATA_ARCHITECTURE_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_ARCHITECTURE_INFO
        public D3D11FEATURE_DATA_ARCHITECTURE_INFO(global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_ARCHITECTURE_INFO.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_ARCHITECTURE_INFO()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int TileBasedDeferredRenderer
        {
            get
            {
                return ((__Internal*)__Instance)->TileBasedDeferredRenderer;
            }

            set
            {
                ((__Internal*)__Instance)->TileBasedDeferredRenderer = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D9_OPTIONS
    // DEBUG:     {
    // DEBUG:     BOOL FullNonPow2TextureSupport;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D9OPTIONS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal int FullNonPow2TextureSupport;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D9_OPTIONS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D9OPTIONS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D9OPTIONS(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D9OPTIONS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D9OPTIONS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D9OPTIONS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D9OPTIONS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D9OPTIONS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D9OPTIONS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D9_OPTIONS
        public D3D11FEATURE_DATA_D3D9OPTIONS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D9_OPTIONS
        public D3D11FEATURE_DATA_D3D9OPTIONS(global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D9OPTIONS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int FullNonPow2TextureSupport
        {
            get
            {
                return ((__Internal*)__Instance)->FullNonPow2TextureSupport;
            }

            set
            {
                ((__Internal*)__Instance)->FullNonPow2TextureSupport = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
    // DEBUG:     {
    // DEBUG:     BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal int SupportsDepthAsTextureWithLessEqualComparisonFilter;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
        public D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
        public D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT(global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D9SHADOW_SUPPORT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int SupportsDepthAsTextureWithLessEqualComparisonFilter
        {
            get
            {
                return ((__Internal*)__Instance)->SupportsDepthAsTextureWithLessEqualComparisonFilter;
            }

            set
            {
                ((__Internal*)__Instance)->SupportsDepthAsTextureWithLessEqualComparisonFilter = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
    // DEBUG:     {
    // DEBUG:     UINT PixelShaderMinPrecision;
    // DEBUG:     UINT AllOtherShaderStagesMinPrecision;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint PixelShaderMinPrecision;
            internal uint AllOtherShaderStagesMinPrecision;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
        public D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
        public D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT(global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint PixelShaderMinPrecision
        {
            get
            {
                return ((__Internal*)__Instance)->PixelShaderMinPrecision;
            }

            set
            {
                ((__Internal*)__Instance)->PixelShaderMinPrecision = value;
            }
        }

        public uint AllOtherShaderStagesMinPrecision
        {
            get
            {
                return ((__Internal*)__Instance)->AllOtherShaderStagesMinPrecision;
            }

            set
            {
                ((__Internal*)__Instance)->AllOtherShaderStagesMinPrecision = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
    // DEBUG:     {
    // DEBUG:     D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
    // DEBUG:     BOOL MinMaxFiltering;
    // DEBUG:     BOOL ClearViewAlsoSupportsDepthOnlyFormats;
    // DEBUG:     BOOL MapOnDefaultBuffers;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D11OPTIONS1 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11TILED_RESOURCES_TIER TiledResourcesTier;
            internal int MinMaxFiltering;
            internal int ClearViewAlsoSupportsDepthOnlyFormats;
            internal int MapOnDefaultBuffers;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D11_OPTIONS1@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D11OPTIONS1 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D11OPTIONS1(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS1 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D11OPTIONS1)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS1 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D11OPTIONS1(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D11OPTIONS1(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D11OPTIONS1(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS1
        public D3D11FEATURE_DATA_D3D11OPTIONS1()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS1
        public D3D11FEATURE_DATA_D3D11OPTIONS1(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS1.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D11OPTIONS1()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11TILED_RESOURCES_TIER TiledResourcesTier
        {
            get
            {
                return ((__Internal*)__Instance)->TiledResourcesTier;
            }

            set
            {
                ((__Internal*)__Instance)->TiledResourcesTier = value;
            }
        }

        public int MinMaxFiltering
        {
            get
            {
                return ((__Internal*)__Instance)->MinMaxFiltering;
            }

            set
            {
                ((__Internal*)__Instance)->MinMaxFiltering = value;
            }
        }

        public int ClearViewAlsoSupportsDepthOnlyFormats
        {
            get
            {
                return ((__Internal*)__Instance)->ClearViewAlsoSupportsDepthOnlyFormats;
            }

            set
            {
                ((__Internal*)__Instance)->ClearViewAlsoSupportsDepthOnlyFormats = value;
            }
        }

        public int MapOnDefaultBuffers
        {
            get
            {
                return ((__Internal*)__Instance)->MapOnDefaultBuffers;
            }

            set
            {
                ((__Internal*)__Instance)->MapOnDefaultBuffers = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
    // DEBUG:     {
    // DEBUG:     BOOL SimpleInstancingSupported;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal int SimpleInstancingSupported;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
        public D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
        public D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT(global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D9SIMPLE_INSTANCING_SUPPORT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int SimpleInstancingSupported
        {
            get
            {
                return ((__Internal*)__Instance)->SimpleInstancingSupported;
            }

            set
            {
                ((__Internal*)__Instance)->SimpleInstancingSupported = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_MARKER_SUPPORT
    // DEBUG:     {
    // DEBUG:     BOOL Profile;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_MARKER_SUPPORT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal int Profile;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_MARKER_SUPPORT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_MARKER_SUPPORT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_MARKER_SUPPORT(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_MARKER_SUPPORT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_MARKER_SUPPORT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_MARKER_SUPPORT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_MARKER_SUPPORT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_MARKER_SUPPORT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_MARKER_SUPPORT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_MARKER_SUPPORT
        public D3D11FEATURE_DATA_MARKER_SUPPORT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_MARKER_SUPPORT
        public D3D11FEATURE_DATA_MARKER_SUPPORT(global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_MARKER_SUPPORT.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_MARKER_SUPPORT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Profile
        {
            get
            {
                return ((__Internal*)__Instance)->Profile;
            }

            set
            {
                ((__Internal*)__Instance)->Profile = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
    // DEBUG:     {
    // DEBUG:     BOOL FullNonPow2TextureSupported;
    // DEBUG:     BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
    // DEBUG:     BOOL SimpleInstancingSupported;
    // DEBUG:     BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D9OPTIONS1 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal int FullNonPow2TextureSupported;
            internal int DepthAsTextureWithLessEqualComparisonFilterSupported;
            internal int SimpleInstancingSupported;
            internal int TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D9_OPTIONS1@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D9OPTIONS1 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D9OPTIONS1(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D9OPTIONS1 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D9OPTIONS1)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D9OPTIONS1 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D9OPTIONS1(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D9OPTIONS1(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D9OPTIONS1(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D9_OPTIONS1
        public D3D11FEATURE_DATA_D3D9OPTIONS1()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D9_OPTIONS1
        public D3D11FEATURE_DATA_D3D9OPTIONS1(global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D9OPTIONS1.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D9OPTIONS1()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int FullNonPow2TextureSupported
        {
            get
            {
                return ((__Internal*)__Instance)->FullNonPow2TextureSupported;
            }

            set
            {
                ((__Internal*)__Instance)->FullNonPow2TextureSupported = value;
            }
        }

        public int DepthAsTextureWithLessEqualComparisonFilterSupported
        {
            get
            {
                return ((__Internal*)__Instance)->DepthAsTextureWithLessEqualComparisonFilterSupported;
            }

            set
            {
                ((__Internal*)__Instance)->DepthAsTextureWithLessEqualComparisonFilterSupported = value;
            }
        }

        public int SimpleInstancingSupported
        {
            get
            {
                return ((__Internal*)__Instance)->SimpleInstancingSupported;
            }

            set
            {
                ((__Internal*)__Instance)->SimpleInstancingSupported = value;
            }
        }

        public int TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported
        {
            get
            {
                return ((__Internal*)__Instance)->TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
            }

            set
            {
                ((__Internal*)__Instance)->TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
    // DEBUG:     {
    // DEBUG:     BOOL PSSpecifiedStencilRefSupported;
    // DEBUG:     BOOL TypedUAVLoadAdditionalFormats;
    // DEBUG:     BOOL ROVsSupported;
    // DEBUG:     D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    // DEBUG:     D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
    // DEBUG:     BOOL MapOnDefaultTextures;
    // DEBUG:     BOOL StandardSwizzle;
    // DEBUG:     BOOL UnifiedMemoryArchitecture;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D11OPTIONS2 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal int PSSpecifiedStencilRefSupported;
            internal int TypedUAVLoadAdditionalFormats;
            internal int ROVsSupported;
            internal global::SpoutDX.D3D11CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
            internal global::SpoutDX.D3D11TILED_RESOURCES_TIER TiledResourcesTier;
            internal int MapOnDefaultTextures;
            internal int StandardSwizzle;
            internal int UnifiedMemoryArchitecture;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D11_OPTIONS2@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D11OPTIONS2 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D11OPTIONS2(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS2 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D11OPTIONS2)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS2 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D11OPTIONS2(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D11OPTIONS2(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D11OPTIONS2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS2
        public D3D11FEATURE_DATA_D3D11OPTIONS2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS2
        public D3D11FEATURE_DATA_D3D11OPTIONS2(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS2.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D11OPTIONS2()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int PSSpecifiedStencilRefSupported
        {
            get
            {
                return ((__Internal*)__Instance)->PSSpecifiedStencilRefSupported;
            }

            set
            {
                ((__Internal*)__Instance)->PSSpecifiedStencilRefSupported = value;
            }
        }

        public int TypedUAVLoadAdditionalFormats
        {
            get
            {
                return ((__Internal*)__Instance)->TypedUAVLoadAdditionalFormats;
            }

            set
            {
                ((__Internal*)__Instance)->TypedUAVLoadAdditionalFormats = value;
            }
        }

        public int ROVsSupported
        {
            get
            {
                return ((__Internal*)__Instance)->ROVsSupported;
            }

            set
            {
                ((__Internal*)__Instance)->ROVsSupported = value;
            }
        }

        public global::SpoutDX.D3D11CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier
        {
            get
            {
                return ((__Internal*)__Instance)->ConservativeRasterizationTier;
            }

            set
            {
                ((__Internal*)__Instance)->ConservativeRasterizationTier = value;
            }
        }

        public global::SpoutDX.D3D11TILED_RESOURCES_TIER TiledResourcesTier
        {
            get
            {
                return ((__Internal*)__Instance)->TiledResourcesTier;
            }

            set
            {
                ((__Internal*)__Instance)->TiledResourcesTier = value;
            }
        }

        public int MapOnDefaultTextures
        {
            get
            {
                return ((__Internal*)__Instance)->MapOnDefaultTextures;
            }

            set
            {
                ((__Internal*)__Instance)->MapOnDefaultTextures = value;
            }
        }

        public int StandardSwizzle
        {
            get
            {
                return ((__Internal*)__Instance)->StandardSwizzle;
            }

            set
            {
                ((__Internal*)__Instance)->StandardSwizzle = value;
            }
        }

        public int UnifiedMemoryArchitecture
        {
            get
            {
                return ((__Internal*)__Instance)->UnifiedMemoryArchitecture;
            }

            set
            {
                ((__Internal*)__Instance)->UnifiedMemoryArchitecture = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
    // DEBUG:     {
    // DEBUG:     BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D11OPTIONS3 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal int VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D11_OPTIONS3@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D11OPTIONS3 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D11OPTIONS3(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS3 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D11OPTIONS3)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS3 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D11OPTIONS3(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D11OPTIONS3(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D11OPTIONS3(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS3
        public D3D11FEATURE_DATA_D3D11OPTIONS3()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS3
        public D3D11FEATURE_DATA_D3D11OPTIONS3(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS3.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D11OPTIONS3()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int VPAndRTArrayIndexFromAnyShaderFeedingRasterizer
        {
            get
            {
                return ((__Internal*)__Instance)->VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
            }

            set
            {
                ((__Internal*)__Instance)->VPAndRTArrayIndexFromAnyShaderFeedingRasterizer = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    // DEBUG:     {
    // DEBUG:     UINT MaxGPUVirtualAddressBitsPerResource;
    // DEBUG:     UINT MaxGPUVirtualAddressBitsPerProcess;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MaxGPUVirtualAddressBitsPerResource;
            internal uint MaxGPUVirtualAddressBitsPerProcess;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
        public D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
        public D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT(global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MaxGPUVirtualAddressBitsPerResource
        {
            get
            {
                return ((__Internal*)__Instance)->MaxGPUVirtualAddressBitsPerResource;
            }

            set
            {
                ((__Internal*)__Instance)->MaxGPUVirtualAddressBitsPerResource = value;
            }
        }

        public uint MaxGPUVirtualAddressBitsPerProcess
        {
            get
            {
                return ((__Internal*)__Instance)->MaxGPUVirtualAddressBitsPerProcess;
            }

            set
            {
                ((__Internal*)__Instance)->MaxGPUVirtualAddressBitsPerProcess = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_SHADER_CACHE
    // DEBUG:     {
    // DEBUG:     UINT SupportFlags;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_SHADER_CACHE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint SupportFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_SHADER_CACHE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_SHADER_CACHE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_SHADER_CACHE(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_SHADER_CACHE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_SHADER_CACHE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_SHADER_CACHE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_SHADER_CACHE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_SHADER_CACHE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_SHADER_CACHE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_SHADER_CACHE
        public D3D11FEATURE_DATA_SHADER_CACHE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_SHADER_CACHE
        public D3D11FEATURE_DATA_SHADER_CACHE(global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_SHADER_CACHE.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_SHADER_CACHE()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint SupportFlags
        {
            get
            {
                return ((__Internal*)__Instance)->SupportFlags;
            }

            set
            {
                ((__Internal*)__Instance)->SupportFlags = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_DISPLAYABLE
    // DEBUG:     {
    // DEBUG:     BOOL DisplayableTexture;
    // DEBUG:     D3D11_SHARED_RESOURCE_TIER SharedResourceTier;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_DISPLAYABLE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal int DisplayableTexture;
            internal global::SpoutDX.D3D11SHARED_RESOURCE_TIER SharedResourceTier;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_DISPLAYABLE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_DISPLAYABLE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_DISPLAYABLE(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_DISPLAYABLE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_DISPLAYABLE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_DISPLAYABLE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_DISPLAYABLE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_DISPLAYABLE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_DISPLAYABLE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_DISPLAYABLE
        public D3D11FEATURE_DATA_DISPLAYABLE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_DISPLAYABLE
        public D3D11FEATURE_DATA_DISPLAYABLE(global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_DISPLAYABLE.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_DISPLAYABLE()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int DisplayableTexture
        {
            get
            {
                return ((__Internal*)__Instance)->DisplayableTexture;
            }

            set
            {
                ((__Internal*)__Instance)->DisplayableTexture = value;
            }
        }

        public global::SpoutDX.D3D11SHARED_RESOURCE_TIER SharedResourceTier
        {
            get
            {
                return ((__Internal*)__Instance)->SharedResourceTier;
            }

            set
            {
                ((__Internal*)__Instance)->SharedResourceTier = value;
            }
        }
    }

    // DEBUG: struct D3D11_FEATURE_DATA_D3D11_OPTIONS5
    // DEBUG:     {
    // DEBUG:     D3D11_SHARED_RESOURCE_TIER SharedResourceTier;
    // DEBUG:     }
    public unsafe partial class D3D11FEATURE_DATA_D3D11OPTIONS5 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11SHARED_RESOURCE_TIER SharedResourceTier;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_FEATURE_DATA_D3D11_OPTIONS5@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11FEATURE_DATA_D3D11OPTIONS5 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11FEATURE_DATA_D3D11OPTIONS5(native.ToPointer(), skipVTables);
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS5 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11FEATURE_DATA_D3D11OPTIONS5)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11FEATURE_DATA_D3D11OPTIONS5 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11FEATURE_DATA_D3D11OPTIONS5(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11FEATURE_DATA_D3D11OPTIONS5(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11FEATURE_DATA_D3D11OPTIONS5(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS5
        public D3D11FEATURE_DATA_D3D11OPTIONS5()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_FEATURE_DATA_D3D11_OPTIONS5
        public D3D11FEATURE_DATA_D3D11OPTIONS5(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5.__Internal*) __Instance) = *((global::SpoutDX.D3D11FEATURE_DATA_D3D11OPTIONS5.__Internal*) _0.__Instance);
        }

        ~D3D11FEATURE_DATA_D3D11OPTIONS5()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11SHARED_RESOURCE_TIER SharedResourceTier
        {
            get
            {
                return ((__Internal*)__Instance)->SharedResourceTier;
            }

            set
            {
                ((__Internal*)__Instance)->SharedResourceTier = value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("c0bfa96c-e089-44fb-8eaf-26f8796190da")
    // DEBUG:     ID3D11DeviceContext : public ID3D11DeviceChild
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual void STDMETHODCALLTYPE VSSetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE PSSetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE PSSetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11PixelShader *pPixelShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
    // DEBUG:             UINT NumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE PSSetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE VSSetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11VertexShader *pVertexShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
    // DEBUG:             UINT NumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DrawIndexed( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT IndexCount,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT StartIndexLocation,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  INT BaseVertexLocation) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE Draw( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT VertexCount,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT StartVertexLocation) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Map( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT Subresource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  D3D11_MAP MapType,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT MapFlags,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_opt_  D3D11_MAPPED_SUBRESOURCE *pMappedResource) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE Unmap( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT Subresource) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE PSSetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE IASetInputLayout( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11InputLayout *pInputLayout) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE IASetVertexBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppVertexBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  const UINT *pStrides,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  const UINT *pOffsets) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE IASetIndexBuffer( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11Buffer *pIndexBuffer,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  DXGI_FORMAT Format,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT Offset) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DrawIndexedInstanced( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT IndexCountPerInstance,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT InstanceCount,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT StartIndexLocation,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  INT BaseVertexLocation,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT StartInstanceLocation) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DrawInstanced( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT VertexCountPerInstance,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT InstanceCount,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT StartVertexLocation,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT StartInstanceLocation) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GSSetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GSSetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11GeometryShader *pShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
    // DEBUG:             UINT NumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE IASetPrimitiveTopology( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  D3D11_PRIMITIVE_TOPOLOGY Topology) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE VSSetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE VSSetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE Begin( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Asynchronous *pAsync) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE End( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Asynchronous *pAsync) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetData( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Asynchronous *pAsync,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_bytes_opt_( DataSize )  void *pData,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT DataSize,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT GetDataFlags) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE SetPredication( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11Predicate *pPredicate,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  BOOL PredicateValue) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GSSetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GSSetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE OMSetRenderTargets( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumViews)  ID3D11RenderTargetView *const *ppRenderTargetViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11DepthStencilView *pDepthStencilView) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE OMSetRenderTargetsAndUnorderedAccessViews( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT NumRTVs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumRTVs)  ID3D11RenderTargetView *const *ppRenderTargetViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11DepthStencilView *pDepthStencilView,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT UAVStartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT NumUAVs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumUAVs)  const UINT *pUAVInitialCounts) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE OMSetBlendState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11BlendState *pBlendState,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  const FLOAT BlendFactor[ 4 ],
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT SampleMask) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE OMSetDepthStencilState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11DepthStencilState *pDepthStencilState,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT StencilRef) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE SOSetTargets( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT)  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppSOTargets,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  const UINT *pOffsets) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DrawAuto( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DrawIndexedInstancedIndirect( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Buffer *pBufferForArgs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT AlignedByteOffsetForArgs) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DrawInstancedIndirect( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Buffer *pBufferForArgs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT AlignedByteOffsetForArgs) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE Dispatch( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT ThreadGroupCountX,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT ThreadGroupCountY,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT ThreadGroupCountZ) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DispatchIndirect( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Buffer *pBufferForArgs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT AlignedByteOffsetForArgs) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE RSSetState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11RasterizerState *pRasterizerState) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE RSSetViewports( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumViewports,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumViewports)  const D3D11_VIEWPORT *pViewports) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE RSSetScissorRects( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumRects,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumRects)  const D3D11_RECT *pRects) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CopySubresourceRegion( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pDstResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT DstSubresource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT DstX,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT DstY,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT DstZ,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pSrcResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT SrcSubresource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  const D3D11_BOX *pSrcBox) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CopyResource( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pDstResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pSrcResource) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE UpdateSubresource( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pDstResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT DstSubresource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  const D3D11_BOX *pDstBox,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const void *pSrcData,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT SrcRowPitch,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT SrcDepthPitch) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CopyStructureCount( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Buffer *pDstBuffer,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT DstAlignedByteOffset,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11UnorderedAccessView *pSrcView) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE ClearRenderTargetView( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11RenderTargetView *pRenderTargetView,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const FLOAT ColorRGBA[ 4 ]) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE ClearUnorderedAccessViewUint( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11UnorderedAccessView *pUnorderedAccessView,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const UINT Values[ 4 ]) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE ClearUnorderedAccessViewFloat( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11UnorderedAccessView *pUnorderedAccessView,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const FLOAT Values[ 4 ]) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE ClearDepthStencilView( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11DepthStencilView *pDepthStencilView,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT ClearFlags,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  FLOAT Depth,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT8 Stencil) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GenerateMips( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11ShaderResourceView *pShaderResourceView) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE SetResourceMinLOD( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pResource,
    // DEBUG:             FLOAT MinLOD) = 0;
    // DEBUG:         
    // DEBUG:         virtual FLOAT STDMETHODCALLTYPE GetResourceMinLOD( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pResource) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE ResolveSubresource( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pDstResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT DstSubresource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pSrcResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT SrcSubresource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  DXGI_FORMAT Format) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE ExecuteCommandList( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11CommandList *pCommandList,
    // DEBUG:             BOOL RestoreContextState) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE HSSetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE HSSetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11HullShader *pHullShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
    // DEBUG:             UINT NumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE HSSetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE HSSetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DSSetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DSSetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11DomainShader *pDomainShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
    // DEBUG:             UINT NumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DSSetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DSSetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSSetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSSetUnorderedAccessViews( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - StartSlot )  UINT NumUAVs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumUAVs)  const UINT *pUAVInitialCounts) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSSetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11ComputeShader *pComputeShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
    // DEBUG:             UINT NumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSSetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSSetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE VSGetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE PSGetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE PSGetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_result_maybenull_  ID3D11PixelShader **ppPixelShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_opt_  UINT *pNumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE PSGetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE VSGetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_result_maybenull_  ID3D11VertexShader **ppVertexShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_opt_  UINT *pNumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE PSGetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE IAGetInputLayout( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_result_maybenull_  ID3D11InputLayout **ppInputLayout) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE IAGetVertexBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppVertexBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  UINT *pStrides,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  UINT *pOffsets) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE IAGetIndexBuffer( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_opt_result_maybenull_  ID3D11Buffer **pIndexBuffer,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_opt_  DXGI_FORMAT *Format,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_opt_  UINT *Offset) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GSGetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GSGetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_result_maybenull_  ID3D11GeometryShader **ppGeometryShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_opt_  UINT *pNumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE IAGetPrimitiveTopology( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_  D3D11_PRIMITIVE_TOPOLOGY *pTopology) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE VSGetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE VSGetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GetPredication( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_opt_result_maybenull_  ID3D11Predicate **ppPredicate,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_opt_  BOOL *pPredicateValue) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GSGetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GSGetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE OMGetRenderTargets( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumViews)  ID3D11RenderTargetView **ppRenderTargetViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_opt_result_maybenull_  ID3D11DepthStencilView **ppDepthStencilView) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE OMGetRenderTargetsAndUnorderedAccessViews( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumRTVs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumRTVs)  ID3D11RenderTargetView **ppRenderTargetViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_opt_result_maybenull_  ID3D11DepthStencilView **ppDepthStencilView,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )  UINT UAVStartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - UAVStartSlot )  UINT NumUAVs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView **ppUnorderedAccessViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE OMGetBlendState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_opt_result_maybenull_  ID3D11BlendState **ppBlendState,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_opt_  FLOAT BlendFactor[ 4 ],
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_opt_  UINT *pSampleMask) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE OMGetDepthStencilState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_opt_result_maybenull_  ID3D11DepthStencilState **ppDepthStencilState,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_opt_  UINT *pStencilRef) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE SOGetTargets( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppSOTargets) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE RSGetState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_result_maybenull_  ID3D11RasterizerState **ppRasterizerState) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE RSGetViewports( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT *pNumViewports,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pNumViewports)  D3D11_VIEWPORT *pViewports) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE RSGetScissorRects( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT *pNumRects,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pNumRects)  D3D11_RECT *pRects) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE HSGetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE HSGetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_result_maybenull_  ID3D11HullShader **ppHullShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_opt_  UINT *pNumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE HSGetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE HSGetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DSGetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DSGetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_result_maybenull_  ID3D11DomainShader **ppDomainShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_opt_  UINT *pNumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DSGetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE DSGetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSGetShaderResources( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSGetUnorderedAccessViews( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - StartSlot )  UINT NumUAVs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView **ppUnorderedAccessViews) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSGetShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_result_maybenull_  ID3D11ComputeShader **ppComputeShader,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_opt_  UINT *pNumClassInstances) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSGetSamplers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CSGetConstantBuffers( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE ClearState( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE Flush( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual D3D11_DEVICE_CONTEXT_TYPE STDMETHODCALLTYPE GetType( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual UINT STDMETHODCALLTYPE GetContextFlags( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE FinishCommandList( 
    // DEBUG:             BOOL RestoreDeferredContextState,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11CommandList **ppCommandList) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class ID3D11DeviceContext : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3D11DeviceContext>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3D11DeviceContext>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.ID3D11DeviceContext managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.ID3D11DeviceContext>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.ID3D11DeviceContext managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static ID3D11DeviceContext __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new ID3D11DeviceContextInternal(native.ToPointer(), skipVTables);
        }

        internal static ID3D11DeviceContext __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ID3D11DeviceContext)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ID3D11DeviceContext __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (ID3D11DeviceContext)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static ID3D11DeviceContext __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ID3D11DeviceContextInternal(native, skipVTables);
        }

        protected ID3D11DeviceContext(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~ID3D11DeviceContext()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual void STDMETHODCALLTYPE DrawIndexed( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT IndexCount,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartIndexLocation,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  INT BaseVertexLocation) = 0
        public abstract void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation);

        // DEBUG: virtual void STDMETHODCALLTYPE Draw( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT VertexCount,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartVertexLocation) = 0
        public abstract void Draw(uint VertexCount, uint StartVertexLocation);

        // DEBUG: virtual void STDMETHODCALLTYPE DrawIndexedInstanced( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT IndexCountPerInstance,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT InstanceCount,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartIndexLocation,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  INT BaseVertexLocation,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartInstanceLocation) = 0
        public abstract void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);

        // DEBUG: virtual void STDMETHODCALLTYPE DrawInstanced( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT VertexCountPerInstance,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT InstanceCount,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartVertexLocation,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartInstanceLocation) = 0
        public abstract void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);

        // DEBUG: virtual void STDMETHODCALLTYPE IASetPrimitiveTopology( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  D3D11_PRIMITIVE_TOPOLOGY Topology) = 0
        public abstract void IASetPrimitiveTopology(global::SpoutDX.D3D_PRIMITIVE_TOPOLOGY Topology);

        // DEBUG: virtual void STDMETHODCALLTYPE DrawAuto( void) = 0
        public abstract void DrawAuto();

        // DEBUG: virtual void STDMETHODCALLTYPE Dispatch( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT ThreadGroupCountX,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT ThreadGroupCountY,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT ThreadGroupCountZ) = 0
        public abstract void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);

        // DEBUG: virtual void STDMETHODCALLTYPE RSSetViewports( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumViewports,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_reads_opt_(NumViewports)  const D3D11_VIEWPORT *pViewports) = 0
        public abstract void RSSetViewports(uint NumViewports, global::SpoutDX.D3D11VIEWPORT pViewports);

        // DEBUG: virtual void STDMETHODCALLTYPE IAGetPrimitiveTopology( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  D3D11_PRIMITIVE_TOPOLOGY *pTopology) = 0
        public abstract void IAGetPrimitiveTopology(ref global::SpoutDX.D3D_PRIMITIVE_TOPOLOGY pTopology);

        // DEBUG: virtual void STDMETHODCALLTYPE RSGetViewports( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT *pNumViewports,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_opt_(*pNumViewports)  D3D11_VIEWPORT *pViewports) = 0
        public abstract void RSGetViewports(ref uint pNumViewports, global::SpoutDX.D3D11VIEWPORT pViewports);

        // DEBUG: virtual void STDMETHODCALLTYPE ClearState( void) = 0
        public abstract void ClearState();

        // DEBUG: virtual void STDMETHODCALLTYPE Flush( void) = 0
        public abstract void Flush();

        public abstract global::SpoutDX.D3D11DEVICE_CONTEXT_TYPE Type
        {
            get;
        }

        public abstract uint ContextFlags
        {
            get;
        }

        #region Virtual table interop

        // void STDMETHODCALLTYPE DrawIndexed( /* [annotation] */ _In_ UINT IndexCount, /* [annotation] */ _In_ UINT StartIndexLocation, /* [annotation] */ _In_ INT BaseVertexLocation) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_uint_uint_int _DrawIndexedDelegateInstance;

        private static void _DrawIndexedDelegateHook(__IntPtr __instance, uint IndexCount, uint StartIndexLocation, int BaseVertexLocation)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.DrawIndexed(IndexCount, StartIndexLocation, BaseVertexLocation);
        }

        // void STDMETHODCALLTYPE Draw( /* [annotation] */ _In_ UINT VertexCount, /* [annotation] */ _In_ UINT StartVertexLocation) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_uint_uint _DrawDelegateInstance;

        private static void _DrawDelegateHook(__IntPtr __instance, uint VertexCount, uint StartVertexLocation)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.Draw(VertexCount, StartVertexLocation);
        }

        // void STDMETHODCALLTYPE DrawIndexedInstanced( /* [annotation] */ _In_ UINT IndexCountPerInstance, /* [annotation] */ _In_ UINT InstanceCount, /* [annotation] */ _In_ UINT StartIndexLocation, /* [annotation] */ _In_ INT BaseVertexLocation, /* [annotation] */ _In_ UINT StartInstanceLocation) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_uint_uint_uint_int_uint _DrawIndexedInstancedDelegateInstance;

        private static void _DrawIndexedInstancedDelegateHook(__IntPtr __instance, uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.DrawIndexedInstanced(IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        }

        // void STDMETHODCALLTYPE DrawInstanced( /* [annotation] */ _In_ UINT VertexCountPerInstance, /* [annotation] */ _In_ UINT InstanceCount, /* [annotation] */ _In_ UINT StartVertexLocation, /* [annotation] */ _In_ UINT StartInstanceLocation) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_uint_uint_uint_uint _DrawInstancedDelegateInstance;

        private static void _DrawInstancedDelegateHook(__IntPtr __instance, uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.DrawInstanced(VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        }

        // void STDMETHODCALLTYPE IASetPrimitiveTopology( /* [annotation] */ _In_ D3D11_PRIMITIVE_TOPOLOGY Topology) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_SpoutDX_D3D_PRIMITIVE_TOPOLOGY _IASetPrimitiveTopologyDelegateInstance;

        private static void _IASetPrimitiveTopologyDelegateHook(__IntPtr __instance, global::SpoutDX.D3D_PRIMITIVE_TOPOLOGY Topology)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.IASetPrimitiveTopology(Topology);
        }

        // void STDMETHODCALLTYPE DrawAuto( void) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr _DrawAutoDelegateInstance;

        private static void _DrawAutoDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.DrawAuto();
        }

        // void STDMETHODCALLTYPE Dispatch( /* [annotation] */ _In_ UINT ThreadGroupCountX, /* [annotation] */ _In_ UINT ThreadGroupCountY, /* [annotation] */ _In_ UINT ThreadGroupCountZ) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_uint_uint_uint _DispatchDelegateInstance;

        private static void _DispatchDelegateHook(__IntPtr __instance, uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.Dispatch(ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
        }

        // void STDMETHODCALLTYPE RSSetViewports( /* [annotation] */ _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE) UINT NumViewports, /* [annotation] */ _In_reads_opt_(NumViewports) const D3D11_VIEWPORT *pViewports) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_uint___IntPtr _RSSetViewportsDelegateInstance;

        private static void _RSSetViewportsDelegateHook(__IntPtr __instance, uint NumViewports, __IntPtr pViewports)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            var __result1 = global::SpoutDX.D3D11VIEWPORT.__GetOrCreateInstance(pViewports, false);
            __target.RSSetViewports(NumViewports, __result1);
        }

        // void STDMETHODCALLTYPE IAGetPrimitiveTopology( /* [annotation] */ _Out_ D3D11_PRIMITIVE_TOPOLOGY *pTopology) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_SpoutDX_D3D_PRIMITIVE_TOPOLOGYPtr _IAGetPrimitiveTopologyDelegateInstance;

        private static void _IAGetPrimitiveTopologyDelegateHook(__IntPtr __instance, global::SpoutDX.D3D_PRIMITIVE_TOPOLOGY* pTopology)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.IAGetPrimitiveTopology(ref *pTopology);
        }

        // void STDMETHODCALLTYPE RSGetViewports( /* [annotation] */ _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/ UINT *pNumViewports, /* [annotation] */ _Out_writes_opt_(*pNumViewports) D3D11_VIEWPORT *pViewports) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_uintPtr___IntPtr _RSGetViewportsDelegateInstance;

        private static void _RSGetViewportsDelegateHook(__IntPtr __instance, uint* pNumViewports, __IntPtr pViewports)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            var __result1 = global::SpoutDX.D3D11VIEWPORT.__GetOrCreateInstance(pViewports, false);
            __target.RSGetViewports(ref *pNumViewports, __result1);
        }

        // void STDMETHODCALLTYPE ClearState( void) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr _ClearStateDelegateInstance;

        private static void _ClearStateDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.ClearState();
        }

        // void STDMETHODCALLTYPE Flush( void) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr _FlushDelegateInstance;

        private static void _FlushDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            __target.Flush();
        }

        // D3D11_DEVICE_CONTEXT_TYPE STDMETHODCALLTYPE GetType( void) = 0
        private static global::SpoutDX.Delegates.Func_SpoutDX_D3D11DEVICE_CONTEXT_TYPE___IntPtr _GetTypeDelegateInstance;

        private static global::SpoutDX.D3D11DEVICE_CONTEXT_TYPE _GetTypeDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            var ___ret = __target.Type;
            return ___ret;
        }

        // UINT STDMETHODCALLTYPE GetContextFlags( void) = 0
        private static global::SpoutDX.Delegates.Func_uint___IntPtr _GetContextFlagsDelegateInstance;

        private static uint _GetContextFlagsDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.ID3D11DeviceContext.__GetInstance(__instance);
            var ___ret = __target.ContextFlags;
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[14];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _DrawIndexedDelegateInstance += _DrawIndexedDelegateHook;
                _DrawDelegateInstance += _DrawDelegateHook;
                _DrawIndexedInstancedDelegateInstance += _DrawIndexedInstancedDelegateHook;
                _DrawInstancedDelegateInstance += _DrawInstancedDelegateHook;
                _IASetPrimitiveTopologyDelegateInstance += _IASetPrimitiveTopologyDelegateHook;
                _DrawAutoDelegateInstance += _DrawAutoDelegateHook;
                _DispatchDelegateInstance += _DispatchDelegateHook;
                _RSSetViewportsDelegateInstance += _RSSetViewportsDelegateHook;
                _IAGetPrimitiveTopologyDelegateInstance += _IAGetPrimitiveTopologyDelegateHook;
                _RSGetViewportsDelegateInstance += _RSGetViewportsDelegateHook;
                _ClearStateDelegateInstance += _ClearStateDelegateHook;
                _FlushDelegateInstance += _FlushDelegateHook;
                _GetTypeDelegateInstance += _GetTypeDelegateHook;
                _GetContextFlagsDelegateInstance += _GetContextFlagsDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_DrawIndexedDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DrawDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_DrawIndexedInstancedDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_DrawInstancedDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IASetPrimitiveTopologyDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_DrawAutoDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_DispatchDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_RSSetViewportsDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_IAGetPrimitiveTopologyDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_RSGetViewportsDelegateInstance);
                Thunks[10] = Marshal.GetFunctionPointerForDelegate(_ClearStateDelegateInstance);
                Thunks[11] = Marshal.GetFunctionPointerForDelegate(_FlushDelegateInstance);
                Thunks[12] = Marshal.GetFunctionPointerForDelegate(_GetTypeDelegateInstance);
                Thunks[13] = Marshal.GetFunctionPointerForDelegate(_GetContextFlagsDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 115, 0);
                            ManagedVTables[0][12] = Thunks[0];
                            ManagedVTables[0][13] = Thunks[1];
                            ManagedVTables[0][20] = Thunks[2];
                            ManagedVTables[0][21] = Thunks[3];
                            ManagedVTables[0][24] = Thunks[4];
                            ManagedVTables[0][38] = Thunks[5];
                            ManagedVTables[0][41] = Thunks[6];
                            ManagedVTables[0][44] = Thunks[7];
                            ManagedVTables[0][83] = Thunks[8];
                            ManagedVTables[0][95] = Thunks[9];
                            ManagedVTables[0][110] = Thunks[10];
                            ManagedVTables[0][111] = Thunks[11];
                            ManagedVTables[0][112] = Thunks[12];
                            ManagedVTables[0][113] = Thunks[13];
                            VTables.Methods[0] = new Delegate[115];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct CD3D11_VIDEO_DEFAULT {}
    public unsafe partial class CD3D11VIDEO_DEFAULT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D11_VIDEO_DEFAULT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.CD3D11VIDEO_DEFAULT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.CD3D11VIDEO_DEFAULT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.CD3D11VIDEO_DEFAULT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.CD3D11VIDEO_DEFAULT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.CD3D11VIDEO_DEFAULT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static CD3D11VIDEO_DEFAULT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D11VIDEO_DEFAULT(native.ToPointer(), skipVTables);
        }

        internal static CD3D11VIDEO_DEFAULT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D11VIDEO_DEFAULT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D11VIDEO_DEFAULT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D11VIDEO_DEFAULT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D11VIDEO_DEFAULT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D11VIDEO_DEFAULT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: CD3D11_VIDEO_DEFAULT
        public CD3D11VIDEO_DEFAULT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11VIDEO_DEFAULT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: CD3D11_VIDEO_DEFAULT
        public CD3D11VIDEO_DEFAULT(global::SpoutDX.CD3D11VIDEO_DEFAULT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D11VIDEO_DEFAULT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.CD3D11VIDEO_DEFAULT.__Internal*) __Instance) = *((global::SpoutDX.CD3D11VIDEO_DEFAULT.__Internal*) _0.__Instance);
        }

        ~CD3D11VIDEO_DEFAULT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D11_VIDEO_DECODER_DESC
    // DEBUG:     {
    // DEBUG:     GUID Guid;
    // DEBUG:     UINT SampleWidth;
    // DEBUG:     UINT SampleHeight;
    // DEBUG:     DXGI_FORMAT OutputFormat;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_DECODER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 28)]
        public partial struct __Internal
        {
            internal global::GUID.__Internal Guid;
            internal uint SampleWidth;
            internal uint SampleHeight;
            internal global::DXGI_FORMAT OutputFormat;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_DECODER_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_DECODER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_DECODER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_DECODER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_DECODER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_DECODER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_DECODER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_DECODER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_DECODER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_DECODER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_DECODER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_DECODER_DESC
        public D3D11VIDEO_DECODER_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_DECODER_DESC
        public D3D11VIDEO_DECODER_DESC(global::SpoutDX.D3D11VIDEO_DECODER_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_DECODER_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_DECODER_DESC.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_DECODER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint SampleWidth
        {
            get
            {
                return ((__Internal*)__Instance)->SampleWidth;
            }

            set
            {
                ((__Internal*)__Instance)->SampleWidth = value;
            }
        }

        public uint SampleHeight
        {
            get
            {
                return ((__Internal*)__Instance)->SampleHeight;
            }

            set
            {
                ((__Internal*)__Instance)->SampleHeight = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_DECODER_CONFIG
    // DEBUG:     {
    // DEBUG:     GUID guidConfigBitstreamEncryption;
    // DEBUG:     GUID guidConfigMBcontrolEncryption;
    // DEBUG:     GUID guidConfigResidDiffEncryption;
    // DEBUG:     UINT ConfigBitstreamRaw;
    // DEBUG:     UINT ConfigMBcontrolRasterOrder;
    // DEBUG:     UINT ConfigResidDiffHost;
    // DEBUG:     UINT ConfigSpatialResid8;
    // DEBUG:     UINT ConfigResid8Subtraction;
    // DEBUG:     UINT ConfigSpatialHost8or9Clipping;
    // DEBUG:     UINT ConfigSpatialResidInterleaved;
    // DEBUG:     UINT ConfigIntraResidUnsigned;
    // DEBUG:     UINT ConfigResidDiffAccelerator;
    // DEBUG:     UINT ConfigHostInverseScan;
    // DEBUG:     UINT ConfigSpecificIDCT;
    // DEBUG:     UINT Config4GroupedCoefs;
    // DEBUG:     USHORT ConfigMinRenderTargetBuffCount;
    // DEBUG:     USHORT ConfigDecoderSpecific;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_DECODER_CONFIG : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 100)]
        public partial struct __Internal
        {
            internal global::GUID.__Internal guidConfigBitstreamEncryption;
            internal global::GUID.__Internal guidConfigMBcontrolEncryption;
            internal global::GUID.__Internal guidConfigResidDiffEncryption;
            internal uint ConfigBitstreamRaw;
            internal uint ConfigMBcontrolRasterOrder;
            internal uint ConfigResidDiffHost;
            internal uint ConfigSpatialResid8;
            internal uint ConfigResid8Subtraction;
            internal uint ConfigSpatialHost8or9Clipping;
            internal uint ConfigSpatialResidInterleaved;
            internal uint ConfigIntraResidUnsigned;
            internal uint ConfigResidDiffAccelerator;
            internal uint ConfigHostInverseScan;
            internal uint ConfigSpecificIDCT;
            internal uint Config4GroupedCoefs;
            internal ushort ConfigMinRenderTargetBuffCount;
            internal ushort ConfigDecoderSpecific;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_DECODER_CONFIG@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_CONFIG>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_CONFIG>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_DECODER_CONFIG managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_CONFIG>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_DECODER_CONFIG managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_DECODER_CONFIG __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_DECODER_CONFIG(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_DECODER_CONFIG __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_DECODER_CONFIG)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_DECODER_CONFIG __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_DECODER_CONFIG(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_DECODER_CONFIG(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_DECODER_CONFIG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_DECODER_CONFIG
        public D3D11VIDEO_DECODER_CONFIG()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_DECODER_CONFIG
        public D3D11VIDEO_DECODER_CONFIG(global::SpoutDX.D3D11VIDEO_DECODER_CONFIG _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_DECODER_CONFIG.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_DECODER_CONFIG.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_DECODER_CONFIG()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ConfigBitstreamRaw
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigBitstreamRaw;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigBitstreamRaw = value;
            }
        }

        public uint ConfigMBcontrolRasterOrder
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigMBcontrolRasterOrder;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigMBcontrolRasterOrder = value;
            }
        }

        public uint ConfigResidDiffHost
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigResidDiffHost;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigResidDiffHost = value;
            }
        }

        public uint ConfigSpatialResid8
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigSpatialResid8;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigSpatialResid8 = value;
            }
        }

        public uint ConfigResid8Subtraction
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigResid8Subtraction;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigResid8Subtraction = value;
            }
        }

        public uint ConfigSpatialHost8or9Clipping
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigSpatialHost8or9Clipping;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigSpatialHost8or9Clipping = value;
            }
        }

        public uint ConfigSpatialResidInterleaved
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigSpatialResidInterleaved;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigSpatialResidInterleaved = value;
            }
        }

        public uint ConfigIntraResidUnsigned
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigIntraResidUnsigned;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigIntraResidUnsigned = value;
            }
        }

        public uint ConfigResidDiffAccelerator
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigResidDiffAccelerator;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigResidDiffAccelerator = value;
            }
        }

        public uint ConfigHostInverseScan
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigHostInverseScan;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigHostInverseScan = value;
            }
        }

        public uint ConfigSpecificIDCT
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigSpecificIDCT;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigSpecificIDCT = value;
            }
        }

        public uint Config4GroupedCoefs
        {
            get
            {
                return ((__Internal*)__Instance)->Config4GroupedCoefs;
            }

            set
            {
                ((__Internal*)__Instance)->Config4GroupedCoefs = value;
            }
        }

        public ushort ConfigMinRenderTargetBuffCount
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigMinRenderTargetBuffCount;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigMinRenderTargetBuffCount = value;
            }
        }

        public ushort ConfigDecoderSpecific
        {
            get
            {
                return ((__Internal*)__Instance)->ConfigDecoderSpecific;
            }

            set
            {
                ((__Internal*)__Instance)->ConfigDecoderSpecific = value;
            }
        }
    }

    // DEBUG: struct _D3D11_AES_CTR_IV
    // DEBUG:     {
    // DEBUG:     UINT64 IV;
    // DEBUG:     UINT64 Count;
    // DEBUG:     }
    public unsafe partial class D3D11AES_CTR_IV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ulong IV;
            internal ulong Count;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0_D3D11_AES_CTR_IV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AES_CTR_IV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AES_CTR_IV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AES_CTR_IV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AES_CTR_IV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AES_CTR_IV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AES_CTR_IV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AES_CTR_IV(native.ToPointer(), skipVTables);
        }

        internal static D3D11AES_CTR_IV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AES_CTR_IV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AES_CTR_IV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AES_CTR_IV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AES_CTR_IV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AES_CTR_IV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: _D3D11_AES_CTR_IV
        public D3D11AES_CTR_IV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AES_CTR_IV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: _D3D11_AES_CTR_IV
        public D3D11AES_CTR_IV(global::SpoutDX.D3D11AES_CTR_IV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AES_CTR_IV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AES_CTR_IV.__Internal*) __Instance) = *((global::SpoutDX.D3D11AES_CTR_IV.__Internal*) _0.__Instance);
        }

        ~D3D11AES_CTR_IV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong IV
        {
            get
            {
                return ((__Internal*)__Instance)->IV;
            }

            set
            {
                ((__Internal*)__Instance)->IV = value;
            }
        }

        public ulong Count
        {
            get
            {
                return ((__Internal*)__Instance)->Count;
            }

            set
            {
                ((__Internal*)__Instance)->Count = value;
            }
        }
    }

    // DEBUG: struct D3D11_ENCRYPTED_BLOCK_INFO
    // DEBUG:     {
    // DEBUG:     UINT NumEncryptedBytesAtBeginning;
    // DEBUG:     UINT NumBytesInSkipPattern;
    // DEBUG:     UINT NumBytesInEncryptPattern;
    // DEBUG:     }
    public unsafe partial class D3D11ENCRYPTED_BLOCK_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint NumEncryptedBytesAtBeginning;
            internal uint NumBytesInSkipPattern;
            internal uint NumBytesInEncryptPattern;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_ENCRYPTED_BLOCK_INFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11ENCRYPTED_BLOCK_INFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11ENCRYPTED_BLOCK_INFO(native.ToPointer(), skipVTables);
        }

        internal static D3D11ENCRYPTED_BLOCK_INFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11ENCRYPTED_BLOCK_INFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11ENCRYPTED_BLOCK_INFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11ENCRYPTED_BLOCK_INFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11ENCRYPTED_BLOCK_INFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11ENCRYPTED_BLOCK_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_ENCRYPTED_BLOCK_INFO
        public D3D11ENCRYPTED_BLOCK_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_ENCRYPTED_BLOCK_INFO
        public D3D11ENCRYPTED_BLOCK_INFO(global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO.__Internal*) __Instance) = *((global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO.__Internal*) _0.__Instance);
        }

        ~D3D11ENCRYPTED_BLOCK_INFO()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint NumEncryptedBytesAtBeginning
        {
            get
            {
                return ((__Internal*)__Instance)->NumEncryptedBytesAtBeginning;
            }

            set
            {
                ((__Internal*)__Instance)->NumEncryptedBytesAtBeginning = value;
            }
        }

        public uint NumBytesInSkipPattern
        {
            get
            {
                return ((__Internal*)__Instance)->NumBytesInSkipPattern;
            }

            set
            {
                ((__Internal*)__Instance)->NumBytesInSkipPattern = value;
            }
        }

        public uint NumBytesInEncryptPattern
        {
            get
            {
                return ((__Internal*)__Instance)->NumBytesInEncryptPattern;
            }

            set
            {
                ((__Internal*)__Instance)->NumBytesInEncryptPattern = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_DECODER_BUFFER_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
    // DEBUG:     UINT BufferIndex;
    // DEBUG:     UINT DataOffset;
    // DEBUG:     UINT DataSize;
    // DEBUG:     UINT FirstMBaddress;
    // DEBUG:     UINT NumMBsInBuffer;
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT Stride;
    // DEBUG:     UINT ReservedBits;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_opt_(IVSize)  void *pIV;
    // DEBUG:     UINT IVSize;
    // DEBUG:     BOOL PartialEncryption;
    // DEBUG:     D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_DECODER_BUFFER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_TYPE BufferType;
            internal uint BufferIndex;
            internal uint DataOffset;
            internal uint DataSize;
            internal uint FirstMBaddress;
            internal uint NumMBsInBuffer;
            internal uint Width;
            internal uint Height;
            internal uint Stride;
            internal uint ReservedBits;
            internal __IntPtr pIV;
            internal uint IVSize;
            internal int PartialEncryption;
            internal global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO.__Internal EncryptedBlockInfo;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_DECODER_BUFFER_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_DECODER_BUFFER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_DECODER_BUFFER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_DECODER_BUFFER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_DECODER_BUFFER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_DECODER_BUFFER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_DECODER_BUFFER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_DECODER_BUFFER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_DECODER_BUFFER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_DECODER_BUFFER_DESC
        public D3D11VIDEO_DECODER_BUFFER_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_DECODER_BUFFER_DESC
        public D3D11VIDEO_DECODER_BUFFER_DESC(global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_DESC.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_DECODER_BUFFER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11VIDEO_DECODER_BUFFER_TYPE BufferType
        {
            get
            {
                return ((__Internal*)__Instance)->BufferType;
            }

            set
            {
                ((__Internal*)__Instance)->BufferType = value;
            }
        }

        public uint BufferIndex
        {
            get
            {
                return ((__Internal*)__Instance)->BufferIndex;
            }

            set
            {
                ((__Internal*)__Instance)->BufferIndex = value;
            }
        }

        public uint DataOffset
        {
            get
            {
                return ((__Internal*)__Instance)->DataOffset;
            }

            set
            {
                ((__Internal*)__Instance)->DataOffset = value;
            }
        }

        public uint DataSize
        {
            get
            {
                return ((__Internal*)__Instance)->DataSize;
            }

            set
            {
                ((__Internal*)__Instance)->DataSize = value;
            }
        }

        public uint FirstMBaddress
        {
            get
            {
                return ((__Internal*)__Instance)->FirstMBaddress;
            }

            set
            {
                ((__Internal*)__Instance)->FirstMBaddress = value;
            }
        }

        public uint NumMBsInBuffer
        {
            get
            {
                return ((__Internal*)__Instance)->NumMBsInBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->NumMBsInBuffer = value;
            }
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        public uint Stride
        {
            get
            {
                return ((__Internal*)__Instance)->Stride;
            }

            set
            {
                ((__Internal*)__Instance)->Stride = value;
            }
        }

        public uint ReservedBits
        {
            get
            {
                return ((__Internal*)__Instance)->ReservedBits;
            }

            set
            {
                ((__Internal*)__Instance)->ReservedBits = value;
            }
        }

        public __IntPtr PIV
        {
            get
            {
                return ((__Internal*)__Instance)->pIV;
            }

            set
            {
                ((__Internal*)__Instance)->pIV = (__IntPtr) value;
            }
        }

        public uint IVSize
        {
            get
            {
                return ((__Internal*)__Instance)->IVSize;
            }

            set
            {
                ((__Internal*)__Instance)->IVSize = value;
            }
        }

        public int PartialEncryption
        {
            get
            {
                return ((__Internal*)__Instance)->PartialEncryption;
            }

            set
            {
                ((__Internal*)__Instance)->PartialEncryption = value;
            }
        }

        public global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO EncryptedBlockInfo
        {
            get
            {
                return global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->EncryptedBlockInfo));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->EncryptedBlockInfo = *(global::SpoutDX.D3D11ENCRYPTED_BLOCK_INFO.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_DECODER_EXTENSION
    // DEBUG:     {
    // DEBUG:     UINT Function;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(PrivateInputDataSize)  void *pPrivateInputData;
    // DEBUG:     UINT PrivateInputDataSize;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(PrivateOutputDataSize)  void *pPrivateOutputData;
    // DEBUG:     UINT PrivateOutputDataSize;
    // DEBUG:     UINT ResourceCount;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_opt_(ResourceCount)  ID3D11Resource **ppResourceList;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_DECODER_EXTENSION : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal uint Function;
            internal __IntPtr pPrivateInputData;
            internal uint PrivateInputDataSize;
            internal __IntPtr pPrivateOutputData;
            internal uint PrivateOutputDataSize;
            internal uint ResourceCount;
            internal __IntPtr ppResourceList;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_DECODER_EXTENSION@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_DECODER_EXTENSION __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_DECODER_EXTENSION(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_DECODER_EXTENSION __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_DECODER_EXTENSION)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_DECODER_EXTENSION __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_DECODER_EXTENSION(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_DECODER_EXTENSION(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_DECODER_EXTENSION(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_DECODER_EXTENSION
        public D3D11VIDEO_DECODER_EXTENSION()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_DECODER_EXTENSION
        public D3D11VIDEO_DECODER_EXTENSION(global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_DECODER_EXTENSION.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_DECODER_EXTENSION()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Function
        {
            get
            {
                return ((__Internal*)__Instance)->Function;
            }

            set
            {
                ((__Internal*)__Instance)->Function = value;
            }
        }

        public __IntPtr PPrivateInputData
        {
            get
            {
                return ((__Internal*)__Instance)->pPrivateInputData;
            }

            set
            {
                ((__Internal*)__Instance)->pPrivateInputData = (__IntPtr) value;
            }
        }

        public uint PrivateInputDataSize
        {
            get
            {
                return ((__Internal*)__Instance)->PrivateInputDataSize;
            }

            set
            {
                ((__Internal*)__Instance)->PrivateInputDataSize = value;
            }
        }

        public __IntPtr PPrivateOutputData
        {
            get
            {
                return ((__Internal*)__Instance)->pPrivateOutputData;
            }

            set
            {
                ((__Internal*)__Instance)->pPrivateOutputData = (__IntPtr) value;
            }
        }

        public uint PrivateOutputDataSize
        {
            get
            {
                return ((__Internal*)__Instance)->PrivateOutputDataSize;
            }

            set
            {
                ((__Internal*)__Instance)->PrivateOutputDataSize = value;
            }
        }

        public uint ResourceCount
        {
            get
            {
                return ((__Internal*)__Instance)->ResourceCount;
            }

            set
            {
                ((__Internal*)__Instance)->ResourceCount = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_PROCESSOR_CAPS
    // DEBUG:     {
    // DEBUG:     UINT DeviceCaps;
    // DEBUG:     UINT FeatureCaps;
    // DEBUG:     UINT FilterCaps;
    // DEBUG:     UINT InputFormatCaps;
    // DEBUG:     UINT AutoStreamCaps;
    // DEBUG:     UINT StereoCaps;
    // DEBUG:     UINT RateConversionCapsCount;
    // DEBUG:     UINT MaxInputStreams;
    // DEBUG:     UINT MaxStreamStates;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_PROCESSOR_CAPS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 36)]
        public partial struct __Internal
        {
            internal uint DeviceCaps;
            internal uint FeatureCaps;
            internal uint FilterCaps;
            internal uint InputFormatCaps;
            internal uint AutoStreamCaps;
            internal uint StereoCaps;
            internal uint RateConversionCapsCount;
            internal uint MaxInputStreams;
            internal uint MaxStreamStates;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_PROCESSOR_CAPS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_PROCESSOR_CAPS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_PROCESSOR_CAPS(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_PROCESSOR_CAPS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_PROCESSOR_CAPS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_PROCESSOR_CAPS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_PROCESSOR_CAPS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_PROCESSOR_CAPS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_PROCESSOR_CAPS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_CAPS
        public D3D11VIDEO_PROCESSOR_CAPS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_CAPS
        public D3D11VIDEO_PROCESSOR_CAPS(global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_PROCESSOR_CAPS.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_PROCESSOR_CAPS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DeviceCaps
        {
            get
            {
                return ((__Internal*)__Instance)->DeviceCaps;
            }

            set
            {
                ((__Internal*)__Instance)->DeviceCaps = value;
            }
        }

        public uint FeatureCaps
        {
            get
            {
                return ((__Internal*)__Instance)->FeatureCaps;
            }

            set
            {
                ((__Internal*)__Instance)->FeatureCaps = value;
            }
        }

        public uint FilterCaps
        {
            get
            {
                return ((__Internal*)__Instance)->FilterCaps;
            }

            set
            {
                ((__Internal*)__Instance)->FilterCaps = value;
            }
        }

        public uint InputFormatCaps
        {
            get
            {
                return ((__Internal*)__Instance)->InputFormatCaps;
            }

            set
            {
                ((__Internal*)__Instance)->InputFormatCaps = value;
            }
        }

        public uint AutoStreamCaps
        {
            get
            {
                return ((__Internal*)__Instance)->AutoStreamCaps;
            }

            set
            {
                ((__Internal*)__Instance)->AutoStreamCaps = value;
            }
        }

        public uint StereoCaps
        {
            get
            {
                return ((__Internal*)__Instance)->StereoCaps;
            }

            set
            {
                ((__Internal*)__Instance)->StereoCaps = value;
            }
        }

        public uint RateConversionCapsCount
        {
            get
            {
                return ((__Internal*)__Instance)->RateConversionCapsCount;
            }

            set
            {
                ((__Internal*)__Instance)->RateConversionCapsCount = value;
            }
        }

        public uint MaxInputStreams
        {
            get
            {
                return ((__Internal*)__Instance)->MaxInputStreams;
            }

            set
            {
                ((__Internal*)__Instance)->MaxInputStreams = value;
            }
        }

        public uint MaxStreamStates
        {
            get
            {
                return ((__Internal*)__Instance)->MaxStreamStates;
            }

            set
            {
                ((__Internal*)__Instance)->MaxStreamStates = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
    // DEBUG:     {
    // DEBUG:     UINT PastFrames;
    // DEBUG:     UINT FutureFrames;
    // DEBUG:     UINT ProcessorCaps;
    // DEBUG:     UINT ITelecineCaps;
    // DEBUG:     UINT CustomRateCount;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 20)]
        public partial struct __Internal
        {
            internal uint PastFrames;
            internal uint FutureFrames;
            internal uint ProcessorCaps;
            internal uint ITelecineCaps;
            internal uint CustomRateCount;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
        public D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
        public D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS(global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_PROCESSOR_RATE_CONVERSION_CAPS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint PastFrames
        {
            get
            {
                return ((__Internal*)__Instance)->PastFrames;
            }

            set
            {
                ((__Internal*)__Instance)->PastFrames = value;
            }
        }

        public uint FutureFrames
        {
            get
            {
                return ((__Internal*)__Instance)->FutureFrames;
            }

            set
            {
                ((__Internal*)__Instance)->FutureFrames = value;
            }
        }

        public uint ProcessorCaps
        {
            get
            {
                return ((__Internal*)__Instance)->ProcessorCaps;
            }

            set
            {
                ((__Internal*)__Instance)->ProcessorCaps = value;
            }
        }

        public uint ITelecineCaps
        {
            get
            {
                return ((__Internal*)__Instance)->ITelecineCaps;
            }

            set
            {
                ((__Internal*)__Instance)->ITelecineCaps = value;
            }
        }

        public uint CustomRateCount
        {
            get
            {
                return ((__Internal*)__Instance)->CustomRateCount;
            }

            set
            {
                ((__Internal*)__Instance)->CustomRateCount = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
    // DEBUG:     {
    // DEBUG:     UINT Caps;
    // DEBUG:     UINT KeyExchangeTypeCount;
    // DEBUG:     UINT BlockAlignmentSize;
    // DEBUG:     ULONGLONG ProtectedMemorySize;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_CONTENT_PROTECTION_CAPS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal uint Caps;
            internal uint KeyExchangeTypeCount;
            internal uint BlockAlignmentSize;
            internal ulong ProtectedMemorySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_CONTENT_PROTECTION_CAPS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_CONTENT_PROTECTION_CAPS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_CONTENT_PROTECTION_CAPS(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_CONTENT_PROTECTION_CAPS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_CONTENT_PROTECTION_CAPS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_CONTENT_PROTECTION_CAPS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_CONTENT_PROTECTION_CAPS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_CONTENT_PROTECTION_CAPS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_CONTENT_PROTECTION_CAPS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_CONTENT_PROTECTION_CAPS
        public D3D11VIDEO_CONTENT_PROTECTION_CAPS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_CONTENT_PROTECTION_CAPS
        public D3D11VIDEO_CONTENT_PROTECTION_CAPS(global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_CONTENT_PROTECTION_CAPS.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_CONTENT_PROTECTION_CAPS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Caps
        {
            get
            {
                return ((__Internal*)__Instance)->Caps;
            }

            set
            {
                ((__Internal*)__Instance)->Caps = value;
            }
        }

        public uint KeyExchangeTypeCount
        {
            get
            {
                return ((__Internal*)__Instance)->KeyExchangeTypeCount;
            }

            set
            {
                ((__Internal*)__Instance)->KeyExchangeTypeCount = value;
            }
        }

        public uint BlockAlignmentSize
        {
            get
            {
                return ((__Internal*)__Instance)->BlockAlignmentSize;
            }

            set
            {
                ((__Internal*)__Instance)->BlockAlignmentSize = value;
            }
        }

        public ulong ProtectedMemorySize
        {
            get
            {
                return ((__Internal*)__Instance)->ProtectedMemorySize;
            }

            set
            {
                ((__Internal*)__Instance)->ProtectedMemorySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
    // DEBUG:     {
    // DEBUG:     DXGI_RATIONAL CustomRate;
    // DEBUG:     UINT OutputFrames;
    // DEBUG:     BOOL InputInterlaced;
    // DEBUG:     UINT InputFramesOrFields;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_PROCESSOR_CUSTOM_RATE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 20)]
        public partial struct __Internal
        {
            internal global::DXGI_RATIONAL.__Internal CustomRate;
            internal uint OutputFrames;
            internal int InputInterlaced;
            internal uint InputFramesOrFields;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_PROCESSOR_CUSTOM_RATE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_PROCESSOR_CUSTOM_RATE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_PROCESSOR_CUSTOM_RATE(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_PROCESSOR_CUSTOM_RATE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_PROCESSOR_CUSTOM_RATE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_PROCESSOR_CUSTOM_RATE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_PROCESSOR_CUSTOM_RATE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_PROCESSOR_CUSTOM_RATE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_PROCESSOR_CUSTOM_RATE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
        public D3D11VIDEO_PROCESSOR_CUSTOM_RATE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
        public D3D11VIDEO_PROCESSOR_CUSTOM_RATE(global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_PROCESSOR_CUSTOM_RATE.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_PROCESSOR_CUSTOM_RATE()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint OutputFrames
        {
            get
            {
                return ((__Internal*)__Instance)->OutputFrames;
            }

            set
            {
                ((__Internal*)__Instance)->OutputFrames = value;
            }
        }

        public int InputInterlaced
        {
            get
            {
                return ((__Internal*)__Instance)->InputInterlaced;
            }

            set
            {
                ((__Internal*)__Instance)->InputInterlaced = value;
            }
        }

        public uint InputFramesOrFields
        {
            get
            {
                return ((__Internal*)__Instance)->InputFramesOrFields;
            }

            set
            {
                ((__Internal*)__Instance)->InputFramesOrFields = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
    // DEBUG:     {
    // DEBUG:     int Minimum;
    // DEBUG:     int Maximum;
    // DEBUG:     int Default;
    // DEBUG:     float Multiplier;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_PROCESSOR_FILTER_RANGE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal int Minimum;
            internal int Maximum;
            internal int Default;
            internal float Multiplier;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_PROCESSOR_FILTER_RANGE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_PROCESSOR_FILTER_RANGE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_PROCESSOR_FILTER_RANGE(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_PROCESSOR_FILTER_RANGE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_PROCESSOR_FILTER_RANGE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_PROCESSOR_FILTER_RANGE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_PROCESSOR_FILTER_RANGE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_PROCESSOR_FILTER_RANGE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_PROCESSOR_FILTER_RANGE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_FILTER_RANGE
        public D3D11VIDEO_PROCESSOR_FILTER_RANGE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_FILTER_RANGE
        public D3D11VIDEO_PROCESSOR_FILTER_RANGE(global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_PROCESSOR_FILTER_RANGE.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_PROCESSOR_FILTER_RANGE()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Minimum
        {
            get
            {
                return ((__Internal*)__Instance)->Minimum;
            }

            set
            {
                ((__Internal*)__Instance)->Minimum = value;
            }
        }

        public int Maximum
        {
            get
            {
                return ((__Internal*)__Instance)->Maximum;
            }

            set
            {
                ((__Internal*)__Instance)->Maximum = value;
            }
        }

        public int Default
        {
            get
            {
                return ((__Internal*)__Instance)->Default;
            }

            set
            {
                ((__Internal*)__Instance)->Default = value;
            }
        }

        public float Multiplier
        {
            get
            {
                return ((__Internal*)__Instance)->Multiplier;
            }

            set
            {
                ((__Internal*)__Instance)->Multiplier = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
    // DEBUG:     DXGI_RATIONAL InputFrameRate;
    // DEBUG:     UINT InputWidth;
    // DEBUG:     UINT InputHeight;
    // DEBUG:     DXGI_RATIONAL OutputFrameRate;
    // DEBUG:     UINT OutputWidth;
    // DEBUG:     UINT OutputHeight;
    // DEBUG:     D3D11_VIDEO_USAGE Usage;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_PROCESSOR_CONTENT_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11VIDEO_FRAME_FORMAT InputFrameFormat;
            internal global::DXGI_RATIONAL.__Internal InputFrameRate;
            internal uint InputWidth;
            internal uint InputHeight;
            internal global::DXGI_RATIONAL.__Internal OutputFrameRate;
            internal uint OutputWidth;
            internal uint OutputHeight;
            internal global::SpoutDX.D3D11VIDEO_USAGE Usage;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_PROCESSOR_CONTENT_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_PROCESSOR_CONTENT_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_PROCESSOR_CONTENT_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_PROCESSOR_CONTENT_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_PROCESSOR_CONTENT_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_PROCESSOR_CONTENT_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_PROCESSOR_CONTENT_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_PROCESSOR_CONTENT_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_PROCESSOR_CONTENT_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_CONTENT_DESC
        public D3D11VIDEO_PROCESSOR_CONTENT_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_CONTENT_DESC
        public D3D11VIDEO_PROCESSOR_CONTENT_DESC(global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_PROCESSOR_CONTENT_DESC.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_PROCESSOR_CONTENT_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11VIDEO_FRAME_FORMAT InputFrameFormat
        {
            get
            {
                return ((__Internal*)__Instance)->InputFrameFormat;
            }

            set
            {
                ((__Internal*)__Instance)->InputFrameFormat = value;
            }
        }

        public uint InputWidth
        {
            get
            {
                return ((__Internal*)__Instance)->InputWidth;
            }

            set
            {
                ((__Internal*)__Instance)->InputWidth = value;
            }
        }

        public uint InputHeight
        {
            get
            {
                return ((__Internal*)__Instance)->InputHeight;
            }

            set
            {
                ((__Internal*)__Instance)->InputHeight = value;
            }
        }

        public uint OutputWidth
        {
            get
            {
                return ((__Internal*)__Instance)->OutputWidth;
            }

            set
            {
                ((__Internal*)__Instance)->OutputWidth = value;
            }
        }

        public uint OutputHeight
        {
            get
            {
                return ((__Internal*)__Instance)->OutputHeight;
            }

            set
            {
                ((__Internal*)__Instance)->OutputHeight = value;
            }
        }

        public global::SpoutDX.D3D11VIDEO_USAGE Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_COLOR_RGBA
    // DEBUG:     {
    // DEBUG:     float R;
    // DEBUG:     float G;
    // DEBUG:     float B;
    // DEBUG:     float A;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_COLOR_RGBA : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal float R;
            internal float G;
            internal float B;
            internal float A;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_COLOR_RGBA@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_COLOR_RGBA>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_COLOR_RGBA>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_COLOR_RGBA managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_COLOR_RGBA>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_COLOR_RGBA managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_COLOR_RGBA __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_COLOR_RGBA(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_COLOR_RGBA __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_COLOR_RGBA)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_COLOR_RGBA __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_COLOR_RGBA(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_COLOR_RGBA(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_COLOR_RGBA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_COLOR_RGBA
        public D3D11VIDEO_COLOR_RGBA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_COLOR_RGBA.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_COLOR_RGBA
        public D3D11VIDEO_COLOR_RGBA(global::SpoutDX.D3D11VIDEO_COLOR_RGBA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_COLOR_RGBA.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_COLOR_RGBA.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_COLOR_RGBA.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_COLOR_RGBA()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float R
        {
            get
            {
                return ((__Internal*)__Instance)->R;
            }

            set
            {
                ((__Internal*)__Instance)->R = value;
            }
        }

        public float G
        {
            get
            {
                return ((__Internal*)__Instance)->G;
            }

            set
            {
                ((__Internal*)__Instance)->G = value;
            }
        }

        public float B
        {
            get
            {
                return ((__Internal*)__Instance)->B;
            }

            set
            {
                ((__Internal*)__Instance)->B = value;
            }
        }

        public float A
        {
            get
            {
                return ((__Internal*)__Instance)->A;
            }

            set
            {
                ((__Internal*)__Instance)->A = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_COLOR_YCbCrA
    // DEBUG:     {
    // DEBUG:     float Y;
    // DEBUG:     float Cb;
    // DEBUG:     float Cr;
    // DEBUG:     float A;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_COLOR_YCbCrA : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal float Y;
            internal float Cb;
            internal float Cr;
            internal float A;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_COLOR_YCbCrA@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_COLOR_YCbCrA __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_COLOR_YCbCrA(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_COLOR_YCbCrA __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_COLOR_YCbCrA)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_COLOR_YCbCrA __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_COLOR_YCbCrA(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_COLOR_YCbCrA(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_COLOR_YCbCrA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_COLOR_YCbCrA
        public D3D11VIDEO_COLOR_YCbCrA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_COLOR_YCbCrA
        public D3D11VIDEO_COLOR_YCbCrA(global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_COLOR_YCbCrA()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float Y
        {
            get
            {
                return ((__Internal*)__Instance)->Y;
            }

            set
            {
                ((__Internal*)__Instance)->Y = value;
            }
        }

        public float Cb
        {
            get
            {
                return ((__Internal*)__Instance)->Cb;
            }

            set
            {
                ((__Internal*)__Instance)->Cb = value;
            }
        }

        public float Cr
        {
            get
            {
                return ((__Internal*)__Instance)->Cr;
            }

            set
            {
                ((__Internal*)__Instance)->Cr = value;
            }
        }

        public float A
        {
            get
            {
                return ((__Internal*)__Instance)->A;
            }

            set
            {
                ((__Internal*)__Instance)->A = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_COLOR
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_VIDEO_COLOR_YCbCrA YCbCr;
    // DEBUG:         D3D11_VIDEO_COLOR_RGBA RGBA;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_COLOR : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA.__Internal YCbCr;

            [FieldOffset(0)]
            internal global::SpoutDX.D3D11VIDEO_COLOR_RGBA.__Internal RGBA;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_COLOR@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_COLOR>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_COLOR>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_COLOR managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_COLOR>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_COLOR managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_COLOR __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_COLOR(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_COLOR __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_COLOR)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_COLOR __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_COLOR(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_COLOR(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_COLOR(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_COLOR
        public D3D11VIDEO_COLOR()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_COLOR.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_COLOR
        public D3D11VIDEO_COLOR(global::SpoutDX.D3D11VIDEO_COLOR _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_COLOR.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_COLOR.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_COLOR.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_COLOR()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA YCbCr
        {
            get
            {
                return global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->YCbCr));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->YCbCr = *(global::SpoutDX.D3D11VIDEO_COLOR_YCbCrA.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11VIDEO_COLOR_RGBA RGBA
        {
            get
            {
                return global::SpoutDX.D3D11VIDEO_COLOR_RGBA.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->RGBA));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->RGBA = *(global::SpoutDX.D3D11VIDEO_COLOR_RGBA.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
    // DEBUG:     {
    // DEBUG:     UINT Usage	: 1;
    // DEBUG:     UINT RGB_Range	: 1;
    // DEBUG:     UINT YCbCr_Matrix	: 1;
    // DEBUG:     UINT YCbCr_xvYCC	: 1;
    // DEBUG:     UINT Nominal_Range	: 2;
    // DEBUG:     UINT Reserved	: 26;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_PROCESSOR_COLOR_SPACE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Usage;

            [FieldOffset(0)]
            internal uint RGB_Range;

            [FieldOffset(0)]
            internal uint YCbCr_Matrix;

            [FieldOffset(0)]
            internal uint YCbCr_xvYCC;

            [FieldOffset(0)]
            internal uint Nominal_Range;

            [FieldOffset(0)]
            internal uint Reserved;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_PROCESSOR_COLOR_SPACE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_PROCESSOR_COLOR_SPACE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_PROCESSOR_COLOR_SPACE(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_PROCESSOR_COLOR_SPACE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_PROCESSOR_COLOR_SPACE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_PROCESSOR_COLOR_SPACE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_PROCESSOR_COLOR_SPACE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_PROCESSOR_COLOR_SPACE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_PROCESSOR_COLOR_SPACE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_COLOR_SPACE
        public D3D11VIDEO_PROCESSOR_COLOR_SPACE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_COLOR_SPACE
        public D3D11VIDEO_PROCESSOR_COLOR_SPACE(global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_PROCESSOR_COLOR_SPACE.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_PROCESSOR_COLOR_SPACE()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }

        public uint RGB_Range
        {
            get
            {
                return ((__Internal*)__Instance)->RGB_Range;
            }

            set
            {
                ((__Internal*)__Instance)->RGB_Range = value;
            }
        }

        public uint YCbCrMatrix
        {
            get
            {
                return ((__Internal*)__Instance)->YCbCr_Matrix;
            }

            set
            {
                ((__Internal*)__Instance)->YCbCr_Matrix = value;
            }
        }

        public uint YCbCr_xvYCC
        {
            get
            {
                return ((__Internal*)__Instance)->YCbCr_xvYCC;
            }

            set
            {
                ((__Internal*)__Instance)->YCbCr_xvYCC = value;
            }
        }

        public uint NominalRange
        {
            get
            {
                return ((__Internal*)__Instance)->Nominal_Range;
            }

            set
            {
                ((__Internal*)__Instance)->Nominal_Range = value;
            }
        }

        public uint Reserved
        {
            get
            {
                return ((__Internal*)__Instance)->Reserved;
            }

            set
            {
                ((__Internal*)__Instance)->Reserved = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_PROCESSOR_STREAM
    // DEBUG:     {
    // DEBUG:     BOOL Enable;
    // DEBUG:     UINT OutputIndex;
    // DEBUG:     UINT InputFrameOrField;
    // DEBUG:     UINT PastFrames;
    // DEBUG:     UINT FutureFrames;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(PastFrames)  ID3D11VideoProcessorInputView **ppPastSurfaces;
    // DEBUG:     ID3D11VideoProcessorInputView *pInputSurface;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(FutureFrames)  ID3D11VideoProcessorInputView **ppFutureSurfaces;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_opt_(PastFrames)  ID3D11VideoProcessorInputView **ppPastSurfacesRight;
    // DEBUG:     ID3D11VideoProcessorInputView *pInputSurfaceRight;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(FutureFrames)  ID3D11VideoProcessorInputView **ppFutureSurfacesRight;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_PROCESSOR_STREAM : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal int Enable;
            internal uint OutputIndex;
            internal uint InputFrameOrField;
            internal uint PastFrames;
            internal uint FutureFrames;
            internal __IntPtr ppPastSurfaces;
            internal __IntPtr pInputSurface;
            internal __IntPtr ppFutureSurfaces;
            internal __IntPtr ppPastSurfacesRight;
            internal __IntPtr pInputSurfaceRight;
            internal __IntPtr ppFutureSurfacesRight;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_PROCESSOR_STREAM@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_PROCESSOR_STREAM __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_PROCESSOR_STREAM(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_PROCESSOR_STREAM __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_PROCESSOR_STREAM)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_PROCESSOR_STREAM __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_PROCESSOR_STREAM(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_PROCESSOR_STREAM(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_PROCESSOR_STREAM(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_STREAM
        public D3D11VIDEO_PROCESSOR_STREAM()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_STREAM
        public D3D11VIDEO_PROCESSOR_STREAM(global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_PROCESSOR_STREAM.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_PROCESSOR_STREAM()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Enable
        {
            get
            {
                return ((__Internal*)__Instance)->Enable;
            }

            set
            {
                ((__Internal*)__Instance)->Enable = value;
            }
        }

        public uint OutputIndex
        {
            get
            {
                return ((__Internal*)__Instance)->OutputIndex;
            }

            set
            {
                ((__Internal*)__Instance)->OutputIndex = value;
            }
        }

        public uint InputFrameOrField
        {
            get
            {
                return ((__Internal*)__Instance)->InputFrameOrField;
            }

            set
            {
                ((__Internal*)__Instance)->InputFrameOrField = value;
            }
        }

        public uint PastFrames
        {
            get
            {
                return ((__Internal*)__Instance)->PastFrames;
            }

            set
            {
                ((__Internal*)__Instance)->PastFrames = value;
            }
        }

        public uint FutureFrames
        {
            get
            {
                return ((__Internal*)__Instance)->FutureFrames;
            }

            set
            {
                ((__Internal*)__Instance)->FutureFrames = value;
            }
        }
    }

    // DEBUG: struct D3D11_OMAC
    // DEBUG:     {
    // DEBUG:     BYTE Omac[ 16 ];
    // DEBUG:     }
    public unsafe partial class D3D11OMAC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal fixed byte Omac[16];

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_OMAC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11OMAC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11OMAC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11OMAC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11OMAC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11OMAC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11OMAC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11OMAC(native.ToPointer(), skipVTables);
        }

        internal static D3D11OMAC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11OMAC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11OMAC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11OMAC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11OMAC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11OMAC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_OMAC
        public D3D11OMAC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11OMAC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_OMAC
        public D3D11OMAC(global::SpoutDX.D3D11OMAC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11OMAC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11OMAC.__Internal*) __Instance) = *((global::SpoutDX.D3D11OMAC.__Internal*) _0.__Instance);
        }

        ~D3D11OMAC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Omac
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->Omac, 16);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 16; i++)
                        ((__Internal*)__Instance)->Omac[i] = value[i];
                }
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_INPUT
    // DEBUG:     {
    // DEBUG:     GUID QueryType;
    // DEBUG:     HANDLE hChannel;
    // DEBUG:     UINT SequenceNumber;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal global::GUID.__Internal QueryType;
            internal __IntPtr hChannel;
            internal uint SequenceNumber;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_INPUT
        public D3D11AUTHENTICATED_QUERY_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_INPUT
        public D3D11AUTHENTICATED_QUERY_INPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public __IntPtr HChannel
        {
            get
            {
                return ((__Internal*)__Instance)->hChannel;
            }

            set
            {
                ((__Internal*)__Instance)->hChannel = (__IntPtr) value;
            }
        }

        public uint SequenceNumber
        {
            get
            {
                return ((__Internal*)__Instance)->SequenceNumber;
            }

            set
            {
                ((__Internal*)__Instance)->SequenceNumber = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_OMAC omac;
    // DEBUG:     GUID QueryType;
    // DEBUG:     HANDLE hChannel;
    // DEBUG:     UINT SequenceNumber;
    // DEBUG:     HRESULT ReturnCode;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11OMAC.__Internal omac;
            internal global::GUID.__Internal QueryType;
            internal __IntPtr hChannel;
            internal uint SequenceNumber;
            internal int ReturnCode;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11OMAC Omac
        {
            get
            {
                return global::SpoutDX.D3D11OMAC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->omac));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->omac = *(global::SpoutDX.D3D11OMAC.__Internal*) value.__Instance;
            }
        }

        public __IntPtr HChannel
        {
            get
            {
                return ((__Internal*)__Instance)->hChannel;
            }

            set
            {
                ((__Internal*)__Instance)->hChannel = (__IntPtr) value;
            }
        }

        public uint SequenceNumber
        {
            get
            {
                return ((__Internal*)__Instance)->SequenceNumber;
            }

            set
            {
                ((__Internal*)__Instance)->SequenceNumber = value;
            }
        }

        public int ReturnCode
        {
            get
            {
                return ((__Internal*)__Instance)->ReturnCode;
            }

            set
            {
                ((__Internal*)__Instance)->ReturnCode = value;
            }
        }
    }

    // DEBUG: union D3D11_AUTHENTICATED_PROTECTION_FLAGS
    // DEBUG:     {
    // DEBUG:     struct __MIDL___MIDL_itf_d3d11_0000_0034_0001
    // DEBUG:         {
    // DEBUG:         UINT ProtectionEnabled	: 1;
    // DEBUG:         UINT OverlayOrFullscreenRequired	: 1;
    // DEBUG:         UINT Reserved	: 30;
    // DEBUG:         } 	Flags;
    // DEBUG:     UINT Value;
    // DEBUG:     }
    public unsafe partial struct D3D11AUTHENTICATED_PROTECTION_FLAGS
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001.__Internal Flags;

            [FieldOffset(0)]
            internal uint Value;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_PROTECTION_FLAGS@@QEAA@AEBT0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        // DEBUG: struct __MIDL___MIDL_itf_d3d11_0000_0034_0001
        // DEBUG:         {
        // DEBUG:         UINT ProtectionEnabled	: 1;
        // DEBUG:         UINT OverlayOrFullscreenRequired	: 1;
        // DEBUG:         UINT Reserved	: 30;
        // DEBUG:         }
        public unsafe partial class MIDL_MIDL_itfD3d11_0000_0034_0001 : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal uint ProtectionEnabled;

                [FieldOffset(0)]
                internal uint OverlayOrFullscreenRequired;

                [FieldOffset(0)]
                internal uint Reserved;

                [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0__MIDL___MIDL_itf_d3d11_0000_0034_0001@D3D11_AUTHENTICATED_PROTECTION_FLAGS@@QEAA@AEBU01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001>> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001>>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001 managed)
            {
                NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001>(managed);
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001 managed)
            {
    
                managed = default;
                return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
            }

            protected bool __ownsNativeInstance;

            internal static MIDL_MIDL_itfD3d11_0000_0034_0001 __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new MIDL_MIDL_itfD3d11_0000_0034_0001(native.ToPointer(), skipVTables);
            }

            internal static MIDL_MIDL_itfD3d11_0000_0034_0001 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (MIDL_MIDL_itfD3d11_0000_0034_0001)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static MIDL_MIDL_itfD3d11_0000_0034_0001 __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new MIDL_MIDL_itfD3d11_0000_0034_0001(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private MIDL_MIDL_itfD3d11_0000_0034_0001(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected MIDL_MIDL_itfD3d11_0000_0034_0001(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            // DEBUG: __MIDL___MIDL_itf_d3d11_0000_0034_0001
            public MIDL_MIDL_itfD3d11_0000_0034_0001()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            // DEBUG: __MIDL___MIDL_itf_d3d11_0000_0034_0001
            public MIDL_MIDL_itfD3d11_0000_0034_0001(global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001 _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001.__Internal*) _0.__Instance);
            }

            ~MIDL_MIDL_itfD3d11_0000_0034_0001()
            {
                Dispose(false, callNativeDtor : __ownsNativeInstance );
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
                GC.SuppressFinalize(this);
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint ProtectionEnabled
            {
                get
                {
                    return ((__Internal*)__Instance)->ProtectionEnabled;
                }

                set
                {
                    ((__Internal*)__Instance)->ProtectionEnabled = value;
                }
            }

            public uint OverlayOrFullscreenRequired
            {
                get
                {
                    return ((__Internal*)__Instance)->OverlayOrFullscreenRequired;
                }

                set
                {
                    ((__Internal*)__Instance)->OverlayOrFullscreenRequired = value;
                }
            }

            public uint Reserved
            {
                get
                {
                    return ((__Internal*)__Instance)->Reserved;
                }

                set
                {
                    ((__Internal*)__Instance)->Reserved = value;
                }
            }
        }

        private D3D11AUTHENTICATED_PROTECTION_FLAGS.__Internal __instance;
        internal ref D3D11AUTHENTICATED_PROTECTION_FLAGS.__Internal __Instance => ref __instance;

        internal static D3D11AUTHENTICATED_PROTECTION_FLAGS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_PROTECTION_FLAGS(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_PROTECTION_FLAGS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_PROTECTION_FLAGS(native, skipVTables);
        }

        private D3D11AUTHENTICATED_PROTECTION_FLAGS(__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private D3D11AUTHENTICATED_PROTECTION_FLAGS(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.__Internal*) native;
        }

        // DEBUG: D3D11_AUTHENTICATED_PROTECTION_FLAGS
        public D3D11AUTHENTICATED_PROTECTION_FLAGS(global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new __IntPtr(__instancePtr), __arg0);
            }
        }

        public global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001 Flags
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001.__CreateInstance(__instance.Flags);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.Flags = *(global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.MIDL_MIDL_itfD3d11_0000_0034_0001.__Internal*) value.__Instance;
            }
        }

        public uint Value
        {
            get
            {
                return __instance.Value;
            }

            set
            {
                __instance.Value = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.__Internal ProtectionFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
        public D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
        public D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_PROTECTION_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.__CreateInstance(((__Internal*)__Instance)->ProtectionFlags);
            }

            set
            {
                ((__Internal*)__Instance)->ProtectionFlags = value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal global::SpoutDX.D3D11AUTHENTICATED_CHANNEL_TYPE ChannelType;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
        public D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
        public D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11AUTHENTICATED_CHANNEL_TYPE ChannelType
        {
            get
            {
                return ((__Internal*)__Instance)->ChannelType;
            }

            set
            {
                ((__Internal*)__Instance)->ChannelType = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal __IntPtr DeviceHandle;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
        public D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
        public D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public __IntPtr DeviceHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DeviceHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DeviceHandle = (__IntPtr) value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     HANDLE DecoderHandle;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal Input;
            internal __IntPtr DecoderHandle;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
        public D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
        public D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT Input
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Input));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Input = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal*) value.__Instance;
            }
        }

        public __IntPtr DecoderHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DecoderHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DecoderHandle = (__IntPtr) value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     HANDLE DecoderHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal __IntPtr DecoderHandle;
            internal __IntPtr CryptoSessionHandle;
            internal __IntPtr DeviceHandle;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
        public D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
        public D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public __IntPtr DecoderHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DecoderHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DecoderHandle = (__IntPtr) value;
            }
        }

        public __IntPtr CryptoSessionHandle
        {
            get
            {
                return ((__Internal*)__Instance)->CryptoSessionHandle;
            }

            set
            {
                ((__Internal*)__Instance)->CryptoSessionHandle = (__IntPtr) value;
            }
        }

        public __IntPtr DeviceHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DeviceHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DeviceHandle = (__IntPtr) value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT RestrictedSharedResourceProcessCount;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal uint RestrictedSharedResourceProcessCount;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
        public D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
        public D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public uint RestrictedSharedResourceProcessCount
        {
            get
            {
                return ((__Internal*)__Instance)->RestrictedSharedResourceProcessCount;
            }

            set
            {
                ((__Internal*)__Instance)->RestrictedSharedResourceProcessCount = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     UINT ProcessIndex;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal Input;
            internal uint ProcessIndex;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
        public D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
        public D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT Input
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Input));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Input = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal*) value.__Instance;
            }
        }

        public uint ProcessIndex
        {
            get
            {
                return ((__Internal*)__Instance)->ProcessIndex;
            }

            set
            {
                ((__Internal*)__Instance)->ProcessIndex = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT ProcessIndex;
    // DEBUG:     D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
    // DEBUG:     HANDLE ProcessHandle;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 64)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal uint ProcessIndex;
            internal global::SpoutDX.D3D11AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
            internal __IntPtr ProcessHandle;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
        public D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
        public D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public uint ProcessIndex
        {
            get
            {
                return ((__Internal*)__Instance)->ProcessIndex;
            }

            set
            {
                ((__Internal*)__Instance)->ProcessIndex = value;
            }
        }

        public global::SpoutDX.D3D11AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier
        {
            get
            {
                return ((__Internal*)__Instance)->ProcessIdentifier;
            }

            set
            {
                ((__Internal*)__Instance)->ProcessIdentifier = value;
            }
        }

        public __IntPtr ProcessHandle
        {
            get
            {
                return ((__Internal*)__Instance)->ProcessHandle;
            }

            set
            {
                ((__Internal*)__Instance)->ProcessHandle = (__IntPtr) value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT UnrestrictedProtectedSharedResourceCount;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal uint UnrestrictedProtectedSharedResourceCount;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
        public D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
        public D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public uint UnrestrictedProtectedSharedResourceCount
        {
            get
            {
                return ((__Internal*)__Instance)->UnrestrictedProtectedSharedResourceCount;
            }

            set
            {
                ((__Internal*)__Instance)->UnrestrictedProtectedSharedResourceCount = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal Input;
            internal __IntPtr DeviceHandle;
            internal __IntPtr CryptoSessionHandle;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT Input
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Input));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Input = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal*) value.__Instance;
            }
        }

        public __IntPtr DeviceHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DeviceHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DeviceHandle = (__IntPtr) value;
            }
        }

        public __IntPtr CryptoSessionHandle
        {
            get
            {
                return ((__Internal*)__Instance)->CryptoSessionHandle;
            }

            set
            {
                ((__Internal*)__Instance)->CryptoSessionHandle = (__IntPtr) value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     UINT OutputIDCount;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal __IntPtr DeviceHandle;
            internal __IntPtr CryptoSessionHandle;
            internal uint OutputIDCount;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public __IntPtr DeviceHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DeviceHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DeviceHandle = (__IntPtr) value;
            }
        }

        public __IntPtr CryptoSessionHandle
        {
            get
            {
                return ((__Internal*)__Instance)->CryptoSessionHandle;
            }

            set
            {
                ((__Internal*)__Instance)->CryptoSessionHandle = (__IntPtr) value;
            }
        }

        public uint OutputIDCount
        {
            get
            {
                return ((__Internal*)__Instance)->OutputIDCount;
            }

            set
            {
                ((__Internal*)__Instance)->OutputIDCount = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     UINT OutputIDIndex;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal Input;
            internal __IntPtr DeviceHandle;
            internal __IntPtr CryptoSessionHandle;
            internal uint OutputIDIndex;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_OUTPUT_ID_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT Input
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Input));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Input = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal*) value.__Instance;
            }
        }

        public __IntPtr DeviceHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DeviceHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DeviceHandle = (__IntPtr) value;
            }
        }

        public __IntPtr CryptoSessionHandle
        {
            get
            {
                return ((__Internal*)__Instance)->CryptoSessionHandle;
            }

            set
            {
                ((__Internal*)__Instance)->CryptoSessionHandle = (__IntPtr) value;
            }
        }

        public uint OutputIDIndex
        {
            get
            {
                return ((__Internal*)__Instance)->OutputIDIndex;
            }

            set
            {
                ((__Internal*)__Instance)->OutputIDIndex = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     UINT OutputIDIndex;
    // DEBUG:     UINT64 OutputID;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 80)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal __IntPtr DeviceHandle;
            internal __IntPtr CryptoSessionHandle;
            internal uint OutputIDIndex;
            internal ulong OutputID;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
        public D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public __IntPtr DeviceHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DeviceHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DeviceHandle = (__IntPtr) value;
            }
        }

        public __IntPtr CryptoSessionHandle
        {
            get
            {
                return ((__Internal*)__Instance)->CryptoSessionHandle;
            }

            set
            {
                ((__Internal*)__Instance)->CryptoSessionHandle = (__IntPtr) value;
            }
        }

        public uint OutputIDIndex
        {
            get
            {
                return ((__Internal*)__Instance)->OutputIDIndex;
            }

            set
            {
                ((__Internal*)__Instance)->OutputIDIndex = value;
            }
        }

        public ulong OutputID
        {
            get
            {
                return ((__Internal*)__Instance)->OutputID;
            }

            set
            {
                ((__Internal*)__Instance)->OutputID = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     D3D11_BUS_TYPE BusType;
    // DEBUG:     BOOL AccessibleInContiguousBlocks;
    // DEBUG:     BOOL AccessibleInNonContiguousBlocks;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 64)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal global::SpoutDX.D3D11BUS_TYPE BusType;
            internal int AccessibleInContiguousBlocks;
            internal int AccessibleInNonContiguousBlocks;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT
        public D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT
        public D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11BUS_TYPE BusType
        {
            get
            {
                return ((__Internal*)__Instance)->BusType;
            }

            set
            {
                ((__Internal*)__Instance)->BusType = value;
            }
        }

        public int AccessibleInContiguousBlocks
        {
            get
            {
                return ((__Internal*)__Instance)->AccessibleInContiguousBlocks;
            }

            set
            {
                ((__Internal*)__Instance)->AccessibleInContiguousBlocks = value;
            }
        }

        public int AccessibleInNonContiguousBlocks
        {
            get
            {
                return ((__Internal*)__Instance)->AccessibleInNonContiguousBlocks;
            }

            set
            {
                ((__Internal*)__Instance)->AccessibleInNonContiguousBlocks = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT EncryptionGuidCount;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal uint EncryptionGuidCount;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
        public D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
        public D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public uint EncryptionGuidCount
        {
            get
            {
                return ((__Internal*)__Instance)->EncryptionGuidCount;
            }

            set
            {
                ((__Internal*)__Instance)->EncryptionGuidCount = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_INPUT Input;
    // DEBUG:     UINT EncryptionGuidIndex;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal Input;
            internal uint EncryptionGuidIndex;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
        public D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
        public D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT Input
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Input));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Input = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_INPUT.__Internal*) value.__Instance;
            }
        }

        public uint EncryptionGuidIndex
        {
            get
            {
                return ((__Internal*)__Instance)->EncryptionGuidIndex;
            }

            set
            {
                ((__Internal*)__Instance)->EncryptionGuidIndex = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     UINT EncryptionGuidIndex;
    // DEBUG:     GUID EncryptionGuid;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal uint EncryptionGuidIndex;
            internal global::GUID.__Internal EncryptionGuid;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
        public D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
        public D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }

        public uint EncryptionGuidIndex
        {
            get
            {
                return ((__Internal*)__Instance)->EncryptionGuidIndex;
            }

            set
            {
                ((__Internal*)__Instance)->EncryptionGuidIndex = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    // DEBUG:     GUID EncryptionGuid;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 64)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal Output;
            internal global::GUID.__Internal EncryptionGuid;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
        public D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
        public D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT Output
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Output));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Output = *(global::SpoutDX.D3D11AUTHENTICATED_QUERY_OUTPUT.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_OMAC omac;
    // DEBUG:     GUID ConfigureType;
    // DEBUG:     HANDLE hChannel;
    // DEBUG:     UINT SequenceNumber;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_CONFIGURE_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11OMAC.__Internal omac;
            internal global::GUID.__Internal ConfigureType;
            internal __IntPtr hChannel;
            internal uint SequenceNumber;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_CONFIGURE_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_CONFIGURE_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_CONFIGURE_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_CONFIGURE_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_CONFIGURE_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_CONFIGURE_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_CONFIGURE_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_INPUT(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_CONFIGURE_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11OMAC Omac
        {
            get
            {
                return global::SpoutDX.D3D11OMAC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->omac));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->omac = *(global::SpoutDX.D3D11OMAC.__Internal*) value.__Instance;
            }
        }

        public __IntPtr HChannel
        {
            get
            {
                return ((__Internal*)__Instance)->hChannel;
            }

            set
            {
                ((__Internal*)__Instance)->hChannel = (__IntPtr) value;
            }
        }

        public uint SequenceNumber
        {
            get
            {
                return ((__Internal*)__Instance)->SequenceNumber;
            }

            set
            {
                ((__Internal*)__Instance)->SequenceNumber = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
    // DEBUG:     {
    // DEBUG:     D3D11_OMAC omac;
    // DEBUG:     GUID ConfigureType;
    // DEBUG:     HANDLE hChannel;
    // DEBUG:     UINT SequenceNumber;
    // DEBUG:     HRESULT ReturnCode;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_CONFIGURE_OUTPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11OMAC.__Internal omac;
            internal global::GUID.__Internal ConfigureType;
            internal __IntPtr hChannel;
            internal uint SequenceNumber;
            internal int ReturnCode;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_CONFIGURE_OUTPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_CONFIGURE_OUTPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_CONFIGURE_OUTPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_OUTPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_CONFIGURE_OUTPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_OUTPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_CONFIGURE_OUTPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_CONFIGURE_OUTPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_CONFIGURE_OUTPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
        public D3D11AUTHENTICATED_CONFIGURE_OUTPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
        public D3D11AUTHENTICATED_CONFIGURE_OUTPUT(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_OUTPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_CONFIGURE_OUTPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11OMAC Omac
        {
            get
            {
                return global::SpoutDX.D3D11OMAC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->omac));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->omac = *(global::SpoutDX.D3D11OMAC.__Internal*) value.__Instance;
            }
        }

        public __IntPtr HChannel
        {
            get
            {
                return ((__Internal*)__Instance)->hChannel;
            }

            set
            {
                ((__Internal*)__Instance)->hChannel = (__IntPtr) value;
            }
        }

        public uint SequenceNumber
        {
            get
            {
                return ((__Internal*)__Instance)->SequenceNumber;
            }

            set
            {
                ((__Internal*)__Instance)->SequenceNumber = value;
            }
        }

        public int ReturnCode
        {
            get
            {
                return ((__Internal*)__Instance)->ReturnCode;
            }

            set
            {
                ((__Internal*)__Instance)->ReturnCode = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     UINT StartSequenceQuery;
    // DEBUG:     UINT StartSequenceConfigure;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal Parameters;
            internal uint StartSequenceQuery;
            internal uint StartSequenceConfigure;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT Parameters
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Parameters));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Parameters = *(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal*) value.__Instance;
            }
        }

        public uint StartSequenceQuery
        {
            get
            {
                return ((__Internal*)__Instance)->StartSequenceQuery;
            }

            set
            {
                ((__Internal*)__Instance)->StartSequenceQuery = value;
            }
        }

        public uint StartSequenceConfigure
        {
            get
            {
                return ((__Internal*)__Instance)->StartSequenceConfigure;
            }

            set
            {
                ((__Internal*)__Instance)->StartSequenceConfigure = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal Parameters;
            internal global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.__Internal Protections;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_CONFIGURE_PROTECTION_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT Parameters
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Parameters));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Parameters = *(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS Protections
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_PROTECTION_FLAGS.__CreateInstance(((__Internal*)__Instance)->Protections);
            }

            set
            {
                ((__Internal*)__Instance)->Protections = value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     HANDLE DecoderHandle;
    // DEBUG:     HANDLE CryptoSessionHandle;
    // DEBUG:     HANDLE DeviceHandle;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal Parameters;
            internal __IntPtr DecoderHandle;
            internal __IntPtr CryptoSessionHandle;
            internal __IntPtr DeviceHandle;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT Parameters
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Parameters));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Parameters = *(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal*) value.__Instance;
            }
        }

        public __IntPtr DecoderHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DecoderHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DecoderHandle = (__IntPtr) value;
            }
        }

        public __IntPtr CryptoSessionHandle
        {
            get
            {
                return ((__Internal*)__Instance)->CryptoSessionHandle;
            }

            set
            {
                ((__Internal*)__Instance)->CryptoSessionHandle = (__IntPtr) value;
            }
        }

        public __IntPtr DeviceHandle
        {
            get
            {
                return ((__Internal*)__Instance)->DeviceHandle;
            }

            set
            {
                ((__Internal*)__Instance)->DeviceHandle = (__IntPtr) value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
    // DEBUG:     HANDLE ProcessHandle;
    // DEBUG:     BOOL AllowAccess;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal Parameters;
            internal global::SpoutDX.D3D11AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
            internal __IntPtr ProcessHandle;
            internal int AllowAccess;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT Parameters
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Parameters));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Parameters = *(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType
        {
            get
            {
                return ((__Internal*)__Instance)->ProcessType;
            }

            set
            {
                ((__Internal*)__Instance)->ProcessType = value;
            }
        }

        public __IntPtr ProcessHandle
        {
            get
            {
                return ((__Internal*)__Instance)->ProcessHandle;
            }

            set
            {
                ((__Internal*)__Instance)->ProcessHandle = (__IntPtr) value;
            }
        }

        public int AllowAccess
        {
            get
            {
                return ((__Internal*)__Instance)->AllowAccess;
            }

            set
            {
                ((__Internal*)__Instance)->AllowAccess = value;
            }
        }
    }

    // DEBUG: struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
    // DEBUG:     {
    // DEBUG:     D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    // DEBUG:     GUID EncryptionGuid;
    // DEBUG:     }
    public unsafe partial class D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 64)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal Parameters;
            internal global::GUID.__Internal EncryptionGuid;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT(native.ToPointer(), skipVTables);
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
        public D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT.__Internal*) __Instance) = *((global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT.__Internal*) _0.__Instance);
        }

        ~D3D11AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT Parameters
        {
            get
            {
                return global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Parameters));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Parameters = *(global::SpoutDX.D3D11AUTHENTICATED_CONFIGURE_INPUT.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_VDOV
    // DEBUG:     {
    // DEBUG:     UINT ArraySlice;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_VDOV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint ArraySlice;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_TEX2D_VDOV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_VDOV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_VDOV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_VDOV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_VDOV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_VDOV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_VDOV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_VDOV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_VDOV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_VDOV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_VDOV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_VDOV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_VDOV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_VDOV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_TEX2D_VDOV
        public D3D11TEX2D_VDOV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11TEX2D_VDOV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_TEX2D_VDOV
        public D3D11TEX2D_VDOV(global::SpoutDX.D3D11TEX2D_VDOV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11TEX2D_VDOV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11TEX2D_VDOV.__Internal*) __Instance) = *((global::SpoutDX.D3D11TEX2D_VDOV.__Internal*) _0.__Instance);
        }

        ~D3D11TEX2D_VDOV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySlice = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     GUID DecodeProfile;
    // DEBUG:     D3D11_VDOV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_TEX2D_VDOV Texture2D;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::GUID.__Internal DecodeProfile;

            [FieldOffset(16)]
            internal global::SpoutDX.D3D11VDOV_DIMENSION ViewDimension;

            [FieldOffset(20)]
            internal global::SpoutDX.D3D11TEX2D_VDOV.__Internal Texture2D;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
        public D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
        public D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC(global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_DECODER_OUTPUT_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11VDOV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D11TEX2D_VDOV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_VDOV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D11TEX2D_VDOV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_VPIV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT ArraySlice;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_VPIV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint ArraySlice;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_TEX2D_VPIV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_VPIV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_VPIV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_VPIV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_VPIV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_VPIV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_VPIV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_VPIV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_VPIV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_VPIV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_VPIV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_VPIV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_VPIV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_VPIV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_TEX2D_VPIV
        public D3D11TEX2D_VPIV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11TEX2D_VPIV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_TEX2D_VPIV
        public D3D11TEX2D_VPIV(global::SpoutDX.D3D11TEX2D_VPIV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11TEX2D_VPIV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11TEX2D_VPIV.__Internal*) __Instance) = *((global::SpoutDX.D3D11TEX2D_VPIV.__Internal*) _0.__Instance);
        }

        ~D3D11TEX2D_VPIV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint ArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySlice = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     UINT FourCC;
    // DEBUG:     D3D11_VPIV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_TEX2D_VPIV Texture2D;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint FourCC;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D11VPIV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D11TEX2D_VPIV.__Internal Texture2D;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
        public D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
        public D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC(global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_PROCESSOR_INPUT_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FourCC
        {
            get
            {
                return ((__Internal*)__Instance)->FourCC;
            }

            set
            {
                ((__Internal*)__Instance)->FourCC = value;
            }
        }

        public global::SpoutDX.D3D11VPIV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D11TEX2D_VPIV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_VPIV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D11TEX2D_VPIV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_VPOV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_VPOV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_TEX2D_VPOV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_VPOV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_VPOV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_VPOV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_VPOV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_VPOV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_VPOV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_VPOV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_VPOV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_VPOV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_VPOV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_VPOV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_VPOV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_VPOV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_TEX2D_VPOV
        public D3D11TEX2D_VPOV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11TEX2D_VPOV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_TEX2D_VPOV
        public D3D11TEX2D_VPOV(global::SpoutDX.D3D11TEX2D_VPOV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11TEX2D_VPOV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11TEX2D_VPOV.__Internal*) __Instance) = *((global::SpoutDX.D3D11TEX2D_VPOV.__Internal*) _0.__Instance);
        }

        ~D3D11TEX2D_VPOV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D11_TEX2D_ARRAY_VPOV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D11TEX2D_ARRAY_VPOV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_TEX2D_ARRAY_VPOV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_VPOV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_VPOV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11TEX2D_ARRAY_VPOV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11TEX2D_ARRAY_VPOV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11TEX2D_ARRAY_VPOV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11TEX2D_ARRAY_VPOV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11TEX2D_ARRAY_VPOV(native.ToPointer(), skipVTables);
        }

        internal static D3D11TEX2D_ARRAY_VPOV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11TEX2D_ARRAY_VPOV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11TEX2D_ARRAY_VPOV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11TEX2D_ARRAY_VPOV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11TEX2D_ARRAY_VPOV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11TEX2D_ARRAY_VPOV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_TEX2D_ARRAY_VPOV
        public D3D11TEX2D_ARRAY_VPOV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11TEX2D_ARRAY_VPOV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_TEX2D_ARRAY_VPOV
        public D3D11TEX2D_ARRAY_VPOV(global::SpoutDX.D3D11TEX2D_ARRAY_VPOV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11TEX2D_ARRAY_VPOV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11TEX2D_ARRAY_VPOV.__Internal*) __Instance) = *((global::SpoutDX.D3D11TEX2D_ARRAY_VPOV.__Internal*) _0.__Instance);
        }

        ~D3D11TEX2D_ARRAY_VPOV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     D3D11_VPOV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D11_TEX2D_VPOV Texture2D;
    // DEBUG:         D3D11_TEX2D_ARRAY_VPOV Texture2DArray;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::SpoutDX.D3D11VPOV_DIMENSION ViewDimension;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D11TEX2D_VPOV.__Internal Texture2D;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D11TEX2D_ARRAY_VPOV.__Internal Texture2DArray;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
        public D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
        public D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC(global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC.__Internal*) _0.__Instance);
        }

        ~D3D11VIDEO_PROCESSOR_OUTPUT_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11VPOV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D11TEX2D_VPOV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_VPOV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D11TEX2D_VPOV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11TEX2D_ARRAY_VPOV Texture2DArray
        {
            get
            {
                return global::SpoutDX.D3D11TEX2D_ARRAY_VPOV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DArray = *(global::SpoutDX.D3D11TEX2D_ARRAY_VPOV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("db6f6ddb-ac77-4e88-8253-819df9bbf140")
    // DEBUG:     ID3D11Device : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateBuffer( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_BUFFER_DESC *pDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  const D3D11_SUBRESOURCE_DATA *pInitialData,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11Buffer **ppBuffer) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateTexture1D( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_TEXTURE1D_DESC *pDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA *pInitialData,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11Texture1D **ppTexture1D) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateTexture2D( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_TEXTURE2D_DESC *pDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA *pInitialData,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11Texture2D **ppTexture2D) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateTexture3D( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_TEXTURE3D_DESC *pDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(_Inexpressible_(pDesc->MipLevels))  const D3D11_SUBRESOURCE_DATA *pInitialData,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11Texture3D **ppTexture3D) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateShaderResourceView( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11ShaderResourceView **ppSRView) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateUnorderedAccessView( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11UnorderedAccessView **ppUAView) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateRenderTargetView( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  const D3D11_RENDER_TARGET_VIEW_DESC *pDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11RenderTargetView **ppRTView) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateDepthStencilView( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  ID3D11Resource *pResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11DepthStencilView **ppDepthStencilView) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateInputLayout( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_(NumElements)  const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT )  UINT NumElements,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_(BytecodeLength)  const void *pShaderBytecodeWithInputSignature,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  SIZE_T BytecodeLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11InputLayout **ppInputLayout) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateVertexShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_(BytecodeLength)  const void *pShaderBytecode,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  SIZE_T BytecodeLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11ClassLinkage *pClassLinkage,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11VertexShader **ppVertexShader) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateGeometryShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_(BytecodeLength)  const void *pShaderBytecode,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  SIZE_T BytecodeLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11ClassLinkage *pClassLinkage,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11GeometryShader **ppGeometryShader) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateGeometryShaderWithStreamOutput( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_(BytecodeLength)  const void *pShaderBytecode,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  SIZE_T BytecodeLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumEntries)  const D3D11_SO_DECLARATION_ENTRY *pSODeclaration,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT )  UINT NumEntries,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_opt_(NumStrides)  const UINT *pBufferStrides,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumStrides,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT RasterizedStream,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11ClassLinkage *pClassLinkage,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11GeometryShader **ppGeometryShader) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreatePixelShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_(BytecodeLength)  const void *pShaderBytecode,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  SIZE_T BytecodeLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11ClassLinkage *pClassLinkage,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11PixelShader **ppPixelShader) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateHullShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_(BytecodeLength)  const void *pShaderBytecode,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  SIZE_T BytecodeLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11ClassLinkage *pClassLinkage,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11HullShader **ppHullShader) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateDomainShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_(BytecodeLength)  const void *pShaderBytecode,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  SIZE_T BytecodeLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11ClassLinkage *pClassLinkage,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11DomainShader **ppDomainShader) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateComputeShader( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_(BytecodeLength)  const void *pShaderBytecode,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  SIZE_T BytecodeLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  ID3D11ClassLinkage *pClassLinkage,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11ComputeShader **ppComputeShader) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateClassLinkage( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_  ID3D11ClassLinkage **ppLinkage) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateBlendState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_BLEND_DESC *pBlendStateDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11BlendState **ppBlendState) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateDepthStencilState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11DepthStencilState **ppDepthStencilState) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateRasterizerState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_RASTERIZER_DESC *pRasterizerDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11RasterizerState **ppRasterizerState) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateSamplerState( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_SAMPLER_DESC *pSamplerDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11SamplerState **ppSamplerState) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateQuery( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_QUERY_DESC *pQueryDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11Query **ppQuery) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreatePredicate( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_QUERY_DESC *pPredicateDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11Predicate **ppPredicate) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateCounter( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_COUNTER_DESC *pCounterDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11Counter **ppCounter) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CreateDeferredContext( 
    // DEBUG:             UINT ContextFlags,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  ID3D11DeviceContext **ppDeferredContext) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OpenSharedResource( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  HANDLE hResource,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  REFIID ReturnedInterface,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _COM_Outptr_opt_  void **ppResource) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CheckFormatSupport( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  DXGI_FORMAT Format,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_  UINT *pFormatSupport) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CheckMultisampleQualityLevels( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  DXGI_FORMAT Format,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT SampleCount,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_  UINT *pNumQualityLevels) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE CheckCounterInfo( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_  D3D11_COUNTER_INFO *pCounterInfo) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CheckCounter( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  const D3D11_COUNTER_DESC *pDesc,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_  D3D11_COUNTER_TYPE *pType,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_  UINT *pActiveCounters,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pNameLength)  LPSTR szName,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_opt_  UINT *pNameLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pUnitsLength)  LPSTR szUnits,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_opt_  UINT *pUnitsLength,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_opt_(*pDescriptionLength)  LPSTR szDescription,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_opt_  UINT *pDescriptionLength) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CheckFeatureSupport( 
    // DEBUG:             D3D11_FEATURE Feature,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_bytes_(FeatureSupportDataSize)  void *pFeatureSupportData,
    // DEBUG:             UINT FeatureSupportDataSize) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetPrivateData( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  REFGUID guid,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Inout_  UINT *pDataSize,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_writes_bytes_opt_(*pDataSize)  void *pData) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SetPrivateData( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  REFGUID guid,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT DataSize,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_reads_bytes_opt_(DataSize)  const void *pData) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SetPrivateDataInterface( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  REFGUID guid,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_opt_  const IUnknown *pData) = 0;
    // DEBUG:         
    // DEBUG:         virtual D3D_FEATURE_LEVEL STDMETHODCALLTYPE GetFeatureLevel( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual UINT STDMETHODCALLTYPE GetCreationFlags( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetDeviceRemovedReason( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual void STDMETHODCALLTYPE GetImmediateContext( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Outptr_  ID3D11DeviceContext **ppImmediateContext) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SetExceptionMode( 
    // DEBUG:             UINT RaiseFlags) = 0;
    // DEBUG:         
    // DEBUG:         virtual UINT STDMETHODCALLTYPE GetExceptionMode( void) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class ID3D11Device : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3D11Device>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3D11Device>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.ID3D11Device managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.ID3D11Device>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.ID3D11Device managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static ID3D11Device __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new ID3D11DeviceInternal(native.ToPointer(), skipVTables);
        }

        internal static ID3D11Device __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ID3D11Device)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ID3D11Device __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (ID3D11Device)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static ID3D11Device __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ID3D11DeviceInternal(native, skipVTables);
        }

        protected ID3D11Device(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        ~ID3D11Device()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CreateTexture2D( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  const D3D11_TEXTURE2D_DESC *pDesc,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA *pInitialData,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _COM_Outptr_opt_  ID3D11Texture2D **ppTexture2D) = 0
        public abstract int CreateTexture2D(global::SpoutDX.D3D11TEXTURE2D_DESC pDesc, global::SpoutDX.D3D11SUBRESOURCE_DATA pInitialData, global::SpoutDX.ID3D11Texture2D ppTexture2D);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CreateDeferredContext( 
        // DEBUG:             UINT ContextFlags,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _COM_Outptr_opt_  ID3D11DeviceContext **ppDeferredContext) = 0
        public abstract int CreateDeferredContext(uint ContextFlags, global::SpoutDX.ID3D11DeviceContext ppDeferredContext);

        // DEBUG: virtual void STDMETHODCALLTYPE CheckCounterInfo( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  D3D11_COUNTER_INFO *pCounterInfo) = 0
        public abstract void CheckCounterInfo(global::SpoutDX.D3D11COUNTER_INFO pCounterInfo);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CheckCounter( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  const D3D11_COUNTER_DESC *pDesc,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  D3D11_COUNTER_TYPE *pType,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  UINT *pActiveCounters,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_opt_(*pNameLength)  LPSTR szName,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Inout_opt_  UINT *pNameLength,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_opt_(*pUnitsLength)  LPSTR szUnits,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Inout_opt_  UINT *pUnitsLength,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_opt_(*pDescriptionLength)  LPSTR szDescription,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Inout_opt_  UINT *pDescriptionLength) = 0
        public abstract int CheckCounter(global::SpoutDX.D3D11COUNTER_DESC pDesc, ref global::SpoutDX.D3D11COUNTER_TYPE pType, ref uint pActiveCounters, sbyte* szName, ref uint pNameLength, sbyte* szUnits, ref uint pUnitsLength, sbyte* szDescription, ref uint pDescriptionLength);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CheckFeatureSupport( 
        // DEBUG:             D3D11_FEATURE Feature,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_bytes_(FeatureSupportDataSize)  void *pFeatureSupportData,
        // DEBUG:             UINT FeatureSupportDataSize) = 0
        public abstract int CheckFeatureSupport(global::SpoutDX.D3D11FEATURE Feature, __IntPtr pFeatureSupportData, uint FeatureSupportDataSize);

        // DEBUG: virtual void STDMETHODCALLTYPE GetImmediateContext( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Outptr_  ID3D11DeviceContext **ppImmediateContext) = 0
        public abstract void GetImmediateContext(global::SpoutDX.ID3D11DeviceContext ppImmediateContext);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE SetExceptionMode( 
        // DEBUG:             UINT RaiseFlags) = 0
        public abstract int SetExceptionMode(uint RaiseFlags);

        public abstract global::SpoutDX.D3D_FEATURE_LEVEL FeatureLevel
        {
            get;
        }

        public abstract uint CreationFlags
        {
            get;
        }

        public abstract int DeviceRemovedReason
        {
            get;
        }

        public abstract uint ExceptionMode
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE CreateTexture2D( /* [annotation] */ _In_ const D3D11_TEXTURE2D_DESC *pDesc, /* [annotation] */ _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize)) const D3D11_SUBRESOURCE_DATA *pInitialData, /* [annotation] */ _COM_Outptr_opt_ ID3D11Texture2D **ppTexture2D) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr___IntPtr___IntPtr _CreateTexture2DDelegateInstance;

        private static int _CreateTexture2DDelegateHook(__IntPtr __instance, __IntPtr pDesc, __IntPtr pInitialData, __IntPtr ppTexture2D)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            var __result0 = global::SpoutDX.D3D11TEXTURE2D_DESC.__GetOrCreateInstance(pDesc, false);
            var __result1 = global::SpoutDX.D3D11SUBRESOURCE_DATA.__GetOrCreateInstance(pInitialData, false);
            __IntPtr __ppTexture2D = ppTexture2D == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppTexture2D);
            var __result2 = global::SpoutDX.ID3D11Texture2D.__GetOrCreateInstance(__ppTexture2D, false);
            var ___ret = __target.CreateTexture2D(__result0, __result1, __result2);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE CreateDeferredContext( UINT ContextFlags, /* [annotation] */ _COM_Outptr_opt_ ID3D11DeviceContext **ppDeferredContext) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint___IntPtr _CreateDeferredContextDelegateInstance;

        private static int _CreateDeferredContextDelegateHook(__IntPtr __instance, uint ContextFlags, __IntPtr ppDeferredContext)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            __IntPtr __ppDeferredContext = ppDeferredContext == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppDeferredContext);
            var __result1 = global::SpoutDX.ID3D11DeviceContext.__GetOrCreateInstance(__ppDeferredContext, false);
            var ___ret = __target.CreateDeferredContext(ContextFlags, __result1);
            return ___ret;
        }

        // void STDMETHODCALLTYPE CheckCounterInfo( /* [annotation] */ _Out_ D3D11_COUNTER_INFO *pCounterInfo) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr___IntPtr _CheckCounterInfoDelegateInstance;

        private static void _CheckCounterInfoDelegateHook(__IntPtr __instance, __IntPtr pCounterInfo)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            var __result0 = global::SpoutDX.D3D11COUNTER_INFO.__GetOrCreateInstance(pCounterInfo, false);
            __target.CheckCounterInfo(__result0);
        }

        // HRESULT STDMETHODCALLTYPE CheckCounter( /* [annotation] */ _In_ const D3D11_COUNTER_DESC *pDesc, /* [annotation] */ _Out_ D3D11_COUNTER_TYPE *pType, /* [annotation] */ _Out_ UINT *pActiveCounters, /* [annotation] */ _Out_writes_opt_(*pNameLength) LPSTR szName, /* [annotation] */ _Inout_opt_ UINT *pNameLength, /* [annotation] */ _Out_writes_opt_(*pUnitsLength) LPSTR szUnits, /* [annotation] */ _Inout_opt_ UINT *pUnitsLength, /* [annotation] */ _Out_writes_opt_(*pDescriptionLength) LPSTR szDescription, /* [annotation] */ _Inout_opt_ UINT *pDescriptionLength) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_SpoutDX_D3D11COUNTER_TYPEPtr_uintPtr_sbytePtr_uintPtr_sbytePtr_uintPtr_sbytePtr_uintPtr _CheckCounterDelegateInstance;

        private static int _CheckCounterDelegateHook(__IntPtr __instance, __IntPtr pDesc, global::SpoutDX.D3D11COUNTER_TYPE* pType, uint* pActiveCounters, sbyte* szName, uint* pNameLength, sbyte* szUnits, uint* pUnitsLength, sbyte* szDescription, uint* pDescriptionLength)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            var __result0 = global::SpoutDX.D3D11COUNTER_DESC.__GetOrCreateInstance(pDesc, false);
            var ___ret = __target.CheckCounter(__result0, ref *pType, ref *pActiveCounters, szName, ref *pNameLength, szUnits, ref *pUnitsLength, szDescription, ref *pDescriptionLength);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE CheckFeatureSupport( D3D11_FEATURE Feature, /* [annotation] */ _Out_writes_bytes_(FeatureSupportDataSize) void *pFeatureSupportData, UINT FeatureSupportDataSize) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_SpoutDX_D3D11FEATURE___IntPtr_uint _CheckFeatureSupportDelegateInstance;

        private static int _CheckFeatureSupportDelegateHook(__IntPtr __instance, global::SpoutDX.D3D11FEATURE Feature, __IntPtr pFeatureSupportData, uint FeatureSupportDataSize)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            var ___ret = __target.CheckFeatureSupport(Feature, pFeatureSupportData, FeatureSupportDataSize);
            return ___ret;
        }

        // D3D_FEATURE_LEVEL STDMETHODCALLTYPE GetFeatureLevel( void) = 0
        private static global::SpoutDX.Delegates.Func_SpoutDX_D3D_FEATURE_LEVEL___IntPtr _GetFeatureLevelDelegateInstance;

        private static global::SpoutDX.D3D_FEATURE_LEVEL _GetFeatureLevelDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            var ___ret = __target.FeatureLevel;
            return ___ret;
        }

        // UINT STDMETHODCALLTYPE GetCreationFlags( void) = 0
        private static global::SpoutDX.Delegates.Func_uint___IntPtr _GetCreationFlagsDelegateInstance;

        private static uint _GetCreationFlagsDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            var ___ret = __target.CreationFlags;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetDeviceRemovedReason( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _GetDeviceRemovedReasonDelegateInstance;

        private static int _GetDeviceRemovedReasonDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            var ___ret = __target.DeviceRemovedReason;
            return ___ret;
        }

        // void STDMETHODCALLTYPE GetImmediateContext( /* [annotation] */ _Outptr_ ID3D11DeviceContext **ppImmediateContext) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr___IntPtr _GetImmediateContextDelegateInstance;

        private static void _GetImmediateContextDelegateHook(__IntPtr __instance, __IntPtr ppImmediateContext)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            __IntPtr __ppImmediateContext = ppImmediateContext == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppImmediateContext);
            var __result0 = global::SpoutDX.ID3D11DeviceContext.__GetOrCreateInstance(__ppImmediateContext, false);
            __target.GetImmediateContext(__result0);
        }

        // HRESULT STDMETHODCALLTYPE SetExceptionMode( UINT RaiseFlags) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _SetExceptionModeDelegateInstance;

        private static int _SetExceptionModeDelegateHook(__IntPtr __instance, uint RaiseFlags)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            var ___ret = __target.SetExceptionMode(RaiseFlags);
            return ___ret;
        }

        // UINT STDMETHODCALLTYPE GetExceptionMode( void) = 0
        private static global::SpoutDX.Delegates.Func_uint___IntPtr _GetExceptionModeDelegateInstance;

        private static uint _GetExceptionModeDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.ID3D11Device.__GetInstance(__instance);
            var ___ret = __target.ExceptionMode;
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[11];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _CreateTexture2DDelegateInstance += _CreateTexture2DDelegateHook;
                _CreateDeferredContextDelegateInstance += _CreateDeferredContextDelegateHook;
                _CheckCounterInfoDelegateInstance += _CheckCounterInfoDelegateHook;
                _CheckCounterDelegateInstance += _CheckCounterDelegateHook;
                _CheckFeatureSupportDelegateInstance += _CheckFeatureSupportDelegateHook;
                _GetFeatureLevelDelegateInstance += _GetFeatureLevelDelegateHook;
                _GetCreationFlagsDelegateInstance += _GetCreationFlagsDelegateHook;
                _GetDeviceRemovedReasonDelegateInstance += _GetDeviceRemovedReasonDelegateHook;
                _GetImmediateContextDelegateInstance += _GetImmediateContextDelegateHook;
                _SetExceptionModeDelegateInstance += _SetExceptionModeDelegateHook;
                _GetExceptionModeDelegateInstance += _GetExceptionModeDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_CreateTexture2DDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateDeferredContextDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CheckCounterInfoDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CheckCounterDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_CheckFeatureSupportDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetFeatureLevelDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetCreationFlagsDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetDeviceRemovedReasonDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_GetImmediateContextDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_SetExceptionModeDelegateInstance);
                Thunks[10] = Marshal.GetFunctionPointerForDelegate(_GetExceptionModeDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 43, 0);
                            ManagedVTables[0][5] = Thunks[0];
                            ManagedVTables[0][27] = Thunks[1];
                            ManagedVTables[0][31] = Thunks[2];
                            ManagedVTables[0][32] = Thunks[3];
                            ManagedVTables[0][33] = Thunks[4];
                            ManagedVTables[0][37] = Thunks[5];
                            ManagedVTables[0][38] = Thunks[6];
                            ManagedVTables[0][39] = Thunks[7];
                            ManagedVTables[0][40] = Thunks[8];
                            ManagedVTables[0][41] = Thunks[9];
                            ManagedVTables[0][42] = Thunks[10];
                            VTables.Methods[0] = new Delegate[43];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    public unsafe partial class ID3D11Texture2DInternal : global::SpoutDX.ID3D11Texture2D, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal ID3D11Texture2DInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal ID3D11Texture2DInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual void STDMETHODCALLTYPE GetDesc( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  D3D11_TEXTURE2D_DESC *pDesc) = 0
        public override void GetDesc(global::SpoutDX.D3D11TEXTURE2D_DESC pDesc)
        {
            var ___GetDescDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr___IntPtr>(0, 10);
            var __arg0 = pDesc is null ? __IntPtr.Zero : pDesc.__Instance;
            ___GetDescDelegate(__Instance, __arg0);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE SetEvictionPriority( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT EvictionPriority) = 0
        public virtual void SetEvictionPriority(uint EvictionPriority)
        {
            var ___SetEvictionPriorityDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uint>(0, 8);
            ___SetEvictionPriorityDelegate(__Instance, EvictionPriority);
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public virtual uint EvictionPriority
        {
            get
            {
                var ___GetEvictionPriorityDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 9);
                var ___ret = ___GetEvictionPriorityDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class ID3D11DeviceContextInternal : global::SpoutDX.ID3D11DeviceContext, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal ID3D11DeviceContextInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal ID3D11DeviceContextInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual void STDMETHODCALLTYPE DrawIndexed( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT IndexCount,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartIndexLocation,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  INT BaseVertexLocation) = 0
        public override void DrawIndexed(uint IndexCount, uint StartIndexLocation, int BaseVertexLocation)
        {
            var ___DrawIndexedDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uint_uint_int>(0, 12);
            ___DrawIndexedDelegate(__Instance, IndexCount, StartIndexLocation, BaseVertexLocation);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE Draw( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT VertexCount,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartVertexLocation) = 0
        public override void Draw(uint VertexCount, uint StartVertexLocation)
        {
            var ___DrawDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uint_uint>(0, 13);
            ___DrawDelegate(__Instance, VertexCount, StartVertexLocation);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE DrawIndexedInstanced( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT IndexCountPerInstance,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT InstanceCount,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartIndexLocation,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  INT BaseVertexLocation,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartInstanceLocation) = 0
        public override void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation)
        {
            var ___DrawIndexedInstancedDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uint_uint_uint_int_uint>(0, 20);
            ___DrawIndexedInstancedDelegate(__Instance, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE DrawInstanced( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT VertexCountPerInstance,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT InstanceCount,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartVertexLocation,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT StartInstanceLocation) = 0
        public override void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation)
        {
            var ___DrawInstancedDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uint_uint_uint_uint>(0, 21);
            ___DrawInstancedDelegate(__Instance, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE IASetPrimitiveTopology( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  D3D11_PRIMITIVE_TOPOLOGY Topology) = 0
        public override void IASetPrimitiveTopology(global::SpoutDX.D3D_PRIMITIVE_TOPOLOGY Topology)
        {
            var ___IASetPrimitiveTopologyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_SpoutDX_D3D_PRIMITIVE_TOPOLOGY>(0, 24);
            ___IASetPrimitiveTopologyDelegate(__Instance, Topology);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE DrawAuto( void) = 0
        public override void DrawAuto()
        {
            var ___DrawAutoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr>(0, 38);
            ___DrawAutoDelegate(__Instance);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE Dispatch( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT ThreadGroupCountX,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT ThreadGroupCountY,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT ThreadGroupCountZ) = 0
        public override void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ)
        {
            var ___DispatchDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uint_uint_uint>(0, 41);
            ___DispatchDelegate(__Instance, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE RSSetViewports( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumViewports,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_reads_opt_(NumViewports)  const D3D11_VIEWPORT *pViewports) = 0
        public override void RSSetViewports(uint NumViewports, global::SpoutDX.D3D11VIEWPORT pViewports)
        {
            var ___RSSetViewportsDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uint___IntPtr>(0, 44);
            var __arg1 = pViewports is null ? __IntPtr.Zero : pViewports.__Instance;
            ___RSSetViewportsDelegate(__Instance, NumViewports, __arg1);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE IAGetPrimitiveTopology( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  D3D11_PRIMITIVE_TOPOLOGY *pTopology) = 0
        public override void IAGetPrimitiveTopology(ref global::SpoutDX.D3D_PRIMITIVE_TOPOLOGY pTopology)
        {
            var ___IAGetPrimitiveTopologyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_SpoutDX_D3D_PRIMITIVE_TOPOLOGYPtr>(0, 83);
            fixed (global::SpoutDX.D3D_PRIMITIVE_TOPOLOGY* __pTopology0 = &pTopology)
            {
                var __arg0 = __pTopology0;
                ___IAGetPrimitiveTopologyDelegate(__Instance, __arg0);
            }
        }

        // DEBUG: virtual void STDMETHODCALLTYPE RSGetViewports( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT *pNumViewports,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_opt_(*pNumViewports)  D3D11_VIEWPORT *pViewports) = 0
        public override void RSGetViewports(ref uint pNumViewports, global::SpoutDX.D3D11VIEWPORT pViewports)
        {
            var ___RSGetViewportsDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uintPtr___IntPtr>(0, 95);
            fixed (uint* __pNumViewports0 = &pNumViewports)
            {
                var __arg0 = __pNumViewports0;
                var __arg1 = pViewports is null ? __IntPtr.Zero : pViewports.__Instance;
                ___RSGetViewportsDelegate(__Instance, __arg0, __arg1);
            }
        }

        // DEBUG: virtual void STDMETHODCALLTYPE ClearState( void) = 0
        public override void ClearState()
        {
            var ___ClearStateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr>(0, 110);
            ___ClearStateDelegate(__Instance);
        }

        // DEBUG: virtual void STDMETHODCALLTYPE Flush( void) = 0
        public override void Flush()
        {
            var ___FlushDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr>(0, 111);
            ___FlushDelegate(__Instance);
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override global::SpoutDX.D3D11DEVICE_CONTEXT_TYPE Type
        {
            get
            {
                var ___GetTypeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_SpoutDX_D3D11DEVICE_CONTEXT_TYPE___IntPtr>(0, 112);
                var ___ret = ___GetTypeDelegate(__Instance);
                return ___ret;
            }
        }

        public override uint ContextFlags
        {
            get
            {
                var ___GetContextFlagsDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 113);
                var ___ret = ___GetContextFlagsDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class ID3D11DeviceInternal : global::SpoutDX.ID3D11Device, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal ID3D11DeviceInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal ID3D11DeviceInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CreateTexture2D( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  const D3D11_TEXTURE2D_DESC *pDesc,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA *pInitialData,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _COM_Outptr_opt_  ID3D11Texture2D **ppTexture2D) = 0
        public override int CreateTexture2D(global::SpoutDX.D3D11TEXTURE2D_DESC pDesc, global::SpoutDX.D3D11SUBRESOURCE_DATA pInitialData, global::SpoutDX.ID3D11Texture2D ppTexture2D)
        {
            var ___CreateTexture2DDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr___IntPtr___IntPtr>(0, 5);
            var __arg0 = pDesc is null ? __IntPtr.Zero : pDesc.__Instance;
            var __arg1 = pInitialData is null ? __IntPtr.Zero : pInitialData.__Instance;
            var ____arg2 = ppTexture2D is null ? __IntPtr.Zero : ppTexture2D.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ___ret = ___CreateTexture2DDelegate(__Instance, __arg0, __arg1, __arg2);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CreateDeferredContext( 
        // DEBUG:             UINT ContextFlags,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _COM_Outptr_opt_  ID3D11DeviceContext **ppDeferredContext) = 0
        public override int CreateDeferredContext(uint ContextFlags, global::SpoutDX.ID3D11DeviceContext ppDeferredContext)
        {
            var ___CreateDeferredContextDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint___IntPtr>(0, 27);
            var ____arg1 = ppDeferredContext is null ? __IntPtr.Zero : ppDeferredContext.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = ___CreateDeferredContextDelegate(__Instance, ContextFlags, __arg1);
            return ___ret;
        }

        // DEBUG: virtual void STDMETHODCALLTYPE CheckCounterInfo( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  D3D11_COUNTER_INFO *pCounterInfo) = 0
        public override void CheckCounterInfo(global::SpoutDX.D3D11COUNTER_INFO pCounterInfo)
        {
            var ___CheckCounterInfoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr___IntPtr>(0, 31);
            var __arg0 = pCounterInfo is null ? __IntPtr.Zero : pCounterInfo.__Instance;
            ___CheckCounterInfoDelegate(__Instance, __arg0);
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CheckCounter( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  const D3D11_COUNTER_DESC *pDesc,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  D3D11_COUNTER_TYPE *pType,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  UINT *pActiveCounters,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_opt_(*pNameLength)  LPSTR szName,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Inout_opt_  UINT *pNameLength,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_opt_(*pUnitsLength)  LPSTR szUnits,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Inout_opt_  UINT *pUnitsLength,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_opt_(*pDescriptionLength)  LPSTR szDescription,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Inout_opt_  UINT *pDescriptionLength) = 0
        public override int CheckCounter(global::SpoutDX.D3D11COUNTER_DESC pDesc, ref global::SpoutDX.D3D11COUNTER_TYPE pType, ref uint pActiveCounters, sbyte* szName, ref uint pNameLength, sbyte* szUnits, ref uint pUnitsLength, sbyte* szDescription, ref uint pDescriptionLength)
        {
            var ___CheckCounterDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_SpoutDX_D3D11COUNTER_TYPEPtr_uintPtr_sbytePtr_uintPtr_sbytePtr_uintPtr_sbytePtr_uintPtr>(0, 32);
            var __arg0 = pDesc is null ? __IntPtr.Zero : pDesc.__Instance;
            fixed (global::SpoutDX.D3D11COUNTER_TYPE* __pType1 = &pType)
            {
                var __arg1 = __pType1;
                fixed (uint* __pActiveCounters2 = &pActiveCounters)
                {
                    var __arg2 = __pActiveCounters2;
                    fixed (uint* __pNameLength4 = &pNameLength)
                    {
                        var __arg4 = __pNameLength4;
                        fixed (uint* __pUnitsLength6 = &pUnitsLength)
                        {
                            var __arg6 = __pUnitsLength6;
                            fixed (uint* __pDescriptionLength8 = &pDescriptionLength)
                            {
                                var __arg8 = __pDescriptionLength8;
                                var ___ret = ___CheckCounterDelegate(__Instance, __arg0, __arg1, __arg2, szName, __arg4, szUnits, __arg6, szDescription, __arg8);
                                return ___ret;
                            }
                        }
                    }
                }
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CheckFeatureSupport( 
        // DEBUG:             D3D11_FEATURE Feature,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_writes_bytes_(FeatureSupportDataSize)  void *pFeatureSupportData,
        // DEBUG:             UINT FeatureSupportDataSize) = 0
        public override int CheckFeatureSupport(global::SpoutDX.D3D11FEATURE Feature, __IntPtr pFeatureSupportData, uint FeatureSupportDataSize)
        {
            var ___CheckFeatureSupportDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_SpoutDX_D3D11FEATURE___IntPtr_uint>(0, 33);
            var ___ret = ___CheckFeatureSupportDelegate(__Instance, Feature, pFeatureSupportData, FeatureSupportDataSize);
            return ___ret;
        }

        // DEBUG: virtual void STDMETHODCALLTYPE GetImmediateContext( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Outptr_  ID3D11DeviceContext **ppImmediateContext) = 0
        public override void GetImmediateContext(global::SpoutDX.ID3D11DeviceContext ppImmediateContext)
        {
            var ___GetImmediateContextDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr___IntPtr>(0, 40);
            var ____arg0 = ppImmediateContext is null ? __IntPtr.Zero : ppImmediateContext.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            ___GetImmediateContextDelegate(__Instance, __arg0);
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE SetExceptionMode( 
        // DEBUG:             UINT RaiseFlags) = 0
        public override int SetExceptionMode(uint RaiseFlags)
        {
            var ___SetExceptionModeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 41);
            var ___ret = ___SetExceptionModeDelegate(__Instance, RaiseFlags);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override global::SpoutDX.D3D_FEATURE_LEVEL FeatureLevel
        {
            get
            {
                var ___GetFeatureLevelDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_SpoutDX_D3D_FEATURE_LEVEL___IntPtr>(0, 37);
                var ___ret = ___GetFeatureLevelDelegate(__Instance);
                return ___ret;
            }
        }

        public override uint CreationFlags
        {
            get
            {
                var ___GetCreationFlagsDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 38);
                var ___ret = ___GetCreationFlagsDelegate(__Instance);
                return ___ret;
            }
        }

        public override int DeviceRemovedReason
        {
            get
            {
                var ___GetDeviceRemovedReasonDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 39);
                var ___ret = ___GetDeviceRemovedReasonDelegate(__Instance);
                return ___ret;
            }
        }

        public override uint ExceptionMode
        {
            get
            {
                var ___GetExceptionModeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 42);
                var ___ret = ___GetExceptionModeDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class d3d11
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?D3D11CalcSubresource@@YAIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint D3D11CalcSubresource(uint MipSlice, uint ArraySlice, uint MipLevels);
        }

        // DEBUG: inline UINT D3D11CalcSubresource( UINT MipSlice, UINT ArraySlice, UINT MipLevels )
        // DEBUG: { return MipSlice + ArraySlice * MipLevels; }
        public static uint D3D11CalcSubresource(uint MipSlice, uint ArraySlice, uint MipLevels)
        {
            var ___ret = __Internal.D3D11CalcSubresource(MipSlice, ArraySlice, MipLevels);
            return ___ret;
        }

        // DEBUG: extern const DECLSPEC_SELECTANY CD3D11_DEFAULT D3D11_DEFAULT
        public static global::SpoutDX.CD3D11DEFAULT D3D11DEFAULT
        {
            get
            {
                var __ptr = (global::SpoutDX.CD3D11DEFAULT.__Internal*)global::SpoutDX.__Symbols.SpoutDX._D3D11_DEFAULT__3UCD3D11_DEFAULT__B;
                return global::SpoutDX.CD3D11DEFAULT.__CreateInstance(new __IntPtr(__ptr));
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0000_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0000V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0000_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0000_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0000_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0000V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0000_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0000_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0001_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0001V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0001_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0001_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0001_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0001V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0001_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0001_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0002_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0002V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0002_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0002_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0002_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0002V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0002_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0002_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0003_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0003V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0003_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0003_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0003_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0003V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0003_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0003_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0004_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0004V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0004_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0004_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0004_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0004V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0004_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0004_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0005_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0005V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0005_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0005_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0005_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0005V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0005_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0005_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0006_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0006V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0006_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0006_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0006_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0006V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0006_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0006_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0007_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0007V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0007_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0007_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0007_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0007V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0007_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0007_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0008_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0008V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0008_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0008_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0008_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0008V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0008_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0008_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0009_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0009V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0009_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0009_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0009_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0009V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0009_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0009_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0010_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0010V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0010_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0010_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0010_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0010V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0010_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0010_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0011_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0011V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0011_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0011_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0011_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0011V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0011_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0011_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0012_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0012V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0012_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0012_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0012_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0012V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0012_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0012_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0013_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0013V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0013_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0013_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0013_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0013V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0013_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0013_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0021_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0021V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0021_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0021_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0021_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0021V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0021_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0021_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0022_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0022V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0022_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0022_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0022_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0022V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0022_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0022_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0023_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0023V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0023_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0023_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0023_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0023V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0023_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0023_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0025_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0025V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0025_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0025_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0025_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0025V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0025_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0025_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0026_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0026V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0026_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0026_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0026_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0026V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0026_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0026_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0029_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0029V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0029_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0029_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0029_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0029V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0029_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0029_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern const DECLSPEC_SELECTANY CD3D11_VIDEO_DEFAULT D3D11_VIDEO_DEFAULT
        public static global::SpoutDX.CD3D11VIDEO_DEFAULT D3D11VIDEO_DEFAULT
        {
            get
            {
                var __ptr = (global::SpoutDX.CD3D11VIDEO_DEFAULT.__Internal*)global::SpoutDX.__Symbols.SpoutDX._D3D11_VIDEO_DEFAULT__3UCD3D11_VIDEO_DEFAULT__B;
                return global::SpoutDX.CD3D11VIDEO_DEFAULT.__CreateInstance(new __IntPtr(__ptr));
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0030_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0030V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0030_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0030_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0030_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0030V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0030_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0030_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0031_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0031V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0031_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0031_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0031_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0031V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0031_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0031_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0032_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0032V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0032_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0032_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0032_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0032V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0032_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0032_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0033_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0033V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0033_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0033_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0033_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0033V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0033_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0033_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0034_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0034V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0034_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0034_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0034_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0034V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0034_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0034_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0035_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0035V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0035_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0035_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0035_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0035V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0035_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0035_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0036_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0036V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0036_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0036_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0036_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0036V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0036_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0036_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0037_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0037V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0037_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0037_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0037_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0037V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0037_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0037_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0040_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0040V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0040_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0040_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0040_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0040V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0040_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0040_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0041_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0041V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0041_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0041_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0041_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11_0000_0041V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0041_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11_0000_0041_v0_0_s_ifspec;
                *__ptr = value;
            }
        }
    }

    // DEBUG: enum tagUASFLAGS
    // DEBUG:     {
    // DEBUG:         UAS_NORMAL	= 0,
    // DEBUG:         UAS_BLOCKED	= 0x1,
    // DEBUG:         UAS_NOPARENTENABLE	= 0x2,
    // DEBUG:         UAS_MASK	= 0x3
    // DEBUG:     }
    public enum TagUASFLAGS
    {
        UAS_NORMAL = 0,
        UAS_BLOCKED = 1,
        UAS_NOPARENTENABLE = 2,
        UAS_MASK = 3
    }

    // DEBUG: enum tagREADYSTATE
    // DEBUG:     {
    // DEBUG:         READYSTATE_UNINITIALIZED	= 0,
    // DEBUG:         READYSTATE_LOADING	= 1,
    // DEBUG:         READYSTATE_LOADED	= 2,
    // DEBUG:         READYSTATE_INTERACTIVE	= 3,
    // DEBUG:         READYSTATE_COMPLETE	= 4
    // DEBUG:     }
    public enum TagREADYSTATE
    {
        READYSTATE_UNINITIALIZED = 0,
        READYSTATE_LOADING = 1,
        READYSTATE_LOADED = 2,
        READYSTATE_INTERACTIVE = 3,
        READYSTATE_COMPLETE = 4
    }

    // DEBUG: enum tagGUIDKIND
    // DEBUG:     {
    // DEBUG:         GUIDKIND_DEFAULT_SOURCE_DISP_IID	= 1
    // DEBUG:     }
    public enum TagGUIDKIND
    {
        GUIDKIND_DEFAULT_SOURCE_DISP_IID = 1
    }

    // DEBUG: enum tagCTRLINFO
    // DEBUG:     {
    // DEBUG:         CTRLINFO_EATS_RETURN	= 1,
    // DEBUG:         CTRLINFO_EATS_ESCAPE	= 2
    // DEBUG:     }
    public enum TagCTRLINFO
    {
        CTRLINFO_EATS_RETURN = 1,
        CTRLINFO_EATS_ESCAPE = 2
    }

    // DEBUG: enum tagXFORMCOORDS
    // DEBUG:     {
    // DEBUG:         XFORMCOORDS_POSITION	= 0x1,
    // DEBUG:         XFORMCOORDS_SIZE	= 0x2,
    // DEBUG:         XFORMCOORDS_HIMETRICTOCONTAINER	= 0x4,
    // DEBUG:         XFORMCOORDS_CONTAINERTOHIMETRIC	= 0x8,
    // DEBUG:         XFORMCOORDS_EVENTCOMPAT	= 0x10
    // DEBUG:     }
    [Flags]
    public enum TagXFORMCOORDS
    {
        XFORMCOORDS_POSITION = 1,
        XFORMCOORDS_SIZE = 2,
        XFORMCOORDS_HIMETRICTOCONTAINER = 4,
        XFORMCOORDS_CONTAINERTOHIMETRIC = 8,
        XFORMCOORDS_EVENTCOMPAT = 16
    }

    // DEBUG: enum tagPROPPAGESTATUS
    // DEBUG:     {
    // DEBUG:         PROPPAGESTATUS_DIRTY	= 0x1,
    // DEBUG:         PROPPAGESTATUS_VALIDATE	= 0x2,
    // DEBUG:         PROPPAGESTATUS_CLEAN	= 0x4
    // DEBUG:     }
    [Flags]
    public enum TagPROPPAGESTATUS
    {
        PROPPAGESTATUS_DIRTY = 1,
        PROPPAGESTATUS_VALIDATE = 2,
        PROPPAGESTATUS_CLEAN = 4
    }

    // DEBUG: enum tagPictureAttributes
    // DEBUG:     {
    // DEBUG:         PICTURE_SCALABLE	= 0x1,
    // DEBUG:         PICTURE_TRANSPARENT	= 0x2
    // DEBUG:     }
    public enum TagPictureAttributes
    {
        PICTURE_SCALABLE = 1,
        PICTURE_TRANSPARENT = 2
    }

    // DEBUG: enum tagACTIVATEFLAGS
    // DEBUG:     {
    // DEBUG:         ACTIVATE_WINDOWLESS	= 1
    // DEBUG:     }
    public enum TagACTIVATEFLAGS
    {
        ACTIVATE_WINDOWLESS = 1
    }

    // DEBUG: enum tagOLEDCFLAGS
    // DEBUG:     {
    // DEBUG:         OLEDC_NODRAW	= 0x1,
    // DEBUG:         OLEDC_PAINTBKGND	= 0x2,
    // DEBUG:         OLEDC_OFFSCREEN	= 0x4
    // DEBUG:     }
    [Flags]
    public enum TagOLEDCFLAGS
    {
        OLEDC_NODRAW = 1,
        OLEDC_PAINTBKGND = 2,
        OLEDC_OFFSCREEN = 4
    }

    // DEBUG: enum tagVIEWSTATUS
    // DEBUG:     {
    // DEBUG:         VIEWSTATUS_OPAQUE	= 1,
    // DEBUG:         VIEWSTATUS_SOLIDBKGND	= 2,
    // DEBUG:         VIEWSTATUS_DVASPECTOPAQUE	= 4,
    // DEBUG:         VIEWSTATUS_DVASPECTTRANSPARENT	= 8,
    // DEBUG:         VIEWSTATUS_SURFACE	= 16,
    // DEBUG:         VIEWSTATUS_3DSURFACE	= 32
    // DEBUG:     }
    [Flags]
    public enum TagVIEWSTATUS
    {
        VIEWSTATUS_OPAQUE = 1,
        VIEWSTATUS_SOLIDBKGND = 2,
        VIEWSTATUS_DVASPECTOPAQUE = 4,
        VIEWSTATUS_DVASPECTTRANSPARENT = 8,
        VIEWSTATUS_SURFACE = 16,
        VIEWSTATUS_3DSURFACE = 32
    }

    // DEBUG: enum tagHITRESULT
    // DEBUG:     {
    // DEBUG:         HITRESULT_OUTSIDE	= 0,
    // DEBUG:         HITRESULT_TRANSPARENT	= 1,
    // DEBUG:         HITRESULT_CLOSE	= 2,
    // DEBUG:         HITRESULT_HIT	= 3
    // DEBUG:     }
    public enum TagHITRESULT
    {
        HITRESULT_OUTSIDE = 0,
        HITRESULT_TRANSPARENT = 1,
        HITRESULT_CLOSE = 2,
        HITRESULT_HIT = 3
    }

    // DEBUG: enum tagDVASPECT2
    // DEBUG:     {
    // DEBUG:         DVASPECT_OPAQUE	= 16,
    // DEBUG:         DVASPECT_TRANSPARENT	= 32
    // DEBUG:     }
    [Flags]
    public enum TagDVASPECT2
    {
        DVASPECT_OPAQUE = 16,
        DVASPECT_TRANSPARENT = 32
    }

    // DEBUG: enum tagExtentMode
    // DEBUG:     {
    // DEBUG:         DVEXTENT_CONTENT	= 0,
    // DEBUG:         DVEXTENT_INTEGRAL	= ( DVEXTENT_CONTENT + 1 ) 
    // DEBUG:     }
    public enum TagExtentMode
    {
        DVEXTENT_CONTENT = 0,
        DVEXTENT_INTEGRAL = 1
    }

    // DEBUG: enum tagAspectInfoFlag
    // DEBUG:     {
    // DEBUG:         DVASPECTINFOFLAG_CANOPTIMIZE	= 1
    // DEBUG:     }
    public enum TagAspectInfoFlag
    {
        DVASPECTINFOFLAG_CANOPTIMIZE = 1
    }

    // DEBUG: enum tagPOINTERINACTIVE
    // DEBUG:     {
    // DEBUG:         POINTERINACTIVE_ACTIVATEONENTRY	= 1,
    // DEBUG:         POINTERINACTIVE_DEACTIVATEONLEAVE	= 2,
    // DEBUG:         POINTERINACTIVE_ACTIVATEONDRAG	= 4
    // DEBUG:     }
    [Flags]
    public enum TagPOINTERINACTIVE
    {
        POINTERINACTIVE_ACTIVATEONENTRY = 1,
        POINTERINACTIVE_DEACTIVATEONLEAVE = 2,
        POINTERINACTIVE_ACTIVATEONDRAG = 4
    }

    // DEBUG: enum tagPROPBAG2_TYPE
    // DEBUG:     {
    // DEBUG:         PROPBAG2_TYPE_UNDEFINED	= 0,
    // DEBUG:         PROPBAG2_TYPE_DATA	= 1,
    // DEBUG:         PROPBAG2_TYPE_URL	= 2,
    // DEBUG:         PROPBAG2_TYPE_OBJECT	= 3,
    // DEBUG:         PROPBAG2_TYPE_STREAM	= 4,
    // DEBUG:         PROPBAG2_TYPE_STORAGE	= 5,
    // DEBUG:         PROPBAG2_TYPE_MONIKER	= 6
    // DEBUG:     }
    public enum TagPROPBAG2TYPE
    {
        PROPBAG2TYPE_UNDEFINED = 0,
        PROPBAG2TYPE_DATA = 1,
        PROPBAG2TYPE_URL = 2,
        PROPBAG2TYPE_OBJECT = 3,
        PROPBAG2TYPE_STREAM = 4,
        PROPBAG2TYPE_STORAGE = 5,
        PROPBAG2TYPE_MONIKER = 6
    }

    // DEBUG: enum tagQACONTAINERFLAGS
    // DEBUG:     {
    // DEBUG:         QACONTAINER_SHOWHATCHING	= 0x1,
    // DEBUG:         QACONTAINER_SHOWGRABHANDLES	= 0x2,
    // DEBUG:         QACONTAINER_USERMODE	= 0x4,
    // DEBUG:         QACONTAINER_DISPLAYASDEFAULT	= 0x8,
    // DEBUG:         QACONTAINER_UIDEAD	= 0x10,
    // DEBUG:         QACONTAINER_AUTOCLIP	= 0x20,
    // DEBUG:         QACONTAINER_MESSAGEREFLECT	= 0x40,
    // DEBUG:         QACONTAINER_SUPPORTSMNEMONICS	= 0x80
    // DEBUG:     }
    [Flags]
    public enum TagQACONTAINERFLAGS
    {
        QACONTAINER_SHOWHATCHING = 1,
        QACONTAINER_SHOWGRABHANDLES = 2,
        QACONTAINER_USERMODE = 4,
        QACONTAINER_DISPLAYASDEFAULT = 8,
        QACONTAINER_UIDEAD = 16,
        QACONTAINER_AUTOCLIP = 32,
        QACONTAINER_MESSAGEREFLECT = 64,
        QACONTAINER_SUPPORTSMNEMONICS = 128
    }

    // DEBUG: typedef struct tagCONNECTDATA *LPCONNECTDATA
    // DEBUG: typedef interface IEnumConnections IEnumConnections
    // DEBUG: typedef interface IConnectionPoint IConnectionPoint
    // DEBUG: typedef IConnectionPoint *LPCONNECTIONPOINT
    // DEBUG: typedef interface IEnumConnectionPoints IEnumConnectionPoints
    // DEBUG: typedef interface IConnectionPointContainer IConnectionPointContainer
    // DEBUG: typedef struct tagLICINFO
    // DEBUG:     {
    // DEBUG:     LONG cbLicInfo;
    // DEBUG:     BOOL fRuntimeKeyAvail;
    // DEBUG:     BOOL fLicVerified;
    // DEBUG:     } 	LICINFO
    // DEBUG: typedef interface IClassFactory2 IClassFactory2
    // DEBUG: typedef interface IProvideMultipleClassInfo IProvideMultipleClassInfo
    // DEBUG: typedef struct tagCONTROLINFO
    // DEBUG:     {
    // DEBUG:     ULONG cb;
    // DEBUG:     HACCEL hAccel;
    // DEBUG:     USHORT cAccel;
    // DEBUG:     DWORD dwFlags;
    // DEBUG:     } 	CONTROLINFO
    // DEBUG: typedef interface IOleControl IOleControl
    // DEBUG: typedef struct tagPOINTF
    // DEBUG:     {
    // DEBUG:     FLOAT x;
    // DEBUG:     FLOAT y;
    // DEBUG:     } 	POINTF
    // DEBUG: typedef interface IOleControlSite IOleControlSite
    // DEBUG: typedef interface IPropertyPageSite IPropertyPageSite
    // DEBUG: typedef struct tagPROPPAGEINFO
    // DEBUG:     {
    // DEBUG:     ULONG cb;
    // DEBUG:     LPOLESTR pszTitle;
    // DEBUG:     SIZE size;
    // DEBUG:     LPOLESTR pszDocString;
    // DEBUG:     LPOLESTR pszHelpFile;
    // DEBUG:     DWORD dwHelpContext;
    // DEBUG:     } 	PROPPAGEINFO
    // DEBUG: typedef interface IPropertyPage IPropertyPage
    // DEBUG: typedef interface IPropertyPage2 IPropertyPage2
    // DEBUG: typedef interface IPropertyNotifySink IPropertyNotifySink
    // DEBUG: typedef struct tagCAUUID
    // DEBUG:     {
    // DEBUG:     ULONG cElems;
    // DEBUG:     /* [size_is] */ GUID *pElems;
    // DEBUG:     } 	CAUUID
    // DEBUG: typedef interface ISpecifyPropertyPages ISpecifyPropertyPages
    // DEBUG: typedef interface IPersistMemory IPersistMemory
    // DEBUG: typedef interface IPersistStreamInit IPersistStreamInit
    // DEBUG: typedef interface IPersistPropertyBag IPersistPropertyBag
    // DEBUG: typedef /* [public][uuid] */  DECLSPEC_UUID("66504313-BE0F-101A-8BBB-00AA00300CAB") UINT OLE_HANDLE
    // DEBUG: typedef /* [hidden][uuid] */  DECLSPEC_UUID("66504308-BE0F-101A-8BBB-00AA00300CAB") LONG OLE_XSIZE_HIMETRIC
    // DEBUG: typedef /* [hidden][uuid] */  DECLSPEC_UUID("66504309-BE0F-101A-8BBB-00AA00300CAB") LONG OLE_YSIZE_HIMETRIC
    // DEBUG: typedef /* [hidden][uuid] */  DECLSPEC_UUID("66504306-BE0F-101A-8BBB-00AA00300CAB") LONG OLE_XPOS_HIMETRIC
    // DEBUG: typedef /* [hidden][uuid] */  DECLSPEC_UUID("66504307-BE0F-101A-8BBB-00AA00300CAB") LONG OLE_YPOS_HIMETRIC
    // DEBUG: typedef interface IPicture IPicture
    // DEBUG: typedef UINT_PTR HHANDLE
    // DEBUG: typedef interface IPicture2 IPicture2
    // DEBUG: typedef interface IOleInPlaceObjectWindowless IOleInPlaceObjectWindowless
    // DEBUG: typedef interface IOleInPlaceSiteEx IOleInPlaceSiteEx
    // DEBUG: typedef interface IOleInPlaceSiteWindowless IOleInPlaceSiteWindowless
    // DEBUG: typedef struct tagExtentInfo
    // DEBUG:     {
    // DEBUG:     ULONG cb;
    // DEBUG:     DWORD dwExtentMode;
    // DEBUG:     SIZEL sizelProposed;
    // DEBUG:     } 	DVEXTENTINFO
    // DEBUG: typedef interface IViewObjectEx IViewObjectEx
    // DEBUG: typedef interface IOleUndoUnit IOleUndoUnit
    // DEBUG: typedef interface IOleParentUndoUnit IOleParentUndoUnit
    // DEBUG: typedef interface IEnumOleUndoUnits IEnumOleUndoUnits
    // DEBUG: typedef interface IOleUndoManager IOleUndoManager
    // DEBUG: typedef interface IPointerInactive IPointerInactive
    // DEBUG: typedef struct tagCADWORD
    // DEBUG:     {
    // DEBUG:     ULONG cElems;
    // DEBUG:     /* [size_is] */ DWORD *pElems;
    // DEBUG:     } 	CADWORD
    // DEBUG: typedef interface IPerPropertyBrowsing IPerPropertyBrowsing
    // DEBUG: typedef struct tagPROPBAG2
    // DEBUG:     {
    // DEBUG:     DWORD dwType;
    // DEBUG:     VARTYPE vt;
    // DEBUG:     CLIPFORMAT cfType;
    // DEBUG:     DWORD dwHint;
    // DEBUG:     LPOLESTR pstrName;
    // DEBUG:     CLSID clsid;
    // DEBUG:     } 	PROPBAG2
    // DEBUG: typedef interface IPropertyBag2 IPropertyBag2
    // DEBUG: typedef interface IPersistPropertyBag2 IPersistPropertyBag2
    // DEBUG: typedef interface IAdviseSinkEx IAdviseSinkEx
    // DEBUG: typedef /* [public][uuid] */  DECLSPEC_UUID("66504301-BE0F-101A-8BBB-00AA00300CAB") DWORD OLE_COLOR
    // DEBUG: typedef struct tagQACONTAINER
    // DEBUG:     {
    // DEBUG:     ULONG cbSize;
    // DEBUG:     IOleClientSite *pClientSite;
    // DEBUG:     IAdviseSinkEx *pAdviseSink;
    // DEBUG:     IPropertyNotifySink *pPropertyNotifySink;
    // DEBUG:     IUnknown *pUnkEventSink;
    // DEBUG:     DWORD dwAmbientFlags;
    // DEBUG:     OLE_COLOR colorFore;
    // DEBUG:     OLE_COLOR colorBack;
    // DEBUG:     IFont *pFont;
    // DEBUG:     IOleUndoManager *pUndoMgr;
    // DEBUG:     DWORD dwAppearance;
    // DEBUG:     LONG lcid;
    // DEBUG:     HPALETTE hpal;
    // DEBUG:     IBindHost *pBindHost;
    // DEBUG:     IOleControlSite *pOleControlSite;
    // DEBUG:     IServiceProvider *pServiceProvider;
    // DEBUG:     } 	QACONTAINER
    // DEBUG: typedef struct tagQACONTROL
    // DEBUG:     {
    // DEBUG:     ULONG cbSize;
    // DEBUG:     DWORD dwMiscStatus;
    // DEBUG:     DWORD dwViewStatus;
    // DEBUG:     DWORD dwEventCookie;
    // DEBUG:     DWORD dwPropNotifyCookie;
    // DEBUG:     DWORD dwPointerActivationPolicy;
    // DEBUG:     } 	QACONTROL
    // DEBUG: typedef interface IQuickActivate IQuickActivate
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagUASFLAGS
    // DEBUG:     {
    // DEBUG:         UAS_NORMAL	= 0,
    // DEBUG:         UAS_BLOCKED	= 0x1,
    // DEBUG:         UAS_NOPARENTENABLE	= 0x2,
    // DEBUG:         UAS_MASK	= 0x3
    // DEBUG:     } 	UASFLAGS
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagREADYSTATE
    // DEBUG:     {
    // DEBUG:         READYSTATE_UNINITIALIZED	= 0,
    // DEBUG:         READYSTATE_LOADING	= 1,
    // DEBUG:         READYSTATE_LOADED	= 2,
    // DEBUG:         READYSTATE_INTERACTIVE	= 3,
    // DEBUG:         READYSTATE_COMPLETE	= 4
    // DEBUG:     } 	READYSTATE
    // DEBUG: typedef IEnumConnections *PENUMCONNECTIONS
    // DEBUG: typedef IEnumConnections *LPENUMCONNECTIONS
    // DEBUG: typedef struct tagCONNECTDATA
    // DEBUG:     {
    // DEBUG:     IUnknown *pUnk;
    // DEBUG:     DWORD dwCookie;
    // DEBUG:     } 	CONNECTDATA
    // DEBUG: typedef struct tagCONNECTDATA *PCONNECTDATA
    // DEBUG: typedef IConnectionPoint *PCONNECTIONPOINT
    // DEBUG: typedef IEnumConnectionPoints *PENUMCONNECTIONPOINTS
    // DEBUG: typedef IEnumConnectionPoints *LPENUMCONNECTIONPOINTS
    // DEBUG: typedef IConnectionPointContainer *PCONNECTIONPOINTCONTAINER
    // DEBUG: typedef IConnectionPointContainer *LPCONNECTIONPOINTCONTAINER
    // DEBUG: typedef IClassFactory2 *LPCLASSFACTORY2
    // DEBUG: typedef struct tagLICINFO *LPLICINFO
    // DEBUG: typedef 
    // DEBUG: enum tagGUIDKIND
    // DEBUG:     {
    // DEBUG:         GUIDKIND_DEFAULT_SOURCE_DISP_IID	= 1
    // DEBUG:     } 	GUIDKIND
    // DEBUG: typedef IProvideMultipleClassInfo *LPPROVIDEMULTIPLECLASSINFO
    // DEBUG: typedef IOleControl *LPOLECONTROL
    // DEBUG: typedef struct tagCONTROLINFO *LPCONTROLINFO
    // DEBUG: typedef 
    // DEBUG: enum tagCTRLINFO
    // DEBUG:     {
    // DEBUG:         CTRLINFO_EATS_RETURN	= 1,
    // DEBUG:         CTRLINFO_EATS_ESCAPE	= 2
    // DEBUG:     } 	CTRLINFO
    // DEBUG: typedef IOleControlSite *LPOLECONTROLSITE
    // DEBUG: typedef struct tagPOINTF *LPPOINTF
    // DEBUG: typedef 
    // DEBUG: enum tagXFORMCOORDS
    // DEBUG:     {
    // DEBUG:         XFORMCOORDS_POSITION	= 0x1,
    // DEBUG:         XFORMCOORDS_SIZE	= 0x2,
    // DEBUG:         XFORMCOORDS_HIMETRICTOCONTAINER	= 0x4,
    // DEBUG:         XFORMCOORDS_CONTAINERTOHIMETRIC	= 0x8,
    // DEBUG:         XFORMCOORDS_EVENTCOMPAT	= 0x10
    // DEBUG:     } 	XFORMCOORDS
    // DEBUG: typedef IPropertyPage *LPPROPERTYPAGE
    // DEBUG: typedef struct tagPROPPAGEINFO *LPPROPPAGEINFO
    // DEBUG: typedef IPropertyPage2 *LPPROPERTYPAGE2
    // DEBUG: typedef IPropertyPageSite *LPPROPERTYPAGESITE
    // DEBUG: typedef 
    // DEBUG: enum tagPROPPAGESTATUS
    // DEBUG:     {
    // DEBUG:         PROPPAGESTATUS_DIRTY	= 0x1,
    // DEBUG:         PROPPAGESTATUS_VALIDATE	= 0x2,
    // DEBUG:         PROPPAGESTATUS_CLEAN	= 0x4
    // DEBUG:     } 	PROPPAGESTATUS
    // DEBUG: typedef IPropertyNotifySink *LPPROPERTYNOTIFYSINK
    // DEBUG: typedef ISpecifyPropertyPages *LPSPECIFYPROPERTYPAGES
    // DEBUG: typedef struct tagCAUUID *LPCAUUID
    // DEBUG: typedef IPersistMemory *LPPERSISTMEMORY
    // DEBUG: typedef IPersistStreamInit *LPPERSISTSTREAMINIT
    // DEBUG: typedef IPersistPropertyBag *LPPERSISTPROPERTYBAG
    // DEBUG: typedef IPicture *LPPICTURE
    // DEBUG: typedef 
    // DEBUG: enum tagPictureAttributes
    // DEBUG:     {
    // DEBUG:         PICTURE_SCALABLE	= 0x1,
    // DEBUG:         PICTURE_TRANSPARENT	= 0x2
    // DEBUG:     } 	PICTUREATTRIBUTES
    // DEBUG: typedef IPicture2 *LPPICTURE2
    // DEBUG: typedef IOleInPlaceObjectWindowless *LPOLEINPLACEOBJECTWINDOWLESS
    // DEBUG: typedef IOleInPlaceSiteEx *LPOLEINPLACESITEEX
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagACTIVATEFLAGS
    // DEBUG:     {
    // DEBUG:         ACTIVATE_WINDOWLESS	= 1
    // DEBUG:     } 	ACTIVATEFLAGS
    // DEBUG: typedef IOleInPlaceSiteWindowless *LPOLEINPLACESITEWINDOWLESS
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagOLEDCFLAGS
    // DEBUG:     {
    // DEBUG:         OLEDC_NODRAW	= 0x1,
    // DEBUG:         OLEDC_PAINTBKGND	= 0x2,
    // DEBUG:         OLEDC_OFFSCREEN	= 0x4
    // DEBUG:     } 	OLEDCFLAGS
    // DEBUG: typedef IViewObjectEx *LPVIEWOBJECTEX
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagVIEWSTATUS
    // DEBUG:     {
    // DEBUG:         VIEWSTATUS_OPAQUE	= 1,
    // DEBUG:         VIEWSTATUS_SOLIDBKGND	= 2,
    // DEBUG:         VIEWSTATUS_DVASPECTOPAQUE	= 4,
    // DEBUG:         VIEWSTATUS_DVASPECTTRANSPARENT	= 8,
    // DEBUG:         VIEWSTATUS_SURFACE	= 16,
    // DEBUG:         VIEWSTATUS_3DSURFACE	= 32
    // DEBUG:     } 	VIEWSTATUS
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagHITRESULT
    // DEBUG:     {
    // DEBUG:         HITRESULT_OUTSIDE	= 0,
    // DEBUG:         HITRESULT_TRANSPARENT	= 1,
    // DEBUG:         HITRESULT_CLOSE	= 2,
    // DEBUG:         HITRESULT_HIT	= 3
    // DEBUG:     } 	HITRESULT
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagDVASPECT2
    // DEBUG:     {
    // DEBUG:         DVASPECT_OPAQUE	= 16,
    // DEBUG:         DVASPECT_TRANSPARENT	= 32
    // DEBUG:     } 	DVASPECT2
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagExtentMode
    // DEBUG:     {
    // DEBUG:         DVEXTENT_CONTENT	= 0,
    // DEBUG:         DVEXTENT_INTEGRAL	= ( DVEXTENT_CONTENT + 1 ) 
    // DEBUG:     } 	DVEXTENTMODE
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagAspectInfoFlag
    // DEBUG:     {
    // DEBUG:         DVASPECTINFOFLAG_CANOPTIMIZE	= 1
    // DEBUG:     } 	DVASPECTINFOFLAG
    // DEBUG: typedef struct tagAspectInfo
    // DEBUG:     {
    // DEBUG:     ULONG cb;
    // DEBUG:     DWORD dwFlags;
    // DEBUG:     } 	DVASPECTINFO
    // DEBUG: typedef IOleUndoUnit *LPOLEUNDOUNIT
    // DEBUG: typedef IOleParentUndoUnit *LPOLEPARENTUNDOUNIT
    // DEBUG: typedef IEnumOleUndoUnits *LPENUMOLEUNDOUNITS
    // DEBUG: typedef IOleUndoManager *LPOLEUNDOMANAGER
    // DEBUG: typedef IPointerInactive *LPPOINTERINACTIVE
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagPOINTERINACTIVE
    // DEBUG:     {
    // DEBUG:         POINTERINACTIVE_ACTIVATEONENTRY	= 1,
    // DEBUG:         POINTERINACTIVE_DEACTIVATEONLEAVE	= 2,
    // DEBUG:         POINTERINACTIVE_ACTIVATEONDRAG	= 4
    // DEBUG:     } 	POINTERINACTIVE
    // DEBUG: typedef IPerPropertyBrowsing *LPPERPROPERTYBROWSING
    // DEBUG: typedef struct tagCADWORD *LPCADWORD
    // DEBUG: typedef IPropertyBag2 *LPPROPERTYBAG2
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagPROPBAG2_TYPE
    // DEBUG:     {
    // DEBUG:         PROPBAG2_TYPE_UNDEFINED	= 0,
    // DEBUG:         PROPBAG2_TYPE_DATA	= 1,
    // DEBUG:         PROPBAG2_TYPE_URL	= 2,
    // DEBUG:         PROPBAG2_TYPE_OBJECT	= 3,
    // DEBUG:         PROPBAG2_TYPE_STREAM	= 4,
    // DEBUG:         PROPBAG2_TYPE_STORAGE	= 5,
    // DEBUG:         PROPBAG2_TYPE_MONIKER	= 6
    // DEBUG:     } 	PROPBAG2_TYPE
    // DEBUG: typedef IPersistPropertyBag2 *LPPERSISTPROPERTYBAG2
    // DEBUG: typedef IAdviseSinkEx *LPADVISESINKEX
    // DEBUG: typedef IQuickActivate *LPQUICKACTIVATE
    // DEBUG: typedef /* [v1_enum] */ 
    // DEBUG: enum tagQACONTAINERFLAGS
    // DEBUG:     {
    // DEBUG:         QACONTAINER_SHOWHATCHING	= 0x1,
    // DEBUG:         QACONTAINER_SHOWGRABHANDLES	= 0x2,
    // DEBUG:         QACONTAINER_USERMODE	= 0x4,
    // DEBUG:         QACONTAINER_DISPLAYASDEFAULT	= 0x8,
    // DEBUG:         QACONTAINER_UIDEAD	= 0x10,
    // DEBUG:         QACONTAINER_AUTOCLIP	= 0x20,
    // DEBUG:         QACONTAINER_MESSAGEREFLECT	= 0x40,
    // DEBUG:         QACONTAINER_SUPPORTSMNEMONICS	= 0x80
    // DEBUG:     } 	QACONTAINERFLAGS
    // DEBUG: struct tagCONNECTDATA
    // DEBUG:     {
    // DEBUG:     IUnknown *pUnk;
    // DEBUG:     DWORD dwCookie;
    // DEBUG:     }
    public unsafe partial class TagCONNECTDATA : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr pUnk;
            internal uint dwCookie;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagCONNECTDATA@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagCONNECTDATA>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagCONNECTDATA>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagCONNECTDATA managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagCONNECTDATA>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagCONNECTDATA managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagCONNECTDATA __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagCONNECTDATA(native.ToPointer(), skipVTables);
        }

        internal static TagCONNECTDATA __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagCONNECTDATA)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagCONNECTDATA __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagCONNECTDATA(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagCONNECTDATA(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagCONNECTDATA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagCONNECTDATA
        public TagCONNECTDATA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagCONNECTDATA.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagCONNECTDATA
        public TagCONNECTDATA(global::SpoutDX.TagCONNECTDATA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagCONNECTDATA.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagCONNECTDATA.__Internal*) __Instance) = *((global::SpoutDX.TagCONNECTDATA.__Internal*) _0.__Instance);
        }

        ~TagCONNECTDATA()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwCookie
        {
            get
            {
                return ((__Internal*)__Instance)->dwCookie;
            }

            set
            {
                ((__Internal*)__Instance)->dwCookie = value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("B196B287-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     IEnumConnections : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
    // DEBUG:             /* [in] */ ULONG cConnections,
    // DEBUG:             /* [length_is][size_is][out] */ LPCONNECTDATA rgcd,
    // DEBUG:             /* [out] */ ULONG *pcFetched) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Skip( 
    // DEBUG:             /* [in] */ ULONG cConnections) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Clone( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnections **ppEnum) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IEnumConnections : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IEnumConnections@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IEnumConnections>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IEnumConnections>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IEnumConnections managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IEnumConnections>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IEnumConnections managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IEnumConnections __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IEnumConnectionsInternal(native.ToPointer(), skipVTables);
        }

        internal static IEnumConnections __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IEnumConnections)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IEnumConnections __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IEnumConnections)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IEnumConnections __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IEnumConnectionsInternal(native, skipVTables);
        }

        protected IEnumConnections(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IEnumConnections
        protected IEnumConnections()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IEnumConnections.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IEnumConnections");
        }

        ~IEnumConnections()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
        // DEBUG:             /* [in] */ ULONG cConnections,
        // DEBUG:             /* [length_is][size_is][out] */ LPCONNECTDATA rgcd,
        // DEBUG:             /* [out] */ ULONG *pcFetched) = 0
        public abstract int Next(uint cConnections, global::SpoutDX.TagCONNECTDATA rgcd, ref uint pcFetched);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Skip( 
        // DEBUG:             /* [in] */ ULONG cConnections) = 0
        public abstract int Skip(uint cConnections);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0
        public abstract int Reset();

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Clone( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnections **ppEnum) = 0
        public abstract int Clone(global::SpoutDX.IEnumConnections ppEnum);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE Next( /* [in] */ ULONG cConnections, /* [length_is][size_is][out] */ LPCONNECTDATA rgcd, /* [out] */ ULONG *pcFetched) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint___IntPtr_uintPtr _NextDelegateInstance;

        private static int _NextDelegateHook(__IntPtr __instance, uint cConnections, __IntPtr rgcd, uint* pcFetched)
        {
            var __target = global::SpoutDX.IEnumConnections.__GetInstance(__instance);
            var __result1 = global::SpoutDX.TagCONNECTDATA.__GetOrCreateInstance(rgcd, false);
            var ___ret = __target.Next(cConnections, __result1, ref *pcFetched);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Skip( /* [in] */ ULONG cConnections) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _SkipDelegateInstance;

        private static int _SkipDelegateHook(__IntPtr __instance, uint cConnections)
        {
            var __target = global::SpoutDX.IEnumConnections.__GetInstance(__instance);
            var ___ret = __target.Skip(cConnections);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Reset( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _ResetDelegateInstance;

        private static int _ResetDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IEnumConnections.__GetInstance(__instance);
            var ___ret = __target.Reset();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Clone( /* [out] */ __RPC__deref_out_opt IEnumConnections **ppEnum) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _CloneDelegateInstance;

        private static int _CloneDelegateHook(__IntPtr __instance, __IntPtr ppEnum)
        {
            var __target = global::SpoutDX.IEnumConnections.__GetInstance(__instance);
            __IntPtr __ppEnum = ppEnum == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppEnum);
            var __result0 = global::SpoutDX.IEnumConnections.__GetOrCreateInstance(__ppEnum, false);
            var ___ret = __target.Clone(__result0);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[4];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _NextDelegateInstance += _NextDelegateHook;
                _SkipDelegateInstance += _SkipDelegateHook;
                _ResetDelegateInstance += _ResetDelegateHook;
                _CloneDelegateInstance += _CloneDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_NextDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SkipDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ResetDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            ManagedVTables[0][5] = Thunks[2];
                            ManagedVTables[0][6] = Thunks[3];
                            VTables.Methods[0] = new Delegate[7];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("B196B286-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     IConnectionPoint : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetConnectionInterface( 
    // DEBUG:             /* [out] */ __RPC__out IID *pIID) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetConnectionPointContainer( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IConnectionPointContainer **ppCPC) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Advise( 
    // DEBUG:             /* [in] */ __RPC__in_opt IUnknown *pUnkSink,
    // DEBUG:             /* [out] */ __RPC__out DWORD *pdwCookie) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Unadvise( 
    // DEBUG:             /* [in] */ DWORD dwCookie) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE EnumConnections( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnections **ppEnum) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IConnectionPoint : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IConnectionPoint@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IConnectionPoint>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IConnectionPoint>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IConnectionPoint managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IConnectionPoint>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IConnectionPoint managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IConnectionPoint __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IConnectionPointInternal(native.ToPointer(), skipVTables);
        }

        internal static IConnectionPoint __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IConnectionPoint)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IConnectionPoint __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IConnectionPoint)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IConnectionPoint __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IConnectionPointInternal(native, skipVTables);
        }

        protected IConnectionPoint(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IConnectionPoint
        protected IConnectionPoint()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IConnectionPoint.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IConnectionPoint");
        }

        ~IConnectionPoint()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetConnectionPointContainer( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IConnectionPointContainer **ppCPC) = 0
        public abstract int GetConnectionPointContainer(global::SpoutDX.IConnectionPointContainer ppCPC);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Unadvise( 
        // DEBUG:             /* [in] */ DWORD dwCookie) = 0
        public abstract int Unadvise(uint dwCookie);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EnumConnections( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnections **ppEnum) = 0
        public abstract int EnumConnections(global::SpoutDX.IEnumConnections ppEnum);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE GetConnectionPointContainer( /* [out] */ __RPC__deref_out_opt IConnectionPointContainer **ppCPC) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _GetConnectionPointContainerDelegateInstance;

        private static int _GetConnectionPointContainerDelegateHook(__IntPtr __instance, __IntPtr ppCPC)
        {
            var __target = global::SpoutDX.IConnectionPoint.__GetInstance(__instance);
            __IntPtr __ppCPC = ppCPC == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppCPC);
            var __result0 = global::SpoutDX.IConnectionPointContainer.__GetOrCreateInstance(__ppCPC, false);
            var ___ret = __target.GetConnectionPointContainer(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Unadvise( /* [in] */ DWORD dwCookie) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _UnadviseDelegateInstance;

        private static int _UnadviseDelegateHook(__IntPtr __instance, uint dwCookie)
        {
            var __target = global::SpoutDX.IConnectionPoint.__GetInstance(__instance);
            var ___ret = __target.Unadvise(dwCookie);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE EnumConnections( /* [out] */ __RPC__deref_out_opt IEnumConnections **ppEnum) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _EnumConnectionsDelegateInstance;

        private static int _EnumConnectionsDelegateHook(__IntPtr __instance, __IntPtr ppEnum)
        {
            var __target = global::SpoutDX.IConnectionPoint.__GetInstance(__instance);
            __IntPtr __ppEnum = ppEnum == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppEnum);
            var __result0 = global::SpoutDX.IEnumConnections.__GetOrCreateInstance(__ppEnum, false);
            var ___ret = __target.EnumConnections(__result0);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[3];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetConnectionPointContainerDelegateInstance += _GetConnectionPointContainerDelegateHook;
                _UnadviseDelegateInstance += _UnadviseDelegateHook;
                _EnumConnectionsDelegateInstance += _EnumConnectionsDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetConnectionPointContainerDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UnadviseDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_EnumConnectionsDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 8, 0);
                            ManagedVTables[0][4] = Thunks[0];
                            ManagedVTables[0][6] = Thunks[1];
                            ManagedVTables[0][7] = Thunks[2];
                            VTables.Methods[0] = new Delegate[8];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("B196B285-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     IEnumConnectionPoints : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
    // DEBUG:             /* [in] */ ULONG cConnections,
    // DEBUG:             /* [length_is][size_is][out] */ LPCONNECTIONPOINT *ppCP,
    // DEBUG:             /* [out] */ ULONG *pcFetched) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Skip( 
    // DEBUG:             /* [in] */ ULONG cConnections) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Clone( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnectionPoints **ppEnum) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IEnumConnectionPoints : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IEnumConnectionPoints@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IEnumConnectionPoints>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IEnumConnectionPoints>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IEnumConnectionPoints managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IEnumConnectionPoints>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IEnumConnectionPoints managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IEnumConnectionPoints __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IEnumConnectionPointsInternal(native.ToPointer(), skipVTables);
        }

        internal static IEnumConnectionPoints __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IEnumConnectionPoints)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IEnumConnectionPoints __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IEnumConnectionPoints)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IEnumConnectionPoints __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IEnumConnectionPointsInternal(native, skipVTables);
        }

        protected IEnumConnectionPoints(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IEnumConnectionPoints
        protected IEnumConnectionPoints()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IEnumConnectionPoints.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IEnumConnectionPoints");
        }

        ~IEnumConnectionPoints()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
        // DEBUG:             /* [in] */ ULONG cConnections,
        // DEBUG:             /* [length_is][size_is][out] */ LPCONNECTIONPOINT *ppCP,
        // DEBUG:             /* [out] */ ULONG *pcFetched) = 0
        public abstract int Next(uint cConnections, global::SpoutDX.IConnectionPoint ppCP, ref uint pcFetched);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Skip( 
        // DEBUG:             /* [in] */ ULONG cConnections) = 0
        public abstract int Skip(uint cConnections);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0
        public abstract int Reset();

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Clone( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnectionPoints **ppEnum) = 0
        public abstract int Clone(global::SpoutDX.IEnumConnectionPoints ppEnum);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE Next( /* [in] */ ULONG cConnections, /* [length_is][size_is][out] */ LPCONNECTIONPOINT *ppCP, /* [out] */ ULONG *pcFetched) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint___IntPtr_uintPtr _NextDelegateInstance;

        private static int _NextDelegateHook(__IntPtr __instance, uint cConnections, __IntPtr ppCP, uint* pcFetched)
        {
            var __target = global::SpoutDX.IEnumConnectionPoints.__GetInstance(__instance);
            __IntPtr __ppCP = ppCP == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppCP);
            var __result1 = global::SpoutDX.IConnectionPoint.__GetOrCreateInstance(__ppCP, false);
            var ___ret = __target.Next(cConnections, __result1, ref *pcFetched);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Skip( /* [in] */ ULONG cConnections) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _SkipDelegateInstance;

        private static int _SkipDelegateHook(__IntPtr __instance, uint cConnections)
        {
            var __target = global::SpoutDX.IEnumConnectionPoints.__GetInstance(__instance);
            var ___ret = __target.Skip(cConnections);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Reset( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _ResetDelegateInstance;

        private static int _ResetDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IEnumConnectionPoints.__GetInstance(__instance);
            var ___ret = __target.Reset();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Clone( /* [out] */ __RPC__deref_out_opt IEnumConnectionPoints **ppEnum) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _CloneDelegateInstance;

        private static int _CloneDelegateHook(__IntPtr __instance, __IntPtr ppEnum)
        {
            var __target = global::SpoutDX.IEnumConnectionPoints.__GetInstance(__instance);
            __IntPtr __ppEnum = ppEnum == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppEnum);
            var __result0 = global::SpoutDX.IEnumConnectionPoints.__GetOrCreateInstance(__ppEnum, false);
            var ___ret = __target.Clone(__result0);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[4];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _NextDelegateInstance += _NextDelegateHook;
                _SkipDelegateInstance += _SkipDelegateHook;
                _ResetDelegateInstance += _ResetDelegateHook;
                _CloneDelegateInstance += _CloneDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_NextDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SkipDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ResetDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            ManagedVTables[0][5] = Thunks[2];
                            ManagedVTables[0][6] = Thunks[3];
                            VTables.Methods[0] = new Delegate[7];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("B196B284-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     IConnectionPointContainer : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE EnumConnectionPoints( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnectionPoints **ppEnum) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE FindConnectionPoint( 
    // DEBUG:             /* [in] */ __RPC__in REFIID riid,
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IConnectionPoint **ppCP) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IConnectionPointContainer : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IConnectionPointContainer@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IConnectionPointContainer>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IConnectionPointContainer>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IConnectionPointContainer managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IConnectionPointContainer>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IConnectionPointContainer managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IConnectionPointContainer __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IConnectionPointContainerInternal(native.ToPointer(), skipVTables);
        }

        internal static IConnectionPointContainer __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IConnectionPointContainer)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IConnectionPointContainer __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IConnectionPointContainer)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IConnectionPointContainer __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IConnectionPointContainerInternal(native, skipVTables);
        }

        protected IConnectionPointContainer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IConnectionPointContainer
        protected IConnectionPointContainer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IConnectionPointContainer.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IConnectionPointContainer");
        }

        ~IConnectionPointContainer()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EnumConnectionPoints( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnectionPoints **ppEnum) = 0
        public abstract int EnumConnectionPoints(global::SpoutDX.IEnumConnectionPoints ppEnum);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE EnumConnectionPoints( /* [out] */ __RPC__deref_out_opt IEnumConnectionPoints **ppEnum) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _EnumConnectionPointsDelegateInstance;

        private static int _EnumConnectionPointsDelegateHook(__IntPtr __instance, __IntPtr ppEnum)
        {
            var __target = global::SpoutDX.IConnectionPointContainer.__GetInstance(__instance);
            __IntPtr __ppEnum = ppEnum == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppEnum);
            var __result0 = global::SpoutDX.IEnumConnectionPoints.__GetOrCreateInstance(__ppEnum, false);
            var ___ret = __target.EnumConnectionPoints(__result0);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _EnumConnectionPointsDelegateInstance += _EnumConnectionPointsDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_EnumConnectionPointsDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 5, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            VTables.Methods[0] = new Delegate[5];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct tagLICINFO
    // DEBUG:     {
    // DEBUG:     LONG cbLicInfo;
    // DEBUG:     BOOL fRuntimeKeyAvail;
    // DEBUG:     BOOL fLicVerified;
    // DEBUG:     }
    public unsafe partial class TagLICINFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal int cbLicInfo;
            internal int fRuntimeKeyAvail;
            internal int fLicVerified;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagLICINFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagLICINFO>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagLICINFO>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagLICINFO managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagLICINFO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagLICINFO managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagLICINFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagLICINFO(native.ToPointer(), skipVTables);
        }

        internal static TagLICINFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagLICINFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagLICINFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagLICINFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagLICINFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagLICINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagLICINFO
        public TagLICINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagLICINFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagLICINFO
        public TagLICINFO(global::SpoutDX.TagLICINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagLICINFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagLICINFO.__Internal*) __Instance) = *((global::SpoutDX.TagLICINFO.__Internal*) _0.__Instance);
        }

        ~TagLICINFO()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int CbLicInfo
        {
            get
            {
                return ((__Internal*)__Instance)->cbLicInfo;
            }

            set
            {
                ((__Internal*)__Instance)->cbLicInfo = value;
            }
        }

        public int FRuntimeKeyAvail
        {
            get
            {
                return ((__Internal*)__Instance)->fRuntimeKeyAvail;
            }

            set
            {
                ((__Internal*)__Instance)->fRuntimeKeyAvail = value;
            }
        }

        public int FLicVerified
        {
            get
            {
                return ((__Internal*)__Instance)->fLicVerified;
            }

            set
            {
                ((__Internal*)__Instance)->fLicVerified = value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("B196B28F-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     IClassFactory2 : public IClassFactory
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetLicInfo( 
    // DEBUG:             /* [out][in] */ __RPC__inout LICINFO *pLicInfo) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE RequestLicKey( 
    // DEBUG:             /* [in] */ DWORD dwReserved,
    // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstrKey) = 0;
    // DEBUG:         
    // DEBUG:         virtual /* [local] */ HRESULT STDMETHODCALLTYPE CreateInstanceLic( 
    // DEBUG:             /* [annotation][in] */ 
    // DEBUG:             _In_opt_  IUnknown *pUnkOuter,
    // DEBUG:             /* [annotation][in] */ 
    // DEBUG:             _Reserved_  IUnknown *pUnkReserved,
    // DEBUG:             /* [annotation][in] */ 
    // DEBUG:             __RPC__in  REFIID riid,
    // DEBUG:             /* [annotation][in] */ 
    // DEBUG:             __RPC__in  BSTR bstrKey,
    // DEBUG:             /* [annotation][iid_is][out] */ 
    // DEBUG:             __RPC__deref_out_opt  PVOID *ppvObj) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IClassFactory2 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IClassFactory2@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IClassFactory2>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IClassFactory2>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IClassFactory2 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IClassFactory2>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IClassFactory2 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IClassFactory2 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IClassFactory2Internal(native.ToPointer(), skipVTables);
        }

        internal static IClassFactory2 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IClassFactory2)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IClassFactory2 __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IClassFactory2)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IClassFactory2 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IClassFactory2Internal(native, skipVTables);
        }

        protected IClassFactory2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IClassFactory2
        protected IClassFactory2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IClassFactory2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IClassFactory2");
        }

        ~IClassFactory2()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetLicInfo( 
        // DEBUG:             /* [out][in] */ __RPC__inout LICINFO *pLicInfo) = 0
        public abstract int GetLicInfo(global::SpoutDX.TagLICINFO pLicInfo);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE RequestLicKey( 
        // DEBUG:             /* [in] */ DWORD dwReserved,
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstrKey) = 0
        public abstract int RequestLicKey(uint dwReserved, char** pBstrKey);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE GetLicInfo( /* [out][in] */ __RPC__inout LICINFO *pLicInfo) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _GetLicInfoDelegateInstance;

        private static int _GetLicInfoDelegateHook(__IntPtr __instance, __IntPtr pLicInfo)
        {
            var __target = global::SpoutDX.IClassFactory2.__GetInstance(__instance);
            var __result0 = global::SpoutDX.TagLICINFO.__GetOrCreateInstance(pLicInfo, false);
            var ___ret = __target.GetLicInfo(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE RequestLicKey( /* [in] */ DWORD dwReserved, /* [out] */ __RPC__deref_out_opt BSTR *pBstrKey) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint_charPtrPtr _RequestLicKeyDelegateInstance;

        private static int _RequestLicKeyDelegateHook(__IntPtr __instance, uint dwReserved, char** pBstrKey)
        {
            var __target = global::SpoutDX.IClassFactory2.__GetInstance(__instance);
            var ___ret = __target.RequestLicKey(dwReserved, pBstrKey);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetLicInfoDelegateInstance += _GetLicInfoDelegateHook;
                _RequestLicKeyDelegateInstance += _RequestLicKeyDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetLicInfoDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_RequestLicKeyDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 8, 0);
                            ManagedVTables[0][5] = Thunks[0];
                            ManagedVTables[0][6] = Thunks[1];
                            VTables.Methods[0] = new Delegate[8];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("A7ABA9C1-8983-11cf-8F20-00805F2CD064")
    // DEBUG:     IProvideMultipleClassInfo : public IProvideClassInfo2
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetMultiTypeInfoCount( 
    // DEBUG:             /* [out] */ __RPC__out ULONG *pcti) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetInfoOfIndex( 
    // DEBUG:             /* [in] */ ULONG iti,
    // DEBUG:             /* [in] */ DWORD dwFlags,
    // DEBUG:             /* [out] */ __RPC__deref_out_opt ITypeInfo **pptiCoClass,
    // DEBUG:             /* [out] */ __RPC__out DWORD *pdwTIFlags,
    // DEBUG:             /* [out] */ __RPC__out ULONG *pcdispidReserved,
    // DEBUG:             /* [out] */ __RPC__out IID *piidPrimary,
    // DEBUG:             /* [out] */ __RPC__out IID *piidSource) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IProvideMultipleClassInfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IProvideMultipleClassInfo@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IProvideMultipleClassInfo@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IProvideMultipleClassInfo>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IProvideMultipleClassInfo>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IProvideMultipleClassInfo managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IProvideMultipleClassInfo>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IProvideMultipleClassInfo managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IProvideMultipleClassInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IProvideMultipleClassInfoInternal(native.ToPointer(), skipVTables);
        }

        internal static IProvideMultipleClassInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IProvideMultipleClassInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IProvideMultipleClassInfo __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IProvideMultipleClassInfo)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IProvideMultipleClassInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IProvideMultipleClassInfoInternal(native, skipVTables);
        }

        protected IProvideMultipleClassInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IProvideMultipleClassInfo
        protected IProvideMultipleClassInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IProvideMultipleClassInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IProvideMultipleClassInfo");
        }

        // DEBUG: IProvideMultipleClassInfo
        protected IProvideMultipleClassInfo(global::SpoutDX.IProvideMultipleClassInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IProvideMultipleClassInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "SpoutDX.IProvideMultipleClassInfo");
        }

        ~IProvideMultipleClassInfo()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetMultiTypeInfoCount( 
        // DEBUG:             /* [out] */ __RPC__out ULONG *pcti) = 0
        public abstract int GetMultiTypeInfoCount(ref uint pcti);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE GetMultiTypeInfoCount( /* [out] */ __RPC__out ULONG *pcti) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetMultiTypeInfoCountDelegateInstance;

        private static int _GetMultiTypeInfoCountDelegateHook(__IntPtr __instance, uint* pcti)
        {
            var __target = global::SpoutDX.IProvideMultipleClassInfo.__GetInstance(__instance);
            var ___ret = __target.GetMultiTypeInfoCount(ref *pcti);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetMultiTypeInfoCountDelegateInstance += _GetMultiTypeInfoCountDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetMultiTypeInfoCountDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7, 0);
                            ManagedVTables[0][5] = Thunks[0];
                            VTables.Methods[0] = new Delegate[7];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct tagCONTROLINFO
    // DEBUG:     {
    // DEBUG:     ULONG cb;
    // DEBUG:     HACCEL hAccel;
    // DEBUG:     USHORT cAccel;
    // DEBUG:     DWORD dwFlags;
    // DEBUG:     }
    public unsafe partial class TagCONTROLINFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal uint cb;
            internal __IntPtr hAccel;
            internal ushort cAccel;
            internal uint dwFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagCONTROLINFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagCONTROLINFO>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagCONTROLINFO>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagCONTROLINFO managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagCONTROLINFO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagCONTROLINFO managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagCONTROLINFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagCONTROLINFO(native.ToPointer(), skipVTables);
        }

        internal static TagCONTROLINFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagCONTROLINFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagCONTROLINFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagCONTROLINFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagCONTROLINFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagCONTROLINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagCONTROLINFO
        public TagCONTROLINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagCONTROLINFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagCONTROLINFO
        public TagCONTROLINFO(global::SpoutDX.TagCONTROLINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagCONTROLINFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagCONTROLINFO.__Internal*) __Instance) = *((global::SpoutDX.TagCONTROLINFO.__Internal*) _0.__Instance);
        }

        ~TagCONTROLINFO()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Cb
        {
            get
            {
                return ((__Internal*)__Instance)->cb;
            }

            set
            {
                ((__Internal*)__Instance)->cb = value;
            }
        }

        public ushort CAccel
        {
            get
            {
                return ((__Internal*)__Instance)->cAccel;
            }

            set
            {
                ((__Internal*)__Instance)->cAccel = value;
            }
        }

        public uint DwFlags
        {
            get
            {
                return ((__Internal*)__Instance)->dwFlags;
            }

            set
            {
                ((__Internal*)__Instance)->dwFlags = value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("B196B288-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     IOleControl : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetControlInfo( 
    // DEBUG:             /* [out][in] */ __RPC__inout CONTROLINFO *pCI) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnMnemonic( 
    // DEBUG:             /* [in] */ __RPC__in MSG *pMsg) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnAmbientPropertyChange( 
    // DEBUG:             /* [in] */ DISPID dispID) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE FreezeEvents( 
    // DEBUG:             /* [in] */ BOOL bFreeze) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IOleControl : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleControl@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleControl>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleControl>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IOleControl managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IOleControl>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IOleControl managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IOleControl __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IOleControlInternal(native.ToPointer(), skipVTables);
        }

        internal static IOleControl __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IOleControl)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IOleControl __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IOleControl)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IOleControl __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IOleControlInternal(native, skipVTables);
        }

        protected IOleControl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IOleControl
        protected IOleControl()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IOleControl.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IOleControl");
        }

        ~IOleControl()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetControlInfo( 
        // DEBUG:             /* [out][in] */ __RPC__inout CONTROLINFO *pCI) = 0
        public abstract int GetControlInfo(global::SpoutDX.TagCONTROLINFO pCI);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnAmbientPropertyChange( 
        // DEBUG:             /* [in] */ DISPID dispID) = 0
        public abstract int OnAmbientPropertyChange(int dispID);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE FreezeEvents( 
        // DEBUG:             /* [in] */ BOOL bFreeze) = 0
        public abstract int FreezeEvents(int bFreeze);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE GetControlInfo( /* [out][in] */ __RPC__inout CONTROLINFO *pCI) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _GetControlInfoDelegateInstance;

        private static int _GetControlInfoDelegateHook(__IntPtr __instance, __IntPtr pCI)
        {
            var __target = global::SpoutDX.IOleControl.__GetInstance(__instance);
            var __result0 = global::SpoutDX.TagCONTROLINFO.__GetOrCreateInstance(pCI, false);
            var ___ret = __target.GetControlInfo(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE OnAmbientPropertyChange( /* [in] */ DISPID dispID) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _OnAmbientPropertyChangeDelegateInstance;

        private static int _OnAmbientPropertyChangeDelegateHook(__IntPtr __instance, int dispID)
        {
            var __target = global::SpoutDX.IOleControl.__GetInstance(__instance);
            var ___ret = __target.OnAmbientPropertyChange(dispID);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE FreezeEvents( /* [in] */ BOOL bFreeze) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _FreezeEventsDelegateInstance;

        private static int _FreezeEventsDelegateHook(__IntPtr __instance, int bFreeze)
        {
            var __target = global::SpoutDX.IOleControl.__GetInstance(__instance);
            var ___ret = __target.FreezeEvents(bFreeze);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[3];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetControlInfoDelegateInstance += _GetControlInfoDelegateHook;
                _OnAmbientPropertyChangeDelegateInstance += _OnAmbientPropertyChangeDelegateHook;
                _FreezeEventsDelegateInstance += _FreezeEventsDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetControlInfoDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_OnAmbientPropertyChangeDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_FreezeEventsDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][5] = Thunks[1];
                            ManagedVTables[0][6] = Thunks[2];
                            VTables.Methods[0] = new Delegate[7];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct tagPOINTF
    // DEBUG:     {
    // DEBUG:     FLOAT x;
    // DEBUG:     FLOAT y;
    // DEBUG:     }
    public unsafe partial class TagPOINTF : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal float x;
            internal float y;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagPOINTF@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagPOINTF>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagPOINTF>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagPOINTF managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagPOINTF>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagPOINTF managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagPOINTF __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagPOINTF(native.ToPointer(), skipVTables);
        }

        internal static TagPOINTF __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagPOINTF)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagPOINTF __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagPOINTF(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagPOINTF(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagPOINTF(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagPOINTF
        public TagPOINTF()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagPOINTF.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagPOINTF
        public TagPOINTF(global::SpoutDX.TagPOINTF _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagPOINTF.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagPOINTF.__Internal*) __Instance) = *((global::SpoutDX.TagPOINTF.__Internal*) _0.__Instance);
        }

        ~TagPOINTF()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X
        {
            get
            {
                return ((__Internal*)__Instance)->x;
            }

            set
            {
                ((__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((__Internal*)__Instance)->y;
            }

            set
            {
                ((__Internal*)__Instance)->y = value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("B196B289-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     IOleControlSite : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnControlInfoChanged( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE LockInPlaceActive( 
    // DEBUG:             /* [in] */ BOOL fLock) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetExtendedControl( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IDispatch **ppDisp) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE TransformCoords( 
    // DEBUG:             /* [out][in] */ __RPC__inout POINTL *pPtlHimetric,
    // DEBUG:             /* [out][in] */ __RPC__inout POINTF *pPtfContainer,
    // DEBUG:             /* [in] */ DWORD dwFlags) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator( 
    // DEBUG:             /* [in] */ __RPC__in MSG *pMsg,
    // DEBUG:             /* [in] */ DWORD grfModifiers) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnFocus( 
    // DEBUG:             /* [in] */ BOOL fGotFocus) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE ShowPropertyFrame( void) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IOleControlSite : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleControlSite@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleControlSite>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleControlSite>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IOleControlSite managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IOleControlSite>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IOleControlSite managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IOleControlSite __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IOleControlSiteInternal(native.ToPointer(), skipVTables);
        }

        internal static IOleControlSite __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IOleControlSite)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IOleControlSite __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IOleControlSite)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IOleControlSite __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IOleControlSiteInternal(native, skipVTables);
        }

        protected IOleControlSite(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IOleControlSite
        protected IOleControlSite()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IOleControlSite.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IOleControlSite");
        }

        ~IOleControlSite()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnControlInfoChanged( void) = 0
        public abstract int OnControlInfoChanged();

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE LockInPlaceActive( 
        // DEBUG:             /* [in] */ BOOL fLock) = 0
        public abstract int LockInPlaceActive(int fLock);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnFocus( 
        // DEBUG:             /* [in] */ BOOL fGotFocus) = 0
        public abstract int OnFocus(int fGotFocus);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE ShowPropertyFrame( void) = 0
        public abstract int ShowPropertyFrame();

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE OnControlInfoChanged( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _OnControlInfoChangedDelegateInstance;

        private static int _OnControlInfoChangedDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IOleControlSite.__GetInstance(__instance);
            var ___ret = __target.OnControlInfoChanged();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE LockInPlaceActive( /* [in] */ BOOL fLock) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _LockInPlaceActiveDelegateInstance;

        private static int _LockInPlaceActiveDelegateHook(__IntPtr __instance, int fLock)
        {
            var __target = global::SpoutDX.IOleControlSite.__GetInstance(__instance);
            var ___ret = __target.LockInPlaceActive(fLock);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE OnFocus( /* [in] */ BOOL fGotFocus) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _OnFocusDelegateInstance;

        private static int _OnFocusDelegateHook(__IntPtr __instance, int fGotFocus)
        {
            var __target = global::SpoutDX.IOleControlSite.__GetInstance(__instance);
            var ___ret = __target.OnFocus(fGotFocus);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE ShowPropertyFrame( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _ShowPropertyFrameDelegateInstance;

        private static int _ShowPropertyFrameDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IOleControlSite.__GetInstance(__instance);
            var ___ret = __target.ShowPropertyFrame();
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[4];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _OnControlInfoChangedDelegateInstance += _OnControlInfoChangedDelegateHook;
                _LockInPlaceActiveDelegateInstance += _LockInPlaceActiveDelegateHook;
                _OnFocusDelegateInstance += _OnFocusDelegateHook;
                _ShowPropertyFrameDelegateInstance += _ShowPropertyFrameDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnControlInfoChangedDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_LockInPlaceActiveDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_OnFocusDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_ShowPropertyFrameDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 10, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            ManagedVTables[0][8] = Thunks[2];
                            ManagedVTables[0][9] = Thunks[3];
                            VTables.Methods[0] = new Delegate[10];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct tagPROPPAGEINFO
    // DEBUG:     {
    // DEBUG:     ULONG cb;
    // DEBUG:     LPOLESTR pszTitle;
    // DEBUG:     SIZE size;
    // DEBUG:     LPOLESTR pszDocString;
    // DEBUG:     LPOLESTR pszHelpFile;
    // DEBUG:     DWORD dwHelpContext;
    // DEBUG:     }
    public unsafe partial class TagPROPPAGEINFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal uint cb;
            internal __IntPtr pszTitle;
            internal global::TagSIZE.__Internal size;
            internal __IntPtr pszDocString;
            internal __IntPtr pszHelpFile;
            internal uint dwHelpContext;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagPROPPAGEINFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagPROPPAGEINFO>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagPROPPAGEINFO>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagPROPPAGEINFO managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagPROPPAGEINFO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagPROPPAGEINFO managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagPROPPAGEINFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagPROPPAGEINFO(native.ToPointer(), skipVTables);
        }

        internal static TagPROPPAGEINFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagPROPPAGEINFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagPROPPAGEINFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagPROPPAGEINFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagPROPPAGEINFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagPROPPAGEINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagPROPPAGEINFO
        public TagPROPPAGEINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagPROPPAGEINFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagPROPPAGEINFO
        public TagPROPPAGEINFO(global::SpoutDX.TagPROPPAGEINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagPROPPAGEINFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagPROPPAGEINFO.__Internal*) __Instance) = *((global::SpoutDX.TagPROPPAGEINFO.__Internal*) _0.__Instance);
        }

        ~TagPROPPAGEINFO()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Cb
        {
            get
            {
                return ((__Internal*)__Instance)->cb;
            }

            set
            {
                ((__Internal*)__Instance)->cb = value;
            }
        }

        public char* PszTitle
        {
            get
            {
                return (char*) ((__Internal*)__Instance)->pszTitle;
            }

            set
            {
                ((__Internal*)__Instance)->pszTitle = (__IntPtr) value;
            }
        }

        public char* PszDocString
        {
            get
            {
                return (char*) ((__Internal*)__Instance)->pszDocString;
            }

            set
            {
                ((__Internal*)__Instance)->pszDocString = (__IntPtr) value;
            }
        }

        public char* PszHelpFile
        {
            get
            {
                return (char*) ((__Internal*)__Instance)->pszHelpFile;
            }

            set
            {
                ((__Internal*)__Instance)->pszHelpFile = (__IntPtr) value;
            }
        }

        public uint DwHelpContext
        {
            get
            {
                return ((__Internal*)__Instance)->dwHelpContext;
            }

            set
            {
                ((__Internal*)__Instance)->dwHelpContext = value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("B196B28D-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     IPropertyPage : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SetPageSite( 
    // DEBUG:             /* [in] */ __RPC__in_opt IPropertyPageSite *pPageSite) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Activate( 
    // DEBUG:             /* [in] */ __RPC__in HWND hWndParent,
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRect,
    // DEBUG:             /* [in] */ BOOL bModal) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Deactivate( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetPageInfo( 
    // DEBUG:             /* [out] */ __RPC__out PROPPAGEINFO *pPageInfo) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SetObjects( 
    // DEBUG:             /* [in] */ ULONG cObjects,
    // DEBUG:             /* [size_is][in] */ __RPC__in_ecount_full(cObjects) IUnknown **ppUnk) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Show( 
    // DEBUG:             /* [in] */ UINT nCmdShow) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Move( 
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRect) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE IsPageDirty( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Apply( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Help( 
    // DEBUG:             /* [in] */ __RPC__in LPCOLESTR pszHelpDir) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator( 
    // DEBUG:             /* [in] */ __RPC__in MSG *pMsg) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPropertyPage : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPropertyPage@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPropertyPage>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPropertyPage>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPropertyPage managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPropertyPage>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPropertyPage managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPropertyPage __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPropertyPageInternal(native.ToPointer(), skipVTables);
        }

        internal static IPropertyPage __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPropertyPage)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPropertyPage __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPropertyPage)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPropertyPage __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPropertyPageInternal(native, skipVTables);
        }

        protected IPropertyPage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPropertyPage
        protected IPropertyPage()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPropertyPage.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPropertyPage");
        }

        ~IPropertyPage()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE SetPageSite( 
        // DEBUG:             /* [in] */ __RPC__in_opt IPropertyPageSite *pPageSite) = 0
        public abstract int SetPageSite(global::SpoutDX.IPropertyPageSite pPageSite);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Deactivate( void) = 0
        public abstract int Deactivate();

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetPageInfo( 
        // DEBUG:             /* [out] */ __RPC__out PROPPAGEINFO *pPageInfo) = 0
        public abstract int GetPageInfo(global::SpoutDX.TagPROPPAGEINFO pPageInfo);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Show( 
        // DEBUG:             /* [in] */ UINT nCmdShow) = 0
        public abstract int Show(uint nCmdShow);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Apply( void) = 0
        public abstract int Apply();

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Help( 
        // DEBUG:             /* [in] */ __RPC__in LPCOLESTR pszHelpDir) = 0
        public abstract int Help(string pszHelpDir);

        public abstract int IsPageDirty
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE SetPageSite( /* [in] */ __RPC__in_opt IPropertyPageSite *pPageSite) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _SetPageSiteDelegateInstance;

        private static int _SetPageSiteDelegateHook(__IntPtr __instance, __IntPtr pPageSite)
        {
            var __target = global::SpoutDX.IPropertyPage.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IPropertyPageSite.__GetOrCreateInstance(pPageSite, false);
            var ___ret = __target.SetPageSite(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Deactivate( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _DeactivateDelegateInstance;

        private static int _DeactivateDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPropertyPage.__GetInstance(__instance);
            var ___ret = __target.Deactivate();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetPageInfo( /* [out] */ __RPC__out PROPPAGEINFO *pPageInfo) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _GetPageInfoDelegateInstance;

        private static int _GetPageInfoDelegateHook(__IntPtr __instance, __IntPtr pPageInfo)
        {
            var __target = global::SpoutDX.IPropertyPage.__GetInstance(__instance);
            var __result0 = global::SpoutDX.TagPROPPAGEINFO.__GetOrCreateInstance(pPageInfo, false);
            var ___ret = __target.GetPageInfo(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Show( /* [in] */ UINT nCmdShow) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _ShowDelegateInstance;

        private static int _ShowDelegateHook(__IntPtr __instance, uint nCmdShow)
        {
            var __target = global::SpoutDX.IPropertyPage.__GetInstance(__instance);
            var ___ret = __target.Show(nCmdShow);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE IsPageDirty( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _IsPageDirtyDelegateInstance;

        private static int _IsPageDirtyDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPropertyPage.__GetInstance(__instance);
            var ___ret = __target.IsPageDirty;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Apply( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _ApplyDelegateInstance;

        private static int _ApplyDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPropertyPage.__GetInstance(__instance);
            var ___ret = __target.Apply();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Help( /* [in] */ __RPC__in LPCOLESTR pszHelpDir) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_wstring _HelpDelegateInstance;

        private static int _HelpDelegateHook(__IntPtr __instance, [MarshalAs(UnmanagedType.LPWStr)] string pszHelpDir)
        {
            var __target = global::SpoutDX.IPropertyPage.__GetInstance(__instance);
            var ___ret = __target.Help(pszHelpDir);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[7];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _SetPageSiteDelegateInstance += _SetPageSiteDelegateHook;
                _DeactivateDelegateInstance += _DeactivateDelegateHook;
                _GetPageInfoDelegateInstance += _GetPageInfoDelegateHook;
                _ShowDelegateInstance += _ShowDelegateHook;
                _IsPageDirtyDelegateInstance += _IsPageDirtyDelegateHook;
                _ApplyDelegateInstance += _ApplyDelegateHook;
                _HelpDelegateInstance += _HelpDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_SetPageSiteDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DeactivateDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetPageInfoDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_ShowDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsPageDirtyDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_ApplyDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_HelpDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 14, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][5] = Thunks[1];
                            ManagedVTables[0][6] = Thunks[2];
                            ManagedVTables[0][8] = Thunks[3];
                            ManagedVTables[0][10] = Thunks[4];
                            ManagedVTables[0][11] = Thunks[5];
                            ManagedVTables[0][12] = Thunks[6];
                            VTables.Methods[0] = new Delegate[14];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("01E44665-24AC-101B-84ED-08002B2EC713")
    // DEBUG:     IPropertyPage2 : public IPropertyPage
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE EditProperty( 
    // DEBUG:             /* [in] */ DISPID dispID) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPropertyPage2 : global::SpoutDX.IPropertyPage, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public new partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPropertyPage2@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPropertyPage2@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        internal static new IPropertyPage2 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPropertyPage2Internal(native.ToPointer(), skipVTables);
        }

        internal static new IPropertyPage2 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPropertyPage2)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static new IPropertyPage2 __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPropertyPage2)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPropertyPage2 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPropertyPage2Internal(native, skipVTables);
        }

        protected IPropertyPage2(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
        }

        // DEBUG: IPropertyPage2
        protected IPropertyPage2()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPropertyPage2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPropertyPage2");
        }

        ~IPropertyPage2()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EditProperty( 
        // DEBUG:             /* [in] */ DISPID dispID) = 0
        public abstract int EditProperty(int dispID);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE SetPageSite( /* [in] */ __RPC__in_opt IPropertyPageSite *pPageSite) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _SetPageSiteDelegateInstance;

        private static int _SetPageSiteDelegateHook(__IntPtr __instance, __IntPtr pPageSite)
        {
            var __target = global::SpoutDX.IPropertyPage2.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IPropertyPageSite.__GetOrCreateInstance(pPageSite, false);
            var ___ret = __target.SetPageSite(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Deactivate( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _DeactivateDelegateInstance;

        private static int _DeactivateDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPropertyPage2.__GetInstance(__instance);
            var ___ret = __target.Deactivate();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetPageInfo( /* [out] */ __RPC__out PROPPAGEINFO *pPageInfo) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _GetPageInfoDelegateInstance;

        private static int _GetPageInfoDelegateHook(__IntPtr __instance, __IntPtr pPageInfo)
        {
            var __target = global::SpoutDX.IPropertyPage2.__GetInstance(__instance);
            var __result0 = global::SpoutDX.TagPROPPAGEINFO.__GetOrCreateInstance(pPageInfo, false);
            var ___ret = __target.GetPageInfo(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Show( /* [in] */ UINT nCmdShow) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _ShowDelegateInstance;

        private static int _ShowDelegateHook(__IntPtr __instance, uint nCmdShow)
        {
            var __target = global::SpoutDX.IPropertyPage2.__GetInstance(__instance);
            var ___ret = __target.Show(nCmdShow);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE IsPageDirty( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _IsPageDirtyDelegateInstance;

        private static int _IsPageDirtyDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPropertyPage2.__GetInstance(__instance);
            var ___ret = __target.IsPageDirty;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Apply( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _ApplyDelegateInstance;

        private static int _ApplyDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPropertyPage2.__GetInstance(__instance);
            var ___ret = __target.Apply();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Help( /* [in] */ __RPC__in LPCOLESTR pszHelpDir) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_wstring _HelpDelegateInstance;

        private static int _HelpDelegateHook(__IntPtr __instance, [MarshalAs(UnmanagedType.LPWStr)] string pszHelpDir)
        {
            var __target = global::SpoutDX.IPropertyPage2.__GetInstance(__instance);
            var ___ret = __target.Help(pszHelpDir);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE EditProperty( /* [in] */ DISPID dispID) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _EditPropertyDelegateInstance;

        private static int _EditPropertyDelegateHook(__IntPtr __instance, int dispID)
        {
            var __target = global::SpoutDX.IPropertyPage2.__GetInstance(__instance);
            var ___ret = __target.EditProperty(dispID);
            return ___ret;
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[8];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _SetPageSiteDelegateInstance += _SetPageSiteDelegateHook;
                _DeactivateDelegateInstance += _DeactivateDelegateHook;
                _GetPageInfoDelegateInstance += _GetPageInfoDelegateHook;
                _ShowDelegateInstance += _ShowDelegateHook;
                _IsPageDirtyDelegateInstance += _IsPageDirtyDelegateHook;
                _ApplyDelegateInstance += _ApplyDelegateHook;
                _HelpDelegateInstance += _HelpDelegateHook;
                _EditPropertyDelegateInstance += _EditPropertyDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_SetPageSiteDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DeactivateDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetPageInfoDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_ShowDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsPageDirtyDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_ApplyDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_HelpDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_EditPropertyDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 15, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][5] = Thunks[1];
                            ManagedVTables[0][6] = Thunks[2];
                            ManagedVTables[0][8] = Thunks[3];
                            ManagedVTables[0][10] = Thunks[4];
                            ManagedVTables[0][11] = Thunks[5];
                            ManagedVTables[0][12] = Thunks[6];
                            ManagedVTables[0][14] = Thunks[7];
                            VTables.Methods[0] = new Delegate[15];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("B196B28C-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     IPropertyPageSite : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnStatusChange( 
    // DEBUG:             /* [in] */ DWORD dwFlags) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetLocaleID( 
    // DEBUG:             /* [out] */ __RPC__out LCID *pLocaleID) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetPageContainer( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IUnknown **ppUnk) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE TranslateAccelerator( 
    // DEBUG:             /* [in] */ __RPC__in MSG *pMsg) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPropertyPageSite : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPropertyPageSite@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPropertyPageSite>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPropertyPageSite>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPropertyPageSite managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPropertyPageSite>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPropertyPageSite managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPropertyPageSite __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPropertyPageSiteInternal(native.ToPointer(), skipVTables);
        }

        internal static IPropertyPageSite __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPropertyPageSite)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPropertyPageSite __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPropertyPageSite)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPropertyPageSite __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPropertyPageSiteInternal(native, skipVTables);
        }

        protected IPropertyPageSite(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPropertyPageSite
        protected IPropertyPageSite()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPropertyPageSite.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPropertyPageSite");
        }

        ~IPropertyPageSite()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnStatusChange( 
        // DEBUG:             /* [in] */ DWORD dwFlags) = 0
        public abstract int OnStatusChange(uint dwFlags);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetLocaleID( 
        // DEBUG:             /* [out] */ __RPC__out LCID *pLocaleID) = 0
        public abstract int GetLocaleID(ref uint pLocaleID);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE OnStatusChange( /* [in] */ DWORD dwFlags) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _OnStatusChangeDelegateInstance;

        private static int _OnStatusChangeDelegateHook(__IntPtr __instance, uint dwFlags)
        {
            var __target = global::SpoutDX.IPropertyPageSite.__GetInstance(__instance);
            var ___ret = __target.OnStatusChange(dwFlags);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetLocaleID( /* [out] */ __RPC__out LCID *pLocaleID) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetLocaleIDDelegateInstance;

        private static int _GetLocaleIDDelegateHook(__IntPtr __instance, uint* pLocaleID)
        {
            var __target = global::SpoutDX.IPropertyPageSite.__GetInstance(__instance);
            var ___ret = __target.GetLocaleID(ref *pLocaleID);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _OnStatusChangeDelegateInstance += _OnStatusChangeDelegateHook;
                _GetLocaleIDDelegateInstance += _GetLocaleIDDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnStatusChangeDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetLocaleIDDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            VTables.Methods[0] = new Delegate[7];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("9BFBBC02-EFF1-101A-84ED-00AA00341D07")
    // DEBUG:     IPropertyNotifySink : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnChanged( 
    // DEBUG:             /* [in] */ DISPID dispID) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnRequestEdit( 
    // DEBUG:             /* [in] */ DISPID dispID) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPropertyNotifySink : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPropertyNotifySink@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPropertyNotifySink>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPropertyNotifySink>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPropertyNotifySink managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPropertyNotifySink>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPropertyNotifySink managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPropertyNotifySink __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPropertyNotifySinkInternal(native.ToPointer(), skipVTables);
        }

        internal static IPropertyNotifySink __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPropertyNotifySink)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPropertyNotifySink __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPropertyNotifySink)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPropertyNotifySink __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPropertyNotifySinkInternal(native, skipVTables);
        }

        protected IPropertyNotifySink(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPropertyNotifySink
        protected IPropertyNotifySink()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPropertyNotifySink.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPropertyNotifySink");
        }

        ~IPropertyNotifySink()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnChanged( 
        // DEBUG:             /* [in] */ DISPID dispID) = 0
        public abstract int OnChanged(int dispID);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnRequestEdit( 
        // DEBUG:             /* [in] */ DISPID dispID) = 0
        public abstract int OnRequestEdit(int dispID);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE OnChanged( /* [in] */ DISPID dispID) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _OnChangedDelegateInstance;

        private static int _OnChangedDelegateHook(__IntPtr __instance, int dispID)
        {
            var __target = global::SpoutDX.IPropertyNotifySink.__GetInstance(__instance);
            var ___ret = __target.OnChanged(dispID);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE OnRequestEdit( /* [in] */ DISPID dispID) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _OnRequestEditDelegateInstance;

        private static int _OnRequestEditDelegateHook(__IntPtr __instance, int dispID)
        {
            var __target = global::SpoutDX.IPropertyNotifySink.__GetInstance(__instance);
            var ___ret = __target.OnRequestEdit(dispID);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _OnChangedDelegateInstance += _OnChangedDelegateHook;
                _OnRequestEditDelegateInstance += _OnRequestEditDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnChangedDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_OnRequestEditDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 5, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            VTables.Methods[0] = new Delegate[5];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct tagCAUUID
    // DEBUG:     {
    // DEBUG:     ULONG cElems;
    // DEBUG:     /* [size_is] */ GUID *pElems;
    // DEBUG:     }
    public unsafe partial class TagCAUUID : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint cElems;
            internal __IntPtr pElems;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagCAUUID@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagCAUUID>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagCAUUID>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagCAUUID managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagCAUUID>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagCAUUID managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagCAUUID __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagCAUUID(native.ToPointer(), skipVTables);
        }

        internal static TagCAUUID __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagCAUUID)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagCAUUID __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagCAUUID(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagCAUUID(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagCAUUID(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagCAUUID
        public TagCAUUID()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagCAUUID.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagCAUUID
        public TagCAUUID(global::SpoutDX.TagCAUUID _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagCAUUID.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagCAUUID.__Internal*) __Instance) = *((global::SpoutDX.TagCAUUID.__Internal*) _0.__Instance);
        }

        ~TagCAUUID()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CElems
        {
            get
            {
                return ((__Internal*)__Instance)->cElems;
            }

            set
            {
                ((__Internal*)__Instance)->cElems = value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("B196B28B-BAB4-101A-B69C-00AA00341D07")
    // DEBUG:     ISpecifyPropertyPages : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetPages( 
    // DEBUG:             /* [out] */ __RPC__out CAUUID *pPages) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class ISpecifyPropertyPages : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0ISpecifyPropertyPages@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ISpecifyPropertyPages>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ISpecifyPropertyPages>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.ISpecifyPropertyPages managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.ISpecifyPropertyPages>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.ISpecifyPropertyPages managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static ISpecifyPropertyPages __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new ISpecifyPropertyPagesInternal(native.ToPointer(), skipVTables);
        }

        internal static ISpecifyPropertyPages __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ISpecifyPropertyPages)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ISpecifyPropertyPages __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (ISpecifyPropertyPages)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static ISpecifyPropertyPages __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ISpecifyPropertyPagesInternal(native, skipVTables);
        }

        protected ISpecifyPropertyPages(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: ISpecifyPropertyPages
        protected ISpecifyPropertyPages()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.ISpecifyPropertyPages.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.ISpecifyPropertyPages");
        }

        ~ISpecifyPropertyPages()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetPages( 
        // DEBUG:             /* [out] */ __RPC__out CAUUID *pPages) = 0
        public abstract int GetPages(global::SpoutDX.TagCAUUID pPages);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE GetPages( /* [out] */ __RPC__out CAUUID *pPages) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _GetPagesDelegateInstance;

        private static int _GetPagesDelegateHook(__IntPtr __instance, __IntPtr pPages)
        {
            var __target = global::SpoutDX.ISpecifyPropertyPages.__GetInstance(__instance);
            var __result0 = global::SpoutDX.TagCAUUID.__GetOrCreateInstance(pPages, false);
            var ___ret = __target.GetPages(__result0);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetPagesDelegateInstance += _GetPagesDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetPagesDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            VTables.Methods[0] = new Delegate[4];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("BD1AE5E0-A6AE-11CE-BD37-504200C10000")
    // DEBUG:     IPersistMemory : public IPersist
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual /* [local] */ HRESULT STDMETHODCALLTYPE Load( 
    // DEBUG:             /* [size_is][in] */ LPVOID pMem,
    // DEBUG:             /* [in] */ ULONG cbSize) = 0;
    // DEBUG:         
    // DEBUG:         virtual /* [local] */ HRESULT STDMETHODCALLTYPE Save( 
    // DEBUG:             /* [size_is][out] */ LPVOID pMem,
    // DEBUG:             /* [in] */ BOOL fClearDirty,
    // DEBUG:             /* [in] */ ULONG cbSize) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetSizeMax( 
    // DEBUG:             /* [out] */ __RPC__out ULONG *pCbSize) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPersistMemory : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPersistMemory@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPersistMemory>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPersistMemory>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPersistMemory managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPersistMemory>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPersistMemory managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPersistMemory __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPersistMemoryInternal(native.ToPointer(), skipVTables);
        }

        internal static IPersistMemory __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPersistMemory)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPersistMemory __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPersistMemory)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPersistMemory __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPersistMemoryInternal(native, skipVTables);
        }

        protected IPersistMemory(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPersistMemory
        protected IPersistMemory()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPersistMemory.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPersistMemory");
        }

        ~IPersistMemory()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Load( 
        // DEBUG:             /* [size_is][in] */ LPVOID pMem,
        // DEBUG:             /* [in] */ ULONG cbSize) = 0
        public abstract int Load(__IntPtr pMem, uint cbSize);

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Save( 
        // DEBUG:             /* [size_is][out] */ LPVOID pMem,
        // DEBUG:             /* [in] */ BOOL fClearDirty,
        // DEBUG:             /* [in] */ ULONG cbSize) = 0
        public abstract int Save(__IntPtr pMem, int fClearDirty, uint cbSize);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetSizeMax( 
        // DEBUG:             /* [out] */ __RPC__out ULONG *pCbSize) = 0
        public abstract int GetSizeMax(ref uint pCbSize);

        public abstract int IsDirty
        {
            get;
        }

        public abstract int InitNew
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE IsDirty( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _IsDirtyDelegateInstance;

        private static int _IsDirtyDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPersistMemory.__GetInstance(__instance);
            var ___ret = __target.IsDirty;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Load( /* [size_is][in] */ LPVOID pMem, /* [in] */ ULONG cbSize) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_uint _LoadDelegateInstance;

        private static int _LoadDelegateHook(__IntPtr __instance, __IntPtr pMem, uint cbSize)
        {
            var __target = global::SpoutDX.IPersistMemory.__GetInstance(__instance);
            var ___ret = __target.Load(pMem, cbSize);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Save( /* [size_is][out] */ LPVOID pMem, /* [in] */ BOOL fClearDirty, /* [in] */ ULONG cbSize) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_int_uint _SaveDelegateInstance;

        private static int _SaveDelegateHook(__IntPtr __instance, __IntPtr pMem, int fClearDirty, uint cbSize)
        {
            var __target = global::SpoutDX.IPersistMemory.__GetInstance(__instance);
            var ___ret = __target.Save(pMem, fClearDirty, cbSize);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetSizeMax( /* [out] */ __RPC__out ULONG *pCbSize) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetSizeMaxDelegateInstance;

        private static int _GetSizeMaxDelegateHook(__IntPtr __instance, uint* pCbSize)
        {
            var __target = global::SpoutDX.IPersistMemory.__GetInstance(__instance);
            var ___ret = __target.GetSizeMax(ref *pCbSize);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE InitNew( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _InitNewDelegateInstance;

        private static int _InitNewDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPersistMemory.__GetInstance(__instance);
            var ___ret = __target.InitNew;
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[5];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _IsDirtyDelegateInstance += _IsDirtyDelegateHook;
                _LoadDelegateInstance += _LoadDelegateHook;
                _SaveDelegateInstance += _SaveDelegateHook;
                _GetSizeMaxDelegateInstance += _GetSizeMaxDelegateHook;
                _InitNewDelegateInstance += _InitNewDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_IsDirtyDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_LoadDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_SaveDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetSizeMaxDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_InitNewDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 9, 0);
                            ManagedVTables[0][4] = Thunks[0];
                            ManagedVTables[0][5] = Thunks[1];
                            ManagedVTables[0][6] = Thunks[2];
                            ManagedVTables[0][7] = Thunks[3];
                            ManagedVTables[0][8] = Thunks[4];
                            VTables.Methods[0] = new Delegate[9];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("7FD52380-4E07-101B-AE2D-08002B2EC713")
    // DEBUG:     IPersistStreamInit : public IPersist
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Load( 
    // DEBUG:             /* [in] */ __RPC__in_opt LPSTREAM pStm) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Save( 
    // DEBUG:             /* [in] */ __RPC__in_opt LPSTREAM pStm,
    // DEBUG:             /* [in] */ BOOL fClearDirty) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetSizeMax( 
    // DEBUG:             /* [out] */ __RPC__out ULARGE_INTEGER *pCbSize) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPersistStreamInit : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPersistStreamInit@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPersistStreamInit>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPersistStreamInit>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPersistStreamInit managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPersistStreamInit>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPersistStreamInit managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPersistStreamInit __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPersistStreamInitInternal(native.ToPointer(), skipVTables);
        }

        internal static IPersistStreamInit __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPersistStreamInit)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPersistStreamInit __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPersistStreamInit)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPersistStreamInit __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPersistStreamInitInternal(native, skipVTables);
        }

        protected IPersistStreamInit(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPersistStreamInit
        protected IPersistStreamInit()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPersistStreamInit.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPersistStreamInit");
        }

        ~IPersistStreamInit()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract int IsDirty
        {
            get;
        }

        public abstract int InitNew
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE IsDirty( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _IsDirtyDelegateInstance;

        private static int _IsDirtyDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPersistStreamInit.__GetInstance(__instance);
            var ___ret = __target.IsDirty;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE InitNew( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _InitNewDelegateInstance;

        private static int _InitNewDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPersistStreamInit.__GetInstance(__instance);
            var ___ret = __target.InitNew;
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _IsDirtyDelegateInstance += _IsDirtyDelegateHook;
                _InitNewDelegateInstance += _InitNewDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_IsDirtyDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_InitNewDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 9, 0);
                            ManagedVTables[0][4] = Thunks[0];
                            ManagedVTables[0][8] = Thunks[1];
                            VTables.Methods[0] = new Delegate[9];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("37D84F60-42CB-11CE-8135-00AA004BB851")
    // DEBUG:     IPersistPropertyBag : public IPersist
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Load( 
    // DEBUG:             /* [in] */ __RPC__in_opt IPropertyBag *pPropBag,
    // DEBUG:             /* [unique][in] */ __RPC__in_opt IErrorLog *pErrorLog) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Save( 
    // DEBUG:             /* [in] */ __RPC__in_opt IPropertyBag *pPropBag,
    // DEBUG:             /* [in] */ BOOL fClearDirty,
    // DEBUG:             /* [in] */ BOOL fSaveAllProperties) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPersistPropertyBag : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPersistPropertyBag@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPersistPropertyBag>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPersistPropertyBag>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPersistPropertyBag managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPersistPropertyBag>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPersistPropertyBag managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPersistPropertyBag __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPersistPropertyBagInternal(native.ToPointer(), skipVTables);
        }

        internal static IPersistPropertyBag __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPersistPropertyBag)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPersistPropertyBag __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPersistPropertyBag)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPersistPropertyBag __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPersistPropertyBagInternal(native, skipVTables);
        }

        protected IPersistPropertyBag(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPersistPropertyBag
        protected IPersistPropertyBag()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPersistPropertyBag.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPersistPropertyBag");
        }

        ~IPersistPropertyBag()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract int InitNew
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE InitNew( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _InitNewDelegateInstance;

        private static int _InitNewDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPersistPropertyBag.__GetInstance(__instance);
            var ___ret = __target.InitNew;
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _InitNewDelegateInstance += _InitNewDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_InitNewDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7, 0);
                            ManagedVTables[0][4] = Thunks[0];
                            VTables.Methods[0] = new Delegate[7];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("7BF80980-BF32-101A-8BBB-00AA00300CAB")
    // DEBUG:     IPicture : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Handle( 
    // DEBUG:             /* [out] */ __RPC__out OLE_HANDLE *pHandle) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_hPal( 
    // DEBUG:             /* [out] */ __RPC__out OLE_HANDLE *phPal) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Type( 
    // DEBUG:             /* [out] */ __RPC__out SHORT *pType) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Width( 
    // DEBUG:             /* [out] */ __RPC__out OLE_XSIZE_HIMETRIC *pWidth) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Height( 
    // DEBUG:             /* [out] */ __RPC__out OLE_YSIZE_HIMETRIC *pHeight) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Render( 
    // DEBUG:             /* [in] */ __RPC__in HDC hDC,
    // DEBUG:             /* [in] */ LONG x,
    // DEBUG:             /* [in] */ LONG y,
    // DEBUG:             /* [in] */ LONG cx,
    // DEBUG:             /* [in] */ LONG cy,
    // DEBUG:             /* [in] */ OLE_XPOS_HIMETRIC xSrc,
    // DEBUG:             /* [in] */ OLE_YPOS_HIMETRIC ySrc,
    // DEBUG:             /* [in] */ OLE_XSIZE_HIMETRIC cxSrc,
    // DEBUG:             /* [in] */ OLE_YSIZE_HIMETRIC cySrc,
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRcWBounds) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE set_hPal( 
    // DEBUG:             /* [in] */ OLE_HANDLE hPal) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_CurDC( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt HDC *phDC) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SelectPicture( 
    // DEBUG:             /* [in] */ __RPC__in HDC hDCIn,
    // DEBUG:             /* [out] */ __RPC__deref_out_opt HDC *phDCOut,
    // DEBUG:             /* [out] */ __RPC__out OLE_HANDLE *phBmpOut) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_KeepOriginalFormat( 
    // DEBUG:             /* [out] */ __RPC__out BOOL *pKeep) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE put_KeepOriginalFormat( 
    // DEBUG:             /* [in] */ BOOL keep) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE PictureChanged( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SaveAsFile( 
    // DEBUG:             /* [in] */ __RPC__in_opt LPSTREAM pStream,
    // DEBUG:             /* [in] */ BOOL fSaveMemCopy,
    // DEBUG:             /* [out] */ __RPC__out LONG *pCbSize) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Attributes( 
    // DEBUG:             /* [out] */ __RPC__out DWORD *pDwAttr) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPicture : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPicture@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPicture>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPicture>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPicture managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPicture>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPicture managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPicture __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPictureInternal(native.ToPointer(), skipVTables);
        }

        internal static IPicture __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPicture)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPicture __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPicture)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPicture __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPictureInternal(native, skipVTables);
        }

        protected IPicture(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPicture
        protected IPicture()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPicture.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPicture");
        }

        ~IPicture()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Handle( 
        // DEBUG:             /* [out] */ __RPC__out OLE_HANDLE *pHandle) = 0
        public abstract int GetHandle(ref uint pHandle);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_hPal( 
        // DEBUG:             /* [out] */ __RPC__out OLE_HANDLE *phPal) = 0
        public abstract int GetHPal(ref uint phPal);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Type( 
        // DEBUG:             /* [out] */ __RPC__out SHORT *pType) = 0
        public abstract int GetType(ref short pType);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Width( 
        // DEBUG:             /* [out] */ __RPC__out OLE_XSIZE_HIMETRIC *pWidth) = 0
        public abstract int GetWidth(ref int pWidth);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Height( 
        // DEBUG:             /* [out] */ __RPC__out OLE_YSIZE_HIMETRIC *pHeight) = 0
        public abstract int GetHeight(ref int pHeight);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE set_hPal( 
        // DEBUG:             /* [in] */ OLE_HANDLE hPal) = 0
        public abstract int SetHPal(uint hPal);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_KeepOriginalFormat( 
        // DEBUG:             /* [out] */ __RPC__out BOOL *pKeep) = 0
        public abstract int GetKeepOriginalFormat(ref int pKeep);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE put_KeepOriginalFormat( 
        // DEBUG:             /* [in] */ BOOL keep) = 0
        public abstract int PutKeepOriginalFormat(int keep);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Attributes( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pDwAttr) = 0
        public abstract int GetAttributes(ref uint pDwAttr);

        public abstract int PictureChanged
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE get_Handle( /* [out] */ __RPC__out OLE_HANDLE *pHandle) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetHandleDelegateInstance;

        private static int _GetHandleDelegateHook(__IntPtr __instance, uint* pHandle)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.GetHandle(ref *pHandle);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_hPal( /* [out] */ __RPC__out OLE_HANDLE *phPal) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetHPalDelegateInstance;

        private static int _GetHPalDelegateHook(__IntPtr __instance, uint* phPal)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.GetHPal(ref *phPal);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_Type( /* [out] */ __RPC__out SHORT *pType) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_shortPtr _GetTypeDelegateInstance;

        private static int _GetTypeDelegateHook(__IntPtr __instance, short* pType)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.GetType(ref *pType);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_Width( /* [out] */ __RPC__out OLE_XSIZE_HIMETRIC *pWidth) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_intPtr _GetWidthDelegateInstance;

        private static int _GetWidthDelegateHook(__IntPtr __instance, int* pWidth)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.GetWidth(ref *pWidth);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_Height( /* [out] */ __RPC__out OLE_YSIZE_HIMETRIC *pHeight) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_intPtr _GetHeightDelegateInstance;

        private static int _GetHeightDelegateHook(__IntPtr __instance, int* pHeight)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.GetHeight(ref *pHeight);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE set_hPal( /* [in] */ OLE_HANDLE hPal) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _SetHPalDelegateInstance;

        private static int _SetHPalDelegateHook(__IntPtr __instance, uint hPal)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.SetHPal(hPal);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_KeepOriginalFormat( /* [out] */ __RPC__out BOOL *pKeep) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_intPtr _GetKeepOriginalFormatDelegateInstance;

        private static int _GetKeepOriginalFormatDelegateHook(__IntPtr __instance, int* pKeep)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.GetKeepOriginalFormat(ref *pKeep);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE put_KeepOriginalFormat( /* [in] */ BOOL keep) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _PutKeepOriginalFormatDelegateInstance;

        private static int _PutKeepOriginalFormatDelegateHook(__IntPtr __instance, int keep)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.PutKeepOriginalFormat(keep);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE PictureChanged( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _PictureChangedDelegateInstance;

        private static int _PictureChangedDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.PictureChanged;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_Attributes( /* [out] */ __RPC__out DWORD *pDwAttr) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetAttributesDelegateInstance;

        private static int _GetAttributesDelegateHook(__IntPtr __instance, uint* pDwAttr)
        {
            var __target = global::SpoutDX.IPicture.__GetInstance(__instance);
            var ___ret = __target.GetAttributes(ref *pDwAttr);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[10];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetHandleDelegateInstance += _GetHandleDelegateHook;
                _GetHPalDelegateInstance += _GetHPalDelegateHook;
                _GetTypeDelegateInstance += _GetTypeDelegateHook;
                _GetWidthDelegateInstance += _GetWidthDelegateHook;
                _GetHeightDelegateInstance += _GetHeightDelegateHook;
                _SetHPalDelegateInstance += _SetHPalDelegateHook;
                _GetKeepOriginalFormatDelegateInstance += _GetKeepOriginalFormatDelegateHook;
                _PutKeepOriginalFormatDelegateInstance += _PutKeepOriginalFormatDelegateHook;
                _PictureChangedDelegateInstance += _PictureChangedDelegateHook;
                _GetAttributesDelegateInstance += _GetAttributesDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetHandleDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetHPalDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetTypeDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetWidthDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetHeightDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetHPalDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetKeepOriginalFormatDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_PutKeepOriginalFormatDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_PictureChangedDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_GetAttributesDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 17, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            ManagedVTables[0][5] = Thunks[2];
                            ManagedVTables[0][6] = Thunks[3];
                            ManagedVTables[0][7] = Thunks[4];
                            ManagedVTables[0][9] = Thunks[5];
                            ManagedVTables[0][12] = Thunks[6];
                            ManagedVTables[0][13] = Thunks[7];
                            ManagedVTables[0][14] = Thunks[8];
                            ManagedVTables[0][16] = Thunks[9];
                            VTables.Methods[0] = new Delegate[17];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("F5185DD8-2012-4b0b-AAD9-F052C6BD482B")
    // DEBUG:     IPicture2 : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Handle( 
    // DEBUG:             /* [out] */ __RPC__out HHANDLE *pHandle) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_hPal( 
    // DEBUG:             /* [out] */ __RPC__out HHANDLE *phPal) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Type( 
    // DEBUG:             /* [out] */ __RPC__out SHORT *pType) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Width( 
    // DEBUG:             /* [out] */ __RPC__out OLE_XSIZE_HIMETRIC *pWidth) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Height( 
    // DEBUG:             /* [out] */ __RPC__out OLE_YSIZE_HIMETRIC *pHeight) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Render( 
    // DEBUG:             /* [in] */ __RPC__in HDC hDC,
    // DEBUG:             /* [in] */ LONG x,
    // DEBUG:             /* [in] */ LONG y,
    // DEBUG:             /* [in] */ LONG cx,
    // DEBUG:             /* [in] */ LONG cy,
    // DEBUG:             /* [in] */ OLE_XPOS_HIMETRIC xSrc,
    // DEBUG:             /* [in] */ OLE_YPOS_HIMETRIC ySrc,
    // DEBUG:             /* [in] */ OLE_XSIZE_HIMETRIC cxSrc,
    // DEBUG:             /* [in] */ OLE_YSIZE_HIMETRIC cySrc,
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRcWBounds) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE set_hPal( 
    // DEBUG:             /* [in] */ HHANDLE hPal) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_CurDC( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt HDC *phDC) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SelectPicture( 
    // DEBUG:             /* [in] */ __RPC__in HDC hDCIn,
    // DEBUG:             /* [out] */ __RPC__deref_out_opt HDC *phDCOut,
    // DEBUG:             /* [out] */ __RPC__out HHANDLE *phBmpOut) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_KeepOriginalFormat( 
    // DEBUG:             /* [out] */ __RPC__out BOOL *pKeep) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE put_KeepOriginalFormat( 
    // DEBUG:             /* [in] */ BOOL keep) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE PictureChanged( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SaveAsFile( 
    // DEBUG:             /* [in] */ __RPC__in_opt LPSTREAM pStream,
    // DEBUG:             /* [in] */ BOOL fSaveMemCopy,
    // DEBUG:             /* [out] */ __RPC__out LONG *pCbSize) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE get_Attributes( 
    // DEBUG:             /* [out] */ __RPC__out DWORD *pDwAttr) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPicture2 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPicture2@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPicture2>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPicture2>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPicture2 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPicture2>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPicture2 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPicture2 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPicture2Internal(native.ToPointer(), skipVTables);
        }

        internal static IPicture2 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPicture2)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPicture2 __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPicture2)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPicture2 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPicture2Internal(native, skipVTables);
        }

        protected IPicture2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPicture2
        protected IPicture2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPicture2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPicture2");
        }

        ~IPicture2()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Handle( 
        // DEBUG:             /* [out] */ __RPC__out HHANDLE *pHandle) = 0
        public abstract int GetHandle(ref ulong pHandle);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_hPal( 
        // DEBUG:             /* [out] */ __RPC__out HHANDLE *phPal) = 0
        public abstract int GetHPal(ref ulong phPal);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Type( 
        // DEBUG:             /* [out] */ __RPC__out SHORT *pType) = 0
        public abstract int GetType(ref short pType);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Width( 
        // DEBUG:             /* [out] */ __RPC__out OLE_XSIZE_HIMETRIC *pWidth) = 0
        public abstract int GetWidth(ref int pWidth);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Height( 
        // DEBUG:             /* [out] */ __RPC__out OLE_YSIZE_HIMETRIC *pHeight) = 0
        public abstract int GetHeight(ref int pHeight);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE set_hPal( 
        // DEBUG:             /* [in] */ HHANDLE hPal) = 0
        public abstract int SetHPal(ulong hPal);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_KeepOriginalFormat( 
        // DEBUG:             /* [out] */ __RPC__out BOOL *pKeep) = 0
        public abstract int GetKeepOriginalFormat(ref int pKeep);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE put_KeepOriginalFormat( 
        // DEBUG:             /* [in] */ BOOL keep) = 0
        public abstract int PutKeepOriginalFormat(int keep);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Attributes( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pDwAttr) = 0
        public abstract int GetAttributes(ref uint pDwAttr);

        public abstract int PictureChanged
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE get_Handle( /* [out] */ __RPC__out HHANDLE *pHandle) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_ulongPtr _GetHandleDelegateInstance;

        private static int _GetHandleDelegateHook(__IntPtr __instance, ulong* pHandle)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.GetHandle(ref *pHandle);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_hPal( /* [out] */ __RPC__out HHANDLE *phPal) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_ulongPtr _GetHPalDelegateInstance;

        private static int _GetHPalDelegateHook(__IntPtr __instance, ulong* phPal)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.GetHPal(ref *phPal);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_Type( /* [out] */ __RPC__out SHORT *pType) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_shortPtr _GetTypeDelegateInstance;

        private static int _GetTypeDelegateHook(__IntPtr __instance, short* pType)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.GetType(ref *pType);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_Width( /* [out] */ __RPC__out OLE_XSIZE_HIMETRIC *pWidth) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_intPtr _GetWidthDelegateInstance;

        private static int _GetWidthDelegateHook(__IntPtr __instance, int* pWidth)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.GetWidth(ref *pWidth);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_Height( /* [out] */ __RPC__out OLE_YSIZE_HIMETRIC *pHeight) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_intPtr _GetHeightDelegateInstance;

        private static int _GetHeightDelegateHook(__IntPtr __instance, int* pHeight)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.GetHeight(ref *pHeight);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE set_hPal( /* [in] */ HHANDLE hPal) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_ulong _SetHPalDelegateInstance;

        private static int _SetHPalDelegateHook(__IntPtr __instance, ulong hPal)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.SetHPal(hPal);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_KeepOriginalFormat( /* [out] */ __RPC__out BOOL *pKeep) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_intPtr _GetKeepOriginalFormatDelegateInstance;

        private static int _GetKeepOriginalFormatDelegateHook(__IntPtr __instance, int* pKeep)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.GetKeepOriginalFormat(ref *pKeep);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE put_KeepOriginalFormat( /* [in] */ BOOL keep) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _PutKeepOriginalFormatDelegateInstance;

        private static int _PutKeepOriginalFormatDelegateHook(__IntPtr __instance, int keep)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.PutKeepOriginalFormat(keep);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE PictureChanged( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _PictureChangedDelegateInstance;

        private static int _PictureChangedDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.PictureChanged;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE get_Attributes( /* [out] */ __RPC__out DWORD *pDwAttr) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetAttributesDelegateInstance;

        private static int _GetAttributesDelegateHook(__IntPtr __instance, uint* pDwAttr)
        {
            var __target = global::SpoutDX.IPicture2.__GetInstance(__instance);
            var ___ret = __target.GetAttributes(ref *pDwAttr);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[10];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetHandleDelegateInstance += _GetHandleDelegateHook;
                _GetHPalDelegateInstance += _GetHPalDelegateHook;
                _GetTypeDelegateInstance += _GetTypeDelegateHook;
                _GetWidthDelegateInstance += _GetWidthDelegateHook;
                _GetHeightDelegateInstance += _GetHeightDelegateHook;
                _SetHPalDelegateInstance += _SetHPalDelegateHook;
                _GetKeepOriginalFormatDelegateInstance += _GetKeepOriginalFormatDelegateHook;
                _PutKeepOriginalFormatDelegateInstance += _PutKeepOriginalFormatDelegateHook;
                _PictureChangedDelegateInstance += _PictureChangedDelegateHook;
                _GetAttributesDelegateInstance += _GetAttributesDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetHandleDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetHPalDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetTypeDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetWidthDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetHeightDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetHPalDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetKeepOriginalFormatDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_PutKeepOriginalFormatDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_PictureChangedDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_GetAttributesDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 17, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            ManagedVTables[0][5] = Thunks[2];
                            ManagedVTables[0][6] = Thunks[3];
                            ManagedVTables[0][7] = Thunks[4];
                            ManagedVTables[0][9] = Thunks[5];
                            ManagedVTables[0][12] = Thunks[6];
                            ManagedVTables[0][13] = Thunks[7];
                            ManagedVTables[0][14] = Thunks[8];
                            ManagedVTables[0][16] = Thunks[9];
                            VTables.Methods[0] = new Delegate[17];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("1C2056CC-5EF4-101B-8BC8-00AA003E3B29")
    // DEBUG:     IOleInPlaceObjectWindowless : public IOleInPlaceObject
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnWindowMessage( 
    // DEBUG:             /* [in] */ UINT msg,
    // DEBUG:             /* [in] */ WPARAM wParam,
    // DEBUG:             /* [in] */ LPARAM lParam,
    // DEBUG:             /* [out] */ __RPC__out LRESULT *plResult) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetDropTarget( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IDropTarget **ppDropTarget) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IOleInPlaceObjectWindowless : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleInPlaceObjectWindowless@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleInPlaceObjectWindowless>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleInPlaceObjectWindowless>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IOleInPlaceObjectWindowless managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IOleInPlaceObjectWindowless>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IOleInPlaceObjectWindowless managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IOleInPlaceObjectWindowless __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IOleInPlaceObjectWindowlessInternal(native.ToPointer(), skipVTables);
        }

        internal static IOleInPlaceObjectWindowless __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IOleInPlaceObjectWindowless)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IOleInPlaceObjectWindowless __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IOleInPlaceObjectWindowless)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IOleInPlaceObjectWindowless __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IOleInPlaceObjectWindowlessInternal(native, skipVTables);
        }

        protected IOleInPlaceObjectWindowless(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IOleInPlaceObjectWindowless
        protected IOleInPlaceObjectWindowless()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IOleInPlaceObjectWindowless.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IOleInPlaceObjectWindowless");
        }

        ~IOleInPlaceObjectWindowless()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnWindowMessage( 
        // DEBUG:             /* [in] */ UINT msg,
        // DEBUG:             /* [in] */ WPARAM wParam,
        // DEBUG:             /* [in] */ LPARAM lParam,
        // DEBUG:             /* [out] */ __RPC__out LRESULT *plResult) = 0
        public abstract int OnWindowMessage(uint msg, ulong wParam, long lParam, ref long plResult);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE OnWindowMessage( /* [in] */ UINT msg, /* [in] */ WPARAM wParam, /* [in] */ LPARAM lParam, /* [out] */ __RPC__out LRESULT *plResult) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint_ulong_long_longPtr _OnWindowMessageDelegateInstance;

        private static int _OnWindowMessageDelegateHook(__IntPtr __instance, uint msg, ulong wParam, long lParam, long* plResult)
        {
            var __target = global::SpoutDX.IOleInPlaceObjectWindowless.__GetInstance(__instance);
            var ___ret = __target.OnWindowMessage(msg, wParam, lParam, ref *plResult);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _OnWindowMessageDelegateInstance += _OnWindowMessageDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnWindowMessageDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 11, 0);
                            ManagedVTables[0][9] = Thunks[0];
                            VTables.Methods[0] = new Delegate[11];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("9C2CAD80-3424-11CF-B670-00AA004CD6D8")
    // DEBUG:     IOleInPlaceSiteEx : public IOleInPlaceSite
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnInPlaceActivateEx( 
    // DEBUG:             /* [out] */ __RPC__out BOOL *pfNoRedraw,
    // DEBUG:             /* [in] */ DWORD dwFlags) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnInPlaceDeactivateEx( 
    // DEBUG:             /* [in] */ BOOL fNoRedraw) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE RequestUIActivate( void) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IOleInPlaceSiteEx : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleInPlaceSiteEx@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleInPlaceSiteEx>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleInPlaceSiteEx>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IOleInPlaceSiteEx managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IOleInPlaceSiteEx>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IOleInPlaceSiteEx managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IOleInPlaceSiteEx __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IOleInPlaceSiteExInternal(native.ToPointer(), skipVTables);
        }

        internal static IOleInPlaceSiteEx __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IOleInPlaceSiteEx)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IOleInPlaceSiteEx __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IOleInPlaceSiteEx)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IOleInPlaceSiteEx __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IOleInPlaceSiteExInternal(native, skipVTables);
        }

        protected IOleInPlaceSiteEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IOleInPlaceSiteEx
        protected IOleInPlaceSiteEx()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IOleInPlaceSiteEx.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IOleInPlaceSiteEx");
        }

        ~IOleInPlaceSiteEx()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceActivateEx( 
        // DEBUG:             /* [out] */ __RPC__out BOOL *pfNoRedraw,
        // DEBUG:             /* [in] */ DWORD dwFlags) = 0
        public abstract int OnInPlaceActivateEx(ref int pfNoRedraw, uint dwFlags);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceDeactivateEx( 
        // DEBUG:             /* [in] */ BOOL fNoRedraw) = 0
        public abstract int OnInPlaceDeactivateEx(int fNoRedraw);

        public abstract int RequestUIActivate
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE OnInPlaceActivateEx( /* [out] */ __RPC__out BOOL *pfNoRedraw, /* [in] */ DWORD dwFlags) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_intPtr_uint _OnInPlaceActivateExDelegateInstance;

        private static int _OnInPlaceActivateExDelegateHook(__IntPtr __instance, int* pfNoRedraw, uint dwFlags)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteEx.__GetInstance(__instance);
            var ___ret = __target.OnInPlaceActivateEx(ref *pfNoRedraw, dwFlags);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE OnInPlaceDeactivateEx( /* [in] */ BOOL fNoRedraw) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _OnInPlaceDeactivateExDelegateInstance;

        private static int _OnInPlaceDeactivateExDelegateHook(__IntPtr __instance, int fNoRedraw)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteEx.__GetInstance(__instance);
            var ___ret = __target.OnInPlaceDeactivateEx(fNoRedraw);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE RequestUIActivate( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _RequestUIActivateDelegateInstance;

        private static int _RequestUIActivateDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteEx.__GetInstance(__instance);
            var ___ret = __target.RequestUIActivate;
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[3];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _OnInPlaceActivateExDelegateInstance += _OnInPlaceActivateExDelegateHook;
                _OnInPlaceDeactivateExDelegateInstance += _OnInPlaceDeactivateExDelegateHook;
                _RequestUIActivateDelegateInstance += _RequestUIActivateDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnInPlaceActivateExDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_OnInPlaceDeactivateExDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_RequestUIActivateDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 18, 0);
                            ManagedVTables[0][15] = Thunks[0];
                            ManagedVTables[0][16] = Thunks[1];
                            ManagedVTables[0][17] = Thunks[2];
                            VTables.Methods[0] = new Delegate[18];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("922EADA0-3424-11CF-B670-00AA004CD6D8")
    // DEBUG:     IOleInPlaceSiteWindowless : public IOleInPlaceSiteEx
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CanWindowlessActivate( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetCapture( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SetCapture( 
    // DEBUG:             /* [in] */ BOOL fCapture) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetFocus( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SetFocus( 
    // DEBUG:             /* [in] */ BOOL fFocus) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetDC( 
    // DEBUG:             /* [unique][in] */ __RPC__in_opt LPCRECT pRect,
    // DEBUG:             /* [in] */ DWORD grfFlags,
    // DEBUG:             /* [out] */ __RPC__deref_out_opt HDC *phDC) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE ReleaseDC( 
    // DEBUG:             /* [in] */ __RPC__in HDC hDC) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE InvalidateRect( 
    // DEBUG:             /* [unique][in] */ __RPC__in_opt LPCRECT pRect,
    // DEBUG:             /* [in] */ BOOL fErase) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE InvalidateRgn( 
    // DEBUG:             /* [in] */ __RPC__in HRGN hRGN,
    // DEBUG:             /* [in] */ BOOL fErase) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE ScrollRect( 
    // DEBUG:             /* [in] */ INT dx,
    // DEBUG:             /* [in] */ INT dy,
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRectScroll,
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRectClip) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE AdjustRect( 
    // DEBUG:             /* [out][in] */ __RPC__inout LPRECT prc) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnDefWindowMessage( 
    // DEBUG:             /* [annotation][in] */ 
    // DEBUG:             _In_  UINT msg,
    // DEBUG:             /* [annotation][in] */ 
    // DEBUG:             _In_  WPARAM wParam,
    // DEBUG:             /* [annotation][in] */ 
    // DEBUG:             _In_  LPARAM lParam,
    // DEBUG:             /* [out] */ __RPC__out LRESULT *plResult) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IOleInPlaceSiteWindowless : global::SpoutDX.IOleInPlaceSiteEx, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public new partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleInPlaceSiteWindowless@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleInPlaceSiteWindowless@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        internal static new IOleInPlaceSiteWindowless __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IOleInPlaceSiteWindowlessInternal(native.ToPointer(), skipVTables);
        }

        internal static new IOleInPlaceSiteWindowless __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IOleInPlaceSiteWindowless)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static new IOleInPlaceSiteWindowless __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IOleInPlaceSiteWindowless)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IOleInPlaceSiteWindowless __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IOleInPlaceSiteWindowlessInternal(native, skipVTables);
        }

        protected IOleInPlaceSiteWindowless(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
        }

        // DEBUG: IOleInPlaceSiteWindowless
        protected IOleInPlaceSiteWindowless()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IOleInPlaceSiteWindowless.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IOleInPlaceSiteWindowless");
        }

        ~IOleInPlaceSiteWindowless()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CanWindowlessActivate( void) = 0
        public abstract int CanWindowlessActivate();

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE SetCapture( 
        // DEBUG:             /* [in] */ BOOL fCapture) = 0
        public abstract int SetCapture(int fCapture);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE SetFocus( 
        // DEBUG:             /* [in] */ BOOL fFocus) = 0
        public abstract int SetFocus(int fFocus);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnDefWindowMessage( 
        // DEBUG:             /* [annotation][in] */ 
        // DEBUG:             _In_  UINT msg,
        // DEBUG:             /* [annotation][in] */ 
        // DEBUG:             _In_  WPARAM wParam,
        // DEBUG:             /* [annotation][in] */ 
        // DEBUG:             _In_  LPARAM lParam,
        // DEBUG:             /* [out] */ __RPC__out LRESULT *plResult) = 0
        public abstract int OnDefWindowMessage(uint msg, ulong wParam, long lParam, ref long plResult);

        public abstract int Capture
        {
            get;
        }

        public abstract int Focus
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE OnInPlaceActivateEx( /* [out] */ __RPC__out BOOL *pfNoRedraw, /* [in] */ DWORD dwFlags) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_intPtr_uint _OnInPlaceActivateExDelegateInstance;

        private static int _OnInPlaceActivateExDelegateHook(__IntPtr __instance, int* pfNoRedraw, uint dwFlags)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteWindowless.__GetInstance(__instance);
            var ___ret = __target.OnInPlaceActivateEx(ref *pfNoRedraw, dwFlags);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE OnInPlaceDeactivateEx( /* [in] */ BOOL fNoRedraw) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _OnInPlaceDeactivateExDelegateInstance;

        private static int _OnInPlaceDeactivateExDelegateHook(__IntPtr __instance, int fNoRedraw)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteWindowless.__GetInstance(__instance);
            var ___ret = __target.OnInPlaceDeactivateEx(fNoRedraw);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE RequestUIActivate( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _RequestUIActivateDelegateInstance;

        private static int _RequestUIActivateDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteWindowless.__GetInstance(__instance);
            var ___ret = __target.RequestUIActivate;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE CanWindowlessActivate( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _CanWindowlessActivateDelegateInstance;

        private static int _CanWindowlessActivateDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteWindowless.__GetInstance(__instance);
            var ___ret = __target.CanWindowlessActivate();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetCapture( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _GetCaptureDelegateInstance;

        private static int _GetCaptureDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteWindowless.__GetInstance(__instance);
            var ___ret = __target.Capture;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE SetCapture( /* [in] */ BOOL fCapture) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _SetCaptureDelegateInstance;

        private static int _SetCaptureDelegateHook(__IntPtr __instance, int fCapture)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteWindowless.__GetInstance(__instance);
            var ___ret = __target.SetCapture(fCapture);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetFocus( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _GetFocusDelegateInstance;

        private static int _GetFocusDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteWindowless.__GetInstance(__instance);
            var ___ret = __target.Focus;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE SetFocus( /* [in] */ BOOL fFocus) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _SetFocusDelegateInstance;

        private static int _SetFocusDelegateHook(__IntPtr __instance, int fFocus)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteWindowless.__GetInstance(__instance);
            var ___ret = __target.SetFocus(fFocus);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE OnDefWindowMessage( /* [annotation][in] */ _In_ UINT msg, /* [annotation][in] */ _In_ WPARAM wParam, /* [annotation][in] */ _In_ LPARAM lParam, /* [out] */ __RPC__out LRESULT *plResult) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint_ulong_long_longPtr _OnDefWindowMessageDelegateInstance;

        private static int _OnDefWindowMessageDelegateHook(__IntPtr __instance, uint msg, ulong wParam, long lParam, long* plResult)
        {
            var __target = global::SpoutDX.IOleInPlaceSiteWindowless.__GetInstance(__instance);
            var ___ret = __target.OnDefWindowMessage(msg, wParam, lParam, ref *plResult);
            return ___ret;
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[9];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _OnInPlaceActivateExDelegateInstance += _OnInPlaceActivateExDelegateHook;
                _OnInPlaceDeactivateExDelegateInstance += _OnInPlaceDeactivateExDelegateHook;
                _RequestUIActivateDelegateInstance += _RequestUIActivateDelegateHook;
                _CanWindowlessActivateDelegateInstance += _CanWindowlessActivateDelegateHook;
                _GetCaptureDelegateInstance += _GetCaptureDelegateHook;
                _SetCaptureDelegateInstance += _SetCaptureDelegateHook;
                _GetFocusDelegateInstance += _GetFocusDelegateHook;
                _SetFocusDelegateInstance += _SetFocusDelegateHook;
                _OnDefWindowMessageDelegateInstance += _OnDefWindowMessageDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnInPlaceActivateExDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_OnInPlaceDeactivateExDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_RequestUIActivateDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CanWindowlessActivateDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetCaptureDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetCaptureDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetFocusDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_SetFocusDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnDefWindowMessageDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 30, 0);
                            ManagedVTables[0][15] = Thunks[0];
                            ManagedVTables[0][16] = Thunks[1];
                            ManagedVTables[0][17] = Thunks[2];
                            ManagedVTables[0][18] = Thunks[3];
                            ManagedVTables[0][19] = Thunks[4];
                            ManagedVTables[0][20] = Thunks[5];
                            ManagedVTables[0][21] = Thunks[6];
                            ManagedVTables[0][22] = Thunks[7];
                            ManagedVTables[0][29] = Thunks[8];
                            VTables.Methods[0] = new Delegate[30];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct tagExtentInfo
    // DEBUG:     {
    // DEBUG:     ULONG cb;
    // DEBUG:     DWORD dwExtentMode;
    // DEBUG:     SIZEL sizelProposed;
    // DEBUG:     }
    public unsafe partial class TagExtentInfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint cb;
            internal uint dwExtentMode;
            internal global::TagSIZE.__Internal sizelProposed;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagExtentInfo@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagExtentInfo>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagExtentInfo>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagExtentInfo managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagExtentInfo>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagExtentInfo managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagExtentInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagExtentInfo(native.ToPointer(), skipVTables);
        }

        internal static TagExtentInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagExtentInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagExtentInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagExtentInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagExtentInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagExtentInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagExtentInfo
        public TagExtentInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagExtentInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagExtentInfo
        public TagExtentInfo(global::SpoutDX.TagExtentInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagExtentInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagExtentInfo.__Internal*) __Instance) = *((global::SpoutDX.TagExtentInfo.__Internal*) _0.__Instance);
        }

        ~TagExtentInfo()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Cb
        {
            get
            {
                return ((__Internal*)__Instance)->cb;
            }

            set
            {
                ((__Internal*)__Instance)->cb = value;
            }
        }

        public uint DwExtentMode
        {
            get
            {
                return ((__Internal*)__Instance)->dwExtentMode;
            }

            set
            {
                ((__Internal*)__Instance)->dwExtentMode = value;
            }
        }
    }

    // DEBUG: struct tagAspectInfo
    // DEBUG:     {
    // DEBUG:     ULONG cb;
    // DEBUG:     DWORD dwFlags;
    // DEBUG:     }
    public unsafe partial class TagAspectInfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint cb;
            internal uint dwFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagAspectInfo@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagAspectInfo>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagAspectInfo>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagAspectInfo managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagAspectInfo>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagAspectInfo managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagAspectInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagAspectInfo(native.ToPointer(), skipVTables);
        }

        internal static TagAspectInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagAspectInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagAspectInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagAspectInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagAspectInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagAspectInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagAspectInfo
        public TagAspectInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagAspectInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagAspectInfo
        public TagAspectInfo(global::SpoutDX.TagAspectInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagAspectInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagAspectInfo.__Internal*) __Instance) = *((global::SpoutDX.TagAspectInfo.__Internal*) _0.__Instance);
        }

        ~TagAspectInfo()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Cb
        {
            get
            {
                return ((__Internal*)__Instance)->cb;
            }

            set
            {
                ((__Internal*)__Instance)->cb = value;
            }
        }

        public uint DwFlags
        {
            get
            {
                return ((__Internal*)__Instance)->dwFlags;
            }

            set
            {
                ((__Internal*)__Instance)->dwFlags = value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("3AF24292-0C96-11CE-A0CF-00AA00600AB8")
    // DEBUG:     IViewObjectEx : public IViewObject2
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetRect( 
    // DEBUG:             /* [in] */ DWORD dwAspect,
    // DEBUG:             /* [out] */ __RPC__out LPRECTL pRect) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetViewStatus( 
    // DEBUG:             /* [out] */ __RPC__out DWORD *pdwStatus) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE QueryHitPoint( 
    // DEBUG:             /* [in] */ DWORD dwAspect,
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRectBounds,
    // DEBUG:             /* [in] */ POINT ptlLoc,
    // DEBUG:             /* [in] */ LONG lCloseHint,
    // DEBUG:             /* [out] */ __RPC__out DWORD *pHitResult) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE QueryHitRect( 
    // DEBUG:             /* [in] */ DWORD dwAspect,
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRectBounds,
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRectLoc,
    // DEBUG:             /* [in] */ LONG lCloseHint,
    // DEBUG:             /* [out] */ __RPC__out DWORD *pHitResult) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetNaturalExtent( 
    // DEBUG:             /* [in] */ DWORD dwAspect,
    // DEBUG:             /* [in] */ LONG lindex,
    // DEBUG:             /* [in] */ __RPC__in DVTARGETDEVICE *ptd,
    // DEBUG:             /* [in] */ __RPC__in HDC hicTargetDev,
    // DEBUG:             /* [in] */ __RPC__in DVEXTENTINFO *pExtentInfo,
    // DEBUG:             /* [out] */ __RPC__out LPSIZEL pSizel) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IViewObjectEx : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IViewObjectEx@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IViewObjectEx>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IViewObjectEx>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IViewObjectEx managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IViewObjectEx>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IViewObjectEx managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IViewObjectEx __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IViewObjectExInternal(native.ToPointer(), skipVTables);
        }

        internal static IViewObjectEx __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IViewObjectEx)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IViewObjectEx __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IViewObjectEx)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IViewObjectEx __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IViewObjectExInternal(native, skipVTables);
        }

        protected IViewObjectEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IViewObjectEx
        protected IViewObjectEx()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IViewObjectEx.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IViewObjectEx");
        }

        ~IViewObjectEx()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetViewStatus( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pdwStatus) = 0
        public abstract int GetViewStatus(ref uint pdwStatus);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE GetViewStatus( /* [out] */ __RPC__out DWORD *pdwStatus) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetViewStatusDelegateInstance;

        private static int _GetViewStatusDelegateHook(__IntPtr __instance, uint* pdwStatus)
        {
            var __target = global::SpoutDX.IViewObjectEx.__GetInstance(__instance);
            var ___ret = __target.GetViewStatus(ref *pdwStatus);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetViewStatusDelegateInstance += _GetViewStatusDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetViewStatusDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 15, 0);
                            ManagedVTables[0][11] = Thunks[0];
                            VTables.Methods[0] = new Delegate[15];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("894AD3B0-EF97-11CE-9BC9-00AA00608E01")
    // DEBUG:     IOleUndoUnit : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Do( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoManager *pUndoManager) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetDescription( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetUnitType( 
    // DEBUG:             /* [out] */ __RPC__out CLSID *pClsid,
    // DEBUG:             /* [out] */ __RPC__out LONG *plID) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnNextAdd( void) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IOleUndoUnit : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleUndoUnit@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleUndoUnit>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleUndoUnit>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IOleUndoUnit managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IOleUndoUnit>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IOleUndoUnit managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IOleUndoUnit __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IOleUndoUnitInternal(native.ToPointer(), skipVTables);
        }

        internal static IOleUndoUnit __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IOleUndoUnit)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IOleUndoUnit __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IOleUndoUnit)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IOleUndoUnit __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IOleUndoUnitInternal(native, skipVTables);
        }

        protected IOleUndoUnit(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IOleUndoUnit
        protected IOleUndoUnit()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IOleUndoUnit.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IOleUndoUnit");
        }

        ~IOleUndoUnit()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Do( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoManager *pUndoManager) = 0
        public abstract int Do(global::SpoutDX.IOleUndoManager pUndoManager);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetDescription( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        public abstract int GetDescription(char** pBstr);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnNextAdd( void) = 0
        public abstract int OnNextAdd();

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE Do( /* [in] */ __RPC__in_opt IOleUndoManager *pUndoManager) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _DoDelegateInstance;

        private static int _DoDelegateHook(__IntPtr __instance, __IntPtr pUndoManager)
        {
            var __target = global::SpoutDX.IOleUndoUnit.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleUndoManager.__GetOrCreateInstance(pUndoManager, false);
            var ___ret = __target.Do(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetDescription( /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_charPtrPtr _GetDescriptionDelegateInstance;

        private static int _GetDescriptionDelegateHook(__IntPtr __instance, char** pBstr)
        {
            var __target = global::SpoutDX.IOleUndoUnit.__GetInstance(__instance);
            var ___ret = __target.GetDescription(pBstr);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE OnNextAdd( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _OnNextAddDelegateInstance;

        private static int _OnNextAddDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IOleUndoUnit.__GetInstance(__instance);
            var ___ret = __target.OnNextAdd();
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[3];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _DoDelegateInstance += _DoDelegateHook;
                _GetDescriptionDelegateInstance += _GetDescriptionDelegateHook;
                _OnNextAddDelegateInstance += _OnNextAddDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_DoDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetDescriptionDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_OnNextAddDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            ManagedVTables[0][6] = Thunks[2];
                            VTables.Methods[0] = new Delegate[7];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("A1FAF330-EF97-11CE-9BC9-00AA00608E01")
    // DEBUG:     IOleParentUndoUnit : public IOleUndoUnit
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Open( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Close( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU,
    // DEBUG:             /* [in] */ BOOL fCommit) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Add( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE FindUnit( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetParentState( 
    // DEBUG:             /* [out] */ __RPC__out DWORD *pdwState) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IOleParentUndoUnit : global::SpoutDX.IOleUndoUnit, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public new partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleParentUndoUnit@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleParentUndoUnit@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        internal static new IOleParentUndoUnit __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IOleParentUndoUnitInternal(native.ToPointer(), skipVTables);
        }

        internal static new IOleParentUndoUnit __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IOleParentUndoUnit)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static new IOleParentUndoUnit __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IOleParentUndoUnit)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IOleParentUndoUnit __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IOleParentUndoUnitInternal(native, skipVTables);
        }

        protected IOleParentUndoUnit(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
        }

        // DEBUG: IOleParentUndoUnit
        protected IOleParentUndoUnit()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IOleParentUndoUnit.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IOleParentUndoUnit");
        }

        ~IOleParentUndoUnit()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Open( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU) = 0
        public abstract int Open(global::SpoutDX.IOleParentUndoUnit pPUU);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Close( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU,
        // DEBUG:             /* [in] */ BOOL fCommit) = 0
        public abstract int Close(global::SpoutDX.IOleParentUndoUnit pPUU, int fCommit);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Add( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public abstract int Add(global::SpoutDX.IOleUndoUnit pUU);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE FindUnit( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public abstract int FindUnit(global::SpoutDX.IOleUndoUnit pUU);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetParentState( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pdwState) = 0
        public abstract int GetParentState(ref uint pdwState);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE Do( /* [in] */ __RPC__in_opt IOleUndoManager *pUndoManager) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _DoDelegateInstance;

        private static int _DoDelegateHook(__IntPtr __instance, __IntPtr pUndoManager)
        {
            var __target = global::SpoutDX.IOleParentUndoUnit.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleUndoManager.__GetOrCreateInstance(pUndoManager, false);
            var ___ret = __target.Do(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetDescription( /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_charPtrPtr _GetDescriptionDelegateInstance;

        private static int _GetDescriptionDelegateHook(__IntPtr __instance, char** pBstr)
        {
            var __target = global::SpoutDX.IOleParentUndoUnit.__GetInstance(__instance);
            var ___ret = __target.GetDescription(pBstr);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE OnNextAdd( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _OnNextAddDelegateInstance;

        private static int _OnNextAddDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IOleParentUndoUnit.__GetInstance(__instance);
            var ___ret = __target.OnNextAdd();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Open( /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _OpenDelegateInstance;

        private static int _OpenDelegateHook(__IntPtr __instance, __IntPtr pPUU)
        {
            var __target = global::SpoutDX.IOleParentUndoUnit.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleParentUndoUnit.__GetOrCreateInstance(pPUU, false);
            var ___ret = __target.Open(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Close( /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU, /* [in] */ BOOL fCommit) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_int _CloseDelegateInstance;

        private static int _CloseDelegateHook(__IntPtr __instance, __IntPtr pPUU, int fCommit)
        {
            var __target = global::SpoutDX.IOleParentUndoUnit.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleParentUndoUnit.__GetOrCreateInstance(pPUU, false);
            var ___ret = __target.Close(__result0, fCommit);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Add( /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _AddDelegateInstance;

        private static int _AddDelegateHook(__IntPtr __instance, __IntPtr pUU)
        {
            var __target = global::SpoutDX.IOleParentUndoUnit.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleUndoUnit.__GetOrCreateInstance(pUU, false);
            var ___ret = __target.Add(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE FindUnit( /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _FindUnitDelegateInstance;

        private static int _FindUnitDelegateHook(__IntPtr __instance, __IntPtr pUU)
        {
            var __target = global::SpoutDX.IOleParentUndoUnit.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleUndoUnit.__GetOrCreateInstance(pUU, false);
            var ___ret = __target.FindUnit(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetParentState( /* [out] */ __RPC__out DWORD *pdwState) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetParentStateDelegateInstance;

        private static int _GetParentStateDelegateHook(__IntPtr __instance, uint* pdwState)
        {
            var __target = global::SpoutDX.IOleParentUndoUnit.__GetInstance(__instance);
            var ___ret = __target.GetParentState(ref *pdwState);
            return ___ret;
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[8];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _DoDelegateInstance += _DoDelegateHook;
                _GetDescriptionDelegateInstance += _GetDescriptionDelegateHook;
                _OnNextAddDelegateInstance += _OnNextAddDelegateHook;
                _OpenDelegateInstance += _OpenDelegateHook;
                _CloseDelegateInstance += _CloseDelegateHook;
                _AddDelegateInstance += _AddDelegateHook;
                _FindUnitDelegateInstance += _FindUnitDelegateHook;
                _GetParentStateDelegateInstance += _GetParentStateDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_DoDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetDescriptionDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_OnNextAddDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_OpenDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_CloseDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_AddDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_FindUnitDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetParentStateDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 12, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            ManagedVTables[0][6] = Thunks[2];
                            ManagedVTables[0][7] = Thunks[3];
                            ManagedVTables[0][8] = Thunks[4];
                            ManagedVTables[0][9] = Thunks[5];
                            ManagedVTables[0][10] = Thunks[6];
                            ManagedVTables[0][11] = Thunks[7];
                            VTables.Methods[0] = new Delegate[12];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("B3E7C340-EF97-11CE-9BC9-00AA00608E01")
    // DEBUG:     IEnumOleUndoUnits : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
    // DEBUG:             /* [in] */ ULONG cElt,
    // DEBUG:             /* [length_is][size_is][out] */ IOleUndoUnit **rgElt,
    // DEBUG:             /* [out] */ ULONG *pcEltFetched) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Skip( 
    // DEBUG:             /* [in] */ ULONG cElt) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Clone( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IEnumOleUndoUnits : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IEnumOleUndoUnits@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IEnumOleUndoUnits>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IEnumOleUndoUnits>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IEnumOleUndoUnits managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IEnumOleUndoUnits>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IEnumOleUndoUnits managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IEnumOleUndoUnits __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IEnumOleUndoUnitsInternal(native.ToPointer(), skipVTables);
        }

        internal static IEnumOleUndoUnits __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IEnumOleUndoUnits)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IEnumOleUndoUnits __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IEnumOleUndoUnits)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IEnumOleUndoUnits __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IEnumOleUndoUnitsInternal(native, skipVTables);
        }

        protected IEnumOleUndoUnits(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IEnumOleUndoUnits
        protected IEnumOleUndoUnits()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IEnumOleUndoUnits.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IEnumOleUndoUnits");
        }

        ~IEnumOleUndoUnits()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
        // DEBUG:             /* [in] */ ULONG cElt,
        // DEBUG:             /* [length_is][size_is][out] */ IOleUndoUnit **rgElt,
        // DEBUG:             /* [out] */ ULONG *pcEltFetched) = 0
        public abstract int Next(uint cElt, global::SpoutDX.IOleUndoUnit rgElt, ref uint pcEltFetched);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Skip( 
        // DEBUG:             /* [in] */ ULONG cElt) = 0
        public abstract int Skip(uint cElt);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0
        public abstract int Reset();

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Clone( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0
        public abstract int Clone(global::SpoutDX.IEnumOleUndoUnits ppEnum);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE Next( /* [in] */ ULONG cElt, /* [length_is][size_is][out] */ IOleUndoUnit **rgElt, /* [out] */ ULONG *pcEltFetched) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint___IntPtr_uintPtr _NextDelegateInstance;

        private static int _NextDelegateHook(__IntPtr __instance, uint cElt, __IntPtr rgElt, uint* pcEltFetched)
        {
            var __target = global::SpoutDX.IEnumOleUndoUnits.__GetInstance(__instance);
            __IntPtr __rgElt = rgElt == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) rgElt);
            var __result1 = global::SpoutDX.IOleUndoUnit.__GetOrCreateInstance(__rgElt, false);
            var ___ret = __target.Next(cElt, __result1, ref *pcEltFetched);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Skip( /* [in] */ ULONG cElt) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _SkipDelegateInstance;

        private static int _SkipDelegateHook(__IntPtr __instance, uint cElt)
        {
            var __target = global::SpoutDX.IEnumOleUndoUnits.__GetInstance(__instance);
            var ___ret = __target.Skip(cElt);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Reset( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _ResetDelegateInstance;

        private static int _ResetDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IEnumOleUndoUnits.__GetInstance(__instance);
            var ___ret = __target.Reset();
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Clone( /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _CloneDelegateInstance;

        private static int _CloneDelegateHook(__IntPtr __instance, __IntPtr ppEnum)
        {
            var __target = global::SpoutDX.IEnumOleUndoUnits.__GetInstance(__instance);
            __IntPtr __ppEnum = ppEnum == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppEnum);
            var __result0 = global::SpoutDX.IEnumOleUndoUnits.__GetOrCreateInstance(__ppEnum, false);
            var ___ret = __target.Clone(__result0);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[4];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _NextDelegateInstance += _NextDelegateHook;
                _SkipDelegateInstance += _SkipDelegateHook;
                _ResetDelegateInstance += _ResetDelegateHook;
                _CloneDelegateInstance += _CloneDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_NextDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SkipDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ResetDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            ManagedVTables[0][5] = Thunks[2];
                            ManagedVTables[0][6] = Thunks[3];
                            VTables.Methods[0] = new Delegate[7];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("D001F200-EF97-11CE-9BC9-00AA00608E01")
    // DEBUG:     IOleUndoManager : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Open( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Close( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU,
    // DEBUG:             /* [in] */ BOOL fCommit) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Add( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetOpenParentState( 
    // DEBUG:             /* [out] */ __RPC__out DWORD *pdwState) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE DiscardFrom( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE UndoTo( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE RedoTo( 
    // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE EnumUndoable( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE EnumRedoable( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetLastUndoDescription( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetLastRedoDescription( 
    // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Enable( 
    // DEBUG:             /* [in] */ BOOL fEnable) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IOleUndoManager : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IOleUndoManager@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleUndoManager>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IOleUndoManager>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IOleUndoManager managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IOleUndoManager>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IOleUndoManager managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IOleUndoManager __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IOleUndoManagerInternal(native.ToPointer(), skipVTables);
        }

        internal static IOleUndoManager __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IOleUndoManager)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IOleUndoManager __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IOleUndoManager)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IOleUndoManager __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IOleUndoManagerInternal(native, skipVTables);
        }

        protected IOleUndoManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IOleUndoManager
        protected IOleUndoManager()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IOleUndoManager.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IOleUndoManager");
        }

        ~IOleUndoManager()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Open( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU) = 0
        public abstract int Open(global::SpoutDX.IOleParentUndoUnit pPUU);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Close( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU,
        // DEBUG:             /* [in] */ BOOL fCommit) = 0
        public abstract int Close(global::SpoutDX.IOleParentUndoUnit pPUU, int fCommit);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Add( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public abstract int Add(global::SpoutDX.IOleUndoUnit pUU);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetOpenParentState( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pdwState) = 0
        public abstract int GetOpenParentState(ref uint pdwState);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE DiscardFrom( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public abstract int DiscardFrom(global::SpoutDX.IOleUndoUnit pUU);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE UndoTo( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public abstract int UndoTo(global::SpoutDX.IOleUndoUnit pUU);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE RedoTo( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public abstract int RedoTo(global::SpoutDX.IOleUndoUnit pUU);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EnumUndoable( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0
        public abstract int EnumUndoable(global::SpoutDX.IEnumOleUndoUnits ppEnum);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EnumRedoable( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0
        public abstract int EnumRedoable(global::SpoutDX.IEnumOleUndoUnits ppEnum);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetLastUndoDescription( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        public abstract int GetLastUndoDescription(char** pBstr);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetLastRedoDescription( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        public abstract int GetLastRedoDescription(char** pBstr);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Enable( 
        // DEBUG:             /* [in] */ BOOL fEnable) = 0
        public abstract int Enable(int fEnable);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE Open( /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _OpenDelegateInstance;

        private static int _OpenDelegateHook(__IntPtr __instance, __IntPtr pPUU)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleParentUndoUnit.__GetOrCreateInstance(pPUU, false);
            var ___ret = __target.Open(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Close( /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU, /* [in] */ BOOL fCommit) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_int _CloseDelegateInstance;

        private static int _CloseDelegateHook(__IntPtr __instance, __IntPtr pPUU, int fCommit)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleParentUndoUnit.__GetOrCreateInstance(pPUU, false);
            var ___ret = __target.Close(__result0, fCommit);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Add( /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _AddDelegateInstance;

        private static int _AddDelegateHook(__IntPtr __instance, __IntPtr pUU)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleUndoUnit.__GetOrCreateInstance(pUU, false);
            var ___ret = __target.Add(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetOpenParentState( /* [out] */ __RPC__out DWORD *pdwState) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetOpenParentStateDelegateInstance;

        private static int _GetOpenParentStateDelegateHook(__IntPtr __instance, uint* pdwState)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var ___ret = __target.GetOpenParentState(ref *pdwState);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE DiscardFrom( /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _DiscardFromDelegateInstance;

        private static int _DiscardFromDelegateHook(__IntPtr __instance, __IntPtr pUU)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleUndoUnit.__GetOrCreateInstance(pUU, false);
            var ___ret = __target.DiscardFrom(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE UndoTo( /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _UndoToDelegateInstance;

        private static int _UndoToDelegateHook(__IntPtr __instance, __IntPtr pUU)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleUndoUnit.__GetOrCreateInstance(pUU, false);
            var ___ret = __target.UndoTo(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE RedoTo( /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _RedoToDelegateInstance;

        private static int _RedoToDelegateHook(__IntPtr __instance, __IntPtr pUU)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IOleUndoUnit.__GetOrCreateInstance(pUU, false);
            var ___ret = __target.RedoTo(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE EnumUndoable( /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _EnumUndoableDelegateInstance;

        private static int _EnumUndoableDelegateHook(__IntPtr __instance, __IntPtr ppEnum)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            __IntPtr __ppEnum = ppEnum == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppEnum);
            var __result0 = global::SpoutDX.IEnumOleUndoUnits.__GetOrCreateInstance(__ppEnum, false);
            var ___ret = __target.EnumUndoable(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE EnumRedoable( /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _EnumRedoableDelegateInstance;

        private static int _EnumRedoableDelegateHook(__IntPtr __instance, __IntPtr ppEnum)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            __IntPtr __ppEnum = ppEnum == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) ppEnum);
            var __result0 = global::SpoutDX.IEnumOleUndoUnits.__GetOrCreateInstance(__ppEnum, false);
            var ___ret = __target.EnumRedoable(__result0);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetLastUndoDescription( /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_charPtrPtr _GetLastUndoDescriptionDelegateInstance;

        private static int _GetLastUndoDescriptionDelegateHook(__IntPtr __instance, char** pBstr)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var ___ret = __target.GetLastUndoDescription(pBstr);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetLastRedoDescription( /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_charPtrPtr _GetLastRedoDescriptionDelegateInstance;

        private static int _GetLastRedoDescriptionDelegateHook(__IntPtr __instance, char** pBstr)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var ___ret = __target.GetLastRedoDescription(pBstr);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Enable( /* [in] */ BOOL fEnable) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int _EnableDelegateInstance;

        private static int _EnableDelegateHook(__IntPtr __instance, int fEnable)
        {
            var __target = global::SpoutDX.IOleUndoManager.__GetInstance(__instance);
            var ___ret = __target.Enable(fEnable);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[12];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _OpenDelegateInstance += _OpenDelegateHook;
                _CloseDelegateInstance += _CloseDelegateHook;
                _AddDelegateInstance += _AddDelegateHook;
                _GetOpenParentStateDelegateInstance += _GetOpenParentStateDelegateHook;
                _DiscardFromDelegateInstance += _DiscardFromDelegateHook;
                _UndoToDelegateInstance += _UndoToDelegateHook;
                _RedoToDelegateInstance += _RedoToDelegateHook;
                _EnumUndoableDelegateInstance += _EnumUndoableDelegateHook;
                _EnumRedoableDelegateInstance += _EnumRedoableDelegateHook;
                _GetLastUndoDescriptionDelegateInstance += _GetLastUndoDescriptionDelegateHook;
                _GetLastRedoDescriptionDelegateInstance += _GetLastRedoDescriptionDelegateHook;
                _EnableDelegateInstance += _EnableDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OpenDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CloseDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_AddDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetOpenParentStateDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_DiscardFromDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_UndoToDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_RedoToDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_EnumUndoableDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_EnumRedoableDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_GetLastUndoDescriptionDelegateInstance);
                Thunks[10] = Marshal.GetFunctionPointerForDelegate(_GetLastRedoDescriptionDelegateInstance);
                Thunks[11] = Marshal.GetFunctionPointerForDelegate(_EnableDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 15, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            ManagedVTables[0][5] = Thunks[2];
                            ManagedVTables[0][6] = Thunks[3];
                            ManagedVTables[0][7] = Thunks[4];
                            ManagedVTables[0][8] = Thunks[5];
                            ManagedVTables[0][9] = Thunks[6];
                            ManagedVTables[0][10] = Thunks[7];
                            ManagedVTables[0][11] = Thunks[8];
                            ManagedVTables[0][12] = Thunks[9];
                            ManagedVTables[0][13] = Thunks[10];
                            ManagedVTables[0][14] = Thunks[11];
                            VTables.Methods[0] = new Delegate[15];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("55980BA0-35AA-11CF-B671-00AA004CD6D8")
    // DEBUG:     IPointerInactive : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetActivationPolicy( 
    // DEBUG:             /* [out] */ __RPC__out DWORD *pdwPolicy) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnInactiveMouseMove( 
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRectBounds,
    // DEBUG:             /* [in] */ LONG x,
    // DEBUG:             /* [in] */ LONG y,
    // DEBUG:             /* [in] */ DWORD grfKeyState) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE OnInactiveSetCursor( 
    // DEBUG:             /* [in] */ __RPC__in LPCRECT pRectBounds,
    // DEBUG:             /* [in] */ LONG x,
    // DEBUG:             /* [in] */ LONG y,
    // DEBUG:             /* [in] */ DWORD dwMouseMsg,
    // DEBUG:             /* [in] */ BOOL fSetAlways) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPointerInactive : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPointerInactive@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPointerInactive>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPointerInactive>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPointerInactive managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPointerInactive>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPointerInactive managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPointerInactive __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPointerInactiveInternal(native.ToPointer(), skipVTables);
        }

        internal static IPointerInactive __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPointerInactive)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPointerInactive __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPointerInactive)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPointerInactive __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPointerInactiveInternal(native, skipVTables);
        }

        protected IPointerInactive(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPointerInactive
        protected IPointerInactive()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPointerInactive.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPointerInactive");
        }

        ~IPointerInactive()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetActivationPolicy( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pdwPolicy) = 0
        public abstract int GetActivationPolicy(ref uint pdwPolicy);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE GetActivationPolicy( /* [out] */ __RPC__out DWORD *pdwPolicy) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _GetActivationPolicyDelegateInstance;

        private static int _GetActivationPolicyDelegateHook(__IntPtr __instance, uint* pdwPolicy)
        {
            var __target = global::SpoutDX.IPointerInactive.__GetInstance(__instance);
            var ___ret = __target.GetActivationPolicy(ref *pdwPolicy);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetActivationPolicyDelegateInstance += _GetActivationPolicyDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetActivationPolicyDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 6, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            VTables.Methods[0] = new Delegate[6];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct tagCADWORD
    // DEBUG:     {
    // DEBUG:     ULONG cElems;
    // DEBUG:     /* [size_is] */ DWORD *pElems;
    // DEBUG:     }
    public unsafe partial class TagCADWORD : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint cElems;
            internal __IntPtr pElems;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagCADWORD@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagCADWORD>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagCADWORD>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagCADWORD managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagCADWORD>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagCADWORD managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagCADWORD __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagCADWORD(native.ToPointer(), skipVTables);
        }

        internal static TagCADWORD __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagCADWORD)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagCADWORD __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagCADWORD(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagCADWORD(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagCADWORD(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagCADWORD
        public TagCADWORD()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagCADWORD.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagCADWORD
        public TagCADWORD(global::SpoutDX.TagCADWORD _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagCADWORD.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagCADWORD.__Internal*) __Instance) = *((global::SpoutDX.TagCADWORD.__Internal*) _0.__Instance);
        }

        ~TagCADWORD()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CElems
        {
            get
            {
                return ((__Internal*)__Instance)->cElems;
            }

            set
            {
                ((__Internal*)__Instance)->cElems = value;
            }
        }

        public uint* PElems
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->pElems;
            }

            set
            {
                ((__Internal*)__Instance)->pElems = (__IntPtr) value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("376BD3AA-3845-101B-84ED-08002B2EC713")
    // DEBUG:     IPerPropertyBrowsing : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetDisplayString( 
    // DEBUG:             /* [in] */ DISPID dispID,
    // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE MapPropertyToPage( 
    // DEBUG:             /* [in] */ DISPID dispID,
    // DEBUG:             /* [out] */ __RPC__out CLSID *pClsid) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetPredefinedStrings( 
    // DEBUG:             /* [in] */ DISPID dispID,
    // DEBUG:             /* [out] */ __RPC__out CALPOLESTR *pCaStringsOut,
    // DEBUG:             /* [out] */ __RPC__out CADWORD *pCaCookiesOut) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetPredefinedValue( 
    // DEBUG:             /* [in] */ DISPID dispID,
    // DEBUG:             /* [in] */ DWORD dwCookie,
    // DEBUG:             /* [out] */ __RPC__out VARIANT *pVarOut) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPerPropertyBrowsing : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPerPropertyBrowsing@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPerPropertyBrowsing>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPerPropertyBrowsing>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPerPropertyBrowsing managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPerPropertyBrowsing>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPerPropertyBrowsing managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPerPropertyBrowsing __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPerPropertyBrowsingInternal(native.ToPointer(), skipVTables);
        }

        internal static IPerPropertyBrowsing __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPerPropertyBrowsing)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPerPropertyBrowsing __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPerPropertyBrowsing)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPerPropertyBrowsing __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPerPropertyBrowsingInternal(native, skipVTables);
        }

        protected IPerPropertyBrowsing(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPerPropertyBrowsing
        protected IPerPropertyBrowsing()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPerPropertyBrowsing.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPerPropertyBrowsing");
        }

        ~IPerPropertyBrowsing()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetDisplayString( 
        // DEBUG:             /* [in] */ DISPID dispID,
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        public abstract int GetDisplayString(int dispID, char** pBstr);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE GetDisplayString( /* [in] */ DISPID dispID, /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_int_charPtrPtr _GetDisplayStringDelegateInstance;

        private static int _GetDisplayStringDelegateHook(__IntPtr __instance, int dispID, char** pBstr)
        {
            var __target = global::SpoutDX.IPerPropertyBrowsing.__GetInstance(__instance);
            var ___ret = __target.GetDisplayString(dispID, pBstr);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _GetDisplayStringDelegateInstance += _GetDisplayStringDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetDisplayStringDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            VTables.Methods[0] = new Delegate[7];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct tagPROPBAG2
    // DEBUG:     {
    // DEBUG:     DWORD dwType;
    // DEBUG:     VARTYPE vt;
    // DEBUG:     CLIPFORMAT cfType;
    // DEBUG:     DWORD dwHint;
    // DEBUG:     LPOLESTR pstrName;
    // DEBUG:     CLSID clsid;
    // DEBUG:     }
    public unsafe partial class TagPROPBAG2 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal uint dwType;
            internal ushort vt;
            internal ushort cfType;
            internal uint dwHint;
            internal __IntPtr pstrName;
            internal global::GUID.__Internal clsid;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagPROPBAG2@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagPROPBAG2>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagPROPBAG2>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagPROPBAG2 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagPROPBAG2>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagPROPBAG2 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagPROPBAG2 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagPROPBAG2(native.ToPointer(), skipVTables);
        }

        internal static TagPROPBAG2 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagPROPBAG2)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagPROPBAG2 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagPROPBAG2(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagPROPBAG2(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagPROPBAG2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagPROPBAG2
        public TagPROPBAG2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagPROPBAG2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagPROPBAG2
        public TagPROPBAG2(global::SpoutDX.TagPROPBAG2 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagPROPBAG2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagPROPBAG2.__Internal*) __Instance) = *((global::SpoutDX.TagPROPBAG2.__Internal*) _0.__Instance);
        }

        ~TagPROPBAG2()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwType
        {
            get
            {
                return ((__Internal*)__Instance)->dwType;
            }

            set
            {
                ((__Internal*)__Instance)->dwType = value;
            }
        }

        public ushort Vt
        {
            get
            {
                return ((__Internal*)__Instance)->vt;
            }

            set
            {
                ((__Internal*)__Instance)->vt = value;
            }
        }

        public ushort CfType
        {
            get
            {
                return ((__Internal*)__Instance)->cfType;
            }

            set
            {
                ((__Internal*)__Instance)->cfType = value;
            }
        }

        public uint DwHint
        {
            get
            {
                return ((__Internal*)__Instance)->dwHint;
            }

            set
            {
                ((__Internal*)__Instance)->dwHint = value;
            }
        }

        public char* PstrName
        {
            get
            {
                return (char*) ((__Internal*)__Instance)->pstrName;
            }

            set
            {
                ((__Internal*)__Instance)->pstrName = (__IntPtr) value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("22F55882-280B-11d0-A8A9-00A0C90C2004")
    // DEBUG:     IPropertyBag2 : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Read( 
    // DEBUG:             /* [in] */ ULONG cProperties,
    // DEBUG:             /* [size_is][in] */ __RPC__in_ecount_full(cProperties) PROPBAG2 *pPropBag,
    // DEBUG:             /* [unique][in] */ __RPC__in_opt IErrorLog *pErrLog,
    // DEBUG:             /* [size_is][out] */ __RPC__out_ecount_full(cProperties) VARIANT *pvarValue,
    // DEBUG:             /* [size_is][unique][out][in] */ __RPC__inout_ecount_full_opt(cProperties) HRESULT *phrError) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Write( 
    // DEBUG:             /* [in] */ ULONG cProperties,
    // DEBUG:             /* [size_is][in] */ __RPC__in_ecount_full(cProperties) PROPBAG2 *pPropBag,
    // DEBUG:             /* [size_is][in] */ __RPC__in_ecount_full(cProperties) VARIANT *pvarValue) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE CountProperties( 
    // DEBUG:             /* [out] */ __RPC__out ULONG *pcProperties) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetPropertyInfo( 
    // DEBUG:             /* [in] */ ULONG iProperty,
    // DEBUG:             /* [in] */ ULONG cProperties,
    // DEBUG:             /* [size_is][out] */ __RPC__out_ecount_full(cProperties) PROPBAG2 *pPropBag,
    // DEBUG:             /* [out] */ __RPC__out ULONG *pcProperties) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE LoadObject( 
    // DEBUG:             /* [in] */ __RPC__in LPCOLESTR pstrName,
    // DEBUG:             /* [in] */ DWORD dwHint,
    // DEBUG:             /* [in] */ __RPC__in_opt IUnknown *pUnkObject,
    // DEBUG:             /* [unique][in] */ __RPC__in_opt IErrorLog *pErrLog) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPropertyBag2 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPropertyBag2@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPropertyBag2>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPropertyBag2>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPropertyBag2 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPropertyBag2>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPropertyBag2 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPropertyBag2 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPropertyBag2Internal(native.ToPointer(), skipVTables);
        }

        internal static IPropertyBag2 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPropertyBag2)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPropertyBag2 __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPropertyBag2)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPropertyBag2 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPropertyBag2Internal(native, skipVTables);
        }

        protected IPropertyBag2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPropertyBag2
        protected IPropertyBag2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPropertyBag2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPropertyBag2");
        }

        ~IPropertyBag2()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CountProperties( 
        // DEBUG:             /* [out] */ __RPC__out ULONG *pcProperties) = 0
        public abstract int CountProperties(ref uint pcProperties);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetPropertyInfo( 
        // DEBUG:             /* [in] */ ULONG iProperty,
        // DEBUG:             /* [in] */ ULONG cProperties,
        // DEBUG:             /* [size_is][out] */ __RPC__out_ecount_full(cProperties) PROPBAG2 *pPropBag,
        // DEBUG:             /* [out] */ __RPC__out ULONG *pcProperties) = 0
        public abstract int GetPropertyInfo(uint iProperty, uint cProperties, global::SpoutDX.TagPROPBAG2 pPropBag, ref uint pcProperties);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE CountProperties( /* [out] */ __RPC__out ULONG *pcProperties) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr _CountPropertiesDelegateInstance;

        private static int _CountPropertiesDelegateHook(__IntPtr __instance, uint* pcProperties)
        {
            var __target = global::SpoutDX.IPropertyBag2.__GetInstance(__instance);
            var ___ret = __target.CountProperties(ref *pcProperties);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE GetPropertyInfo( /* [in] */ ULONG iProperty, /* [in] */ ULONG cProperties, /* [size_is][out] */ __RPC__out_ecount_full(cProperties) PROPBAG2 *pPropBag, /* [out] */ __RPC__out ULONG *pcProperties) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint_uint___IntPtr_uintPtr _GetPropertyInfoDelegateInstance;

        private static int _GetPropertyInfoDelegateHook(__IntPtr __instance, uint iProperty, uint cProperties, __IntPtr pPropBag, uint* pcProperties)
        {
            var __target = global::SpoutDX.IPropertyBag2.__GetInstance(__instance);
            var __result2 = global::SpoutDX.TagPROPBAG2.__GetOrCreateInstance(pPropBag, false);
            var ___ret = __target.GetPropertyInfo(iProperty, cProperties, __result2, ref *pcProperties);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _CountPropertiesDelegateInstance += _CountPropertiesDelegateHook;
                _GetPropertyInfoDelegateInstance += _GetPropertyInfoDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_CountPropertiesDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetPropertyInfoDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 8, 0);
                            ManagedVTables[0][5] = Thunks[0];
                            ManagedVTables[0][6] = Thunks[1];
                            VTables.Methods[0] = new Delegate[8];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("22F55881-280B-11d0-A8A9-00A0C90C2004")
    // DEBUG:     IPersistPropertyBag2 : public IPersist
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Load( 
    // DEBUG:             /* [in] */ __RPC__in_opt IPropertyBag2 *pPropBag,
    // DEBUG:             /* [unique][in] */ __RPC__in_opt IErrorLog *pErrLog) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE Save( 
    // DEBUG:             /* [in] */ __RPC__in_opt IPropertyBag2 *pPropBag,
    // DEBUG:             /* [in] */ BOOL fClearDirty,
    // DEBUG:             /* [in] */ BOOL fSaveAllProperties) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE IsDirty( void) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IPersistPropertyBag2 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IPersistPropertyBag2@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPersistPropertyBag2>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IPersistPropertyBag2>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IPersistPropertyBag2 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IPersistPropertyBag2>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IPersistPropertyBag2 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IPersistPropertyBag2 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IPersistPropertyBag2Internal(native.ToPointer(), skipVTables);
        }

        internal static IPersistPropertyBag2 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IPersistPropertyBag2)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IPersistPropertyBag2 __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IPersistPropertyBag2)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IPersistPropertyBag2 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPersistPropertyBag2Internal(native, skipVTables);
        }

        protected IPersistPropertyBag2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IPersistPropertyBag2
        protected IPersistPropertyBag2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IPersistPropertyBag2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IPersistPropertyBag2");
        }

        ~IPersistPropertyBag2()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Save( 
        // DEBUG:             /* [in] */ __RPC__in_opt IPropertyBag2 *pPropBag,
        // DEBUG:             /* [in] */ BOOL fClearDirty,
        // DEBUG:             /* [in] */ BOOL fSaveAllProperties) = 0
        public abstract int Save(global::SpoutDX.IPropertyBag2 pPropBag, int fClearDirty, int fSaveAllProperties);

        public abstract int InitNew
        {
            get;
        }

        public abstract int IsDirty
        {
            get;
        }

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE InitNew( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _InitNewDelegateInstance;

        private static int _InitNewDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPersistPropertyBag2.__GetInstance(__instance);
            var ___ret = __target.InitNew;
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE Save( /* [in] */ __RPC__in_opt IPropertyBag2 *pPropBag, /* [in] */ BOOL fClearDirty, /* [in] */ BOOL fSaveAllProperties) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_int_int _SaveDelegateInstance;

        private static int _SaveDelegateHook(__IntPtr __instance, __IntPtr pPropBag, int fClearDirty, int fSaveAllProperties)
        {
            var __target = global::SpoutDX.IPersistPropertyBag2.__GetInstance(__instance);
            var __result0 = global::SpoutDX.IPropertyBag2.__GetOrCreateInstance(pPropBag, false);
            var ___ret = __target.Save(__result0, fClearDirty, fSaveAllProperties);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE IsDirty( void) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr _IsDirtyDelegateInstance;

        private static int _IsDirtyDelegateHook(__IntPtr __instance)
        {
            var __target = global::SpoutDX.IPersistPropertyBag2.__GetInstance(__instance);
            var ___ret = __target.IsDirty;
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[3];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _InitNewDelegateInstance += _InitNewDelegateHook;
                _SaveDelegateInstance += _SaveDelegateHook;
                _IsDirtyDelegateInstance += _IsDirtyDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_InitNewDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SaveDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_IsDirtyDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 8, 0);
                            ManagedVTables[0][4] = Thunks[0];
                            ManagedVTables[0][6] = Thunks[1];
                            ManagedVTables[0][7] = Thunks[2];
                            VTables.Methods[0] = new Delegate[8];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: MIDL_INTERFACE("3AF24290-0C96-11CE-A0CF-00AA00600AB8")
    // DEBUG:     IAdviseSinkEx : public IAdviseSink
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual /* [local] */ void STDMETHODCALLTYPE OnViewStatusChange( 
    // DEBUG:             /* [in] */ DWORD dwViewStatus) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IAdviseSinkEx : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IAdviseSinkEx@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IAdviseSinkEx>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IAdviseSinkEx>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IAdviseSinkEx managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IAdviseSinkEx>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IAdviseSinkEx managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IAdviseSinkEx __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IAdviseSinkExInternal(native.ToPointer(), skipVTables);
        }

        internal static IAdviseSinkEx __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IAdviseSinkEx)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IAdviseSinkEx __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IAdviseSinkEx)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IAdviseSinkEx __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IAdviseSinkExInternal(native, skipVTables);
        }

        protected IAdviseSinkEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IAdviseSinkEx
        protected IAdviseSinkEx()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IAdviseSinkEx.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IAdviseSinkEx");
        }

        ~IAdviseSinkEx()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual /* [local] */ void STDMETHODCALLTYPE OnViewStatusChange( 
        // DEBUG:             /* [in] */ DWORD dwViewStatus) = 0
        public abstract void OnViewStatusChange(uint dwViewStatus);

        #region Virtual table interop

        // void STDMETHODCALLTYPE OnViewStatusChange( /* [in] */ DWORD dwViewStatus) = 0
        private static global::SpoutDX.Delegates.Action___IntPtr_uint _OnViewStatusChangeDelegateInstance;

        private static void _OnViewStatusChangeDelegateHook(__IntPtr __instance, uint dwViewStatus)
        {
            var __target = global::SpoutDX.IAdviseSinkEx.__GetInstance(__instance);
            __target.OnViewStatusChange(dwViewStatus);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _OnViewStatusChangeDelegateInstance += _OnViewStatusChangeDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OnViewStatusChangeDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 9, 0);
                            ManagedVTables[0][8] = Thunks[0];
                            VTables.Methods[0] = new Delegate[9];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: struct tagQACONTAINER
    // DEBUG:     {
    // DEBUG:     ULONG cbSize;
    // DEBUG:     IOleClientSite *pClientSite;
    // DEBUG:     IAdviseSinkEx *pAdviseSink;
    // DEBUG:     IPropertyNotifySink *pPropertyNotifySink;
    // DEBUG:     IUnknown *pUnkEventSink;
    // DEBUG:     DWORD dwAmbientFlags;
    // DEBUG:     OLE_COLOR colorFore;
    // DEBUG:     OLE_COLOR colorBack;
    // DEBUG:     IFont *pFont;
    // DEBUG:     IOleUndoManager *pUndoMgr;
    // DEBUG:     DWORD dwAppearance;
    // DEBUG:     LONG lcid;
    // DEBUG:     HPALETTE hpal;
    // DEBUG:     IBindHost *pBindHost;
    // DEBUG:     IOleControlSite *pOleControlSite;
    // DEBUG:     IServiceProvider *pServiceProvider;
    // DEBUG:     }
    public unsafe partial class TagQACONTAINER : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 112)]
        public partial struct __Internal
        {
            internal uint cbSize;
            internal __IntPtr pClientSite;
            internal __IntPtr pAdviseSink;
            internal __IntPtr pPropertyNotifySink;
            internal __IntPtr pUnkEventSink;
            internal uint dwAmbientFlags;
            internal uint colorFore;
            internal uint colorBack;
            internal __IntPtr pFont;
            internal __IntPtr pUndoMgr;
            internal uint dwAppearance;
            internal int lcid;
            internal __IntPtr hpal;
            internal __IntPtr pBindHost;
            internal __IntPtr pOleControlSite;
            internal __IntPtr pServiceProvider;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagQACONTAINER@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagQACONTAINER>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagQACONTAINER>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagQACONTAINER managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagQACONTAINER>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagQACONTAINER managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagQACONTAINER __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagQACONTAINER(native.ToPointer(), skipVTables);
        }

        internal static TagQACONTAINER __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagQACONTAINER)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagQACONTAINER __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagQACONTAINER(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagQACONTAINER(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagQACONTAINER(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagQACONTAINER
        public TagQACONTAINER()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagQACONTAINER.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagQACONTAINER
        public TagQACONTAINER(global::SpoutDX.TagQACONTAINER _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagQACONTAINER.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagQACONTAINER.__Internal*) __Instance) = *((global::SpoutDX.TagQACONTAINER.__Internal*) _0.__Instance);
        }

        ~TagQACONTAINER()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbSize
        {
            get
            {
                return ((__Internal*)__Instance)->cbSize;
            }

            set
            {
                ((__Internal*)__Instance)->cbSize = value;
            }
        }

        public global::SpoutDX.IAdviseSinkEx PAdviseSink
        {
            get
            {
                var __result0 = global::SpoutDX.IAdviseSinkEx.__GetOrCreateInstance(((__Internal*)__Instance)->pAdviseSink, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->pAdviseSink = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::SpoutDX.IPropertyNotifySink PPropertyNotifySink
        {
            get
            {
                var __result0 = global::SpoutDX.IPropertyNotifySink.__GetOrCreateInstance(((__Internal*)__Instance)->pPropertyNotifySink, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->pPropertyNotifySink = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint DwAmbientFlags
        {
            get
            {
                return ((__Internal*)__Instance)->dwAmbientFlags;
            }

            set
            {
                ((__Internal*)__Instance)->dwAmbientFlags = value;
            }
        }

        public uint ColorFore
        {
            get
            {
                return ((__Internal*)__Instance)->colorFore;
            }

            set
            {
                ((__Internal*)__Instance)->colorFore = value;
            }
        }

        public uint ColorBack
        {
            get
            {
                return ((__Internal*)__Instance)->colorBack;
            }

            set
            {
                ((__Internal*)__Instance)->colorBack = value;
            }
        }

        public global::SpoutDX.IOleUndoManager PUndoMgr
        {
            get
            {
                var __result0 = global::SpoutDX.IOleUndoManager.__GetOrCreateInstance(((__Internal*)__Instance)->pUndoMgr, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->pUndoMgr = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint DwAppearance
        {
            get
            {
                return ((__Internal*)__Instance)->dwAppearance;
            }

            set
            {
                ((__Internal*)__Instance)->dwAppearance = value;
            }
        }

        public int Lcid
        {
            get
            {
                return ((__Internal*)__Instance)->lcid;
            }

            set
            {
                ((__Internal*)__Instance)->lcid = value;
            }
        }

        public global::SpoutDX.IOleControlSite POleControlSite
        {
            get
            {
                var __result0 = global::SpoutDX.IOleControlSite.__GetOrCreateInstance(((__Internal*)__Instance)->pOleControlSite, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->pOleControlSite = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }

    // DEBUG: struct tagQACONTROL
    // DEBUG:     {
    // DEBUG:     ULONG cbSize;
    // DEBUG:     DWORD dwMiscStatus;
    // DEBUG:     DWORD dwViewStatus;
    // DEBUG:     DWORD dwEventCookie;
    // DEBUG:     DWORD dwPropNotifyCookie;
    // DEBUG:     DWORD dwPointerActivationPolicy;
    // DEBUG:     }
    public unsafe partial class TagQACONTROL : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal uint cbSize;
            internal uint dwMiscStatus;
            internal uint dwViewStatus;
            internal uint dwEventCookie;
            internal uint dwPropNotifyCookie;
            internal uint dwPointerActivationPolicy;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0tagQACONTROL@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagQACONTROL>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.TagQACONTROL>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.TagQACONTROL managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.TagQACONTROL>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.TagQACONTROL managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static TagQACONTROL __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new TagQACONTROL(native.ToPointer(), skipVTables);
        }

        internal static TagQACONTROL __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (TagQACONTROL)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static TagQACONTROL __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new TagQACONTROL(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagQACONTROL(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected TagQACONTROL(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: tagQACONTROL
        public TagQACONTROL()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagQACONTROL.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: tagQACONTROL
        public TagQACONTROL(global::SpoutDX.TagQACONTROL _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.TagQACONTROL.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.TagQACONTROL.__Internal*) __Instance) = *((global::SpoutDX.TagQACONTROL.__Internal*) _0.__Instance);
        }

        ~TagQACONTROL()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbSize
        {
            get
            {
                return ((__Internal*)__Instance)->cbSize;
            }

            set
            {
                ((__Internal*)__Instance)->cbSize = value;
            }
        }

        public uint DwMiscStatus
        {
            get
            {
                return ((__Internal*)__Instance)->dwMiscStatus;
            }

            set
            {
                ((__Internal*)__Instance)->dwMiscStatus = value;
            }
        }

        public uint DwViewStatus
        {
            get
            {
                return ((__Internal*)__Instance)->dwViewStatus;
            }

            set
            {
                ((__Internal*)__Instance)->dwViewStatus = value;
            }
        }

        public uint DwEventCookie
        {
            get
            {
                return ((__Internal*)__Instance)->dwEventCookie;
            }

            set
            {
                ((__Internal*)__Instance)->dwEventCookie = value;
            }
        }

        public uint DwPropNotifyCookie
        {
            get
            {
                return ((__Internal*)__Instance)->dwPropNotifyCookie;
            }

            set
            {
                ((__Internal*)__Instance)->dwPropNotifyCookie = value;
            }
        }

        public uint DwPointerActivationPolicy
        {
            get
            {
                return ((__Internal*)__Instance)->dwPointerActivationPolicy;
            }

            set
            {
                ((__Internal*)__Instance)->dwPointerActivationPolicy = value;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("CF51ED10-62FE-11CF-BF86-00A0C9034836")
    // DEBUG:     IQuickActivate : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual /* [local] */ HRESULT STDMETHODCALLTYPE QuickActivate( 
    // DEBUG:             /* [in] */ QACONTAINER *pQaContainer,
    // DEBUG:             /* [out][in] */ QACONTROL *pQaControl) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE SetContentExtent( 
    // DEBUG:             /* [in] */ __RPC__in LPSIZEL pSizel) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE GetContentExtent( 
    // DEBUG:             /* [out] */ __RPC__out LPSIZEL pSizel) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class IQuickActivate : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0IQuickActivate@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IQuickActivate>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.IQuickActivate>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.IQuickActivate managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.IQuickActivate>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.IQuickActivate managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static IQuickActivate __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new IQuickActivateInternal(native.ToPointer(), skipVTables);
        }

        internal static IQuickActivate __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (IQuickActivate)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static IQuickActivate __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (IQuickActivate)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static IQuickActivate __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IQuickActivateInternal(native, skipVTables);
        }

        protected IQuickActivate(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: IQuickActivate
        protected IQuickActivate()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.IQuickActivate.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.IQuickActivate");
        }

        ~IQuickActivate()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE QuickActivate( 
        // DEBUG:             /* [in] */ QACONTAINER *pQaContainer,
        // DEBUG:             /* [out][in] */ QACONTROL *pQaControl) = 0
        public abstract int QuickActivate(global::SpoutDX.TagQACONTAINER pQaContainer, global::SpoutDX.TagQACONTROL pQaControl);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE QuickActivate( /* [in] */ QACONTAINER *pQaContainer, /* [out][in] */ QACONTROL *pQaControl) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr___IntPtr _QuickActivateDelegateInstance;

        private static int _QuickActivateDelegateHook(__IntPtr __instance, __IntPtr pQaContainer, __IntPtr pQaControl)
        {
            var __target = global::SpoutDX.IQuickActivate.__GetInstance(__instance);
            var __result0 = global::SpoutDX.TagQACONTAINER.__GetOrCreateInstance(pQaContainer, false);
            var __result1 = global::SpoutDX.TagQACONTROL.__GetOrCreateInstance(pQaControl, false);
            var ___ret = __target.QuickActivate(__result0, __result1);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _QuickActivateDelegateInstance += _QuickActivateDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_QuickActivateDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 6, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            VTables.Methods[0] = new Delegate[6];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    public unsafe partial class IEnumConnectionsInternal : global::SpoutDX.IEnumConnections, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IEnumConnectionsInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IEnumConnectionsInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
        // DEBUG:             /* [in] */ ULONG cConnections,
        // DEBUG:             /* [length_is][size_is][out] */ LPCONNECTDATA rgcd,
        // DEBUG:             /* [out] */ ULONG *pcFetched) = 0
        public override int Next(uint cConnections, global::SpoutDX.TagCONNECTDATA rgcd, ref uint pcFetched)
        {
            var ___NextDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint___IntPtr_uintPtr>(0, 3);
            var __arg1 = rgcd is null ? __IntPtr.Zero : rgcd.__Instance;
            fixed (uint* __pcFetched2 = &pcFetched)
            {
                var __arg2 = __pcFetched2;
                var ___ret = ___NextDelegate(__Instance, cConnections, __arg1, __arg2);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Skip( 
        // DEBUG:             /* [in] */ ULONG cConnections) = 0
        public override int Skip(uint cConnections)
        {
            var ___SkipDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 4);
            var ___ret = ___SkipDelegate(__Instance, cConnections);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0
        public override int Reset()
        {
            var ___ResetDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 5);
            var ___ret = ___ResetDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Clone( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnections **ppEnum) = 0
        public override int Clone(global::SpoutDX.IEnumConnections ppEnum)
        {
            var ___CloneDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 6);
            var ____arg0 = ppEnum is null ? __IntPtr.Zero : ppEnum.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = ___CloneDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IConnectionPointInternal : global::SpoutDX.IConnectionPoint, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IConnectionPointInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IConnectionPointInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetConnectionPointContainer( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IConnectionPointContainer **ppCPC) = 0
        public override int GetConnectionPointContainer(global::SpoutDX.IConnectionPointContainer ppCPC)
        {
            var ___GetConnectionPointContainerDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 4);
            var ____arg0 = ppCPC is null ? __IntPtr.Zero : ppCPC.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = ___GetConnectionPointContainerDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Unadvise( 
        // DEBUG:             /* [in] */ DWORD dwCookie) = 0
        public override int Unadvise(uint dwCookie)
        {
            var ___UnadviseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 6);
            var ___ret = ___UnadviseDelegate(__Instance, dwCookie);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EnumConnections( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnections **ppEnum) = 0
        public override int EnumConnections(global::SpoutDX.IEnumConnections ppEnum)
        {
            var ___EnumConnectionsDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 7);
            var ____arg0 = ppEnum is null ? __IntPtr.Zero : ppEnum.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = ___EnumConnectionsDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IEnumConnectionPointsInternal : global::SpoutDX.IEnumConnectionPoints, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IEnumConnectionPointsInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IEnumConnectionPointsInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
        // DEBUG:             /* [in] */ ULONG cConnections,
        // DEBUG:             /* [length_is][size_is][out] */ LPCONNECTIONPOINT *ppCP,
        // DEBUG:             /* [out] */ ULONG *pcFetched) = 0
        public override int Next(uint cConnections, global::SpoutDX.IConnectionPoint ppCP, ref uint pcFetched)
        {
            var ___NextDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint___IntPtr_uintPtr>(0, 3);
            var ____arg1 = ppCP is null ? __IntPtr.Zero : ppCP.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            fixed (uint* __pcFetched2 = &pcFetched)
            {
                var __arg2 = __pcFetched2;
                var ___ret = ___NextDelegate(__Instance, cConnections, __arg1, __arg2);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Skip( 
        // DEBUG:             /* [in] */ ULONG cConnections) = 0
        public override int Skip(uint cConnections)
        {
            var ___SkipDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 4);
            var ___ret = ___SkipDelegate(__Instance, cConnections);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0
        public override int Reset()
        {
            var ___ResetDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 5);
            var ___ret = ___ResetDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Clone( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnectionPoints **ppEnum) = 0
        public override int Clone(global::SpoutDX.IEnumConnectionPoints ppEnum)
        {
            var ___CloneDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 6);
            var ____arg0 = ppEnum is null ? __IntPtr.Zero : ppEnum.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = ___CloneDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IConnectionPointContainerInternal : global::SpoutDX.IConnectionPointContainer, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IConnectionPointContainerInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IConnectionPointContainerInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EnumConnectionPoints( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumConnectionPoints **ppEnum) = 0
        public override int EnumConnectionPoints(global::SpoutDX.IEnumConnectionPoints ppEnum)
        {
            var ___EnumConnectionPointsDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 3);
            var ____arg0 = ppEnum is null ? __IntPtr.Zero : ppEnum.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = ___EnumConnectionPointsDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IClassFactory2Internal : global::SpoutDX.IClassFactory2, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IClassFactory2Internal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IClassFactory2Internal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetLicInfo( 
        // DEBUG:             /* [out][in] */ __RPC__inout LICINFO *pLicInfo) = 0
        public override int GetLicInfo(global::SpoutDX.TagLICINFO pLicInfo)
        {
            var ___GetLicInfoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 5);
            var __arg0 = pLicInfo is null ? __IntPtr.Zero : pLicInfo.__Instance;
            var ___ret = ___GetLicInfoDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE RequestLicKey( 
        // DEBUG:             /* [in] */ DWORD dwReserved,
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstrKey) = 0
        public override int RequestLicKey(uint dwReserved, char** pBstrKey)
        {
            var ___RequestLicKeyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint_charPtrPtr>(0, 6);
            var ___ret = ___RequestLicKeyDelegate(__Instance, dwReserved, pBstrKey);
            return ___ret;
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE LockServer( 
        // DEBUG:             /* [in] */ BOOL fLock) = 0
        public virtual int LockServer(int fLock)
        {
            var ___LockServerDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 4);
            var ___ret = ___LockServerDelegate(__Instance, fLock);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IProvideMultipleClassInfoInternal : global::SpoutDX.IProvideMultipleClassInfo, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IProvideMultipleClassInfoInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IProvideMultipleClassInfoInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetMultiTypeInfoCount( 
        // DEBUG:             /* [out] */ __RPC__out ULONG *pcti) = 0
        public override int GetMultiTypeInfoCount(ref uint pcti)
        {
            var ___GetMultiTypeInfoCountDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 5);
            fixed (uint* __pcti0 = &pcti)
            {
                var __arg0 = __pcti0;
                var ___ret = ___GetMultiTypeInfoCountDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IOleControlInternal : global::SpoutDX.IOleControl, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IOleControlInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IOleControlInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetControlInfo( 
        // DEBUG:             /* [out][in] */ __RPC__inout CONTROLINFO *pCI) = 0
        public override int GetControlInfo(global::SpoutDX.TagCONTROLINFO pCI)
        {
            var ___GetControlInfoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 3);
            var __arg0 = pCI is null ? __IntPtr.Zero : pCI.__Instance;
            var ___ret = ___GetControlInfoDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnAmbientPropertyChange( 
        // DEBUG:             /* [in] */ DISPID dispID) = 0
        public override int OnAmbientPropertyChange(int dispID)
        {
            var ___OnAmbientPropertyChangeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 5);
            var ___ret = ___OnAmbientPropertyChangeDelegate(__Instance, dispID);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE FreezeEvents( 
        // DEBUG:             /* [in] */ BOOL bFreeze) = 0
        public override int FreezeEvents(int bFreeze)
        {
            var ___FreezeEventsDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 6);
            var ___ret = ___FreezeEventsDelegate(__Instance, bFreeze);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IOleControlSiteInternal : global::SpoutDX.IOleControlSite, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IOleControlSiteInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IOleControlSiteInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnControlInfoChanged( void) = 0
        public override int OnControlInfoChanged()
        {
            var ___OnControlInfoChangedDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 3);
            var ___ret = ___OnControlInfoChangedDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE LockInPlaceActive( 
        // DEBUG:             /* [in] */ BOOL fLock) = 0
        public override int LockInPlaceActive(int fLock)
        {
            var ___LockInPlaceActiveDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 4);
            var ___ret = ___LockInPlaceActiveDelegate(__Instance, fLock);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnFocus( 
        // DEBUG:             /* [in] */ BOOL fGotFocus) = 0
        public override int OnFocus(int fGotFocus)
        {
            var ___OnFocusDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 8);
            var ___ret = ___OnFocusDelegate(__Instance, fGotFocus);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE ShowPropertyFrame( void) = 0
        public override int ShowPropertyFrame()
        {
            var ___ShowPropertyFrameDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 9);
            var ___ret = ___ShowPropertyFrameDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IPropertyPageInternal : global::SpoutDX.IPropertyPage, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPropertyPageInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPropertyPageInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE SetPageSite( 
        // DEBUG:             /* [in] */ __RPC__in_opt IPropertyPageSite *pPageSite) = 0
        public override int SetPageSite(global::SpoutDX.IPropertyPageSite pPageSite)
        {
            var ___SetPageSiteDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 3);
            var __arg0 = pPageSite is null ? __IntPtr.Zero : pPageSite.__Instance;
            var ___ret = ___SetPageSiteDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Deactivate( void) = 0
        public override int Deactivate()
        {
            var ___DeactivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 5);
            var ___ret = ___DeactivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetPageInfo( 
        // DEBUG:             /* [out] */ __RPC__out PROPPAGEINFO *pPageInfo) = 0
        public override int GetPageInfo(global::SpoutDX.TagPROPPAGEINFO pPageInfo)
        {
            var ___GetPageInfoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 6);
            var __arg0 = pPageInfo is null ? __IntPtr.Zero : pPageInfo.__Instance;
            var ___ret = ___GetPageInfoDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Show( 
        // DEBUG:             /* [in] */ UINT nCmdShow) = 0
        public override int Show(uint nCmdShow)
        {
            var ___ShowDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 8);
            var ___ret = ___ShowDelegate(__Instance, nCmdShow);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Apply( void) = 0
        public override int Apply()
        {
            var ___ApplyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 11);
            var ___ret = ___ApplyDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Help( 
        // DEBUG:             /* [in] */ __RPC__in LPCOLESTR pszHelpDir) = 0
        public override int Help(string pszHelpDir)
        {
            var ___HelpDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_wstring>(0, 12);
            var ___ret = ___HelpDelegate(__Instance, pszHelpDir);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int IsPageDirty
        {
            get
            {
                var ___IsPageDirtyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 10);
                var ___ret = ___IsPageDirtyDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IPropertyPage2Internal : global::SpoutDX.IPropertyPage2, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPropertyPage2Internal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPropertyPage2Internal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EditProperty( 
        // DEBUG:             /* [in] */ DISPID dispID) = 0
        public override int EditProperty(int dispID)
        {
            var ___EditPropertyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 14);
            var ___ret = ___EditPropertyDelegate(__Instance, dispID);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE SetPageSite( 
        // DEBUG:             /* [in] */ __RPC__in_opt IPropertyPageSite *pPageSite) = 0
        public override int SetPageSite(global::SpoutDX.IPropertyPageSite pPageSite)
        {
            var ___SetPageSiteDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 3);
            var __arg0 = pPageSite is null ? __IntPtr.Zero : pPageSite.__Instance;
            var ___ret = ___SetPageSiteDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Deactivate( void) = 0
        public override int Deactivate()
        {
            var ___DeactivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 5);
            var ___ret = ___DeactivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetPageInfo( 
        // DEBUG:             /* [out] */ __RPC__out PROPPAGEINFO *pPageInfo) = 0
        public override int GetPageInfo(global::SpoutDX.TagPROPPAGEINFO pPageInfo)
        {
            var ___GetPageInfoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 6);
            var __arg0 = pPageInfo is null ? __IntPtr.Zero : pPageInfo.__Instance;
            var ___ret = ___GetPageInfoDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Show( 
        // DEBUG:             /* [in] */ UINT nCmdShow) = 0
        public override int Show(uint nCmdShow)
        {
            var ___ShowDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 8);
            var ___ret = ___ShowDelegate(__Instance, nCmdShow);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Apply( void) = 0
        public override int Apply()
        {
            var ___ApplyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 11);
            var ___ret = ___ApplyDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Help( 
        // DEBUG:             /* [in] */ __RPC__in LPCOLESTR pszHelpDir) = 0
        public override int Help(string pszHelpDir)
        {
            var ___HelpDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_wstring>(0, 12);
            var ___ret = ___HelpDelegate(__Instance, pszHelpDir);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int IsPageDirty
        {
            get
            {
                var ___IsPageDirtyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 10);
                var ___ret = ___IsPageDirtyDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IPropertyPageSiteInternal : global::SpoutDX.IPropertyPageSite, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPropertyPageSiteInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPropertyPageSiteInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnStatusChange( 
        // DEBUG:             /* [in] */ DWORD dwFlags) = 0
        public override int OnStatusChange(uint dwFlags)
        {
            var ___OnStatusChangeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 3);
            var ___ret = ___OnStatusChangeDelegate(__Instance, dwFlags);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetLocaleID( 
        // DEBUG:             /* [out] */ __RPC__out LCID *pLocaleID) = 0
        public override int GetLocaleID(ref uint pLocaleID)
        {
            var ___GetLocaleIDDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 4);
            fixed (uint* __pLocaleID0 = &pLocaleID)
            {
                var __arg0 = __pLocaleID0;
                var ___ret = ___GetLocaleIDDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IPropertyNotifySinkInternal : global::SpoutDX.IPropertyNotifySink, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPropertyNotifySinkInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPropertyNotifySinkInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnChanged( 
        // DEBUG:             /* [in] */ DISPID dispID) = 0
        public override int OnChanged(int dispID)
        {
            var ___OnChangedDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 3);
            var ___ret = ___OnChangedDelegate(__Instance, dispID);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnRequestEdit( 
        // DEBUG:             /* [in] */ DISPID dispID) = 0
        public override int OnRequestEdit(int dispID)
        {
            var ___OnRequestEditDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 4);
            var ___ret = ___OnRequestEditDelegate(__Instance, dispID);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class ISpecifyPropertyPagesInternal : global::SpoutDX.ISpecifyPropertyPages, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal ISpecifyPropertyPagesInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal ISpecifyPropertyPagesInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetPages( 
        // DEBUG:             /* [out] */ __RPC__out CAUUID *pPages) = 0
        public override int GetPages(global::SpoutDX.TagCAUUID pPages)
        {
            var ___GetPagesDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 3);
            var __arg0 = pPages is null ? __IntPtr.Zero : pPages.__Instance;
            var ___ret = ___GetPagesDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IPersistMemoryInternal : global::SpoutDX.IPersistMemory, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPersistMemoryInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPersistMemoryInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Load( 
        // DEBUG:             /* [size_is][in] */ LPVOID pMem,
        // DEBUG:             /* [in] */ ULONG cbSize) = 0
        public override int Load(__IntPtr pMem, uint cbSize)
        {
            var ___LoadDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_uint>(0, 5);
            var ___ret = ___LoadDelegate(__Instance, pMem, cbSize);
            return ___ret;
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Save( 
        // DEBUG:             /* [size_is][out] */ LPVOID pMem,
        // DEBUG:             /* [in] */ BOOL fClearDirty,
        // DEBUG:             /* [in] */ ULONG cbSize) = 0
        public override int Save(__IntPtr pMem, int fClearDirty, uint cbSize)
        {
            var ___SaveDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_int_uint>(0, 6);
            var ___ret = ___SaveDelegate(__Instance, pMem, fClearDirty, cbSize);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetSizeMax( 
        // DEBUG:             /* [out] */ __RPC__out ULONG *pCbSize) = 0
        public override int GetSizeMax(ref uint pCbSize)
        {
            var ___GetSizeMaxDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 7);
            fixed (uint* __pCbSize0 = &pCbSize)
            {
                var __arg0 = __pCbSize0;
                var ___ret = ___GetSizeMaxDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int IsDirty
        {
            get
            {
                var ___IsDirtyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 4);
                var ___ret = ___IsDirtyDelegate(__Instance);
                return ___ret;
            }
        }

        public override int InitNew
        {
            get
            {
                var ___InitNewDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 8);
                var ___ret = ___InitNewDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IPersistStreamInitInternal : global::SpoutDX.IPersistStreamInit, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPersistStreamInitInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPersistStreamInitInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int IsDirty
        {
            get
            {
                var ___IsDirtyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 4);
                var ___ret = ___IsDirtyDelegate(__Instance);
                return ___ret;
            }
        }

        public override int InitNew
        {
            get
            {
                var ___InitNewDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 8);
                var ___ret = ___InitNewDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IPersistPropertyBagInternal : global::SpoutDX.IPersistPropertyBag, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPersistPropertyBagInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPersistPropertyBagInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int InitNew
        {
            get
            {
                var ___InitNewDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 4);
                var ___ret = ___InitNewDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IPictureInternal : global::SpoutDX.IPicture, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPictureInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPictureInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Handle( 
        // DEBUG:             /* [out] */ __RPC__out OLE_HANDLE *pHandle) = 0
        public override int GetHandle(ref uint pHandle)
        {
            var ___GetHandleDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 3);
            fixed (uint* __pHandle0 = &pHandle)
            {
                var __arg0 = __pHandle0;
                var ___ret = ___GetHandleDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_hPal( 
        // DEBUG:             /* [out] */ __RPC__out OLE_HANDLE *phPal) = 0
        public override int GetHPal(ref uint phPal)
        {
            var ___GetHPalDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 4);
            fixed (uint* __phPal0 = &phPal)
            {
                var __arg0 = __phPal0;
                var ___ret = ___GetHPalDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Type( 
        // DEBUG:             /* [out] */ __RPC__out SHORT *pType) = 0
        public override int GetType(ref short pType)
        {
            var ___GetTypeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_shortPtr>(0, 5);
            fixed (short* __pType0 = &pType)
            {
                var __arg0 = __pType0;
                var ___ret = ___GetTypeDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Width( 
        // DEBUG:             /* [out] */ __RPC__out OLE_XSIZE_HIMETRIC *pWidth) = 0
        public override int GetWidth(ref int pWidth)
        {
            var ___GetWidthDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_intPtr>(0, 6);
            fixed (int* __pWidth0 = &pWidth)
            {
                var __arg0 = __pWidth0;
                var ___ret = ___GetWidthDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Height( 
        // DEBUG:             /* [out] */ __RPC__out OLE_YSIZE_HIMETRIC *pHeight) = 0
        public override int GetHeight(ref int pHeight)
        {
            var ___GetHeightDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_intPtr>(0, 7);
            fixed (int* __pHeight0 = &pHeight)
            {
                var __arg0 = __pHeight0;
                var ___ret = ___GetHeightDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE set_hPal( 
        // DEBUG:             /* [in] */ OLE_HANDLE hPal) = 0
        public override int SetHPal(uint hPal)
        {
            var ___SetHPalDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 9);
            var ___ret = ___SetHPalDelegate(__Instance, hPal);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_KeepOriginalFormat( 
        // DEBUG:             /* [out] */ __RPC__out BOOL *pKeep) = 0
        public override int GetKeepOriginalFormat(ref int pKeep)
        {
            var ___GetKeepOriginalFormatDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_intPtr>(0, 12);
            fixed (int* __pKeep0 = &pKeep)
            {
                var __arg0 = __pKeep0;
                var ___ret = ___GetKeepOriginalFormatDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE put_KeepOriginalFormat( 
        // DEBUG:             /* [in] */ BOOL keep) = 0
        public override int PutKeepOriginalFormat(int keep)
        {
            var ___PutKeepOriginalFormatDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 13);
            var ___ret = ___PutKeepOriginalFormatDelegate(__Instance, keep);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Attributes( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pDwAttr) = 0
        public override int GetAttributes(ref uint pDwAttr)
        {
            var ___GetAttributesDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 16);
            fixed (uint* __pDwAttr0 = &pDwAttr)
            {
                var __arg0 = __pDwAttr0;
                var ___ret = ___GetAttributesDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int PictureChanged
        {
            get
            {
                var ___PictureChangedDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 14);
                var ___ret = ___PictureChangedDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IPicture2Internal : global::SpoutDX.IPicture2, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPicture2Internal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPicture2Internal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Handle( 
        // DEBUG:             /* [out] */ __RPC__out HHANDLE *pHandle) = 0
        public override int GetHandle(ref ulong pHandle)
        {
            var ___GetHandleDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_ulongPtr>(0, 3);
            fixed (ulong* __pHandle0 = &pHandle)
            {
                var __arg0 = __pHandle0;
                var ___ret = ___GetHandleDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_hPal( 
        // DEBUG:             /* [out] */ __RPC__out HHANDLE *phPal) = 0
        public override int GetHPal(ref ulong phPal)
        {
            var ___GetHPalDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_ulongPtr>(0, 4);
            fixed (ulong* __phPal0 = &phPal)
            {
                var __arg0 = __phPal0;
                var ___ret = ___GetHPalDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Type( 
        // DEBUG:             /* [out] */ __RPC__out SHORT *pType) = 0
        public override int GetType(ref short pType)
        {
            var ___GetTypeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_shortPtr>(0, 5);
            fixed (short* __pType0 = &pType)
            {
                var __arg0 = __pType0;
                var ___ret = ___GetTypeDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Width( 
        // DEBUG:             /* [out] */ __RPC__out OLE_XSIZE_HIMETRIC *pWidth) = 0
        public override int GetWidth(ref int pWidth)
        {
            var ___GetWidthDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_intPtr>(0, 6);
            fixed (int* __pWidth0 = &pWidth)
            {
                var __arg0 = __pWidth0;
                var ___ret = ___GetWidthDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Height( 
        // DEBUG:             /* [out] */ __RPC__out OLE_YSIZE_HIMETRIC *pHeight) = 0
        public override int GetHeight(ref int pHeight)
        {
            var ___GetHeightDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_intPtr>(0, 7);
            fixed (int* __pHeight0 = &pHeight)
            {
                var __arg0 = __pHeight0;
                var ___ret = ___GetHeightDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE set_hPal( 
        // DEBUG:             /* [in] */ HHANDLE hPal) = 0
        public override int SetHPal(ulong hPal)
        {
            var ___SetHPalDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_ulong>(0, 9);
            var ___ret = ___SetHPalDelegate(__Instance, hPal);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_KeepOriginalFormat( 
        // DEBUG:             /* [out] */ __RPC__out BOOL *pKeep) = 0
        public override int GetKeepOriginalFormat(ref int pKeep)
        {
            var ___GetKeepOriginalFormatDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_intPtr>(0, 12);
            fixed (int* __pKeep0 = &pKeep)
            {
                var __arg0 = __pKeep0;
                var ___ret = ___GetKeepOriginalFormatDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE put_KeepOriginalFormat( 
        // DEBUG:             /* [in] */ BOOL keep) = 0
        public override int PutKeepOriginalFormat(int keep)
        {
            var ___PutKeepOriginalFormatDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 13);
            var ___ret = ___PutKeepOriginalFormatDelegate(__Instance, keep);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE get_Attributes( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pDwAttr) = 0
        public override int GetAttributes(ref uint pDwAttr)
        {
            var ___GetAttributesDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 16);
            fixed (uint* __pDwAttr0 = &pDwAttr)
            {
                var __arg0 = __pDwAttr0;
                var ___ret = ___GetAttributesDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int PictureChanged
        {
            get
            {
                var ___PictureChangedDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 14);
                var ___ret = ___PictureChangedDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IOleInPlaceObjectWindowlessInternal : global::SpoutDX.IOleInPlaceObjectWindowless, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IOleInPlaceObjectWindowlessInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IOleInPlaceObjectWindowlessInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnWindowMessage( 
        // DEBUG:             /* [in] */ UINT msg,
        // DEBUG:             /* [in] */ WPARAM wParam,
        // DEBUG:             /* [in] */ LPARAM lParam,
        // DEBUG:             /* [out] */ __RPC__out LRESULT *plResult) = 0
        public override int OnWindowMessage(uint msg, ulong wParam, long lParam, ref long plResult)
        {
            var ___OnWindowMessageDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint_ulong_long_longPtr>(0, 9);
            fixed (long* __plResult3 = &plResult)
            {
                var __arg3 = __plResult3;
                var ___ret = ___OnWindowMessageDelegate(__Instance, msg, wParam, lParam, __arg3);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE InPlaceDeactivate( void) = 0
        public virtual int InPlaceDeactivate()
        {
            var ___InPlaceDeactivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 5);
            var ___ret = ___InPlaceDeactivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE UIDeactivate( void) = 0
        public virtual int UIDeactivate()
        {
            var ___UIDeactivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 6);
            var ___ret = ___UIDeactivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE ReactivateAndUndo( void) = 0
        public virtual int ReactivateAndUndo()
        {
            var ___ReactivateAndUndoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 8);
            var ___ret = ___ReactivateAndUndoDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE ContextSensitiveHelp( 
        // DEBUG:             /* [in] */ BOOL fEnterMode) = 0
        public virtual int ContextSensitiveHelp(int fEnterMode)
        {
            var ___ContextSensitiveHelpDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 4);
            var ___ret = ___ContextSensitiveHelpDelegate(__Instance, fEnterMode);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IOleInPlaceSiteExInternal : global::SpoutDX.IOleInPlaceSiteEx, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IOleInPlaceSiteExInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IOleInPlaceSiteExInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceActivateEx( 
        // DEBUG:             /* [out] */ __RPC__out BOOL *pfNoRedraw,
        // DEBUG:             /* [in] */ DWORD dwFlags) = 0
        public override int OnInPlaceActivateEx(ref int pfNoRedraw, uint dwFlags)
        {
            var ___OnInPlaceActivateExDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_intPtr_uint>(0, 15);
            fixed (int* __pfNoRedraw0 = &pfNoRedraw)
            {
                var __arg0 = __pfNoRedraw0;
                var ___ret = ___OnInPlaceActivateExDelegate(__Instance, __arg0, dwFlags);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceDeactivateEx( 
        // DEBUG:             /* [in] */ BOOL fNoRedraw) = 0
        public override int OnInPlaceDeactivateEx(int fNoRedraw)
        {
            var ___OnInPlaceDeactivateExDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 16);
            var ___ret = ___OnInPlaceDeactivateExDelegate(__Instance, fNoRedraw);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CanInPlaceActivate( void) = 0
        public virtual int CanInPlaceActivate()
        {
            var ___CanInPlaceActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 5);
            var ___ret = ___CanInPlaceActivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceActivate( void) = 0
        public virtual int OnInPlaceActivate()
        {
            var ___OnInPlaceActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 6);
            var ___ret = ___OnInPlaceActivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnUIActivate( void) = 0
        public virtual int OnUIActivate()
        {
            var ___OnUIActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 7);
            var ___ret = ___OnUIActivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnUIDeactivate( 
        // DEBUG:             /* [in] */ BOOL fUndoable) = 0
        public virtual int OnUIDeactivate(int fUndoable)
        {
            var ___OnUIDeactivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 10);
            var ___ret = ___OnUIDeactivateDelegate(__Instance, fUndoable);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceDeactivate( void) = 0
        public virtual int OnInPlaceDeactivate()
        {
            var ___OnInPlaceDeactivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 11);
            var ___ret = ___OnInPlaceDeactivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE DiscardUndoState( void) = 0
        public virtual int DiscardUndoState()
        {
            var ___DiscardUndoStateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 12);
            var ___ret = ___DiscardUndoStateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE DeactivateAndUndo( void) = 0
        public virtual int DeactivateAndUndo()
        {
            var ___DeactivateAndUndoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 13);
            var ___ret = ___DeactivateAndUndoDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE ContextSensitiveHelp( 
        // DEBUG:             /* [in] */ BOOL fEnterMode) = 0
        public virtual int ContextSensitiveHelp(int fEnterMode)
        {
            var ___ContextSensitiveHelpDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 4);
            var ___ret = ___ContextSensitiveHelpDelegate(__Instance, fEnterMode);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int RequestUIActivate
        {
            get
            {
                var ___RequestUIActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 17);
                var ___ret = ___RequestUIActivateDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IOleInPlaceSiteWindowlessInternal : global::SpoutDX.IOleInPlaceSiteWindowless, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IOleInPlaceSiteWindowlessInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IOleInPlaceSiteWindowlessInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CanWindowlessActivate( void) = 0
        public override int CanWindowlessActivate()
        {
            var ___CanWindowlessActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 18);
            var ___ret = ___CanWindowlessActivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE SetCapture( 
        // DEBUG:             /* [in] */ BOOL fCapture) = 0
        public override int SetCapture(int fCapture)
        {
            var ___SetCaptureDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 20);
            var ___ret = ___SetCaptureDelegate(__Instance, fCapture);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE SetFocus( 
        // DEBUG:             /* [in] */ BOOL fFocus) = 0
        public override int SetFocus(int fFocus)
        {
            var ___SetFocusDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 22);
            var ___ret = ___SetFocusDelegate(__Instance, fFocus);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnDefWindowMessage( 
        // DEBUG:             /* [annotation][in] */ 
        // DEBUG:             _In_  UINT msg,
        // DEBUG:             /* [annotation][in] */ 
        // DEBUG:             _In_  WPARAM wParam,
        // DEBUG:             /* [annotation][in] */ 
        // DEBUG:             _In_  LPARAM lParam,
        // DEBUG:             /* [out] */ __RPC__out LRESULT *plResult) = 0
        public override int OnDefWindowMessage(uint msg, ulong wParam, long lParam, ref long plResult)
        {
            var ___OnDefWindowMessageDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint_ulong_long_longPtr>(0, 29);
            fixed (long* __plResult3 = &plResult)
            {
                var __arg3 = __plResult3;
                var ___ret = ___OnDefWindowMessageDelegate(__Instance, msg, wParam, lParam, __arg3);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceActivateEx( 
        // DEBUG:             /* [out] */ __RPC__out BOOL *pfNoRedraw,
        // DEBUG:             /* [in] */ DWORD dwFlags) = 0
        public override int OnInPlaceActivateEx(ref int pfNoRedraw, uint dwFlags)
        {
            var ___OnInPlaceActivateExDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_intPtr_uint>(0, 15);
            fixed (int* __pfNoRedraw0 = &pfNoRedraw)
            {
                var __arg0 = __pfNoRedraw0;
                var ___ret = ___OnInPlaceActivateExDelegate(__Instance, __arg0, dwFlags);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceDeactivateEx( 
        // DEBUG:             /* [in] */ BOOL fNoRedraw) = 0
        public override int OnInPlaceDeactivateEx(int fNoRedraw)
        {
            var ___OnInPlaceDeactivateExDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 16);
            var ___ret = ___OnInPlaceDeactivateExDelegate(__Instance, fNoRedraw);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CanInPlaceActivate( void) = 0
        public virtual int CanInPlaceActivate()
        {
            var ___CanInPlaceActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 5);
            var ___ret = ___CanInPlaceActivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceActivate( void) = 0
        public virtual int OnInPlaceActivate()
        {
            var ___OnInPlaceActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 6);
            var ___ret = ___OnInPlaceActivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnUIActivate( void) = 0
        public virtual int OnUIActivate()
        {
            var ___OnUIActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 7);
            var ___ret = ___OnUIActivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnUIDeactivate( 
        // DEBUG:             /* [in] */ BOOL fUndoable) = 0
        public virtual int OnUIDeactivate(int fUndoable)
        {
            var ___OnUIDeactivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 10);
            var ___ret = ___OnUIDeactivateDelegate(__Instance, fUndoable);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnInPlaceDeactivate( void) = 0
        public virtual int OnInPlaceDeactivate()
        {
            var ___OnInPlaceDeactivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 11);
            var ___ret = ___OnInPlaceDeactivateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE DiscardUndoState( void) = 0
        public virtual int DiscardUndoState()
        {
            var ___DiscardUndoStateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 12);
            var ___ret = ___DiscardUndoStateDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE DeactivateAndUndo( void) = 0
        public virtual int DeactivateAndUndo()
        {
            var ___DeactivateAndUndoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 13);
            var ___ret = ___DeactivateAndUndoDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE ContextSensitiveHelp( 
        // DEBUG:             /* [in] */ BOOL fEnterMode) = 0
        public virtual int ContextSensitiveHelp(int fEnterMode)
        {
            var ___ContextSensitiveHelpDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 4);
            var ___ret = ___ContextSensitiveHelpDelegate(__Instance, fEnterMode);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int Capture
        {
            get
            {
                var ___GetCaptureDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 19);
                var ___ret = ___GetCaptureDelegate(__Instance);
                return ___ret;
            }
        }

        public override int Focus
        {
            get
            {
                var ___GetFocusDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 21);
                var ___ret = ___GetFocusDelegate(__Instance);
                return ___ret;
            }
        }

        public override int RequestUIActivate
        {
            get
            {
                var ___RequestUIActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 17);
                var ___ret = ___RequestUIActivateDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IViewObjectExInternal : global::SpoutDX.IViewObjectEx, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IViewObjectExInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IViewObjectExInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetViewStatus( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pdwStatus) = 0
        public override int GetViewStatus(ref uint pdwStatus)
        {
            var ___GetViewStatusDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 11);
            fixed (uint* __pdwStatus0 = &pdwStatus)
            {
                var __arg0 = __pdwStatus0;
                var ___ret = ___GetViewStatusDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Unfreeze( 
        // DEBUG:             /* [in] */ DWORD dwFreeze) = 0
        public virtual int Unfreeze(uint dwFreeze)
        {
            var ___UnfreezeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 6);
            var ___ret = ___UnfreezeDelegate(__Instance, dwFreeze);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IOleUndoUnitInternal : global::SpoutDX.IOleUndoUnit, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IOleUndoUnitInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IOleUndoUnitInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Do( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoManager *pUndoManager) = 0
        public override int Do(global::SpoutDX.IOleUndoManager pUndoManager)
        {
            var ___DoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 3);
            var __arg0 = pUndoManager is null ? __IntPtr.Zero : pUndoManager.__Instance;
            var ___ret = ___DoDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetDescription( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        public override int GetDescription(char** pBstr)
        {
            var ___GetDescriptionDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_charPtrPtr>(0, 4);
            var ___ret = ___GetDescriptionDelegate(__Instance, pBstr);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnNextAdd( void) = 0
        public override int OnNextAdd()
        {
            var ___OnNextAddDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 6);
            var ___ret = ___OnNextAddDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IOleParentUndoUnitInternal : global::SpoutDX.IOleParentUndoUnit, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IOleParentUndoUnitInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IOleParentUndoUnitInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Open( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU) = 0
        public override int Open(global::SpoutDX.IOleParentUndoUnit pPUU)
        {
            var ___OpenDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 7);
            var __arg0 = pPUU is null ? __IntPtr.Zero : pPUU.__Instance;
            var ___ret = ___OpenDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Close( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU,
        // DEBUG:             /* [in] */ BOOL fCommit) = 0
        public override int Close(global::SpoutDX.IOleParentUndoUnit pPUU, int fCommit)
        {
            var ___CloseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_int>(0, 8);
            var __arg0 = pPUU is null ? __IntPtr.Zero : pPUU.__Instance;
            var ___ret = ___CloseDelegate(__Instance, __arg0, fCommit);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Add( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public override int Add(global::SpoutDX.IOleUndoUnit pUU)
        {
            var ___AddDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 9);
            var __arg0 = pUU is null ? __IntPtr.Zero : pUU.__Instance;
            var ___ret = ___AddDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE FindUnit( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public override int FindUnit(global::SpoutDX.IOleUndoUnit pUU)
        {
            var ___FindUnitDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 10);
            var __arg0 = pUU is null ? __IntPtr.Zero : pUU.__Instance;
            var ___ret = ___FindUnitDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetParentState( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pdwState) = 0
        public override int GetParentState(ref uint pdwState)
        {
            var ___GetParentStateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 11);
            fixed (uint* __pdwState0 = &pdwState)
            {
                var __arg0 = __pdwState0;
                var ___ret = ___GetParentStateDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Do( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoManager *pUndoManager) = 0
        public override int Do(global::SpoutDX.IOleUndoManager pUndoManager)
        {
            var ___DoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 3);
            var __arg0 = pUndoManager is null ? __IntPtr.Zero : pUndoManager.__Instance;
            var ___ret = ___DoDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetDescription( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        public override int GetDescription(char** pBstr)
        {
            var ___GetDescriptionDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_charPtrPtr>(0, 4);
            var ___ret = ___GetDescriptionDelegate(__Instance, pBstr);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE OnNextAdd( void) = 0
        public override int OnNextAdd()
        {
            var ___OnNextAddDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 6);
            var ___ret = ___OnNextAddDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IEnumOleUndoUnitsInternal : global::SpoutDX.IEnumOleUndoUnits, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IEnumOleUndoUnitsInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IEnumOleUndoUnitsInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
        // DEBUG:             /* [in] */ ULONG cElt,
        // DEBUG:             /* [length_is][size_is][out] */ IOleUndoUnit **rgElt,
        // DEBUG:             /* [out] */ ULONG *pcEltFetched) = 0
        public override int Next(uint cElt, global::SpoutDX.IOleUndoUnit rgElt, ref uint pcEltFetched)
        {
            var ___NextDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint___IntPtr_uintPtr>(0, 3);
            var ____arg1 = rgElt is null ? __IntPtr.Zero : rgElt.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            fixed (uint* __pcEltFetched2 = &pcEltFetched)
            {
                var __arg2 = __pcEltFetched2;
                var ___ret = ___NextDelegate(__Instance, cElt, __arg1, __arg2);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Skip( 
        // DEBUG:             /* [in] */ ULONG cElt) = 0
        public override int Skip(uint cElt)
        {
            var ___SkipDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 4);
            var ___ret = ___SkipDelegate(__Instance, cElt);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0
        public override int Reset()
        {
            var ___ResetDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 5);
            var ___ret = ___ResetDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Clone( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0
        public override int Clone(global::SpoutDX.IEnumOleUndoUnits ppEnum)
        {
            var ___CloneDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 6);
            var ____arg0 = ppEnum is null ? __IntPtr.Zero : ppEnum.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = ___CloneDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IOleUndoManagerInternal : global::SpoutDX.IOleUndoManager, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IOleUndoManagerInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IOleUndoManagerInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Open( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU) = 0
        public override int Open(global::SpoutDX.IOleParentUndoUnit pPUU)
        {
            var ___OpenDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 3);
            var __arg0 = pPUU is null ? __IntPtr.Zero : pPUU.__Instance;
            var ___ret = ___OpenDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Close( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleParentUndoUnit *pPUU,
        // DEBUG:             /* [in] */ BOOL fCommit) = 0
        public override int Close(global::SpoutDX.IOleParentUndoUnit pPUU, int fCommit)
        {
            var ___CloseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_int>(0, 4);
            var __arg0 = pPUU is null ? __IntPtr.Zero : pPUU.__Instance;
            var ___ret = ___CloseDelegate(__Instance, __arg0, fCommit);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Add( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public override int Add(global::SpoutDX.IOleUndoUnit pUU)
        {
            var ___AddDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 5);
            var __arg0 = pUU is null ? __IntPtr.Zero : pUU.__Instance;
            var ___ret = ___AddDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetOpenParentState( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pdwState) = 0
        public override int GetOpenParentState(ref uint pdwState)
        {
            var ___GetOpenParentStateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 6);
            fixed (uint* __pdwState0 = &pdwState)
            {
                var __arg0 = __pdwState0;
                var ___ret = ___GetOpenParentStateDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE DiscardFrom( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public override int DiscardFrom(global::SpoutDX.IOleUndoUnit pUU)
        {
            var ___DiscardFromDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 7);
            var __arg0 = pUU is null ? __IntPtr.Zero : pUU.__Instance;
            var ___ret = ___DiscardFromDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE UndoTo( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public override int UndoTo(global::SpoutDX.IOleUndoUnit pUU)
        {
            var ___UndoToDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 8);
            var __arg0 = pUU is null ? __IntPtr.Zero : pUU.__Instance;
            var ___ret = ___UndoToDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE RedoTo( 
        // DEBUG:             /* [in] */ __RPC__in_opt IOleUndoUnit *pUU) = 0
        public override int RedoTo(global::SpoutDX.IOleUndoUnit pUU)
        {
            var ___RedoToDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 9);
            var __arg0 = pUU is null ? __IntPtr.Zero : pUU.__Instance;
            var ___ret = ___RedoToDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EnumUndoable( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0
        public override int EnumUndoable(global::SpoutDX.IEnumOleUndoUnits ppEnum)
        {
            var ___EnumUndoableDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 10);
            var ____arg0 = ppEnum is null ? __IntPtr.Zero : ppEnum.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = ___EnumUndoableDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE EnumRedoable( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt IEnumOleUndoUnits **ppEnum) = 0
        public override int EnumRedoable(global::SpoutDX.IEnumOleUndoUnits ppEnum)
        {
            var ___EnumRedoableDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 11);
            var ____arg0 = ppEnum is null ? __IntPtr.Zero : ppEnum.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = ___EnumRedoableDelegate(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetLastUndoDescription( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        public override int GetLastUndoDescription(char** pBstr)
        {
            var ___GetLastUndoDescriptionDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_charPtrPtr>(0, 12);
            var ___ret = ___GetLastUndoDescriptionDelegate(__Instance, pBstr);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetLastRedoDescription( 
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        public override int GetLastRedoDescription(char** pBstr)
        {
            var ___GetLastRedoDescriptionDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_charPtrPtr>(0, 13);
            var ___ret = ___GetLastRedoDescriptionDelegate(__Instance, pBstr);
            return ___ret;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Enable( 
        // DEBUG:             /* [in] */ BOOL fEnable) = 0
        public override int Enable(int fEnable)
        {
            var ___EnableDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int>(0, 14);
            var ___ret = ___EnableDelegate(__Instance, fEnable);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IPointerInactiveInternal : global::SpoutDX.IPointerInactive, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPointerInactiveInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPointerInactiveInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetActivationPolicy( 
        // DEBUG:             /* [out] */ __RPC__out DWORD *pdwPolicy) = 0
        public override int GetActivationPolicy(ref uint pdwPolicy)
        {
            var ___GetActivationPolicyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 3);
            fixed (uint* __pdwPolicy0 = &pdwPolicy)
            {
                var __arg0 = __pdwPolicy0;
                var ___ret = ___GetActivationPolicyDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IPerPropertyBrowsingInternal : global::SpoutDX.IPerPropertyBrowsing, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPerPropertyBrowsingInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPerPropertyBrowsingInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetDisplayString( 
        // DEBUG:             /* [in] */ DISPID dispID,
        // DEBUG:             /* [out] */ __RPC__deref_out_opt BSTR *pBstr) = 0
        public override int GetDisplayString(int dispID, char** pBstr)
        {
            var ___GetDisplayStringDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_int_charPtrPtr>(0, 3);
            var ___ret = ___GetDisplayStringDelegate(__Instance, dispID, pBstr);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IPropertyBag2Internal : global::SpoutDX.IPropertyBag2, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPropertyBag2Internal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPropertyBag2Internal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE CountProperties( 
        // DEBUG:             /* [out] */ __RPC__out ULONG *pcProperties) = 0
        public override int CountProperties(ref uint pcProperties)
        {
            var ___CountPropertiesDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uintPtr>(0, 5);
            fixed (uint* __pcProperties0 = &pcProperties)
            {
                var __arg0 = __pcProperties0;
                var ___ret = ___CountPropertiesDelegate(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE GetPropertyInfo( 
        // DEBUG:             /* [in] */ ULONG iProperty,
        // DEBUG:             /* [in] */ ULONG cProperties,
        // DEBUG:             /* [size_is][out] */ __RPC__out_ecount_full(cProperties) PROPBAG2 *pPropBag,
        // DEBUG:             /* [out] */ __RPC__out ULONG *pcProperties) = 0
        public override int GetPropertyInfo(uint iProperty, uint cProperties, global::SpoutDX.TagPROPBAG2 pPropBag, ref uint pcProperties)
        {
            var ___GetPropertyInfoDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint_uint___IntPtr_uintPtr>(0, 6);
            var __arg2 = pPropBag is null ? __IntPtr.Zero : pPropBag.__Instance;
            fixed (uint* __pcProperties3 = &pcProperties)
            {
                var __arg3 = __pcProperties3;
                var ___ret = ___GetPropertyInfoDelegate(__Instance, iProperty, cProperties, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IPersistPropertyBag2Internal : global::SpoutDX.IPersistPropertyBag2, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IPersistPropertyBag2Internal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IPersistPropertyBag2Internal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE Save( 
        // DEBUG:             /* [in] */ __RPC__in_opt IPropertyBag2 *pPropBag,
        // DEBUG:             /* [in] */ BOOL fClearDirty,
        // DEBUG:             /* [in] */ BOOL fSaveAllProperties) = 0
        public override int Save(global::SpoutDX.IPropertyBag2 pPropBag, int fClearDirty, int fSaveAllProperties)
        {
            var ___SaveDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr_int_int>(0, 6);
            var __arg0 = pPropBag is null ? __IntPtr.Zero : pPropBag.__Instance;
            var ___ret = ___SaveDelegate(__Instance, __arg0, fClearDirty, fSaveAllProperties);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }

        public override int InitNew
        {
            get
            {
                var ___InitNewDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 4);
                var ___ret = ___InitNewDelegate(__Instance);
                return ___ret;
            }
        }

        public override int IsDirty
        {
            get
            {
                var ___IsDirtyDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr>(0, 7);
                var ___ret = ___IsDirtyDelegate(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class IAdviseSinkExInternal : global::SpoutDX.IAdviseSinkEx, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IAdviseSinkExInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IAdviseSinkExInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual /* [local] */ void STDMETHODCALLTYPE OnViewStatusChange( 
        // DEBUG:             /* [in] */ DWORD dwViewStatus) = 0
        public override void OnViewStatusChange(uint dwViewStatus)
        {
            var ___OnViewStatusChangeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uint>(0, 8);
            ___OnViewStatusChangeDelegate(__Instance, dwViewStatus);
        }

        // DEBUG: virtual /* [local] */ void STDMETHODCALLTYPE OnViewChange( 
        // DEBUG:             /* [in] */ DWORD dwAspect,
        // DEBUG:             /* [in] */ LONG lindex) = 0
        public virtual void OnViewChange(uint dwAspect, int lindex)
        {
            var ___OnViewChangeDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_uint_int>(0, 4);
            ___OnViewChangeDelegate(__Instance, dwAspect, lindex);
        }

        // DEBUG: virtual /* [local] */ void STDMETHODCALLTYPE OnSave( void) = 0
        public virtual void OnSave()
        {
            var ___OnSaveDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr>(0, 6);
            ___OnSaveDelegate(__Instance);
        }

        // DEBUG: virtual /* [local] */ void STDMETHODCALLTYPE OnClose( void) = 0
        public virtual void OnClose()
        {
            var ___OnCloseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr>(0, 7);
            ___OnCloseDelegate(__Instance);
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class IQuickActivateInternal : global::SpoutDX.IQuickActivate, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal IQuickActivateInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal IQuickActivateInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual /* [local] */ HRESULT STDMETHODCALLTYPE QuickActivate( 
        // DEBUG:             /* [in] */ QACONTAINER *pQaContainer,
        // DEBUG:             /* [out][in] */ QACONTROL *pQaControl) = 0
        public override int QuickActivate(global::SpoutDX.TagQACONTAINER pQaContainer, global::SpoutDX.TagQACONTROL pQaControl)
        {
            var ___QuickActivateDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr___IntPtr>(0, 3);
            var __arg0 = pQaContainer is null ? __IntPtr.Zero : pQaContainer.__Instance;
            var __arg1 = pQaControl is null ? __IntPtr.Zero : pQaControl.__Instance;
            var ___ret = ___QuickActivateDelegate(__Instance, __arg0, __arg1);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class OCIdl
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IEnumConnections_RemoteNext_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IEnumConnectionsRemoteNextProxy(__IntPtr This, uint cConnections, __IntPtr rgcd, uint* pcFetched);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IEnumConnectionPoints_RemoteNext_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IEnumConnectionPointsRemoteNextProxy(__IntPtr This, uint cConnections, __IntPtr ppCP, uint* pcFetched);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IPersistMemory_RemoteLoad_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IPersistMemoryRemoteLoadProxy(__IntPtr This, byte* pMem, uint cbSize);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IPersistMemory_RemoteSave_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IPersistMemoryRemoteSaveProxy(__IntPtr This, byte* pMem, int fClearDirty, uint cbSize);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IEnumOleUndoUnits_RemoteNext_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IEnumOleUndoUnitsRemoteNextProxy(__IntPtr This, uint cElt, __IntPtr rgElt, uint* pcEltFetched);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IAdviseSinkEx_RemoteOnViewStatusChange_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IAdviseSinkExRemoteOnViewStatusChangeProxy(__IntPtr This, uint dwViewStatus);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IQuickActivate_RemoteQuickActivate_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IQuickActivateRemoteQuickActivateProxy(__IntPtr This, __IntPtr pQaContainer, __IntPtr pQaControl);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "BSTR_UserSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint BSTR_UserSize(uint* _0, uint _1, char** _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "BSTR_UserMarshal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* BSTR_UserMarshal(uint* _0, byte* _1, char** _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "BSTR_UserUnmarshal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* BSTR_UserUnmarshal(uint* _0, byte* _1, char** _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "BSTR_UserFree", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BSTR_UserFree(uint* _0, char** _1);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "CLIPFORMAT_UserSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint CLIPFORMAT_UserSize(uint* _0, uint _1, ushort* _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "CLIPFORMAT_UserMarshal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* CLIPFORMAT_UserMarshal(uint* _0, byte* _1, ushort* _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "CLIPFORMAT_UserUnmarshal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* CLIPFORMAT_UserUnmarshal(uint* _0, byte* _1, ushort* _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "CLIPFORMAT_UserFree", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CLIPFORMAT_UserFree(uint* _0, ushort* _1);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "BSTR_UserSize64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint BSTR_UserSize64(uint* _0, uint _1, char** _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "BSTR_UserMarshal64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* BSTR_UserMarshal64(uint* _0, byte* _1, char** _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "BSTR_UserUnmarshal64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* BSTR_UserUnmarshal64(uint* _0, byte* _1, char** _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "BSTR_UserFree64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BSTR_UserFree64(uint* _0, char** _1);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "CLIPFORMAT_UserSize64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint CLIPFORMAT_UserSize64(uint* _0, uint _1, ushort* _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "CLIPFORMAT_UserMarshal64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* CLIPFORMAT_UserMarshal64(uint* _0, byte* _1, ushort* _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "CLIPFORMAT_UserUnmarshal64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* CLIPFORMAT_UserUnmarshal64(uint* _0, byte* _1, ushort* _2);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "CLIPFORMAT_UserFree64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CLIPFORMAT_UserFree64(uint* _0, ushort* _1);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IEnumConnections_Next_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IEnumConnectionsNextProxy(__IntPtr This, uint cConnections, __IntPtr rgcd, uint* pcFetched);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IEnumConnections_Next_Stub", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IEnumConnectionsNextStub(__IntPtr This, uint cConnections, __IntPtr rgcd, uint* pcFetched);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IEnumConnectionPoints_Next_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IEnumConnectionPointsNextProxy(__IntPtr This, uint cConnections, __IntPtr ppCP, uint* pcFetched);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IEnumConnectionPoints_Next_Stub", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IEnumConnectionPointsNextStub(__IntPtr This, uint cConnections, __IntPtr ppCP, uint* pcFetched);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IPersistMemory_Load_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IPersistMemoryLoadProxy(__IntPtr This, __IntPtr pMem, uint cbSize);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IPersistMemory_Load_Stub", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IPersistMemoryLoadStub(__IntPtr This, byte* pMem, uint cbSize);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IPersistMemory_Save_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IPersistMemorySaveProxy(__IntPtr This, __IntPtr pMem, int fClearDirty, uint cbSize);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IPersistMemory_Save_Stub", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IPersistMemorySaveStub(__IntPtr This, byte* pMem, int fClearDirty, uint cbSize);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IEnumOleUndoUnits_Next_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IEnumOleUndoUnitsNextProxy(__IntPtr This, uint cElt, __IntPtr rgElt, uint* pcEltFetched);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IEnumOleUndoUnits_Next_Stub", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IEnumOleUndoUnitsNextStub(__IntPtr This, uint cElt, __IntPtr rgElt, uint* pcEltFetched);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IAdviseSinkEx_OnViewStatusChange_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IAdviseSinkExOnViewStatusChangeProxy(__IntPtr This, uint dwViewStatus);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IAdviseSinkEx_OnViewStatusChange_Stub", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IAdviseSinkExOnViewStatusChangeStub(__IntPtr This, uint dwViewStatus);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IQuickActivate_QuickActivate_Proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IQuickActivateQuickActivateProxy(__IntPtr This, __IntPtr pQaContainer, __IntPtr pQaControl);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "IQuickActivate_QuickActivate_Stub", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IQuickActivateQuickActivateStub(__IntPtr This, __IntPtr pQaContainer, __IntPtr pQaControl);
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IEnumConnections_RemoteNext_Proxy( 
        // DEBUG:     __RPC__in IEnumConnections * This,
        // DEBUG:     /* [in] */ ULONG cConnections,
        // DEBUG:     /* [length_is][size_is][out] */ __RPC__out_ecount_part(cConnections, *pcFetched) LPCONNECTDATA rgcd,
        // DEBUG:     /* [out] */ __RPC__out ULONG *pcFetched)
        public static int IEnumConnectionsRemoteNextProxy(global::SpoutDX.IEnumConnections This, uint cConnections, global::SpoutDX.TagCONNECTDATA rgcd, ref uint pcFetched)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var __arg2 = rgcd is null ? __IntPtr.Zero : rgcd.__Instance;
            fixed (uint* __pcFetched3 = &pcFetched)
            {
                var __arg3 = __pcFetched3;
                var ___ret = __Internal.IEnumConnectionsRemoteNextProxy(__arg0, cConnections, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_RemoteNext_Proxy( 
        // DEBUG:     __RPC__in IEnumConnectionPoints * This,
        // DEBUG:     /* [in] */ ULONG cConnections,
        // DEBUG:     /* [length_is][size_is][out] */ __RPC__out_ecount_part(cConnections, *pcFetched) LPCONNECTIONPOINT *ppCP,
        // DEBUG:     /* [out] */ __RPC__out ULONG *pcFetched)
        public static int IEnumConnectionPointsRemoteNextProxy(global::SpoutDX.IEnumConnectionPoints This, uint cConnections, global::SpoutDX.IConnectionPoint ppCP, ref uint pcFetched)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ____arg2 = ppCP is null ? __IntPtr.Zero : ppCP.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            fixed (uint* __pcFetched3 = &pcFetched)
            {
                var __arg3 = __pcFetched3;
                var ___ret = __Internal.IEnumConnectionPointsRemoteNextProxy(__arg0, cConnections, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IPersistMemory_RemoteLoad_Proxy( 
        // DEBUG:     __RPC__in IPersistMemory * This,
        // DEBUG:     /* [size_is][in] */ __RPC__in_ecount_full(cbSize) BYTE *pMem,
        // DEBUG:     /* [in] */ ULONG cbSize)
        public static int IPersistMemoryRemoteLoadProxy(global::SpoutDX.IPersistMemory This, byte* pMem, uint cbSize)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ___ret = __Internal.IPersistMemoryRemoteLoadProxy(__arg0, pMem, cbSize);
            return ___ret;
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IPersistMemory_RemoteSave_Proxy( 
        // DEBUG:     __RPC__in IPersistMemory * This,
        // DEBUG:     /* [size_is][out] */ __RPC__out_ecount_full(cbSize) BYTE *pMem,
        // DEBUG:     /* [in] */ BOOL fClearDirty,
        // DEBUG:     /* [in] */ ULONG cbSize)
        public static int IPersistMemoryRemoteSaveProxy(global::SpoutDX.IPersistMemory This, byte* pMem, int fClearDirty, uint cbSize)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ___ret = __Internal.IPersistMemoryRemoteSaveProxy(__arg0, pMem, fClearDirty, cbSize);
            return ___ret;
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IEnumOleUndoUnits_RemoteNext_Proxy( 
        // DEBUG:     __RPC__in IEnumOleUndoUnits * This,
        // DEBUG:     /* [in] */ ULONG cElt,
        // DEBUG:     /* [length_is][size_is][out] */ __RPC__out_ecount_part(cElt, *pcEltFetched) IOleUndoUnit **rgElt,
        // DEBUG:     /* [out] */ __RPC__out ULONG *pcEltFetched)
        public static int IEnumOleUndoUnitsRemoteNextProxy(global::SpoutDX.IEnumOleUndoUnits This, uint cElt, global::SpoutDX.IOleUndoUnit rgElt, ref uint pcEltFetched)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ____arg2 = rgElt is null ? __IntPtr.Zero : rgElt.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            fixed (uint* __pcEltFetched3 = &pcEltFetched)
            {
                var __arg3 = __pcEltFetched3;
                var ___ret = __Internal.IEnumOleUndoUnitsRemoteNextProxy(__arg0, cElt, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IAdviseSinkEx_RemoteOnViewStatusChange_Proxy( 
        // DEBUG:     __RPC__in IAdviseSinkEx * This,
        // DEBUG:     /* [in] */ DWORD dwViewStatus)
        public static int IAdviseSinkExRemoteOnViewStatusChangeProxy(global::SpoutDX.IAdviseSinkEx This, uint dwViewStatus)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ___ret = __Internal.IAdviseSinkExRemoteOnViewStatusChangeProxy(__arg0, dwViewStatus);
            return ___ret;
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IQuickActivate_RemoteQuickActivate_Proxy( 
        // DEBUG:     __RPC__in IQuickActivate * This,
        // DEBUG:     /* [in] */ __RPC__in QACONTAINER *pQaContainer,
        // DEBUG:     /* [out] */ __RPC__out QACONTROL *pQaControl)
        public static int IQuickActivateRemoteQuickActivateProxy(global::SpoutDX.IQuickActivate This, global::SpoutDX.TagQACONTAINER pQaContainer, global::SpoutDX.TagQACONTROL pQaControl)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var __arg1 = pQaContainer is null ? __IntPtr.Zero : pQaContainer.__Instance;
            var __arg2 = pQaControl is null ? __IntPtr.Zero : pQaControl.__Instance;
            var ___ret = __Internal.IQuickActivateRemoteQuickActivateProxy(__arg0, __arg1, __arg2);
            return ___ret;
        }

        // DEBUG: unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * )
        public static uint BSTR_UserSize(ref uint _0, uint _1, char** _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                var ___ret = __Internal.BSTR_UserSize(__arg0, _1, _2);
                return ___ret;
            }
        }

        // DEBUG: unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * )
        public static byte* BSTR_UserMarshal(ref uint _0, byte* _1, char** _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                var ___ret = __Internal.BSTR_UserMarshal(__arg0, _1, _2);
                return ___ret;
            }
        }

        // DEBUG: unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * )
        public static byte* BSTR_UserUnmarshal(ref uint _0, byte* _1, char** _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                var ___ret = __Internal.BSTR_UserUnmarshal(__arg0, _1, _2);
                return ___ret;
            }
        }

        // DEBUG: void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * )
        public static void BSTR_UserFree(ref uint _0, char** _1)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                __Internal.BSTR_UserFree(__arg0, _1);
            }
        }

        // DEBUG: unsigned long             __RPC_USER  CLIPFORMAT_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in CLIPFORMAT * )
        public static uint CLIPFORMAT_UserSize(ref uint _0, uint _1, ref ushort _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                fixed (ushort* ___22 = &_2)
                {
                    var __arg2 = ___22;
                    var ___ret = __Internal.CLIPFORMAT_UserSize(__arg0, _1, __arg2);
                    return ___ret;
                }
            }
        }

        // DEBUG: unsigned char * __RPC_USER  CLIPFORMAT_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in CLIPFORMAT * )
        public static byte* CLIPFORMAT_UserMarshal(ref uint _0, byte* _1, ref ushort _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                fixed (ushort* ___22 = &_2)
                {
                    var __arg2 = ___22;
                    var ___ret = __Internal.CLIPFORMAT_UserMarshal(__arg0, _1, __arg2);
                    return ___ret;
                }
            }
        }

        // DEBUG: unsigned char * __RPC_USER  CLIPFORMAT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out CLIPFORMAT * )
        public static byte* CLIPFORMAT_UserUnmarshal(ref uint _0, byte* _1, ref ushort _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                fixed (ushort* ___22 = &_2)
                {
                    var __arg2 = ___22;
                    var ___ret = __Internal.CLIPFORMAT_UserUnmarshal(__arg0, _1, __arg2);
                    return ___ret;
                }
            }
        }

        // DEBUG: void                      __RPC_USER  CLIPFORMAT_UserFree(     __RPC__in unsigned long *, __RPC__in CLIPFORMAT * )
        public static void CLIPFORMAT_UserFree(ref uint _0, ref ushort _1)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                fixed (ushort* ___11 = &_1)
                {
                    var __arg1 = ___11;
                    __Internal.CLIPFORMAT_UserFree(__arg0, __arg1);
                }
            }
        }

        // DEBUG: unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * )
        public static uint BSTR_UserSize64(ref uint _0, uint _1, char** _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                var ___ret = __Internal.BSTR_UserSize64(__arg0, _1, _2);
                return ___ret;
            }
        }

        // DEBUG: unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * )
        public static byte* BSTR_UserMarshal64(ref uint _0, byte* _1, char** _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                var ___ret = __Internal.BSTR_UserMarshal64(__arg0, _1, _2);
                return ___ret;
            }
        }

        // DEBUG: unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * )
        public static byte* BSTR_UserUnmarshal64(ref uint _0, byte* _1, char** _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                var ___ret = __Internal.BSTR_UserUnmarshal64(__arg0, _1, _2);
                return ___ret;
            }
        }

        // DEBUG: void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * )
        public static void BSTR_UserFree64(ref uint _0, char** _1)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                __Internal.BSTR_UserFree64(__arg0, _1);
            }
        }

        // DEBUG: unsigned long             __RPC_USER  CLIPFORMAT_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in CLIPFORMAT * )
        public static uint CLIPFORMAT_UserSize64(ref uint _0, uint _1, ref ushort _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                fixed (ushort* ___22 = &_2)
                {
                    var __arg2 = ___22;
                    var ___ret = __Internal.CLIPFORMAT_UserSize64(__arg0, _1, __arg2);
                    return ___ret;
                }
            }
        }

        // DEBUG: unsigned char * __RPC_USER  CLIPFORMAT_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in CLIPFORMAT * )
        public static byte* CLIPFORMAT_UserMarshal64(ref uint _0, byte* _1, ref ushort _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                fixed (ushort* ___22 = &_2)
                {
                    var __arg2 = ___22;
                    var ___ret = __Internal.CLIPFORMAT_UserMarshal64(__arg0, _1, __arg2);
                    return ___ret;
                }
            }
        }

        // DEBUG: unsigned char * __RPC_USER  CLIPFORMAT_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out CLIPFORMAT * )
        public static byte* CLIPFORMAT_UserUnmarshal64(ref uint _0, byte* _1, ref ushort _2)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                fixed (ushort* ___22 = &_2)
                {
                    var __arg2 = ___22;
                    var ___ret = __Internal.CLIPFORMAT_UserUnmarshal64(__arg0, _1, __arg2);
                    return ___ret;
                }
            }
        }

        // DEBUG: void                      __RPC_USER  CLIPFORMAT_UserFree64(     __RPC__in unsigned long *, __RPC__in CLIPFORMAT * )
        public static void CLIPFORMAT_UserFree64(ref uint _0, ref ushort _1)
        {
            fixed (uint* ___00 = &_0)
            {
                var __arg0 = ___00;
                fixed (ushort* ___11 = &_1)
                {
                    var __arg1 = ___11;
                    __Internal.CLIPFORMAT_UserFree64(__arg0, __arg1);
                }
            }
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IEnumConnections_Next_Proxy( 
        // DEBUG:     IEnumConnections * This,
        // DEBUG:     /* [in] */ ULONG cConnections,
        // DEBUG:     /* [length_is][size_is][out] */ LPCONNECTDATA rgcd,
        // DEBUG:     /* [out] */ ULONG *pcFetched)
        public static int IEnumConnectionsNextProxy(global::SpoutDX.IEnumConnections This, uint cConnections, global::SpoutDX.TagCONNECTDATA rgcd, ref uint pcFetched)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var __arg2 = rgcd is null ? __IntPtr.Zero : rgcd.__Instance;
            fixed (uint* __pcFetched3 = &pcFetched)
            {
                var __arg3 = __pcFetched3;
                var ___ret = __Internal.IEnumConnectionsNextProxy(__arg0, cConnections, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IEnumConnections_Next_Stub( 
        // DEBUG:     __RPC__in IEnumConnections * This,
        // DEBUG:     /* [in] */ ULONG cConnections,
        // DEBUG:     /* [length_is][size_is][out] */ __RPC__out_ecount_part(cConnections, *pcFetched) LPCONNECTDATA rgcd,
        // DEBUG:     /* [out] */ __RPC__out ULONG *pcFetched)
        public static int IEnumConnectionsNextStub(global::SpoutDX.IEnumConnections This, uint cConnections, global::SpoutDX.TagCONNECTDATA rgcd, ref uint pcFetched)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var __arg2 = rgcd is null ? __IntPtr.Zero : rgcd.__Instance;
            fixed (uint* __pcFetched3 = &pcFetched)
            {
                var __arg3 = __pcFetched3;
                var ___ret = __Internal.IEnumConnectionsNextStub(__arg0, cConnections, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Next_Proxy( 
        // DEBUG:     IEnumConnectionPoints * This,
        // DEBUG:     /* [in] */ ULONG cConnections,
        // DEBUG:     /* [length_is][size_is][out] */ LPCONNECTIONPOINT *ppCP,
        // DEBUG:     /* [out] */ ULONG *pcFetched)
        public static int IEnumConnectionPointsNextProxy(global::SpoutDX.IEnumConnectionPoints This, uint cConnections, global::SpoutDX.IConnectionPoint ppCP, ref uint pcFetched)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ____arg2 = ppCP is null ? __IntPtr.Zero : ppCP.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            fixed (uint* __pcFetched3 = &pcFetched)
            {
                var __arg3 = __pcFetched3;
                var ___ret = __Internal.IEnumConnectionPointsNextProxy(__arg0, cConnections, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IEnumConnectionPoints_Next_Stub( 
        // DEBUG:     __RPC__in IEnumConnectionPoints * This,
        // DEBUG:     /* [in] */ ULONG cConnections,
        // DEBUG:     /* [length_is][size_is][out] */ __RPC__out_ecount_part(cConnections, *pcFetched) LPCONNECTIONPOINT *ppCP,
        // DEBUG:     /* [out] */ __RPC__out ULONG *pcFetched)
        public static int IEnumConnectionPointsNextStub(global::SpoutDX.IEnumConnectionPoints This, uint cConnections, global::SpoutDX.IConnectionPoint ppCP, ref uint pcFetched)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ____arg2 = ppCP is null ? __IntPtr.Zero : ppCP.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            fixed (uint* __pcFetched3 = &pcFetched)
            {
                var __arg3 = __pcFetched3;
                var ___ret = __Internal.IEnumConnectionPointsNextStub(__arg0, cConnections, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IPersistMemory_Load_Proxy( 
        // DEBUG:     IPersistMemory * This,
        // DEBUG:     /* [size_is][in] */ LPVOID pMem,
        // DEBUG:     /* [in] */ ULONG cbSize)
        public static int IPersistMemoryLoadProxy(global::SpoutDX.IPersistMemory This, __IntPtr pMem, uint cbSize)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ___ret = __Internal.IPersistMemoryLoadProxy(__arg0, pMem, cbSize);
            return ___ret;
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IPersistMemory_Load_Stub( 
        // DEBUG:     __RPC__in IPersistMemory * This,
        // DEBUG:     /* [size_is][in] */ __RPC__in_ecount_full(cbSize) BYTE *pMem,
        // DEBUG:     /* [in] */ ULONG cbSize)
        public static int IPersistMemoryLoadStub(global::SpoutDX.IPersistMemory This, byte* pMem, uint cbSize)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ___ret = __Internal.IPersistMemoryLoadStub(__arg0, pMem, cbSize);
            return ___ret;
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IPersistMemory_Save_Proxy( 
        // DEBUG:     IPersistMemory * This,
        // DEBUG:     /* [size_is][out] */ LPVOID pMem,
        // DEBUG:     /* [in] */ BOOL fClearDirty,
        // DEBUG:     /* [in] */ ULONG cbSize)
        public static int IPersistMemorySaveProxy(global::SpoutDX.IPersistMemory This, __IntPtr pMem, int fClearDirty, uint cbSize)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ___ret = __Internal.IPersistMemorySaveProxy(__arg0, pMem, fClearDirty, cbSize);
            return ___ret;
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IPersistMemory_Save_Stub( 
        // DEBUG:     __RPC__in IPersistMemory * This,
        // DEBUG:     /* [size_is][out] */ __RPC__out_ecount_full(cbSize) BYTE *pMem,
        // DEBUG:     /* [in] */ BOOL fClearDirty,
        // DEBUG:     /* [in] */ ULONG cbSize)
        public static int IPersistMemorySaveStub(global::SpoutDX.IPersistMemory This, byte* pMem, int fClearDirty, uint cbSize)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ___ret = __Internal.IPersistMemorySaveStub(__arg0, pMem, fClearDirty, cbSize);
            return ___ret;
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IEnumOleUndoUnits_Next_Proxy( 
        // DEBUG:     IEnumOleUndoUnits * This,
        // DEBUG:     /* [in] */ ULONG cElt,
        // DEBUG:     /* [length_is][size_is][out] */ IOleUndoUnit **rgElt,
        // DEBUG:     /* [out] */ ULONG *pcEltFetched)
        public static int IEnumOleUndoUnitsNextProxy(global::SpoutDX.IEnumOleUndoUnits This, uint cElt, global::SpoutDX.IOleUndoUnit rgElt, ref uint pcEltFetched)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ____arg2 = rgElt is null ? __IntPtr.Zero : rgElt.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            fixed (uint* __pcEltFetched3 = &pcEltFetched)
            {
                var __arg3 = __pcEltFetched3;
                var ___ret = __Internal.IEnumOleUndoUnitsNextProxy(__arg0, cElt, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IEnumOleUndoUnits_Next_Stub( 
        // DEBUG:     __RPC__in IEnumOleUndoUnits * This,
        // DEBUG:     /* [in] */ ULONG cElt,
        // DEBUG:     /* [length_is][size_is][out] */ __RPC__out_ecount_part(cElt, *pcEltFetched) IOleUndoUnit **rgElt,
        // DEBUG:     /* [out] */ __RPC__out ULONG *pcEltFetched)
        public static int IEnumOleUndoUnitsNextStub(global::SpoutDX.IEnumOleUndoUnits This, uint cElt, global::SpoutDX.IOleUndoUnit rgElt, ref uint pcEltFetched)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ____arg2 = rgElt is null ? __IntPtr.Zero : rgElt.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            fixed (uint* __pcEltFetched3 = &pcEltFetched)
            {
                var __arg3 = __pcEltFetched3;
                var ___ret = __Internal.IEnumOleUndoUnitsNextStub(__arg0, cElt, __arg2, __arg3);
                return ___ret;
            }
        }

        // DEBUG: void STDMETHODCALLTYPE IAdviseSinkEx_OnViewStatusChange_Proxy( 
        // DEBUG:     IAdviseSinkEx * This,
        // DEBUG:     /* [in] */ DWORD dwViewStatus)
        public static void IAdviseSinkExOnViewStatusChangeProxy(global::SpoutDX.IAdviseSinkEx This, uint dwViewStatus)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            __Internal.IAdviseSinkExOnViewStatusChangeProxy(__arg0, dwViewStatus);
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IAdviseSinkEx_OnViewStatusChange_Stub( 
        // DEBUG:     __RPC__in IAdviseSinkEx * This,
        // DEBUG:     /* [in] */ DWORD dwViewStatus)
        public static int IAdviseSinkExOnViewStatusChangeStub(global::SpoutDX.IAdviseSinkEx This, uint dwViewStatus)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var ___ret = __Internal.IAdviseSinkExOnViewStatusChangeStub(__arg0, dwViewStatus);
            return ___ret;
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IQuickActivate_QuickActivate_Proxy( 
        // DEBUG:     IQuickActivate * This,
        // DEBUG:     /* [in] */ QACONTAINER *pQaContainer,
        // DEBUG:     /* [out][in] */ QACONTROL *pQaControl)
        public static int IQuickActivateQuickActivateProxy(global::SpoutDX.IQuickActivate This, global::SpoutDX.TagQACONTAINER pQaContainer, global::SpoutDX.TagQACONTROL pQaControl)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var __arg1 = pQaContainer is null ? __IntPtr.Zero : pQaContainer.__Instance;
            var __arg2 = pQaControl is null ? __IntPtr.Zero : pQaControl.__Instance;
            var ___ret = __Internal.IQuickActivateQuickActivateProxy(__arg0, __arg1, __arg2);
            return ___ret;
        }

        // DEBUG: HRESULT STDMETHODCALLTYPE IQuickActivate_QuickActivate_Stub( 
        // DEBUG:     __RPC__in IQuickActivate * This,
        // DEBUG:     /* [in] */ __RPC__in QACONTAINER *pQaContainer,
        // DEBUG:     /* [out] */ __RPC__out QACONTROL *pQaControl)
        public static int IQuickActivateQuickActivateStub(global::SpoutDX.IQuickActivate This, global::SpoutDX.TagQACONTAINER pQaContainer, global::SpoutDX.TagQACONTROL pQaControl)
        {
            var __arg0 = This is null ? __IntPtr.Zero : This.__Instance;
            var __arg1 = pQaContainer is null ? __IntPtr.Zero : pQaContainer.__Instance;
            var __arg2 = pQaControl is null ? __IntPtr.Zero : pQaControl.__Instance;
            var ___ret = __Internal.IQuickActivateQuickActivateStub(__arg0, __arg1, __arg2);
            return ___ret;
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0000_v0_0_c_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0000V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0000_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0000_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0000_v0_0_s_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0000V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0000_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0000_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE IOleControlTypes_v1_0_c_ifspec
        public static __IntPtr IOleControlTypes_v1_0_c_ifspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._IOleControlTypes_v1_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._IOleControlTypes_v1_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE IOleControlTypes_v1_0_s_ifspec
        public static __IntPtr IOleControlTypes_v1_0_s_ifspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._IOleControlTypes_v1_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._IOleControlTypes_v1_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0001_v0_0_c_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0001V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0001_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0001_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0001_v0_0_s_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0001V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0001_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0001_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0005_v0_0_c_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0005V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0005_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0005_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0005_v0_0_s_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0005V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0005_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0005_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0036_v0_0_c_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0036V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0036_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0036_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0036_v0_0_s_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0036V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0036_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0036_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0037_v0_0_c_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0037V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0037_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0037_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0037_v0_0_s_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0037V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0037_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0037_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0038_v0_0_c_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0038V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0038_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0038_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0038_v0_0_s_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0038V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0038_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0038_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0039_v0_0_c_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0039V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0039_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0039_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0039_v0_0_s_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0039V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0039_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0039_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0040_v0_0_c_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0040V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0040_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0040_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0040_v0_0_s_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0040V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0040_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0040_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0041_v0_0_c_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0041V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0041_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0041_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0041_v0_0_s_ifspec
        public static __IntPtr MIDL_itfOcidl0000_0041V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0041_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_ocidl_0000_0041_v0_0_s_ifspec;
                *__ptr = value;
            }
        }
    }

    // DEBUG: enum D3D_SRV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D_SRV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D_SRV_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE1DARRAY	= 3,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE2D	= 4,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE2DARRAY	= 5,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE2DMS	= 6,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE3D	= 8,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURECUBE	= 9,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURECUBEARRAY	= 10,
    // DEBUG:         D3D_SRV_DIMENSION_BUFFEREX	= 11,
    // DEBUG:         D3D10_SRV_DIMENSION_UNKNOWN	= D3D_SRV_DIMENSION_UNKNOWN,
    // DEBUG:         D3D10_SRV_DIMENSION_BUFFER	= D3D_SRV_DIMENSION_BUFFER,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE1D	= D3D_SRV_DIMENSION_TEXTURE1D,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE1DARRAY	= D3D_SRV_DIMENSION_TEXTURE1DARRAY,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE2D	= D3D_SRV_DIMENSION_TEXTURE2D,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE2DARRAY	= D3D_SRV_DIMENSION_TEXTURE2DARRAY,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE2DMS	= D3D_SRV_DIMENSION_TEXTURE2DMS,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY	= D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE3D	= D3D_SRV_DIMENSION_TEXTURE3D,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURECUBE	= D3D_SRV_DIMENSION_TEXTURECUBE,
    // DEBUG:         D3D10_1_SRV_DIMENSION_UNKNOWN	= D3D_SRV_DIMENSION_UNKNOWN,
    // DEBUG:         D3D10_1_SRV_DIMENSION_BUFFER	= D3D_SRV_DIMENSION_BUFFER,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE1D	= D3D_SRV_DIMENSION_TEXTURE1D,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY	= D3D_SRV_DIMENSION_TEXTURE1DARRAY,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE2D	= D3D_SRV_DIMENSION_TEXTURE2D,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY	= D3D_SRV_DIMENSION_TEXTURE2DARRAY,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE2DMS	= D3D_SRV_DIMENSION_TEXTURE2DMS,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY	= D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE3D	= D3D_SRV_DIMENSION_TEXTURE3D,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURECUBE	= D3D_SRV_DIMENSION_TEXTURECUBE,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY	= D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_UNKNOWN	= D3D_SRV_DIMENSION_UNKNOWN,
    // DEBUG:         D3D11_SRV_DIMENSION_BUFFER	= D3D_SRV_DIMENSION_BUFFER,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE1D	= D3D_SRV_DIMENSION_TEXTURE1D,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE1DARRAY	= D3D_SRV_DIMENSION_TEXTURE1DARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE2D	= D3D_SRV_DIMENSION_TEXTURE2D,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE2DARRAY	= D3D_SRV_DIMENSION_TEXTURE2DARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE2DMS	= D3D_SRV_DIMENSION_TEXTURE2DMS,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY	= D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE3D	= D3D_SRV_DIMENSION_TEXTURE3D,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURECUBE	= D3D_SRV_DIMENSION_TEXTURECUBE,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURECUBEARRAY	= D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_BUFFEREX	= D3D_SRV_DIMENSION_BUFFEREX
    // DEBUG:     }
    public enum D3D_SRV_DIMENSION
    {
        D3D_SRV_DIMENSION_UNKNOWN = 0,
        D3D_SRV_DIMENSION_BUFFER = 1,
        D3D_SRV_DIMENSION_TEXTURE1D = 2,
        D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D_SRV_DIMENSION_TEXTURE2D = 4,
        D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D_SRV_DIMENSION_TEXTURE2DMS = 6,
        D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D_SRV_DIMENSION_TEXTURE3D = 8,
        D3D_SRV_DIMENSION_TEXTURECUBE = 9,
        D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
        D3D_SRV_DIMENSION_BUFFEREX = 11,
        D3D10SRV_DIMENSION_UNKNOWN = 0,
        D3D10SRV_DIMENSION_BUFFER = 1,
        D3D10SRV_DIMENSION_TEXTURE1D = 2,
        D3D10SRV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D10SRV_DIMENSION_TEXTURE2D = 4,
        D3D10SRV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D10SRV_DIMENSION_TEXTURE2DMS = 6,
        D3D10SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D10SRV_DIMENSION_TEXTURE3D = 8,
        D3D10SRV_DIMENSION_TEXTURECUBE = 9,
        D3D10_1SRV_DIMENSION_UNKNOWN = 0,
        D3D10_1SRV_DIMENSION_BUFFER = 1,
        D3D10_1SRV_DIMENSION_TEXTURE1D = 2,
        D3D10_1SRV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D10_1SRV_DIMENSION_TEXTURE2D = 4,
        D3D10_1SRV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D10_1SRV_DIMENSION_TEXTURE2DMS = 6,
        D3D10_1SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D10_1SRV_DIMENSION_TEXTURE3D = 8,
        D3D10_1SRV_DIMENSION_TEXTURECUBE = 9,
        D3D10_1SRV_DIMENSION_TEXTURECUBEARRAY = 10,
        D3D11SRV_DIMENSION_UNKNOWN = 0,
        D3D11SRV_DIMENSION_BUFFER = 1,
        D3D11SRV_DIMENSION_TEXTURE1D = 2,
        D3D11SRV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D11SRV_DIMENSION_TEXTURE2D = 4,
        D3D11SRV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D11SRV_DIMENSION_TEXTURE2DMS = 6,
        D3D11SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D11SRV_DIMENSION_TEXTURE3D = 8,
        D3D11SRV_DIMENSION_TEXTURECUBE = 9,
        D3D11SRV_DIMENSION_TEXTURECUBEARRAY = 10,
        D3D11SRV_DIMENSION_BUFFEREX = 11
    }

    // DEBUG: enum D3D_PRIMITIVE_TOPOLOGY
    // DEBUG:     {
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_UNDEFINED	= 0,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_POINTLIST	= 1,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_LINELIST	= 2,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_LINESTRIP	= 3,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= 4,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= 5,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= 10,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= 11,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= 12,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= 13,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	= 33,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	= 34,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	= 35,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	= 36,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	= 37,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	= 38,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	= 39,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	= 40,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	= 41,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	= 42,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	= 43,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	= 44,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	= 45,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	= 46,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	= 47,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	= 48,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	= 49,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	= 50,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	= 51,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	= 52,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	= 53,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	= 54,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	= 55,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	= 56,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	= 57,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	= 58,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	= 59,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	= 60,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	= 61,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	= 62,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	= 63,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	= 64,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED	= D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_POINTLIST	= D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_LINELIST	= D3D_PRIMITIVE_TOPOLOGY_LINELIST,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED	= D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_POINTLIST	= D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_LINELIST	= D3D_PRIMITIVE_TOPOLOGY_LINELIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
    // DEBUG:     }
    public enum D3D_PRIMITIVE_TOPOLOGY
    {
        D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
        D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
        D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2,
        D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
        D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
        D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
        D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
        D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
        D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
        D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
        D3D_PRIMITIVE_TOPOLOGY_1CONTROL_POINT_PATCHLIST = 33,
        D3D_PRIMITIVE_TOPOLOGY_2CONTROL_POINT_PATCHLIST = 34,
        D3D_PRIMITIVE_TOPOLOGY_3CONTROL_POINT_PATCHLIST = 35,
        D3D_PRIMITIVE_TOPOLOGY_4CONTROL_POINT_PATCHLIST = 36,
        D3D_PRIMITIVE_TOPOLOGY_5CONTROL_POINT_PATCHLIST = 37,
        D3D_PRIMITIVE_TOPOLOGY_6CONTROL_POINT_PATCHLIST = 38,
        D3D_PRIMITIVE_TOPOLOGY_7CONTROL_POINT_PATCHLIST = 39,
        D3D_PRIMITIVE_TOPOLOGY_8CONTROL_POINT_PATCHLIST = 40,
        D3D_PRIMITIVE_TOPOLOGY_9CONTROL_POINT_PATCHLIST = 41,
        D3D_PRIMITIVE_TOPOLOGY_10CONTROL_POINT_PATCHLIST = 42,
        D3D_PRIMITIVE_TOPOLOGY_11CONTROL_POINT_PATCHLIST = 43,
        D3D_PRIMITIVE_TOPOLOGY_12CONTROL_POINT_PATCHLIST = 44,
        D3D_PRIMITIVE_TOPOLOGY_13CONTROL_POINT_PATCHLIST = 45,
        D3D_PRIMITIVE_TOPOLOGY_14CONTROL_POINT_PATCHLIST = 46,
        D3D_PRIMITIVE_TOPOLOGY_15CONTROL_POINT_PATCHLIST = 47,
        D3D_PRIMITIVE_TOPOLOGY_16CONTROL_POINT_PATCHLIST = 48,
        D3D_PRIMITIVE_TOPOLOGY_17CONTROL_POINT_PATCHLIST = 49,
        D3D_PRIMITIVE_TOPOLOGY_18CONTROL_POINT_PATCHLIST = 50,
        D3D_PRIMITIVE_TOPOLOGY_19CONTROL_POINT_PATCHLIST = 51,
        D3D_PRIMITIVE_TOPOLOGY_20CONTROL_POINT_PATCHLIST = 52,
        D3D_PRIMITIVE_TOPOLOGY_21CONTROL_POINT_PATCHLIST = 53,
        D3D_PRIMITIVE_TOPOLOGY_22CONTROL_POINT_PATCHLIST = 54,
        D3D_PRIMITIVE_TOPOLOGY_23CONTROL_POINT_PATCHLIST = 55,
        D3D_PRIMITIVE_TOPOLOGY_24CONTROL_POINT_PATCHLIST = 56,
        D3D_PRIMITIVE_TOPOLOGY_25CONTROL_POINT_PATCHLIST = 57,
        D3D_PRIMITIVE_TOPOLOGY_26CONTROL_POINT_PATCHLIST = 58,
        D3D_PRIMITIVE_TOPOLOGY_27CONTROL_POINT_PATCHLIST = 59,
        D3D_PRIMITIVE_TOPOLOGY_28CONTROL_POINT_PATCHLIST = 60,
        D3D_PRIMITIVE_TOPOLOGY_29CONTROL_POINT_PATCHLIST = 61,
        D3D_PRIMITIVE_TOPOLOGY_30CONTROL_POINT_PATCHLIST = 62,
        D3D_PRIMITIVE_TOPOLOGY_31CONTROL_POINT_PATCHLIST = 63,
        D3D_PRIMITIVE_TOPOLOGY_32CONTROL_POINT_PATCHLIST = 64,
        D3D10PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
        D3D10PRIMITIVE_TOPOLOGY_POINTLIST = 1,
        D3D10PRIMITIVE_TOPOLOGY_LINELIST = 2,
        D3D10PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
        D3D10PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
        D3D10PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
        D3D10PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
        D3D10PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
        D3D10PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
        D3D10PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
        D3D11PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
        D3D11PRIMITIVE_TOPOLOGY_POINTLIST = 1,
        D3D11PRIMITIVE_TOPOLOGY_LINELIST = 2,
        D3D11PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
        D3D11PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
        D3D11PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
        D3D11PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
        D3D11PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
        D3D11PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
        D3D11PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
        D3D11PRIMITIVE_TOPOLOGY_1CONTROL_POINT_PATCHLIST = 33,
        D3D11PRIMITIVE_TOPOLOGY_2CONTROL_POINT_PATCHLIST = 34,
        D3D11PRIMITIVE_TOPOLOGY_3CONTROL_POINT_PATCHLIST = 35,
        D3D11PRIMITIVE_TOPOLOGY_4CONTROL_POINT_PATCHLIST = 36,
        D3D11PRIMITIVE_TOPOLOGY_5CONTROL_POINT_PATCHLIST = 37,
        D3D11PRIMITIVE_TOPOLOGY_6CONTROL_POINT_PATCHLIST = 38,
        D3D11PRIMITIVE_TOPOLOGY_7CONTROL_POINT_PATCHLIST = 39,
        D3D11PRIMITIVE_TOPOLOGY_8CONTROL_POINT_PATCHLIST = 40,
        D3D11PRIMITIVE_TOPOLOGY_9CONTROL_POINT_PATCHLIST = 41,
        D3D11PRIMITIVE_TOPOLOGY_10CONTROL_POINT_PATCHLIST = 42,
        D3D11PRIMITIVE_TOPOLOGY_11CONTROL_POINT_PATCHLIST = 43,
        D3D11PRIMITIVE_TOPOLOGY_12CONTROL_POINT_PATCHLIST = 44,
        D3D11PRIMITIVE_TOPOLOGY_13CONTROL_POINT_PATCHLIST = 45,
        D3D11PRIMITIVE_TOPOLOGY_14CONTROL_POINT_PATCHLIST = 46,
        D3D11PRIMITIVE_TOPOLOGY_15CONTROL_POINT_PATCHLIST = 47,
        D3D11PRIMITIVE_TOPOLOGY_16CONTROL_POINT_PATCHLIST = 48,
        D3D11PRIMITIVE_TOPOLOGY_17CONTROL_POINT_PATCHLIST = 49,
        D3D11PRIMITIVE_TOPOLOGY_18CONTROL_POINT_PATCHLIST = 50,
        D3D11PRIMITIVE_TOPOLOGY_19CONTROL_POINT_PATCHLIST = 51,
        D3D11PRIMITIVE_TOPOLOGY_20CONTROL_POINT_PATCHLIST = 52,
        D3D11PRIMITIVE_TOPOLOGY_21CONTROL_POINT_PATCHLIST = 53,
        D3D11PRIMITIVE_TOPOLOGY_22CONTROL_POINT_PATCHLIST = 54,
        D3D11PRIMITIVE_TOPOLOGY_23CONTROL_POINT_PATCHLIST = 55,
        D3D11PRIMITIVE_TOPOLOGY_24CONTROL_POINT_PATCHLIST = 56,
        D3D11PRIMITIVE_TOPOLOGY_25CONTROL_POINT_PATCHLIST = 57,
        D3D11PRIMITIVE_TOPOLOGY_26CONTROL_POINT_PATCHLIST = 58,
        D3D11PRIMITIVE_TOPOLOGY_27CONTROL_POINT_PATCHLIST = 59,
        D3D11PRIMITIVE_TOPOLOGY_28CONTROL_POINT_PATCHLIST = 60,
        D3D11PRIMITIVE_TOPOLOGY_29CONTROL_POINT_PATCHLIST = 61,
        D3D11PRIMITIVE_TOPOLOGY_30CONTROL_POINT_PATCHLIST = 62,
        D3D11PRIMITIVE_TOPOLOGY_31CONTROL_POINT_PATCHLIST = 63,
        D3D11PRIMITIVE_TOPOLOGY_32CONTROL_POINT_PATCHLIST = 64
    }

    // DEBUG: enum D3D_FEATURE_LEVEL
    // DEBUG:     {
    // DEBUG:         D3D_FEATURE_LEVEL_1_0_CORE	= 0x1000,
    // DEBUG:         D3D_FEATURE_LEVEL_9_1	= 0x9100,
    // DEBUG:         D3D_FEATURE_LEVEL_9_2	= 0x9200,
    // DEBUG:         D3D_FEATURE_LEVEL_9_3	= 0x9300,
    // DEBUG:         D3D_FEATURE_LEVEL_10_0	= 0xa000,
    // DEBUG:         D3D_FEATURE_LEVEL_10_1	= 0xa100,
    // DEBUG:         D3D_FEATURE_LEVEL_11_0	= 0xb000,
    // DEBUG:         D3D_FEATURE_LEVEL_11_1	= 0xb100,
    // DEBUG:         D3D_FEATURE_LEVEL_12_0	= 0xc000,
    // DEBUG:         D3D_FEATURE_LEVEL_12_1	= 0xc100,
    // DEBUG:         D3D_FEATURE_LEVEL_12_2	= 0xc200
    // DEBUG:     }
    public enum D3D_FEATURE_LEVEL
    {
        D3D_FEATURE_LEVEL_1_0CORE = 4096,
        D3D_FEATURE_LEVEL_9_1 = 37120,
        D3D_FEATURE_LEVEL_9_2 = 37376,
        D3D_FEATURE_LEVEL_9_3 = 37632,
        D3D_FEATURE_LEVEL_10_0 = 40960,
        D3D_FEATURE_LEVEL_10_1 = 41216,
        D3D_FEATURE_LEVEL_11_0 = 45056,
        D3D_FEATURE_LEVEL_11_1 = 45312,
        D3D_FEATURE_LEVEL_12_0 = 49152,
        D3D_FEATURE_LEVEL_12_1 = 49408,
        D3D_FEATURE_LEVEL_12_2 = 49664
    }

    // DEBUG: enum D3D_DRIVER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_DRIVER_TYPE_UNKNOWN	= 0,
    // DEBUG:         D3D_DRIVER_TYPE_HARDWARE	= ( D3D_DRIVER_TYPE_UNKNOWN + 1 ) ,
    // DEBUG:         D3D_DRIVER_TYPE_REFERENCE	= ( D3D_DRIVER_TYPE_HARDWARE + 1 ) ,
    // DEBUG:         D3D_DRIVER_TYPE_NULL	= ( D3D_DRIVER_TYPE_REFERENCE + 1 ) ,
    // DEBUG:         D3D_DRIVER_TYPE_SOFTWARE	= ( D3D_DRIVER_TYPE_NULL + 1 ) ,
    // DEBUG:         D3D_DRIVER_TYPE_WARP	= ( D3D_DRIVER_TYPE_SOFTWARE + 1 ) 
    // DEBUG:     }
    public enum D3D_DRIVER_TYPE
    {
        D3D_DRIVER_TYPE_UNKNOWN = 0,
        D3D_DRIVER_TYPE_HARDWARE = 1,
        D3D_DRIVER_TYPE_REFERENCE = 2,
        D3D_DRIVER_TYPE_NULL = 3,
        D3D_DRIVER_TYPE_SOFTWARE = 4,
        D3D_DRIVER_TYPE_WARP = 5
    }

    // DEBUG: enum D3D_PRIMITIVE
    // DEBUG:     {
    // DEBUG:         D3D_PRIMITIVE_UNDEFINED	= 0,
    // DEBUG:         D3D_PRIMITIVE_POINT	= 1,
    // DEBUG:         D3D_PRIMITIVE_LINE	= 2,
    // DEBUG:         D3D_PRIMITIVE_TRIANGLE	= 3,
    // DEBUG:         D3D_PRIMITIVE_LINE_ADJ	= 6,
    // DEBUG:         D3D_PRIMITIVE_TRIANGLE_ADJ	= 7,
    // DEBUG:         D3D_PRIMITIVE_1_CONTROL_POINT_PATCH	= 8,
    // DEBUG:         D3D_PRIMITIVE_2_CONTROL_POINT_PATCH	= 9,
    // DEBUG:         D3D_PRIMITIVE_3_CONTROL_POINT_PATCH	= 10,
    // DEBUG:         D3D_PRIMITIVE_4_CONTROL_POINT_PATCH	= 11,
    // DEBUG:         D3D_PRIMITIVE_5_CONTROL_POINT_PATCH	= 12,
    // DEBUG:         D3D_PRIMITIVE_6_CONTROL_POINT_PATCH	= 13,
    // DEBUG:         D3D_PRIMITIVE_7_CONTROL_POINT_PATCH	= 14,
    // DEBUG:         D3D_PRIMITIVE_8_CONTROL_POINT_PATCH	= 15,
    // DEBUG:         D3D_PRIMITIVE_9_CONTROL_POINT_PATCH	= 16,
    // DEBUG:         D3D_PRIMITIVE_10_CONTROL_POINT_PATCH	= 17,
    // DEBUG:         D3D_PRIMITIVE_11_CONTROL_POINT_PATCH	= 18,
    // DEBUG:         D3D_PRIMITIVE_12_CONTROL_POINT_PATCH	= 19,
    // DEBUG:         D3D_PRIMITIVE_13_CONTROL_POINT_PATCH	= 20,
    // DEBUG:         D3D_PRIMITIVE_14_CONTROL_POINT_PATCH	= 21,
    // DEBUG:         D3D_PRIMITIVE_15_CONTROL_POINT_PATCH	= 22,
    // DEBUG:         D3D_PRIMITIVE_16_CONTROL_POINT_PATCH	= 23,
    // DEBUG:         D3D_PRIMITIVE_17_CONTROL_POINT_PATCH	= 24,
    // DEBUG:         D3D_PRIMITIVE_18_CONTROL_POINT_PATCH	= 25,
    // DEBUG:         D3D_PRIMITIVE_19_CONTROL_POINT_PATCH	= 26,
    // DEBUG:         D3D_PRIMITIVE_20_CONTROL_POINT_PATCH	= 27,
    // DEBUG:         D3D_PRIMITIVE_21_CONTROL_POINT_PATCH	= 28,
    // DEBUG:         D3D_PRIMITIVE_22_CONTROL_POINT_PATCH	= 29,
    // DEBUG:         D3D_PRIMITIVE_23_CONTROL_POINT_PATCH	= 30,
    // DEBUG:         D3D_PRIMITIVE_24_CONTROL_POINT_PATCH	= 31,
    // DEBUG:         D3D_PRIMITIVE_25_CONTROL_POINT_PATCH	= 32,
    // DEBUG:         D3D_PRIMITIVE_26_CONTROL_POINT_PATCH	= 33,
    // DEBUG:         D3D_PRIMITIVE_27_CONTROL_POINT_PATCH	= 34,
    // DEBUG:         D3D_PRIMITIVE_28_CONTROL_POINT_PATCH	= 35,
    // DEBUG:         D3D_PRIMITIVE_29_CONTROL_POINT_PATCH	= 36,
    // DEBUG:         D3D_PRIMITIVE_30_CONTROL_POINT_PATCH	= 37,
    // DEBUG:         D3D_PRIMITIVE_31_CONTROL_POINT_PATCH	= 38,
    // DEBUG:         D3D_PRIMITIVE_32_CONTROL_POINT_PATCH	= 39,
    // DEBUG:         D3D10_PRIMITIVE_UNDEFINED	= D3D_PRIMITIVE_UNDEFINED,
    // DEBUG:         D3D10_PRIMITIVE_POINT	= D3D_PRIMITIVE_POINT,
    // DEBUG:         D3D10_PRIMITIVE_LINE	= D3D_PRIMITIVE_LINE,
    // DEBUG:         D3D10_PRIMITIVE_TRIANGLE	= D3D_PRIMITIVE_TRIANGLE,
    // DEBUG:         D3D10_PRIMITIVE_LINE_ADJ	= D3D_PRIMITIVE_LINE_ADJ,
    // DEBUG:         D3D10_PRIMITIVE_TRIANGLE_ADJ	= D3D_PRIMITIVE_TRIANGLE_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_UNDEFINED	= D3D_PRIMITIVE_UNDEFINED,
    // DEBUG:         D3D11_PRIMITIVE_POINT	= D3D_PRIMITIVE_POINT,
    // DEBUG:         D3D11_PRIMITIVE_LINE	= D3D_PRIMITIVE_LINE,
    // DEBUG:         D3D11_PRIMITIVE_TRIANGLE	= D3D_PRIMITIVE_TRIANGLE,
    // DEBUG:         D3D11_PRIMITIVE_LINE_ADJ	= D3D_PRIMITIVE_LINE_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TRIANGLE_ADJ	= D3D_PRIMITIVE_TRIANGLE_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_1_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_2_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_3_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_4_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_5_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_6_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_7_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_8_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_9_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_10_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_11_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_12_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_13_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_14_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_15_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_16_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_17_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_18_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_19_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_20_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_21_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_22_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_23_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_24_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_25_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_26_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_27_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_28_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_29_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_30_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_31_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_32_CONTROL_POINT_PATCH
    // DEBUG:     }
    public enum D3D_PRIMITIVE
    {
        D3D_PRIMITIVE_UNDEFINED = 0,
        D3D_PRIMITIVE_POINT = 1,
        D3D_PRIMITIVE_LINE = 2,
        D3D_PRIMITIVE_TRIANGLE = 3,
        D3D_PRIMITIVE_LINE_ADJ = 6,
        D3D_PRIMITIVE_TRIANGLE_ADJ = 7,
        D3D_PRIMITIVE_1CONTROL_POINT_PATCH = 8,
        D3D_PRIMITIVE_2CONTROL_POINT_PATCH = 9,
        D3D_PRIMITIVE_3CONTROL_POINT_PATCH = 10,
        D3D_PRIMITIVE_4CONTROL_POINT_PATCH = 11,
        D3D_PRIMITIVE_5CONTROL_POINT_PATCH = 12,
        D3D_PRIMITIVE_6CONTROL_POINT_PATCH = 13,
        D3D_PRIMITIVE_7CONTROL_POINT_PATCH = 14,
        D3D_PRIMITIVE_8CONTROL_POINT_PATCH = 15,
        D3D_PRIMITIVE_9CONTROL_POINT_PATCH = 16,
        D3D_PRIMITIVE_10CONTROL_POINT_PATCH = 17,
        D3D_PRIMITIVE_11CONTROL_POINT_PATCH = 18,
        D3D_PRIMITIVE_12CONTROL_POINT_PATCH = 19,
        D3D_PRIMITIVE_13CONTROL_POINT_PATCH = 20,
        D3D_PRIMITIVE_14CONTROL_POINT_PATCH = 21,
        D3D_PRIMITIVE_15CONTROL_POINT_PATCH = 22,
        D3D_PRIMITIVE_16CONTROL_POINT_PATCH = 23,
        D3D_PRIMITIVE_17CONTROL_POINT_PATCH = 24,
        D3D_PRIMITIVE_18CONTROL_POINT_PATCH = 25,
        D3D_PRIMITIVE_19CONTROL_POINT_PATCH = 26,
        D3D_PRIMITIVE_20CONTROL_POINT_PATCH = 27,
        D3D_PRIMITIVE_21CONTROL_POINT_PATCH = 28,
        D3D_PRIMITIVE_22CONTROL_POINT_PATCH = 29,
        D3D_PRIMITIVE_23CONTROL_POINT_PATCH = 30,
        D3D_PRIMITIVE_24CONTROL_POINT_PATCH = 31,
        D3D_PRIMITIVE_25CONTROL_POINT_PATCH = 32,
        D3D_PRIMITIVE_26CONTROL_POINT_PATCH = 33,
        D3D_PRIMITIVE_27CONTROL_POINT_PATCH = 34,
        D3D_PRIMITIVE_28CONTROL_POINT_PATCH = 35,
        D3D_PRIMITIVE_29CONTROL_POINT_PATCH = 36,
        D3D_PRIMITIVE_30CONTROL_POINT_PATCH = 37,
        D3D_PRIMITIVE_31CONTROL_POINT_PATCH = 38,
        D3D_PRIMITIVE_32CONTROL_POINT_PATCH = 39,
        D3D10PRIMITIVE_UNDEFINED = 0,
        D3D10PRIMITIVE_POINT = 1,
        D3D10PRIMITIVE_LINE = 2,
        D3D10PRIMITIVE_TRIANGLE = 3,
        D3D10PRIMITIVE_LINE_ADJ = 6,
        D3D10PRIMITIVE_TRIANGLE_ADJ = 7,
        D3D11PRIMITIVE_UNDEFINED = 0,
        D3D11PRIMITIVE_POINT = 1,
        D3D11PRIMITIVE_LINE = 2,
        D3D11PRIMITIVE_TRIANGLE = 3,
        D3D11PRIMITIVE_LINE_ADJ = 6,
        D3D11PRIMITIVE_TRIANGLE_ADJ = 7,
        D3D11PRIMITIVE_1CONTROL_POINT_PATCH = 8,
        D3D11PRIMITIVE_2CONTROL_POINT_PATCH = 9,
        D3D11PRIMITIVE_3CONTROL_POINT_PATCH = 10,
        D3D11PRIMITIVE_4CONTROL_POINT_PATCH = 11,
        D3D11PRIMITIVE_5CONTROL_POINT_PATCH = 12,
        D3D11PRIMITIVE_6CONTROL_POINT_PATCH = 13,
        D3D11PRIMITIVE_7CONTROL_POINT_PATCH = 14,
        D3D11PRIMITIVE_8CONTROL_POINT_PATCH = 15,
        D3D11PRIMITIVE_9CONTROL_POINT_PATCH = 16,
        D3D11PRIMITIVE_10CONTROL_POINT_PATCH = 17,
        D3D11PRIMITIVE_11CONTROL_POINT_PATCH = 18,
        D3D11PRIMITIVE_12CONTROL_POINT_PATCH = 19,
        D3D11PRIMITIVE_13CONTROL_POINT_PATCH = 20,
        D3D11PRIMITIVE_14CONTROL_POINT_PATCH = 21,
        D3D11PRIMITIVE_15CONTROL_POINT_PATCH = 22,
        D3D11PRIMITIVE_16CONTROL_POINT_PATCH = 23,
        D3D11PRIMITIVE_17CONTROL_POINT_PATCH = 24,
        D3D11PRIMITIVE_18CONTROL_POINT_PATCH = 25,
        D3D11PRIMITIVE_19CONTROL_POINT_PATCH = 26,
        D3D11PRIMITIVE_20CONTROL_POINT_PATCH = 27,
        D3D11PRIMITIVE_21CONTROL_POINT_PATCH = 28,
        D3D11PRIMITIVE_22CONTROL_POINT_PATCH = 29,
        D3D11PRIMITIVE_23CONTROL_POINT_PATCH = 30,
        D3D11PRIMITIVE_24CONTROL_POINT_PATCH = 31,
        D3D11PRIMITIVE_25CONTROL_POINT_PATCH = 32,
        D3D11PRIMITIVE_26CONTROL_POINT_PATCH = 33,
        D3D11PRIMITIVE_27CONTROL_POINT_PATCH = 34,
        D3D11PRIMITIVE_28CONTROL_POINT_PATCH = 35,
        D3D11PRIMITIVE_29CONTROL_POINT_PATCH = 36,
        D3D11PRIMITIVE_30CONTROL_POINT_PATCH = 37,
        D3D11PRIMITIVE_31CONTROL_POINT_PATCH = 38,
        D3D11PRIMITIVE_32CONTROL_POINT_PATCH = 39
    }

    // DEBUG: enum _D3D_INCLUDE_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_INCLUDE_LOCAL	= 0,
    // DEBUG:         D3D_INCLUDE_SYSTEM	= ( D3D_INCLUDE_LOCAL + 1 ) ,
    // DEBUG:         D3D10_INCLUDE_LOCAL	= D3D_INCLUDE_LOCAL,
    // DEBUG:         D3D10_INCLUDE_SYSTEM	= D3D_INCLUDE_SYSTEM,
    // DEBUG:         D3D_INCLUDE_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     }
    public enum D3D_INCLUDE_TYPE
    {
        D3D_INCLUDE_LOCAL = 0,
        D3D_INCLUDE_SYSTEM = 1,
        D3D10INCLUDE_LOCAL = 0,
        D3D10INCLUDE_SYSTEM = 1,
        D3D_INCLUDE_FORCE_DWORD = 2147483647
    }

    // DEBUG: enum _D3D_SHADER_VARIABLE_CLASS
    // DEBUG:     {
    // DEBUG:         D3D_SVC_SCALAR	= 0,
    // DEBUG:         D3D_SVC_VECTOR	= ( D3D_SVC_SCALAR + 1 ) ,
    // DEBUG:         D3D_SVC_MATRIX_ROWS	= ( D3D_SVC_VECTOR + 1 ) ,
    // DEBUG:         D3D_SVC_MATRIX_COLUMNS	= ( D3D_SVC_MATRIX_ROWS + 1 ) ,
    // DEBUG:         D3D_SVC_OBJECT	= ( D3D_SVC_MATRIX_COLUMNS + 1 ) ,
    // DEBUG:         D3D_SVC_STRUCT	= ( D3D_SVC_OBJECT + 1 ) ,
    // DEBUG:         D3D_SVC_INTERFACE_CLASS	= ( D3D_SVC_STRUCT + 1 ) ,
    // DEBUG:         D3D_SVC_INTERFACE_POINTER	= ( D3D_SVC_INTERFACE_CLASS + 1 ) ,
    // DEBUG:         D3D10_SVC_SCALAR	= D3D_SVC_SCALAR,
    // DEBUG:         D3D10_SVC_VECTOR	= D3D_SVC_VECTOR,
    // DEBUG:         D3D10_SVC_MATRIX_ROWS	= D3D_SVC_MATRIX_ROWS,
    // DEBUG:         D3D10_SVC_MATRIX_COLUMNS	= D3D_SVC_MATRIX_COLUMNS,
    // DEBUG:         D3D10_SVC_OBJECT	= D3D_SVC_OBJECT,
    // DEBUG:         D3D10_SVC_STRUCT	= D3D_SVC_STRUCT,
    // DEBUG:         D3D11_SVC_INTERFACE_CLASS	= D3D_SVC_INTERFACE_CLASS,
    // DEBUG:         D3D11_SVC_INTERFACE_POINTER	= D3D_SVC_INTERFACE_POINTER,
    // DEBUG:         D3D_SVC_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     }
    public enum D3D_SHADER_VARIABLE_CLASS
    {
        D3D_SVC_SCALAR = 0,
        D3D_SVC_VECTOR = 1,
        D3D_SVC_MATRIX_ROWS = 2,
        D3D_SVC_MATRIX_COLUMNS = 3,
        D3D_SVC_OBJECT = 4,
        D3D_SVC_STRUCT = 5,
        D3D_SVC_INTERFACE_CLASS = 6,
        D3D_SVC_INTERFACE_POINTER = 7,
        D3D10SVC_SCALAR = 0,
        D3D10SVC_VECTOR = 1,
        D3D10SVC_MATRIX_ROWS = 2,
        D3D10SVC_MATRIX_COLUMNS = 3,
        D3D10SVC_OBJECT = 4,
        D3D10SVC_STRUCT = 5,
        D3D11SVC_INTERFACE_CLASS = 6,
        D3D11SVC_INTERFACE_POINTER = 7,
        D3D_SVC_FORCE_DWORD = 2147483647
    }

    // DEBUG: enum _D3D_SHADER_VARIABLE_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D_SVF_USERPACKED	= 1,
    // DEBUG:         D3D_SVF_USED	= 2,
    // DEBUG:         D3D_SVF_INTERFACE_POINTER	= 4,
    // DEBUG:         D3D_SVF_INTERFACE_PARAMETER	= 8,
    // DEBUG:         D3D10_SVF_USERPACKED	= D3D_SVF_USERPACKED,
    // DEBUG:         D3D10_SVF_USED	= D3D_SVF_USED,
    // DEBUG:         D3D11_SVF_INTERFACE_POINTER	= D3D_SVF_INTERFACE_POINTER,
    // DEBUG:         D3D11_SVF_INTERFACE_PARAMETER	= D3D_SVF_INTERFACE_PARAMETER,
    // DEBUG:         D3D_SVF_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     }
    public enum D3D_SHADER_VARIABLE_FLAGS
    {
        D3D_SVF_USERPACKED = 1,
        D3D_SVF_USED = 2,
        D3D_SVF_INTERFACE_POINTER = 4,
        D3D_SVF_INTERFACE_PARAMETER = 8,
        D3D10SVF_USERPACKED = 1,
        D3D10SVF_USED = 2,
        D3D11SVF_INTERFACE_POINTER = 4,
        D3D11SVF_INTERFACE_PARAMETER = 8,
        D3D_SVF_FORCE_DWORD = 2147483647
    }

    // DEBUG: enum _D3D_SHADER_VARIABLE_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_SVT_VOID	= 0,
    // DEBUG:         D3D_SVT_BOOL	= 1,
    // DEBUG:         D3D_SVT_INT	= 2,
    // DEBUG:         D3D_SVT_FLOAT	= 3,
    // DEBUG:         D3D_SVT_STRING	= 4,
    // DEBUG:         D3D_SVT_TEXTURE	= 5,
    // DEBUG:         D3D_SVT_TEXTURE1D	= 6,
    // DEBUG:         D3D_SVT_TEXTURE2D	= 7,
    // DEBUG:         D3D_SVT_TEXTURE3D	= 8,
    // DEBUG:         D3D_SVT_TEXTURECUBE	= 9,
    // DEBUG:         D3D_SVT_SAMPLER	= 10,
    // DEBUG:         D3D_SVT_SAMPLER1D	= 11,
    // DEBUG:         D3D_SVT_SAMPLER2D	= 12,
    // DEBUG:         D3D_SVT_SAMPLER3D	= 13,
    // DEBUG:         D3D_SVT_SAMPLERCUBE	= 14,
    // DEBUG:         D3D_SVT_PIXELSHADER	= 15,
    // DEBUG:         D3D_SVT_VERTEXSHADER	= 16,
    // DEBUG:         D3D_SVT_PIXELFRAGMENT	= 17,
    // DEBUG:         D3D_SVT_VERTEXFRAGMENT	= 18,
    // DEBUG:         D3D_SVT_UINT	= 19,
    // DEBUG:         D3D_SVT_UINT8	= 20,
    // DEBUG:         D3D_SVT_GEOMETRYSHADER	= 21,
    // DEBUG:         D3D_SVT_RASTERIZER	= 22,
    // DEBUG:         D3D_SVT_DEPTHSTENCIL	= 23,
    // DEBUG:         D3D_SVT_BLEND	= 24,
    // DEBUG:         D3D_SVT_BUFFER	= 25,
    // DEBUG:         D3D_SVT_CBUFFER	= 26,
    // DEBUG:         D3D_SVT_TBUFFER	= 27,
    // DEBUG:         D3D_SVT_TEXTURE1DARRAY	= 28,
    // DEBUG:         D3D_SVT_TEXTURE2DARRAY	= 29,
    // DEBUG:         D3D_SVT_RENDERTARGETVIEW	= 30,
    // DEBUG:         D3D_SVT_DEPTHSTENCILVIEW	= 31,
    // DEBUG:         D3D_SVT_TEXTURE2DMS	= 32,
    // DEBUG:         D3D_SVT_TEXTURE2DMSARRAY	= 33,
    // DEBUG:         D3D_SVT_TEXTURECUBEARRAY	= 34,
    // DEBUG:         D3D_SVT_HULLSHADER	= 35,
    // DEBUG:         D3D_SVT_DOMAINSHADER	= 36,
    // DEBUG:         D3D_SVT_INTERFACE_POINTER	= 37,
    // DEBUG:         D3D_SVT_COMPUTESHADER	= 38,
    // DEBUG:         D3D_SVT_DOUBLE	= 39,
    // DEBUG:         D3D_SVT_RWTEXTURE1D	= 40,
    // DEBUG:         D3D_SVT_RWTEXTURE1DARRAY	= 41,
    // DEBUG:         D3D_SVT_RWTEXTURE2D	= 42,
    // DEBUG:         D3D_SVT_RWTEXTURE2DARRAY	= 43,
    // DEBUG:         D3D_SVT_RWTEXTURE3D	= 44,
    // DEBUG:         D3D_SVT_RWBUFFER	= 45,
    // DEBUG:         D3D_SVT_BYTEADDRESS_BUFFER	= 46,
    // DEBUG:         D3D_SVT_RWBYTEADDRESS_BUFFER	= 47,
    // DEBUG:         D3D_SVT_STRUCTURED_BUFFER	= 48,
    // DEBUG:         D3D_SVT_RWSTRUCTURED_BUFFER	= 49,
    // DEBUG:         D3D_SVT_APPEND_STRUCTURED_BUFFER	= 50,
    // DEBUG:         D3D_SVT_CONSUME_STRUCTURED_BUFFER	= 51,
    // DEBUG:         D3D_SVT_MIN8FLOAT	= 52,
    // DEBUG:         D3D_SVT_MIN10FLOAT	= 53,
    // DEBUG:         D3D_SVT_MIN16FLOAT	= 54,
    // DEBUG:         D3D_SVT_MIN12INT	= 55,
    // DEBUG:         D3D_SVT_MIN16INT	= 56,
    // DEBUG:         D3D_SVT_MIN16UINT	= 57,
    // DEBUG:         D3D_SVT_INT16	= 58,
    // DEBUG:         D3D_SVT_UINT16	= 59,
    // DEBUG:         D3D_SVT_FLOAT16	= 60,
    // DEBUG:         D3D_SVT_INT64	= 61,
    // DEBUG:         D3D_SVT_UINT64	= 62,
    // DEBUG:         D3D10_SVT_VOID	= D3D_SVT_VOID,
    // DEBUG:         D3D10_SVT_BOOL	= D3D_SVT_BOOL,
    // DEBUG:         D3D10_SVT_INT	= D3D_SVT_INT,
    // DEBUG:         D3D10_SVT_FLOAT	= D3D_SVT_FLOAT,
    // DEBUG:         D3D10_SVT_STRING	= D3D_SVT_STRING,
    // DEBUG:         D3D10_SVT_TEXTURE	= D3D_SVT_TEXTURE,
    // DEBUG:         D3D10_SVT_TEXTURE1D	= D3D_SVT_TEXTURE1D,
    // DEBUG:         D3D10_SVT_TEXTURE2D	= D3D_SVT_TEXTURE2D,
    // DEBUG:         D3D10_SVT_TEXTURE3D	= D3D_SVT_TEXTURE3D,
    // DEBUG:         D3D10_SVT_TEXTURECUBE	= D3D_SVT_TEXTURECUBE,
    // DEBUG:         D3D10_SVT_SAMPLER	= D3D_SVT_SAMPLER,
    // DEBUG:         D3D10_SVT_SAMPLER1D	= D3D_SVT_SAMPLER1D,
    // DEBUG:         D3D10_SVT_SAMPLER2D	= D3D_SVT_SAMPLER2D,
    // DEBUG:         D3D10_SVT_SAMPLER3D	= D3D_SVT_SAMPLER3D,
    // DEBUG:         D3D10_SVT_SAMPLERCUBE	= D3D_SVT_SAMPLERCUBE,
    // DEBUG:         D3D10_SVT_PIXELSHADER	= D3D_SVT_PIXELSHADER,
    // DEBUG:         D3D10_SVT_VERTEXSHADER	= D3D_SVT_VERTEXSHADER,
    // DEBUG:         D3D10_SVT_PIXELFRAGMENT	= D3D_SVT_PIXELFRAGMENT,
    // DEBUG:         D3D10_SVT_VERTEXFRAGMENT	= D3D_SVT_VERTEXFRAGMENT,
    // DEBUG:         D3D10_SVT_UINT	= D3D_SVT_UINT,
    // DEBUG:         D3D10_SVT_UINT8	= D3D_SVT_UINT8,
    // DEBUG:         D3D10_SVT_GEOMETRYSHADER	= D3D_SVT_GEOMETRYSHADER,
    // DEBUG:         D3D10_SVT_RASTERIZER	= D3D_SVT_RASTERIZER,
    // DEBUG:         D3D10_SVT_DEPTHSTENCIL	= D3D_SVT_DEPTHSTENCIL,
    // DEBUG:         D3D10_SVT_BLEND	= D3D_SVT_BLEND,
    // DEBUG:         D3D10_SVT_BUFFER	= D3D_SVT_BUFFER,
    // DEBUG:         D3D10_SVT_CBUFFER	= D3D_SVT_CBUFFER,
    // DEBUG:         D3D10_SVT_TBUFFER	= D3D_SVT_TBUFFER,
    // DEBUG:         D3D10_SVT_TEXTURE1DARRAY	= D3D_SVT_TEXTURE1DARRAY,
    // DEBUG:         D3D10_SVT_TEXTURE2DARRAY	= D3D_SVT_TEXTURE2DARRAY,
    // DEBUG:         D3D10_SVT_RENDERTARGETVIEW	= D3D_SVT_RENDERTARGETVIEW,
    // DEBUG:         D3D10_SVT_DEPTHSTENCILVIEW	= D3D_SVT_DEPTHSTENCILVIEW,
    // DEBUG:         D3D10_SVT_TEXTURE2DMS	= D3D_SVT_TEXTURE2DMS,
    // DEBUG:         D3D10_SVT_TEXTURE2DMSARRAY	= D3D_SVT_TEXTURE2DMSARRAY,
    // DEBUG:         D3D10_SVT_TEXTURECUBEARRAY	= D3D_SVT_TEXTURECUBEARRAY,
    // DEBUG:         D3D11_SVT_HULLSHADER	= D3D_SVT_HULLSHADER,
    // DEBUG:         D3D11_SVT_DOMAINSHADER	= D3D_SVT_DOMAINSHADER,
    // DEBUG:         D3D11_SVT_INTERFACE_POINTER	= D3D_SVT_INTERFACE_POINTER,
    // DEBUG:         D3D11_SVT_COMPUTESHADER	= D3D_SVT_COMPUTESHADER,
    // DEBUG:         D3D11_SVT_DOUBLE	= D3D_SVT_DOUBLE,
    // DEBUG:         D3D11_SVT_RWTEXTURE1D	= D3D_SVT_RWTEXTURE1D,
    // DEBUG:         D3D11_SVT_RWTEXTURE1DARRAY	= D3D_SVT_RWTEXTURE1DARRAY,
    // DEBUG:         D3D11_SVT_RWTEXTURE2D	= D3D_SVT_RWTEXTURE2D,
    // DEBUG:         D3D11_SVT_RWTEXTURE2DARRAY	= D3D_SVT_RWTEXTURE2DARRAY,
    // DEBUG:         D3D11_SVT_RWTEXTURE3D	= D3D_SVT_RWTEXTURE3D,
    // DEBUG:         D3D11_SVT_RWBUFFER	= D3D_SVT_RWBUFFER,
    // DEBUG:         D3D11_SVT_BYTEADDRESS_BUFFER	= D3D_SVT_BYTEADDRESS_BUFFER,
    // DEBUG:         D3D11_SVT_RWBYTEADDRESS_BUFFER	= D3D_SVT_RWBYTEADDRESS_BUFFER,
    // DEBUG:         D3D11_SVT_STRUCTURED_BUFFER	= D3D_SVT_STRUCTURED_BUFFER,
    // DEBUG:         D3D11_SVT_RWSTRUCTURED_BUFFER	= D3D_SVT_RWSTRUCTURED_BUFFER,
    // DEBUG:         D3D11_SVT_APPEND_STRUCTURED_BUFFER	= D3D_SVT_APPEND_STRUCTURED_BUFFER,
    // DEBUG:         D3D11_SVT_CONSUME_STRUCTURED_BUFFER	= D3D_SVT_CONSUME_STRUCTURED_BUFFER,
    // DEBUG:         D3D_SVT_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     }
    public enum D3D_SHADER_VARIABLE_TYPE
    {
        D3D_SVT_VOID = 0,
        D3D_SVT_BOOL = 1,
        D3D_SVT_INT = 2,
        D3D_SVT_FLOAT = 3,
        D3D_SVT_STRING = 4,
        D3D_SVT_TEXTURE = 5,
        D3D_SVT_TEXTURE1D = 6,
        D3D_SVT_TEXTURE2D = 7,
        D3D_SVT_TEXTURE3D = 8,
        D3D_SVT_TEXTURECUBE = 9,
        D3D_SVT_SAMPLER = 10,
        D3D_SVT_SAMPLER1D = 11,
        D3D_SVT_SAMPLER2D = 12,
        D3D_SVT_SAMPLER3D = 13,
        D3D_SVT_SAMPLERCUBE = 14,
        D3D_SVT_PIXELSHADER = 15,
        D3D_SVT_VERTEXSHADER = 16,
        D3D_SVT_PIXELFRAGMENT = 17,
        D3D_SVT_VERTEXFRAGMENT = 18,
        D3D_SVT_UINT = 19,
        D3D_SVT_UINT8 = 20,
        D3D_SVT_GEOMETRYSHADER = 21,
        D3D_SVT_RASTERIZER = 22,
        D3D_SVT_DEPTHSTENCIL = 23,
        D3D_SVT_BLEND = 24,
        D3D_SVT_BUFFER = 25,
        D3D_SVT_CBUFFER = 26,
        D3D_SVT_TBUFFER = 27,
        D3D_SVT_TEXTURE1DARRAY = 28,
        D3D_SVT_TEXTURE2DARRAY = 29,
        D3D_SVT_RENDERTARGETVIEW = 30,
        D3D_SVT_DEPTHSTENCILVIEW = 31,
        D3D_SVT_TEXTURE2DMS = 32,
        D3D_SVT_TEXTURE2DMSARRAY = 33,
        D3D_SVT_TEXTURECUBEARRAY = 34,
        D3D_SVT_HULLSHADER = 35,
        D3D_SVT_DOMAINSHADER = 36,
        D3D_SVT_INTERFACE_POINTER = 37,
        D3D_SVT_COMPUTESHADER = 38,
        D3D_SVT_DOUBLE = 39,
        D3D_SVT_RWTEXTURE1D = 40,
        D3D_SVT_RWTEXTURE1DARRAY = 41,
        D3D_SVT_RWTEXTURE2D = 42,
        D3D_SVT_RWTEXTURE2DARRAY = 43,
        D3D_SVT_RWTEXTURE3D = 44,
        D3D_SVT_RWBUFFER = 45,
        D3D_SVT_BYTEADDRESS_BUFFER = 46,
        D3D_SVT_RWBYTEADDRESS_BUFFER = 47,
        D3D_SVT_STRUCTURED_BUFFER = 48,
        D3D_SVT_RWSTRUCTURED_BUFFER = 49,
        D3D_SVT_APPEND_STRUCTURED_BUFFER = 50,
        D3D_SVT_CONSUME_STRUCTURED_BUFFER = 51,
        D3D_SVT_MIN8FLOAT = 52,
        D3D_SVT_MIN10FLOAT = 53,
        D3D_SVT_MIN16FLOAT = 54,
        D3D_SVT_MIN12INT = 55,
        D3D_SVT_MIN16INT = 56,
        D3D_SVT_MIN16UINT = 57,
        D3D_SVT_INT16 = 58,
        D3D_SVT_UINT16 = 59,
        D3D_SVT_FLOAT16 = 60,
        D3D_SVT_INT64 = 61,
        D3D_SVT_UINT64 = 62,
        D3D10SVT_VOID = 0,
        D3D10SVT_BOOL = 1,
        D3D10SVT_INT = 2,
        D3D10SVT_FLOAT = 3,
        D3D10SVT_STRING = 4,
        D3D10SVT_TEXTURE = 5,
        D3D10SVT_TEXTURE1D = 6,
        D3D10SVT_TEXTURE2D = 7,
        D3D10SVT_TEXTURE3D = 8,
        D3D10SVT_TEXTURECUBE = 9,
        D3D10SVT_SAMPLER = 10,
        D3D10SVT_SAMPLER1D = 11,
        D3D10SVT_SAMPLER2D = 12,
        D3D10SVT_SAMPLER3D = 13,
        D3D10SVT_SAMPLERCUBE = 14,
        D3D10SVT_PIXELSHADER = 15,
        D3D10SVT_VERTEXSHADER = 16,
        D3D10SVT_PIXELFRAGMENT = 17,
        D3D10SVT_VERTEXFRAGMENT = 18,
        D3D10SVT_UINT = 19,
        D3D10SVT_UINT8 = 20,
        D3D10SVT_GEOMETRYSHADER = 21,
        D3D10SVT_RASTERIZER = 22,
        D3D10SVT_DEPTHSTENCIL = 23,
        D3D10SVT_BLEND = 24,
        D3D10SVT_BUFFER = 25,
        D3D10SVT_CBUFFER = 26,
        D3D10SVT_TBUFFER = 27,
        D3D10SVT_TEXTURE1DARRAY = 28,
        D3D10SVT_TEXTURE2DARRAY = 29,
        D3D10SVT_RENDERTARGETVIEW = 30,
        D3D10SVT_DEPTHSTENCILVIEW = 31,
        D3D10SVT_TEXTURE2DMS = 32,
        D3D10SVT_TEXTURE2DMSARRAY = 33,
        D3D10SVT_TEXTURECUBEARRAY = 34,
        D3D11SVT_HULLSHADER = 35,
        D3D11SVT_DOMAINSHADER = 36,
        D3D11SVT_INTERFACE_POINTER = 37,
        D3D11SVT_COMPUTESHADER = 38,
        D3D11SVT_DOUBLE = 39,
        D3D11SVT_RWTEXTURE1D = 40,
        D3D11SVT_RWTEXTURE1DARRAY = 41,
        D3D11SVT_RWTEXTURE2D = 42,
        D3D11SVT_RWTEXTURE2DARRAY = 43,
        D3D11SVT_RWTEXTURE3D = 44,
        D3D11SVT_RWBUFFER = 45,
        D3D11SVT_BYTEADDRESS_BUFFER = 46,
        D3D11SVT_RWBYTEADDRESS_BUFFER = 47,
        D3D11SVT_STRUCTURED_BUFFER = 48,
        D3D11SVT_RWSTRUCTURED_BUFFER = 49,
        D3D11SVT_APPEND_STRUCTURED_BUFFER = 50,
        D3D11SVT_CONSUME_STRUCTURED_BUFFER = 51,
        D3D_SVT_FORCE_DWORD = 2147483647
    }

    // DEBUG: enum _D3D_SHADER_INPUT_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D_SIF_USERPACKED	= 0x1,
    // DEBUG:         D3D_SIF_COMPARISON_SAMPLER	= 0x2,
    // DEBUG:         D3D_SIF_TEXTURE_COMPONENT_0	= 0x4,
    // DEBUG:         D3D_SIF_TEXTURE_COMPONENT_1	= 0x8,
    // DEBUG:         D3D_SIF_TEXTURE_COMPONENTS	= 0xc,
    // DEBUG:         D3D_SIF_UNUSED	= 0x10,
    // DEBUG:         D3D10_SIF_USERPACKED	= D3D_SIF_USERPACKED,
    // DEBUG:         D3D10_SIF_COMPARISON_SAMPLER	= D3D_SIF_COMPARISON_SAMPLER,
    // DEBUG:         D3D10_SIF_TEXTURE_COMPONENT_0	= D3D_SIF_TEXTURE_COMPONENT_0,
    // DEBUG:         D3D10_SIF_TEXTURE_COMPONENT_1	= D3D_SIF_TEXTURE_COMPONENT_1,
    // DEBUG:         D3D10_SIF_TEXTURE_COMPONENTS	= D3D_SIF_TEXTURE_COMPONENTS,
    // DEBUG:         D3D_SIF_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     }
    public enum D3D_SHADER_INPUT_FLAGS
    {
        D3D_SIF_USERPACKED = 1,
        D3D_SIF_COMPARISON_SAMPLER = 2,
        D3D_SIF_TEXTURE_COMPONENT_0 = 4,
        D3D_SIF_TEXTURE_COMPONENT_1 = 8,
        D3D_SIF_TEXTURE_COMPONENTS = 12,
        D3D_SIF_UNUSED = 16,
        D3D10SIF_USERPACKED = 1,
        D3D10SIF_COMPARISON_SAMPLER = 2,
        D3D10SIF_TEXTURE_COMPONENT_0 = 4,
        D3D10SIF_TEXTURE_COMPONENT_1 = 8,
        D3D10SIF_TEXTURE_COMPONENTS = 12,
        D3D_SIF_FORCE_DWORD = 2147483647
    }

    // DEBUG: enum _D3D_SHADER_INPUT_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_SIT_CBUFFER	= 0,
    // DEBUG:         D3D_SIT_TBUFFER	= ( D3D_SIT_CBUFFER + 1 ) ,
    // DEBUG:         D3D_SIT_TEXTURE	= ( D3D_SIT_TBUFFER + 1 ) ,
    // DEBUG:         D3D_SIT_SAMPLER	= ( D3D_SIT_TEXTURE + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_RWTYPED	= ( D3D_SIT_SAMPLER + 1 ) ,
    // DEBUG:         D3D_SIT_STRUCTURED	= ( D3D_SIT_UAV_RWTYPED + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_RWSTRUCTURED	= ( D3D_SIT_STRUCTURED + 1 ) ,
    // DEBUG:         D3D_SIT_BYTEADDRESS	= ( D3D_SIT_UAV_RWSTRUCTURED + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_RWBYTEADDRESS	= ( D3D_SIT_BYTEADDRESS + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_APPEND_STRUCTURED	= ( D3D_SIT_UAV_RWBYTEADDRESS + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_CONSUME_STRUCTURED	= ( D3D_SIT_UAV_APPEND_STRUCTURED + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER	= ( D3D_SIT_UAV_CONSUME_STRUCTURED + 1 ) ,
    // DEBUG:         D3D_SIT_RTACCELERATIONSTRUCTURE	= ( D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_FEEDBACKTEXTURE	= ( D3D_SIT_RTACCELERATIONSTRUCTURE + 1 ) ,
    // DEBUG:         D3D10_SIT_CBUFFER	= D3D_SIT_CBUFFER,
    // DEBUG:         D3D10_SIT_TBUFFER	= D3D_SIT_TBUFFER,
    // DEBUG:         D3D10_SIT_TEXTURE	= D3D_SIT_TEXTURE,
    // DEBUG:         D3D10_SIT_SAMPLER	= D3D_SIT_SAMPLER,
    // DEBUG:         D3D11_SIT_UAV_RWTYPED	= D3D_SIT_UAV_RWTYPED,
    // DEBUG:         D3D11_SIT_STRUCTURED	= D3D_SIT_STRUCTURED,
    // DEBUG:         D3D11_SIT_UAV_RWSTRUCTURED	= D3D_SIT_UAV_RWSTRUCTURED,
    // DEBUG:         D3D11_SIT_BYTEADDRESS	= D3D_SIT_BYTEADDRESS,
    // DEBUG:         D3D11_SIT_UAV_RWBYTEADDRESS	= D3D_SIT_UAV_RWBYTEADDRESS,
    // DEBUG:         D3D11_SIT_UAV_APPEND_STRUCTURED	= D3D_SIT_UAV_APPEND_STRUCTURED,
    // DEBUG:         D3D11_SIT_UAV_CONSUME_STRUCTURED	= D3D_SIT_UAV_CONSUME_STRUCTURED,
    // DEBUG:         D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER	= D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER
    // DEBUG:     }
    public enum D3D_SHADER_INPUT_TYPE
    {
        D3D_SIT_CBUFFER = 0,
        D3D_SIT_TBUFFER = 1,
        D3D_SIT_TEXTURE = 2,
        D3D_SIT_SAMPLER = 3,
        D3D_SIT_UAV_RWTYPED = 4,
        D3D_SIT_STRUCTURED = 5,
        D3D_SIT_UAV_RWSTRUCTURED = 6,
        D3D_SIT_BYTEADDRESS = 7,
        D3D_SIT_UAV_RWBYTEADDRESS = 8,
        D3D_SIT_UAV_APPEND_STRUCTURED = 9,
        D3D_SIT_UAV_CONSUME_STRUCTURED = 10,
        D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11,
        D3D_SIT_RTACCELERATIONSTRUCTURE = 12,
        D3D_SIT_UAV_FEEDBACKTEXTURE = 13,
        D3D10SIT_CBUFFER = 0,
        D3D10SIT_TBUFFER = 1,
        D3D10SIT_TEXTURE = 2,
        D3D10SIT_SAMPLER = 3,
        D3D11SIT_UAV_RWTYPED = 4,
        D3D11SIT_STRUCTURED = 5,
        D3D11SIT_UAV_RWSTRUCTURED = 6,
        D3D11SIT_BYTEADDRESS = 7,
        D3D11SIT_UAV_RWBYTEADDRESS = 8,
        D3D11SIT_UAV_APPEND_STRUCTURED = 9,
        D3D11SIT_UAV_CONSUME_STRUCTURED = 10,
        D3D11SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11
    }

    // DEBUG: enum _D3D_SHADER_CBUFFER_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D_CBF_USERPACKED	= 1,
    // DEBUG:         D3D10_CBF_USERPACKED	= D3D_CBF_USERPACKED,
    // DEBUG:         D3D_CBF_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     }
    public enum D3D_SHADER_CBUFFER_FLAGS
    {
        D3D_CBF_USERPACKED = 1,
        D3D10CBF_USERPACKED = 1,
        D3D_CBF_FORCE_DWORD = 2147483647
    }

    // DEBUG: enum _D3D_CBUFFER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_CT_CBUFFER	= 0,
    // DEBUG:         D3D_CT_TBUFFER	= ( D3D_CT_CBUFFER + 1 ) ,
    // DEBUG:         D3D_CT_INTERFACE_POINTERS	= ( D3D_CT_TBUFFER + 1 ) ,
    // DEBUG:         D3D_CT_RESOURCE_BIND_INFO	= ( D3D_CT_INTERFACE_POINTERS + 1 ) ,
    // DEBUG:         D3D10_CT_CBUFFER	= D3D_CT_CBUFFER,
    // DEBUG:         D3D10_CT_TBUFFER	= D3D_CT_TBUFFER,
    // DEBUG:         D3D11_CT_CBUFFER	= D3D_CT_CBUFFER,
    // DEBUG:         D3D11_CT_TBUFFER	= D3D_CT_TBUFFER,
    // DEBUG:         D3D11_CT_INTERFACE_POINTERS	= D3D_CT_INTERFACE_POINTERS,
    // DEBUG:         D3D11_CT_RESOURCE_BIND_INFO	= D3D_CT_RESOURCE_BIND_INFO
    // DEBUG:     }
    public enum D3D_CBUFFER_TYPE
    {
        D3D_CT_CBUFFER = 0,
        D3D_CT_TBUFFER = 1,
        D3D_CT_INTERFACE_POINTERS = 2,
        D3D_CT_RESOURCE_BIND_INFO = 3,
        D3D10CT_CBUFFER = 0,
        D3D10CT_TBUFFER = 1,
        D3D11CT_CBUFFER = 0,
        D3D11CT_TBUFFER = 1,
        D3D11CT_INTERFACE_POINTERS = 2,
        D3D11CT_RESOURCE_BIND_INFO = 3
    }

    // DEBUG: enum D3D_NAME
    // DEBUG:     {
    // DEBUG:         D3D_NAME_UNDEFINED	= 0,
    // DEBUG:         D3D_NAME_POSITION	= 1,
    // DEBUG:         D3D_NAME_CLIP_DISTANCE	= 2,
    // DEBUG:         D3D_NAME_CULL_DISTANCE	= 3,
    // DEBUG:         D3D_NAME_RENDER_TARGET_ARRAY_INDEX	= 4,
    // DEBUG:         D3D_NAME_VIEWPORT_ARRAY_INDEX	= 5,
    // DEBUG:         D3D_NAME_VERTEX_ID	= 6,
    // DEBUG:         D3D_NAME_PRIMITIVE_ID	= 7,
    // DEBUG:         D3D_NAME_INSTANCE_ID	= 8,
    // DEBUG:         D3D_NAME_IS_FRONT_FACE	= 9,
    // DEBUG:         D3D_NAME_SAMPLE_INDEX	= 10,
    // DEBUG:         D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR	= 11,
    // DEBUG:         D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR	= 12,
    // DEBUG:         D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR	= 13,
    // DEBUG:         D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR	= 14,
    // DEBUG:         D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR	= 15,
    // DEBUG:         D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR	= 16,
    // DEBUG:         D3D_NAME_BARYCENTRICS	= 23,
    // DEBUG:         D3D_NAME_SHADINGRATE	= 24,
    // DEBUG:         D3D_NAME_CULLPRIMITIVE	= 25,
    // DEBUG:         D3D_NAME_TARGET	= 64,
    // DEBUG:         D3D_NAME_DEPTH	= 65,
    // DEBUG:         D3D_NAME_COVERAGE	= 66,
    // DEBUG:         D3D_NAME_DEPTH_GREATER_EQUAL	= 67,
    // DEBUG:         D3D_NAME_DEPTH_LESS_EQUAL	= 68,
    // DEBUG:         D3D_NAME_STENCIL_REF	= 69,
    // DEBUG:         D3D_NAME_INNER_COVERAGE	= 70,
    // DEBUG:         D3D10_NAME_UNDEFINED	= D3D_NAME_UNDEFINED,
    // DEBUG:         D3D10_NAME_POSITION	= D3D_NAME_POSITION,
    // DEBUG:         D3D10_NAME_CLIP_DISTANCE	= D3D_NAME_CLIP_DISTANCE,
    // DEBUG:         D3D10_NAME_CULL_DISTANCE	= D3D_NAME_CULL_DISTANCE,
    // DEBUG:         D3D10_NAME_RENDER_TARGET_ARRAY_INDEX	= D3D_NAME_RENDER_TARGET_ARRAY_INDEX,
    // DEBUG:         D3D10_NAME_VIEWPORT_ARRAY_INDEX	= D3D_NAME_VIEWPORT_ARRAY_INDEX,
    // DEBUG:         D3D10_NAME_VERTEX_ID	= D3D_NAME_VERTEX_ID,
    // DEBUG:         D3D10_NAME_PRIMITIVE_ID	= D3D_NAME_PRIMITIVE_ID,
    // DEBUG:         D3D10_NAME_INSTANCE_ID	= D3D_NAME_INSTANCE_ID,
    // DEBUG:         D3D10_NAME_IS_FRONT_FACE	= D3D_NAME_IS_FRONT_FACE,
    // DEBUG:         D3D10_NAME_SAMPLE_INDEX	= D3D_NAME_SAMPLE_INDEX,
    // DEBUG:         D3D10_NAME_TARGET	= D3D_NAME_TARGET,
    // DEBUG:         D3D10_NAME_DEPTH	= D3D_NAME_DEPTH,
    // DEBUG:         D3D10_NAME_COVERAGE	= D3D_NAME_COVERAGE,
    // DEBUG:         D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR	= D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR	= D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR	= D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR	= D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR	= D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR	= D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR,
    // DEBUG:         D3D11_NAME_DEPTH_GREATER_EQUAL	= D3D_NAME_DEPTH_GREATER_EQUAL,
    // DEBUG:         D3D11_NAME_DEPTH_LESS_EQUAL	= D3D_NAME_DEPTH_LESS_EQUAL,
    // DEBUG:         D3D11_NAME_STENCIL_REF	= D3D_NAME_STENCIL_REF,
    // DEBUG:         D3D11_NAME_INNER_COVERAGE	= D3D_NAME_INNER_COVERAGE,
    // DEBUG:         D3D12_NAME_BARYCENTRICS	= D3D_NAME_BARYCENTRICS,
    // DEBUG:         D3D12_NAME_SHADINGRATE	= D3D_NAME_SHADINGRATE,
    // DEBUG:         D3D12_NAME_CULLPRIMITIVE	= D3D_NAME_CULLPRIMITIVE
    // DEBUG:     }
    public enum D3D_NAME
    {
        D3D_NAME_UNDEFINED = 0,
        D3D_NAME_POSITION = 1,
        D3D_NAME_CLIP_DISTANCE = 2,
        D3D_NAME_CULL_DISTANCE = 3,
        D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 4,
        D3D_NAME_VIEWPORT_ARRAY_INDEX = 5,
        D3D_NAME_VERTEX_ID = 6,
        D3D_NAME_PRIMITIVE_ID = 7,
        D3D_NAME_INSTANCE_ID = 8,
        D3D_NAME_IS_FRONT_FACE = 9,
        D3D_NAME_SAMPLE_INDEX = 10,
        D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11,
        D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12,
        D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13,
        D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14,
        D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15,
        D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16,
        D3D_NAME_BARYCENTRICS = 23,
        D3D_NAME_SHADINGRATE = 24,
        D3D_NAME_CULLPRIMITIVE = 25,
        D3D_NAME_TARGET = 64,
        D3D_NAME_DEPTH = 65,
        D3D_NAME_COVERAGE = 66,
        D3D_NAME_DEPTH_GREATER_EQUAL = 67,
        D3D_NAME_DEPTH_LESS_EQUAL = 68,
        D3D_NAME_STENCIL_REF = 69,
        D3D_NAME_INNER_COVERAGE = 70,
        D3D10NAME_UNDEFINED = 0,
        D3D10NAME_POSITION = 1,
        D3D10NAME_CLIP_DISTANCE = 2,
        D3D10NAME_CULL_DISTANCE = 3,
        D3D10NAME_RENDER_TARGET_ARRAY_INDEX = 4,
        D3D10NAME_VIEWPORT_ARRAY_INDEX = 5,
        D3D10NAME_VERTEX_ID = 6,
        D3D10NAME_PRIMITIVE_ID = 7,
        D3D10NAME_INSTANCE_ID = 8,
        D3D10NAME_IS_FRONT_FACE = 9,
        D3D10NAME_SAMPLE_INDEX = 10,
        D3D10NAME_TARGET = 64,
        D3D10NAME_DEPTH = 65,
        D3D10NAME_COVERAGE = 66,
        D3D11NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11,
        D3D11NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12,
        D3D11NAME_FINAL_TRI_EDGE_TESSFACTOR = 13,
        D3D11NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14,
        D3D11NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15,
        D3D11NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16,
        D3D11NAME_DEPTH_GREATER_EQUAL = 67,
        D3D11NAME_DEPTH_LESS_EQUAL = 68,
        D3D11NAME_STENCIL_REF = 69,
        D3D11NAME_INNER_COVERAGE = 70,
        D3D12NAME_BARYCENTRICS = 23,
        D3D12NAME_SHADINGRATE = 24,
        D3D12NAME_CULLPRIMITIVE = 25
    }

    // DEBUG: enum D3D_RESOURCE_RETURN_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_RETURN_TYPE_UNORM	= 1,
    // DEBUG:         D3D_RETURN_TYPE_SNORM	= 2,
    // DEBUG:         D3D_RETURN_TYPE_SINT	= 3,
    // DEBUG:         D3D_RETURN_TYPE_UINT	= 4,
    // DEBUG:         D3D_RETURN_TYPE_FLOAT	= 5,
    // DEBUG:         D3D_RETURN_TYPE_MIXED	= 6,
    // DEBUG:         D3D_RETURN_TYPE_DOUBLE	= 7,
    // DEBUG:         D3D_RETURN_TYPE_CONTINUED	= 8,
    // DEBUG:         D3D10_RETURN_TYPE_UNORM	= D3D_RETURN_TYPE_UNORM,
    // DEBUG:         D3D10_RETURN_TYPE_SNORM	= D3D_RETURN_TYPE_SNORM,
    // DEBUG:         D3D10_RETURN_TYPE_SINT	= D3D_RETURN_TYPE_SINT,
    // DEBUG:         D3D10_RETURN_TYPE_UINT	= D3D_RETURN_TYPE_UINT,
    // DEBUG:         D3D10_RETURN_TYPE_FLOAT	= D3D_RETURN_TYPE_FLOAT,
    // DEBUG:         D3D10_RETURN_TYPE_MIXED	= D3D_RETURN_TYPE_MIXED,
    // DEBUG:         D3D11_RETURN_TYPE_UNORM	= D3D_RETURN_TYPE_UNORM,
    // DEBUG:         D3D11_RETURN_TYPE_SNORM	= D3D_RETURN_TYPE_SNORM,
    // DEBUG:         D3D11_RETURN_TYPE_SINT	= D3D_RETURN_TYPE_SINT,
    // DEBUG:         D3D11_RETURN_TYPE_UINT	= D3D_RETURN_TYPE_UINT,
    // DEBUG:         D3D11_RETURN_TYPE_FLOAT	= D3D_RETURN_TYPE_FLOAT,
    // DEBUG:         D3D11_RETURN_TYPE_MIXED	= D3D_RETURN_TYPE_MIXED,
    // DEBUG:         D3D11_RETURN_TYPE_DOUBLE	= D3D_RETURN_TYPE_DOUBLE,
    // DEBUG:         D3D11_RETURN_TYPE_CONTINUED	= D3D_RETURN_TYPE_CONTINUED
    // DEBUG:     }
    public enum D3D_RESOURCE_RETURN_TYPE
    {
        D3D_RETURN_TYPE_UNORM = 1,
        D3D_RETURN_TYPE_SNORM = 2,
        D3D_RETURN_TYPE_SINT = 3,
        D3D_RETURN_TYPE_UINT = 4,
        D3D_RETURN_TYPE_FLOAT = 5,
        D3D_RETURN_TYPE_MIXED = 6,
        D3D_RETURN_TYPE_DOUBLE = 7,
        D3D_RETURN_TYPE_CONTINUED = 8,
        D3D10RETURN_TYPE_UNORM = 1,
        D3D10RETURN_TYPE_SNORM = 2,
        D3D10RETURN_TYPE_SINT = 3,
        D3D10RETURN_TYPE_UINT = 4,
        D3D10RETURN_TYPE_FLOAT = 5,
        D3D10RETURN_TYPE_MIXED = 6,
        D3D11RETURN_TYPE_UNORM = 1,
        D3D11RETURN_TYPE_SNORM = 2,
        D3D11RETURN_TYPE_SINT = 3,
        D3D11RETURN_TYPE_UINT = 4,
        D3D11RETURN_TYPE_FLOAT = 5,
        D3D11RETURN_TYPE_MIXED = 6,
        D3D11RETURN_TYPE_DOUBLE = 7,
        D3D11RETURN_TYPE_CONTINUED = 8
    }

    // DEBUG: enum D3D_REGISTER_COMPONENT_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_REGISTER_COMPONENT_UNKNOWN	= 0,
    // DEBUG:         D3D_REGISTER_COMPONENT_UINT32	= 1,
    // DEBUG:         D3D_REGISTER_COMPONENT_SINT32	= 2,
    // DEBUG:         D3D_REGISTER_COMPONENT_FLOAT32	= 3,
    // DEBUG:         D3D10_REGISTER_COMPONENT_UNKNOWN	= D3D_REGISTER_COMPONENT_UNKNOWN,
    // DEBUG:         D3D10_REGISTER_COMPONENT_UINT32	= D3D_REGISTER_COMPONENT_UINT32,
    // DEBUG:         D3D10_REGISTER_COMPONENT_SINT32	= D3D_REGISTER_COMPONENT_SINT32,
    // DEBUG:         D3D10_REGISTER_COMPONENT_FLOAT32	= D3D_REGISTER_COMPONENT_FLOAT32
    // DEBUG:     }
    public enum D3D_REGISTER_COMPONENT_TYPE
    {
        D3D_REGISTER_COMPONENT_UNKNOWN = 0,
        D3D_REGISTER_COMPONENT_UINT32 = 1,
        D3D_REGISTER_COMPONENT_SINT32 = 2,
        D3D_REGISTER_COMPONENT_FLOAT32 = 3,
        D3D10REGISTER_COMPONENT_UNKNOWN = 0,
        D3D10REGISTER_COMPONENT_UINT32 = 1,
        D3D10REGISTER_COMPONENT_SINT32 = 2,
        D3D10REGISTER_COMPONENT_FLOAT32 = 3
    }

    // DEBUG: enum D3D_TESSELLATOR_DOMAIN
    // DEBUG:     {
    // DEBUG:         D3D_TESSELLATOR_DOMAIN_UNDEFINED	= 0,
    // DEBUG:         D3D_TESSELLATOR_DOMAIN_ISOLINE	= 1,
    // DEBUG:         D3D_TESSELLATOR_DOMAIN_TRI	= 2,
    // DEBUG:         D3D_TESSELLATOR_DOMAIN_QUAD	= 3,
    // DEBUG:         D3D11_TESSELLATOR_DOMAIN_UNDEFINED	= D3D_TESSELLATOR_DOMAIN_UNDEFINED,
    // DEBUG:         D3D11_TESSELLATOR_DOMAIN_ISOLINE	= D3D_TESSELLATOR_DOMAIN_ISOLINE,
    // DEBUG:         D3D11_TESSELLATOR_DOMAIN_TRI	= D3D_TESSELLATOR_DOMAIN_TRI,
    // DEBUG:         D3D11_TESSELLATOR_DOMAIN_QUAD	= D3D_TESSELLATOR_DOMAIN_QUAD
    // DEBUG:     }
    public enum D3D_TESSELLATOR_DOMAIN
    {
        D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0,
        D3D_TESSELLATOR_DOMAIN_ISOLINE = 1,
        D3D_TESSELLATOR_DOMAIN_TRI = 2,
        D3D_TESSELLATOR_DOMAIN_QUAD = 3,
        D3D11TESSELLATOR_DOMAIN_UNDEFINED = 0,
        D3D11TESSELLATOR_DOMAIN_ISOLINE = 1,
        D3D11TESSELLATOR_DOMAIN_TRI = 2,
        D3D11TESSELLATOR_DOMAIN_QUAD = 3
    }

    // DEBUG: enum D3D_TESSELLATOR_PARTITIONING
    // DEBUG:     {
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_UNDEFINED	= 0,
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_INTEGER	= 1,
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_POW2	= 2,
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD	= 3,
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN	= 4,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_UNDEFINED	= D3D_TESSELLATOR_PARTITIONING_UNDEFINED,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_INTEGER	= D3D_TESSELLATOR_PARTITIONING_INTEGER,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_POW2	= D3D_TESSELLATOR_PARTITIONING_POW2,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD	= D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN	= D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN
    // DEBUG:     }
    public enum D3D_TESSELLATOR_PARTITIONING
    {
        D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0,
        D3D_TESSELLATOR_PARTITIONING_INTEGER = 1,
        D3D_TESSELLATOR_PARTITIONING_POW2 = 2,
        D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3,
        D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4,
        D3D11TESSELLATOR_PARTITIONING_UNDEFINED = 0,
        D3D11TESSELLATOR_PARTITIONING_INTEGER = 1,
        D3D11TESSELLATOR_PARTITIONING_POW2 = 2,
        D3D11TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3,
        D3D11TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4
    }

    // DEBUG: enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
    // DEBUG:     {
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_UNDEFINED	= 0,
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_POINT	= 1,
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_LINE	= 2,
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW	= 3,
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW	= 4,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_UNDEFINED	= D3D_TESSELLATOR_OUTPUT_UNDEFINED,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_POINT	= D3D_TESSELLATOR_OUTPUT_POINT,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_LINE	= D3D_TESSELLATOR_OUTPUT_LINE,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW	= D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW	= D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW
    // DEBUG:     }
    public enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
    {
        D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0,
        D3D_TESSELLATOR_OUTPUT_POINT = 1,
        D3D_TESSELLATOR_OUTPUT_LINE = 2,
        D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3,
        D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4,
        D3D11TESSELLATOR_OUTPUT_UNDEFINED = 0,
        D3D11TESSELLATOR_OUTPUT_POINT = 1,
        D3D11TESSELLATOR_OUTPUT_LINE = 2,
        D3D11TESSELLATOR_OUTPUT_TRIANGLE_CW = 3,
        D3D11TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4
    }

    // DEBUG: enum D3D_MIN_PRECISION
    // DEBUG:     {
    // DEBUG:         D3D_MIN_PRECISION_DEFAULT	= 0,
    // DEBUG:         D3D_MIN_PRECISION_FLOAT_16	= 1,
    // DEBUG:         D3D_MIN_PRECISION_FLOAT_2_8	= 2,
    // DEBUG:         D3D_MIN_PRECISION_RESERVED	= 3,
    // DEBUG:         D3D_MIN_PRECISION_SINT_16	= 4,
    // DEBUG:         D3D_MIN_PRECISION_UINT_16	= 5,
    // DEBUG:         D3D_MIN_PRECISION_ANY_16	= 0xf0,
    // DEBUG:         D3D_MIN_PRECISION_ANY_10	= 0xf1
    // DEBUG:     }
    public enum D3D_MIN_PRECISION
    {
        D3D_MIN_PRECISION_DEFAULT = 0,
        D3D_MIN_PRECISION_FLOAT_16 = 1,
        D3D_MIN_PRECISION_FLOAT_2_8 = 2,
        D3D_MIN_PRECISION_RESERVED = 3,
        D3D_MIN_PRECISION_SINT_16 = 4,
        D3D_MIN_PRECISION_UINT_16 = 5,
        D3D_MIN_PRECISION_ANY_16 = 240,
        D3D_MIN_PRECISION_ANY_10 = 241
    }

    // DEBUG: enum D3D_INTERPOLATION_MODE
    // DEBUG:     {
    // DEBUG:         D3D_INTERPOLATION_UNDEFINED	= 0,
    // DEBUG:         D3D_INTERPOLATION_CONSTANT	= 1,
    // DEBUG:         D3D_INTERPOLATION_LINEAR	= 2,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_CENTROID	= 3,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE	= 4,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID	= 5,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_SAMPLE	= 6,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE	= 7
    // DEBUG:     }
    public enum D3D_INTERPOLATION_MODE
    {
        D3D_INTERPOLATION_UNDEFINED = 0,
        D3D_INTERPOLATION_CONSTANT = 1,
        D3D_INTERPOLATION_LINEAR = 2,
        D3D_INTERPOLATION_LINEAR_CENTROID = 3,
        D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE = 4,
        D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID = 5,
        D3D_INTERPOLATION_LINEAR_SAMPLE = 6,
        D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE = 7
    }

    // DEBUG: enum _D3D_PARAMETER_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D_PF_NONE	= 0,
    // DEBUG:         D3D_PF_IN	= 0x1,
    // DEBUG:         D3D_PF_OUT	= 0x2,
    // DEBUG:         D3D_PF_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     }
    public enum D3D_PARAMETER_FLAGS
    {
        D3D_PF_NONE = 0,
        D3D_PF_IN = 1,
        D3D_PF_OUT = 2,
        D3D_PF_FORCE_DWORD = 2147483647
    }

    // DEBUG: typedef 
    // DEBUG: enum D3D_SRV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D_SRV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D_SRV_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE1DARRAY	= 3,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE2D	= 4,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE2DARRAY	= 5,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE2DMS	= 6,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURE3D	= 8,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURECUBE	= 9,
    // DEBUG:         D3D_SRV_DIMENSION_TEXTURECUBEARRAY	= 10,
    // DEBUG:         D3D_SRV_DIMENSION_BUFFEREX	= 11,
    // DEBUG:         D3D10_SRV_DIMENSION_UNKNOWN	= D3D_SRV_DIMENSION_UNKNOWN,
    // DEBUG:         D3D10_SRV_DIMENSION_BUFFER	= D3D_SRV_DIMENSION_BUFFER,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE1D	= D3D_SRV_DIMENSION_TEXTURE1D,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE1DARRAY	= D3D_SRV_DIMENSION_TEXTURE1DARRAY,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE2D	= D3D_SRV_DIMENSION_TEXTURE2D,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE2DARRAY	= D3D_SRV_DIMENSION_TEXTURE2DARRAY,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE2DMS	= D3D_SRV_DIMENSION_TEXTURE2DMS,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY	= D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURE3D	= D3D_SRV_DIMENSION_TEXTURE3D,
    // DEBUG:         D3D10_SRV_DIMENSION_TEXTURECUBE	= D3D_SRV_DIMENSION_TEXTURECUBE,
    // DEBUG:         D3D10_1_SRV_DIMENSION_UNKNOWN	= D3D_SRV_DIMENSION_UNKNOWN,
    // DEBUG:         D3D10_1_SRV_DIMENSION_BUFFER	= D3D_SRV_DIMENSION_BUFFER,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE1D	= D3D_SRV_DIMENSION_TEXTURE1D,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY	= D3D_SRV_DIMENSION_TEXTURE1DARRAY,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE2D	= D3D_SRV_DIMENSION_TEXTURE2D,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY	= D3D_SRV_DIMENSION_TEXTURE2DARRAY,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE2DMS	= D3D_SRV_DIMENSION_TEXTURE2DMS,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY	= D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURE3D	= D3D_SRV_DIMENSION_TEXTURE3D,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURECUBE	= D3D_SRV_DIMENSION_TEXTURECUBE,
    // DEBUG:         D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY	= D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_UNKNOWN	= D3D_SRV_DIMENSION_UNKNOWN,
    // DEBUG:         D3D11_SRV_DIMENSION_BUFFER	= D3D_SRV_DIMENSION_BUFFER,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE1D	= D3D_SRV_DIMENSION_TEXTURE1D,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE1DARRAY	= D3D_SRV_DIMENSION_TEXTURE1DARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE2D	= D3D_SRV_DIMENSION_TEXTURE2D,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE2DARRAY	= D3D_SRV_DIMENSION_TEXTURE2DARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE2DMS	= D3D_SRV_DIMENSION_TEXTURE2DMS,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY	= D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURE3D	= D3D_SRV_DIMENSION_TEXTURE3D,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURECUBE	= D3D_SRV_DIMENSION_TEXTURECUBE,
    // DEBUG:         D3D11_SRV_DIMENSION_TEXTURECUBEARRAY	= D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
    // DEBUG:         D3D11_SRV_DIMENSION_BUFFEREX	= D3D_SRV_DIMENSION_BUFFEREX
    // DEBUG:     } 	D3D_SRV_DIMENSION
    // DEBUG: typedef 
    // DEBUG: enum D3D_PRIMITIVE_TOPOLOGY
    // DEBUG:     {
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_UNDEFINED	= 0,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_POINTLIST	= 1,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_LINELIST	= 2,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_LINESTRIP	= 3,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= 4,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= 5,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= 10,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= 11,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= 12,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= 13,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	= 33,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	= 34,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	= 35,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	= 36,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	= 37,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	= 38,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	= 39,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	= 40,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	= 41,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	= 42,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	= 43,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	= 44,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	= 45,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	= 46,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	= 47,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	= 48,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	= 49,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	= 50,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	= 51,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	= 52,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	= 53,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	= 54,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	= 55,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	= 56,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	= 57,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	= 58,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	= 59,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	= 60,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	= 61,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	= 62,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	= 63,
    // DEBUG:         D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	= 64,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED	= D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_POINTLIST	= D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_LINELIST	= D3D_PRIMITIVE_TOPOLOGY_LINELIST,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    // DEBUG:         D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED	= D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_POINTLIST	= D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_LINELIST	= D3D_PRIMITIVE_TOPOLOGY_LINELIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
    // DEBUG:         D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
    // DEBUG:     } 	D3D_PRIMITIVE_TOPOLOGY
    // DEBUG: typedef 
    // DEBUG: enum D3D_FEATURE_LEVEL
    // DEBUG:     {
    // DEBUG:         D3D_FEATURE_LEVEL_1_0_CORE	= 0x1000,
    // DEBUG:         D3D_FEATURE_LEVEL_9_1	= 0x9100,
    // DEBUG:         D3D_FEATURE_LEVEL_9_2	= 0x9200,
    // DEBUG:         D3D_FEATURE_LEVEL_9_3	= 0x9300,
    // DEBUG:         D3D_FEATURE_LEVEL_10_0	= 0xa000,
    // DEBUG:         D3D_FEATURE_LEVEL_10_1	= 0xa100,
    // DEBUG:         D3D_FEATURE_LEVEL_11_0	= 0xb000,
    // DEBUG:         D3D_FEATURE_LEVEL_11_1	= 0xb100,
    // DEBUG:         D3D_FEATURE_LEVEL_12_0	= 0xc000,
    // DEBUG:         D3D_FEATURE_LEVEL_12_1	= 0xc100,
    // DEBUG:         D3D_FEATURE_LEVEL_12_2	= 0xc200
    // DEBUG:     } 	D3D_FEATURE_LEVEL
    // DEBUG: typedef 
    // DEBUG: enum D3D_DRIVER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_DRIVER_TYPE_UNKNOWN	= 0,
    // DEBUG:         D3D_DRIVER_TYPE_HARDWARE	= ( D3D_DRIVER_TYPE_UNKNOWN + 1 ) ,
    // DEBUG:         D3D_DRIVER_TYPE_REFERENCE	= ( D3D_DRIVER_TYPE_HARDWARE + 1 ) ,
    // DEBUG:         D3D_DRIVER_TYPE_NULL	= ( D3D_DRIVER_TYPE_REFERENCE + 1 ) ,
    // DEBUG:         D3D_DRIVER_TYPE_SOFTWARE	= ( D3D_DRIVER_TYPE_NULL + 1 ) ,
    // DEBUG:         D3D_DRIVER_TYPE_WARP	= ( D3D_DRIVER_TYPE_SOFTWARE + 1 ) 
    // DEBUG:     } 	D3D_DRIVER_TYPE
    // DEBUG: typedef void ( __stdcall *PFN_DESTRUCTION_CALLBACK
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void PFN_DESTRUCTION_CALLBACK(__IntPtr pData);

    // DEBUG: typedef interface ID3DDestructionNotifier ID3DDestructionNotifier
    // DEBUG: typedef 
    // DEBUG: enum D3D_PRIMITIVE
    // DEBUG:     {
    // DEBUG:         D3D_PRIMITIVE_UNDEFINED	= 0,
    // DEBUG:         D3D_PRIMITIVE_POINT	= 1,
    // DEBUG:         D3D_PRIMITIVE_LINE	= 2,
    // DEBUG:         D3D_PRIMITIVE_TRIANGLE	= 3,
    // DEBUG:         D3D_PRIMITIVE_LINE_ADJ	= 6,
    // DEBUG:         D3D_PRIMITIVE_TRIANGLE_ADJ	= 7,
    // DEBUG:         D3D_PRIMITIVE_1_CONTROL_POINT_PATCH	= 8,
    // DEBUG:         D3D_PRIMITIVE_2_CONTROL_POINT_PATCH	= 9,
    // DEBUG:         D3D_PRIMITIVE_3_CONTROL_POINT_PATCH	= 10,
    // DEBUG:         D3D_PRIMITIVE_4_CONTROL_POINT_PATCH	= 11,
    // DEBUG:         D3D_PRIMITIVE_5_CONTROL_POINT_PATCH	= 12,
    // DEBUG:         D3D_PRIMITIVE_6_CONTROL_POINT_PATCH	= 13,
    // DEBUG:         D3D_PRIMITIVE_7_CONTROL_POINT_PATCH	= 14,
    // DEBUG:         D3D_PRIMITIVE_8_CONTROL_POINT_PATCH	= 15,
    // DEBUG:         D3D_PRIMITIVE_9_CONTROL_POINT_PATCH	= 16,
    // DEBUG:         D3D_PRIMITIVE_10_CONTROL_POINT_PATCH	= 17,
    // DEBUG:         D3D_PRIMITIVE_11_CONTROL_POINT_PATCH	= 18,
    // DEBUG:         D3D_PRIMITIVE_12_CONTROL_POINT_PATCH	= 19,
    // DEBUG:         D3D_PRIMITIVE_13_CONTROL_POINT_PATCH	= 20,
    // DEBUG:         D3D_PRIMITIVE_14_CONTROL_POINT_PATCH	= 21,
    // DEBUG:         D3D_PRIMITIVE_15_CONTROL_POINT_PATCH	= 22,
    // DEBUG:         D3D_PRIMITIVE_16_CONTROL_POINT_PATCH	= 23,
    // DEBUG:         D3D_PRIMITIVE_17_CONTROL_POINT_PATCH	= 24,
    // DEBUG:         D3D_PRIMITIVE_18_CONTROL_POINT_PATCH	= 25,
    // DEBUG:         D3D_PRIMITIVE_19_CONTROL_POINT_PATCH	= 26,
    // DEBUG:         D3D_PRIMITIVE_20_CONTROL_POINT_PATCH	= 27,
    // DEBUG:         D3D_PRIMITIVE_21_CONTROL_POINT_PATCH	= 28,
    // DEBUG:         D3D_PRIMITIVE_22_CONTROL_POINT_PATCH	= 29,
    // DEBUG:         D3D_PRIMITIVE_23_CONTROL_POINT_PATCH	= 30,
    // DEBUG:         D3D_PRIMITIVE_24_CONTROL_POINT_PATCH	= 31,
    // DEBUG:         D3D_PRIMITIVE_25_CONTROL_POINT_PATCH	= 32,
    // DEBUG:         D3D_PRIMITIVE_26_CONTROL_POINT_PATCH	= 33,
    // DEBUG:         D3D_PRIMITIVE_27_CONTROL_POINT_PATCH	= 34,
    // DEBUG:         D3D_PRIMITIVE_28_CONTROL_POINT_PATCH	= 35,
    // DEBUG:         D3D_PRIMITIVE_29_CONTROL_POINT_PATCH	= 36,
    // DEBUG:         D3D_PRIMITIVE_30_CONTROL_POINT_PATCH	= 37,
    // DEBUG:         D3D_PRIMITIVE_31_CONTROL_POINT_PATCH	= 38,
    // DEBUG:         D3D_PRIMITIVE_32_CONTROL_POINT_PATCH	= 39,
    // DEBUG:         D3D10_PRIMITIVE_UNDEFINED	= D3D_PRIMITIVE_UNDEFINED,
    // DEBUG:         D3D10_PRIMITIVE_POINT	= D3D_PRIMITIVE_POINT,
    // DEBUG:         D3D10_PRIMITIVE_LINE	= D3D_PRIMITIVE_LINE,
    // DEBUG:         D3D10_PRIMITIVE_TRIANGLE	= D3D_PRIMITIVE_TRIANGLE,
    // DEBUG:         D3D10_PRIMITIVE_LINE_ADJ	= D3D_PRIMITIVE_LINE_ADJ,
    // DEBUG:         D3D10_PRIMITIVE_TRIANGLE_ADJ	= D3D_PRIMITIVE_TRIANGLE_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_UNDEFINED	= D3D_PRIMITIVE_UNDEFINED,
    // DEBUG:         D3D11_PRIMITIVE_POINT	= D3D_PRIMITIVE_POINT,
    // DEBUG:         D3D11_PRIMITIVE_LINE	= D3D_PRIMITIVE_LINE,
    // DEBUG:         D3D11_PRIMITIVE_TRIANGLE	= D3D_PRIMITIVE_TRIANGLE,
    // DEBUG:         D3D11_PRIMITIVE_LINE_ADJ	= D3D_PRIMITIVE_LINE_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_TRIANGLE_ADJ	= D3D_PRIMITIVE_TRIANGLE_ADJ,
    // DEBUG:         D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_1_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_2_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_3_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_4_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_5_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_6_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_7_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_8_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_9_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_10_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_11_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_12_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_13_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_14_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_15_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_16_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_17_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_18_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_19_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_20_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_21_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_22_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_23_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_24_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_25_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_26_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_27_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_28_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_29_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_30_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_31_CONTROL_POINT_PATCH,
    // DEBUG:         D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH	= D3D_PRIMITIVE_32_CONTROL_POINT_PATCH
    // DEBUG:     } 	D3D_PRIMITIVE
    // DEBUG: typedef struct _D3D_SHADER_MACRO
    // DEBUG:     {
    // DEBUG:     LPCSTR Name;
    // DEBUG:     LPCSTR Definition;
    // DEBUG:     } 	D3D_SHADER_MACRO
    // DEBUG: typedef struct _D3D_SHADER_MACRO *LPD3D_SHADER_MACRO
    // DEBUG: typedef 
    // DEBUG: enum _D3D_INCLUDE_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_INCLUDE_LOCAL	= 0,
    // DEBUG:         D3D_INCLUDE_SYSTEM	= ( D3D_INCLUDE_LOCAL + 1 ) ,
    // DEBUG:         D3D10_INCLUDE_LOCAL	= D3D_INCLUDE_LOCAL,
    // DEBUG:         D3D10_INCLUDE_SYSTEM	= D3D_INCLUDE_SYSTEM,
    // DEBUG:         D3D_INCLUDE_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     } 	D3D_INCLUDE_TYPE
    // DEBUG: typedef interface ID3DInclude ID3DInclude
    // DEBUG: typedef ID3DInclude* LPD3DINCLUDE
    // DEBUG: typedef 
    // DEBUG: enum _D3D_SHADER_VARIABLE_CLASS
    // DEBUG:     {
    // DEBUG:         D3D_SVC_SCALAR	= 0,
    // DEBUG:         D3D_SVC_VECTOR	= ( D3D_SVC_SCALAR + 1 ) ,
    // DEBUG:         D3D_SVC_MATRIX_ROWS	= ( D3D_SVC_VECTOR + 1 ) ,
    // DEBUG:         D3D_SVC_MATRIX_COLUMNS	= ( D3D_SVC_MATRIX_ROWS + 1 ) ,
    // DEBUG:         D3D_SVC_OBJECT	= ( D3D_SVC_MATRIX_COLUMNS + 1 ) ,
    // DEBUG:         D3D_SVC_STRUCT	= ( D3D_SVC_OBJECT + 1 ) ,
    // DEBUG:         D3D_SVC_INTERFACE_CLASS	= ( D3D_SVC_STRUCT + 1 ) ,
    // DEBUG:         D3D_SVC_INTERFACE_POINTER	= ( D3D_SVC_INTERFACE_CLASS + 1 ) ,
    // DEBUG:         D3D10_SVC_SCALAR	= D3D_SVC_SCALAR,
    // DEBUG:         D3D10_SVC_VECTOR	= D3D_SVC_VECTOR,
    // DEBUG:         D3D10_SVC_MATRIX_ROWS	= D3D_SVC_MATRIX_ROWS,
    // DEBUG:         D3D10_SVC_MATRIX_COLUMNS	= D3D_SVC_MATRIX_COLUMNS,
    // DEBUG:         D3D10_SVC_OBJECT	= D3D_SVC_OBJECT,
    // DEBUG:         D3D10_SVC_STRUCT	= D3D_SVC_STRUCT,
    // DEBUG:         D3D11_SVC_INTERFACE_CLASS	= D3D_SVC_INTERFACE_CLASS,
    // DEBUG:         D3D11_SVC_INTERFACE_POINTER	= D3D_SVC_INTERFACE_POINTER,
    // DEBUG:         D3D_SVC_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     } 	D3D_SHADER_VARIABLE_CLASS
    // DEBUG: typedef 
    // DEBUG: enum _D3D_SHADER_VARIABLE_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D_SVF_USERPACKED	= 1,
    // DEBUG:         D3D_SVF_USED	= 2,
    // DEBUG:         D3D_SVF_INTERFACE_POINTER	= 4,
    // DEBUG:         D3D_SVF_INTERFACE_PARAMETER	= 8,
    // DEBUG:         D3D10_SVF_USERPACKED	= D3D_SVF_USERPACKED,
    // DEBUG:         D3D10_SVF_USED	= D3D_SVF_USED,
    // DEBUG:         D3D11_SVF_INTERFACE_POINTER	= D3D_SVF_INTERFACE_POINTER,
    // DEBUG:         D3D11_SVF_INTERFACE_PARAMETER	= D3D_SVF_INTERFACE_PARAMETER,
    // DEBUG:         D3D_SVF_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     } 	D3D_SHADER_VARIABLE_FLAGS
    // DEBUG: typedef 
    // DEBUG: enum _D3D_SHADER_VARIABLE_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_SVT_VOID	= 0,
    // DEBUG:         D3D_SVT_BOOL	= 1,
    // DEBUG:         D3D_SVT_INT	= 2,
    // DEBUG:         D3D_SVT_FLOAT	= 3,
    // DEBUG:         D3D_SVT_STRING	= 4,
    // DEBUG:         D3D_SVT_TEXTURE	= 5,
    // DEBUG:         D3D_SVT_TEXTURE1D	= 6,
    // DEBUG:         D3D_SVT_TEXTURE2D	= 7,
    // DEBUG:         D3D_SVT_TEXTURE3D	= 8,
    // DEBUG:         D3D_SVT_TEXTURECUBE	= 9,
    // DEBUG:         D3D_SVT_SAMPLER	= 10,
    // DEBUG:         D3D_SVT_SAMPLER1D	= 11,
    // DEBUG:         D3D_SVT_SAMPLER2D	= 12,
    // DEBUG:         D3D_SVT_SAMPLER3D	= 13,
    // DEBUG:         D3D_SVT_SAMPLERCUBE	= 14,
    // DEBUG:         D3D_SVT_PIXELSHADER	= 15,
    // DEBUG:         D3D_SVT_VERTEXSHADER	= 16,
    // DEBUG:         D3D_SVT_PIXELFRAGMENT	= 17,
    // DEBUG:         D3D_SVT_VERTEXFRAGMENT	= 18,
    // DEBUG:         D3D_SVT_UINT	= 19,
    // DEBUG:         D3D_SVT_UINT8	= 20,
    // DEBUG:         D3D_SVT_GEOMETRYSHADER	= 21,
    // DEBUG:         D3D_SVT_RASTERIZER	= 22,
    // DEBUG:         D3D_SVT_DEPTHSTENCIL	= 23,
    // DEBUG:         D3D_SVT_BLEND	= 24,
    // DEBUG:         D3D_SVT_BUFFER	= 25,
    // DEBUG:         D3D_SVT_CBUFFER	= 26,
    // DEBUG:         D3D_SVT_TBUFFER	= 27,
    // DEBUG:         D3D_SVT_TEXTURE1DARRAY	= 28,
    // DEBUG:         D3D_SVT_TEXTURE2DARRAY	= 29,
    // DEBUG:         D3D_SVT_RENDERTARGETVIEW	= 30,
    // DEBUG:         D3D_SVT_DEPTHSTENCILVIEW	= 31,
    // DEBUG:         D3D_SVT_TEXTURE2DMS	= 32,
    // DEBUG:         D3D_SVT_TEXTURE2DMSARRAY	= 33,
    // DEBUG:         D3D_SVT_TEXTURECUBEARRAY	= 34,
    // DEBUG:         D3D_SVT_HULLSHADER	= 35,
    // DEBUG:         D3D_SVT_DOMAINSHADER	= 36,
    // DEBUG:         D3D_SVT_INTERFACE_POINTER	= 37,
    // DEBUG:         D3D_SVT_COMPUTESHADER	= 38,
    // DEBUG:         D3D_SVT_DOUBLE	= 39,
    // DEBUG:         D3D_SVT_RWTEXTURE1D	= 40,
    // DEBUG:         D3D_SVT_RWTEXTURE1DARRAY	= 41,
    // DEBUG:         D3D_SVT_RWTEXTURE2D	= 42,
    // DEBUG:         D3D_SVT_RWTEXTURE2DARRAY	= 43,
    // DEBUG:         D3D_SVT_RWTEXTURE3D	= 44,
    // DEBUG:         D3D_SVT_RWBUFFER	= 45,
    // DEBUG:         D3D_SVT_BYTEADDRESS_BUFFER	= 46,
    // DEBUG:         D3D_SVT_RWBYTEADDRESS_BUFFER	= 47,
    // DEBUG:         D3D_SVT_STRUCTURED_BUFFER	= 48,
    // DEBUG:         D3D_SVT_RWSTRUCTURED_BUFFER	= 49,
    // DEBUG:         D3D_SVT_APPEND_STRUCTURED_BUFFER	= 50,
    // DEBUG:         D3D_SVT_CONSUME_STRUCTURED_BUFFER	= 51,
    // DEBUG:         D3D_SVT_MIN8FLOAT	= 52,
    // DEBUG:         D3D_SVT_MIN10FLOAT	= 53,
    // DEBUG:         D3D_SVT_MIN16FLOAT	= 54,
    // DEBUG:         D3D_SVT_MIN12INT	= 55,
    // DEBUG:         D3D_SVT_MIN16INT	= 56,
    // DEBUG:         D3D_SVT_MIN16UINT	= 57,
    // DEBUG:         D3D_SVT_INT16	= 58,
    // DEBUG:         D3D_SVT_UINT16	= 59,
    // DEBUG:         D3D_SVT_FLOAT16	= 60,
    // DEBUG:         D3D_SVT_INT64	= 61,
    // DEBUG:         D3D_SVT_UINT64	= 62,
    // DEBUG:         D3D10_SVT_VOID	= D3D_SVT_VOID,
    // DEBUG:         D3D10_SVT_BOOL	= D3D_SVT_BOOL,
    // DEBUG:         D3D10_SVT_INT	= D3D_SVT_INT,
    // DEBUG:         D3D10_SVT_FLOAT	= D3D_SVT_FLOAT,
    // DEBUG:         D3D10_SVT_STRING	= D3D_SVT_STRING,
    // DEBUG:         D3D10_SVT_TEXTURE	= D3D_SVT_TEXTURE,
    // DEBUG:         D3D10_SVT_TEXTURE1D	= D3D_SVT_TEXTURE1D,
    // DEBUG:         D3D10_SVT_TEXTURE2D	= D3D_SVT_TEXTURE2D,
    // DEBUG:         D3D10_SVT_TEXTURE3D	= D3D_SVT_TEXTURE3D,
    // DEBUG:         D3D10_SVT_TEXTURECUBE	= D3D_SVT_TEXTURECUBE,
    // DEBUG:         D3D10_SVT_SAMPLER	= D3D_SVT_SAMPLER,
    // DEBUG:         D3D10_SVT_SAMPLER1D	= D3D_SVT_SAMPLER1D,
    // DEBUG:         D3D10_SVT_SAMPLER2D	= D3D_SVT_SAMPLER2D,
    // DEBUG:         D3D10_SVT_SAMPLER3D	= D3D_SVT_SAMPLER3D,
    // DEBUG:         D3D10_SVT_SAMPLERCUBE	= D3D_SVT_SAMPLERCUBE,
    // DEBUG:         D3D10_SVT_PIXELSHADER	= D3D_SVT_PIXELSHADER,
    // DEBUG:         D3D10_SVT_VERTEXSHADER	= D3D_SVT_VERTEXSHADER,
    // DEBUG:         D3D10_SVT_PIXELFRAGMENT	= D3D_SVT_PIXELFRAGMENT,
    // DEBUG:         D3D10_SVT_VERTEXFRAGMENT	= D3D_SVT_VERTEXFRAGMENT,
    // DEBUG:         D3D10_SVT_UINT	= D3D_SVT_UINT,
    // DEBUG:         D3D10_SVT_UINT8	= D3D_SVT_UINT8,
    // DEBUG:         D3D10_SVT_GEOMETRYSHADER	= D3D_SVT_GEOMETRYSHADER,
    // DEBUG:         D3D10_SVT_RASTERIZER	= D3D_SVT_RASTERIZER,
    // DEBUG:         D3D10_SVT_DEPTHSTENCIL	= D3D_SVT_DEPTHSTENCIL,
    // DEBUG:         D3D10_SVT_BLEND	= D3D_SVT_BLEND,
    // DEBUG:         D3D10_SVT_BUFFER	= D3D_SVT_BUFFER,
    // DEBUG:         D3D10_SVT_CBUFFER	= D3D_SVT_CBUFFER,
    // DEBUG:         D3D10_SVT_TBUFFER	= D3D_SVT_TBUFFER,
    // DEBUG:         D3D10_SVT_TEXTURE1DARRAY	= D3D_SVT_TEXTURE1DARRAY,
    // DEBUG:         D3D10_SVT_TEXTURE2DARRAY	= D3D_SVT_TEXTURE2DARRAY,
    // DEBUG:         D3D10_SVT_RENDERTARGETVIEW	= D3D_SVT_RENDERTARGETVIEW,
    // DEBUG:         D3D10_SVT_DEPTHSTENCILVIEW	= D3D_SVT_DEPTHSTENCILVIEW,
    // DEBUG:         D3D10_SVT_TEXTURE2DMS	= D3D_SVT_TEXTURE2DMS,
    // DEBUG:         D3D10_SVT_TEXTURE2DMSARRAY	= D3D_SVT_TEXTURE2DMSARRAY,
    // DEBUG:         D3D10_SVT_TEXTURECUBEARRAY	= D3D_SVT_TEXTURECUBEARRAY,
    // DEBUG:         D3D11_SVT_HULLSHADER	= D3D_SVT_HULLSHADER,
    // DEBUG:         D3D11_SVT_DOMAINSHADER	= D3D_SVT_DOMAINSHADER,
    // DEBUG:         D3D11_SVT_INTERFACE_POINTER	= D3D_SVT_INTERFACE_POINTER,
    // DEBUG:         D3D11_SVT_COMPUTESHADER	= D3D_SVT_COMPUTESHADER,
    // DEBUG:         D3D11_SVT_DOUBLE	= D3D_SVT_DOUBLE,
    // DEBUG:         D3D11_SVT_RWTEXTURE1D	= D3D_SVT_RWTEXTURE1D,
    // DEBUG:         D3D11_SVT_RWTEXTURE1DARRAY	= D3D_SVT_RWTEXTURE1DARRAY,
    // DEBUG:         D3D11_SVT_RWTEXTURE2D	= D3D_SVT_RWTEXTURE2D,
    // DEBUG:         D3D11_SVT_RWTEXTURE2DARRAY	= D3D_SVT_RWTEXTURE2DARRAY,
    // DEBUG:         D3D11_SVT_RWTEXTURE3D	= D3D_SVT_RWTEXTURE3D,
    // DEBUG:         D3D11_SVT_RWBUFFER	= D3D_SVT_RWBUFFER,
    // DEBUG:         D3D11_SVT_BYTEADDRESS_BUFFER	= D3D_SVT_BYTEADDRESS_BUFFER,
    // DEBUG:         D3D11_SVT_RWBYTEADDRESS_BUFFER	= D3D_SVT_RWBYTEADDRESS_BUFFER,
    // DEBUG:         D3D11_SVT_STRUCTURED_BUFFER	= D3D_SVT_STRUCTURED_BUFFER,
    // DEBUG:         D3D11_SVT_RWSTRUCTURED_BUFFER	= D3D_SVT_RWSTRUCTURED_BUFFER,
    // DEBUG:         D3D11_SVT_APPEND_STRUCTURED_BUFFER	= D3D_SVT_APPEND_STRUCTURED_BUFFER,
    // DEBUG:         D3D11_SVT_CONSUME_STRUCTURED_BUFFER	= D3D_SVT_CONSUME_STRUCTURED_BUFFER,
    // DEBUG:         D3D_SVT_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     } 	D3D_SHADER_VARIABLE_TYPE
    // DEBUG: typedef 
    // DEBUG: enum _D3D_SHADER_INPUT_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D_SIF_USERPACKED	= 0x1,
    // DEBUG:         D3D_SIF_COMPARISON_SAMPLER	= 0x2,
    // DEBUG:         D3D_SIF_TEXTURE_COMPONENT_0	= 0x4,
    // DEBUG:         D3D_SIF_TEXTURE_COMPONENT_1	= 0x8,
    // DEBUG:         D3D_SIF_TEXTURE_COMPONENTS	= 0xc,
    // DEBUG:         D3D_SIF_UNUSED	= 0x10,
    // DEBUG:         D3D10_SIF_USERPACKED	= D3D_SIF_USERPACKED,
    // DEBUG:         D3D10_SIF_COMPARISON_SAMPLER	= D3D_SIF_COMPARISON_SAMPLER,
    // DEBUG:         D3D10_SIF_TEXTURE_COMPONENT_0	= D3D_SIF_TEXTURE_COMPONENT_0,
    // DEBUG:         D3D10_SIF_TEXTURE_COMPONENT_1	= D3D_SIF_TEXTURE_COMPONENT_1,
    // DEBUG:         D3D10_SIF_TEXTURE_COMPONENTS	= D3D_SIF_TEXTURE_COMPONENTS,
    // DEBUG:         D3D_SIF_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     } 	D3D_SHADER_INPUT_FLAGS
    // DEBUG: typedef 
    // DEBUG: enum _D3D_SHADER_INPUT_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_SIT_CBUFFER	= 0,
    // DEBUG:         D3D_SIT_TBUFFER	= ( D3D_SIT_CBUFFER + 1 ) ,
    // DEBUG:         D3D_SIT_TEXTURE	= ( D3D_SIT_TBUFFER + 1 ) ,
    // DEBUG:         D3D_SIT_SAMPLER	= ( D3D_SIT_TEXTURE + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_RWTYPED	= ( D3D_SIT_SAMPLER + 1 ) ,
    // DEBUG:         D3D_SIT_STRUCTURED	= ( D3D_SIT_UAV_RWTYPED + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_RWSTRUCTURED	= ( D3D_SIT_STRUCTURED + 1 ) ,
    // DEBUG:         D3D_SIT_BYTEADDRESS	= ( D3D_SIT_UAV_RWSTRUCTURED + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_RWBYTEADDRESS	= ( D3D_SIT_BYTEADDRESS + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_APPEND_STRUCTURED	= ( D3D_SIT_UAV_RWBYTEADDRESS + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_CONSUME_STRUCTURED	= ( D3D_SIT_UAV_APPEND_STRUCTURED + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER	= ( D3D_SIT_UAV_CONSUME_STRUCTURED + 1 ) ,
    // DEBUG:         D3D_SIT_RTACCELERATIONSTRUCTURE	= ( D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER + 1 ) ,
    // DEBUG:         D3D_SIT_UAV_FEEDBACKTEXTURE	= ( D3D_SIT_RTACCELERATIONSTRUCTURE + 1 ) ,
    // DEBUG:         D3D10_SIT_CBUFFER	= D3D_SIT_CBUFFER,
    // DEBUG:         D3D10_SIT_TBUFFER	= D3D_SIT_TBUFFER,
    // DEBUG:         D3D10_SIT_TEXTURE	= D3D_SIT_TEXTURE,
    // DEBUG:         D3D10_SIT_SAMPLER	= D3D_SIT_SAMPLER,
    // DEBUG:         D3D11_SIT_UAV_RWTYPED	= D3D_SIT_UAV_RWTYPED,
    // DEBUG:         D3D11_SIT_STRUCTURED	= D3D_SIT_STRUCTURED,
    // DEBUG:         D3D11_SIT_UAV_RWSTRUCTURED	= D3D_SIT_UAV_RWSTRUCTURED,
    // DEBUG:         D3D11_SIT_BYTEADDRESS	= D3D_SIT_BYTEADDRESS,
    // DEBUG:         D3D11_SIT_UAV_RWBYTEADDRESS	= D3D_SIT_UAV_RWBYTEADDRESS,
    // DEBUG:         D3D11_SIT_UAV_APPEND_STRUCTURED	= D3D_SIT_UAV_APPEND_STRUCTURED,
    // DEBUG:         D3D11_SIT_UAV_CONSUME_STRUCTURED	= D3D_SIT_UAV_CONSUME_STRUCTURED,
    // DEBUG:         D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER	= D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER
    // DEBUG:     } 	D3D_SHADER_INPUT_TYPE
    // DEBUG: typedef 
    // DEBUG: enum _D3D_SHADER_CBUFFER_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D_CBF_USERPACKED	= 1,
    // DEBUG:         D3D10_CBF_USERPACKED	= D3D_CBF_USERPACKED,
    // DEBUG:         D3D_CBF_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     } 	D3D_SHADER_CBUFFER_FLAGS
    // DEBUG: typedef 
    // DEBUG: enum _D3D_CBUFFER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_CT_CBUFFER	= 0,
    // DEBUG:         D3D_CT_TBUFFER	= ( D3D_CT_CBUFFER + 1 ) ,
    // DEBUG:         D3D_CT_INTERFACE_POINTERS	= ( D3D_CT_TBUFFER + 1 ) ,
    // DEBUG:         D3D_CT_RESOURCE_BIND_INFO	= ( D3D_CT_INTERFACE_POINTERS + 1 ) ,
    // DEBUG:         D3D10_CT_CBUFFER	= D3D_CT_CBUFFER,
    // DEBUG:         D3D10_CT_TBUFFER	= D3D_CT_TBUFFER,
    // DEBUG:         D3D11_CT_CBUFFER	= D3D_CT_CBUFFER,
    // DEBUG:         D3D11_CT_TBUFFER	= D3D_CT_TBUFFER,
    // DEBUG:         D3D11_CT_INTERFACE_POINTERS	= D3D_CT_INTERFACE_POINTERS,
    // DEBUG:         D3D11_CT_RESOURCE_BIND_INFO	= D3D_CT_RESOURCE_BIND_INFO
    // DEBUG:     } 	D3D_CBUFFER_TYPE
    // DEBUG: typedef 
    // DEBUG: enum D3D_NAME
    // DEBUG:     {
    // DEBUG:         D3D_NAME_UNDEFINED	= 0,
    // DEBUG:         D3D_NAME_POSITION	= 1,
    // DEBUG:         D3D_NAME_CLIP_DISTANCE	= 2,
    // DEBUG:         D3D_NAME_CULL_DISTANCE	= 3,
    // DEBUG:         D3D_NAME_RENDER_TARGET_ARRAY_INDEX	= 4,
    // DEBUG:         D3D_NAME_VIEWPORT_ARRAY_INDEX	= 5,
    // DEBUG:         D3D_NAME_VERTEX_ID	= 6,
    // DEBUG:         D3D_NAME_PRIMITIVE_ID	= 7,
    // DEBUG:         D3D_NAME_INSTANCE_ID	= 8,
    // DEBUG:         D3D_NAME_IS_FRONT_FACE	= 9,
    // DEBUG:         D3D_NAME_SAMPLE_INDEX	= 10,
    // DEBUG:         D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR	= 11,
    // DEBUG:         D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR	= 12,
    // DEBUG:         D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR	= 13,
    // DEBUG:         D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR	= 14,
    // DEBUG:         D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR	= 15,
    // DEBUG:         D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR	= 16,
    // DEBUG:         D3D_NAME_BARYCENTRICS	= 23,
    // DEBUG:         D3D_NAME_SHADINGRATE	= 24,
    // DEBUG:         D3D_NAME_CULLPRIMITIVE	= 25,
    // DEBUG:         D3D_NAME_TARGET	= 64,
    // DEBUG:         D3D_NAME_DEPTH	= 65,
    // DEBUG:         D3D_NAME_COVERAGE	= 66,
    // DEBUG:         D3D_NAME_DEPTH_GREATER_EQUAL	= 67,
    // DEBUG:         D3D_NAME_DEPTH_LESS_EQUAL	= 68,
    // DEBUG:         D3D_NAME_STENCIL_REF	= 69,
    // DEBUG:         D3D_NAME_INNER_COVERAGE	= 70,
    // DEBUG:         D3D10_NAME_UNDEFINED	= D3D_NAME_UNDEFINED,
    // DEBUG:         D3D10_NAME_POSITION	= D3D_NAME_POSITION,
    // DEBUG:         D3D10_NAME_CLIP_DISTANCE	= D3D_NAME_CLIP_DISTANCE,
    // DEBUG:         D3D10_NAME_CULL_DISTANCE	= D3D_NAME_CULL_DISTANCE,
    // DEBUG:         D3D10_NAME_RENDER_TARGET_ARRAY_INDEX	= D3D_NAME_RENDER_TARGET_ARRAY_INDEX,
    // DEBUG:         D3D10_NAME_VIEWPORT_ARRAY_INDEX	= D3D_NAME_VIEWPORT_ARRAY_INDEX,
    // DEBUG:         D3D10_NAME_VERTEX_ID	= D3D_NAME_VERTEX_ID,
    // DEBUG:         D3D10_NAME_PRIMITIVE_ID	= D3D_NAME_PRIMITIVE_ID,
    // DEBUG:         D3D10_NAME_INSTANCE_ID	= D3D_NAME_INSTANCE_ID,
    // DEBUG:         D3D10_NAME_IS_FRONT_FACE	= D3D_NAME_IS_FRONT_FACE,
    // DEBUG:         D3D10_NAME_SAMPLE_INDEX	= D3D_NAME_SAMPLE_INDEX,
    // DEBUG:         D3D10_NAME_TARGET	= D3D_NAME_TARGET,
    // DEBUG:         D3D10_NAME_DEPTH	= D3D_NAME_DEPTH,
    // DEBUG:         D3D10_NAME_COVERAGE	= D3D_NAME_COVERAGE,
    // DEBUG:         D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR	= D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR	= D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR	= D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR	= D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR	= D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR,
    // DEBUG:         D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR	= D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR,
    // DEBUG:         D3D11_NAME_DEPTH_GREATER_EQUAL	= D3D_NAME_DEPTH_GREATER_EQUAL,
    // DEBUG:         D3D11_NAME_DEPTH_LESS_EQUAL	= D3D_NAME_DEPTH_LESS_EQUAL,
    // DEBUG:         D3D11_NAME_STENCIL_REF	= D3D_NAME_STENCIL_REF,
    // DEBUG:         D3D11_NAME_INNER_COVERAGE	= D3D_NAME_INNER_COVERAGE,
    // DEBUG:         D3D12_NAME_BARYCENTRICS	= D3D_NAME_BARYCENTRICS,
    // DEBUG:         D3D12_NAME_SHADINGRATE	= D3D_NAME_SHADINGRATE,
    // DEBUG:         D3D12_NAME_CULLPRIMITIVE	= D3D_NAME_CULLPRIMITIVE
    // DEBUG:     } 	D3D_NAME
    // DEBUG: typedef 
    // DEBUG: enum D3D_RESOURCE_RETURN_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_RETURN_TYPE_UNORM	= 1,
    // DEBUG:         D3D_RETURN_TYPE_SNORM	= 2,
    // DEBUG:         D3D_RETURN_TYPE_SINT	= 3,
    // DEBUG:         D3D_RETURN_TYPE_UINT	= 4,
    // DEBUG:         D3D_RETURN_TYPE_FLOAT	= 5,
    // DEBUG:         D3D_RETURN_TYPE_MIXED	= 6,
    // DEBUG:         D3D_RETURN_TYPE_DOUBLE	= 7,
    // DEBUG:         D3D_RETURN_TYPE_CONTINUED	= 8,
    // DEBUG:         D3D10_RETURN_TYPE_UNORM	= D3D_RETURN_TYPE_UNORM,
    // DEBUG:         D3D10_RETURN_TYPE_SNORM	= D3D_RETURN_TYPE_SNORM,
    // DEBUG:         D3D10_RETURN_TYPE_SINT	= D3D_RETURN_TYPE_SINT,
    // DEBUG:         D3D10_RETURN_TYPE_UINT	= D3D_RETURN_TYPE_UINT,
    // DEBUG:         D3D10_RETURN_TYPE_FLOAT	= D3D_RETURN_TYPE_FLOAT,
    // DEBUG:         D3D10_RETURN_TYPE_MIXED	= D3D_RETURN_TYPE_MIXED,
    // DEBUG:         D3D11_RETURN_TYPE_UNORM	= D3D_RETURN_TYPE_UNORM,
    // DEBUG:         D3D11_RETURN_TYPE_SNORM	= D3D_RETURN_TYPE_SNORM,
    // DEBUG:         D3D11_RETURN_TYPE_SINT	= D3D_RETURN_TYPE_SINT,
    // DEBUG:         D3D11_RETURN_TYPE_UINT	= D3D_RETURN_TYPE_UINT,
    // DEBUG:         D3D11_RETURN_TYPE_FLOAT	= D3D_RETURN_TYPE_FLOAT,
    // DEBUG:         D3D11_RETURN_TYPE_MIXED	= D3D_RETURN_TYPE_MIXED,
    // DEBUG:         D3D11_RETURN_TYPE_DOUBLE	= D3D_RETURN_TYPE_DOUBLE,
    // DEBUG:         D3D11_RETURN_TYPE_CONTINUED	= D3D_RETURN_TYPE_CONTINUED
    // DEBUG:     } 	D3D_RESOURCE_RETURN_TYPE
    // DEBUG: typedef 
    // DEBUG: enum D3D_REGISTER_COMPONENT_TYPE
    // DEBUG:     {
    // DEBUG:         D3D_REGISTER_COMPONENT_UNKNOWN	= 0,
    // DEBUG:         D3D_REGISTER_COMPONENT_UINT32	= 1,
    // DEBUG:         D3D_REGISTER_COMPONENT_SINT32	= 2,
    // DEBUG:         D3D_REGISTER_COMPONENT_FLOAT32	= 3,
    // DEBUG:         D3D10_REGISTER_COMPONENT_UNKNOWN	= D3D_REGISTER_COMPONENT_UNKNOWN,
    // DEBUG:         D3D10_REGISTER_COMPONENT_UINT32	= D3D_REGISTER_COMPONENT_UINT32,
    // DEBUG:         D3D10_REGISTER_COMPONENT_SINT32	= D3D_REGISTER_COMPONENT_SINT32,
    // DEBUG:         D3D10_REGISTER_COMPONENT_FLOAT32	= D3D_REGISTER_COMPONENT_FLOAT32
    // DEBUG:     } 	D3D_REGISTER_COMPONENT_TYPE
    // DEBUG: typedef 
    // DEBUG: enum D3D_TESSELLATOR_DOMAIN
    // DEBUG:     {
    // DEBUG:         D3D_TESSELLATOR_DOMAIN_UNDEFINED	= 0,
    // DEBUG:         D3D_TESSELLATOR_DOMAIN_ISOLINE	= 1,
    // DEBUG:         D3D_TESSELLATOR_DOMAIN_TRI	= 2,
    // DEBUG:         D3D_TESSELLATOR_DOMAIN_QUAD	= 3,
    // DEBUG:         D3D11_TESSELLATOR_DOMAIN_UNDEFINED	= D3D_TESSELLATOR_DOMAIN_UNDEFINED,
    // DEBUG:         D3D11_TESSELLATOR_DOMAIN_ISOLINE	= D3D_TESSELLATOR_DOMAIN_ISOLINE,
    // DEBUG:         D3D11_TESSELLATOR_DOMAIN_TRI	= D3D_TESSELLATOR_DOMAIN_TRI,
    // DEBUG:         D3D11_TESSELLATOR_DOMAIN_QUAD	= D3D_TESSELLATOR_DOMAIN_QUAD
    // DEBUG:     } 	D3D_TESSELLATOR_DOMAIN
    // DEBUG: typedef 
    // DEBUG: enum D3D_TESSELLATOR_PARTITIONING
    // DEBUG:     {
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_UNDEFINED	= 0,
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_INTEGER	= 1,
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_POW2	= 2,
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD	= 3,
    // DEBUG:         D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN	= 4,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_UNDEFINED	= D3D_TESSELLATOR_PARTITIONING_UNDEFINED,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_INTEGER	= D3D_TESSELLATOR_PARTITIONING_INTEGER,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_POW2	= D3D_TESSELLATOR_PARTITIONING_POW2,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD	= D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD,
    // DEBUG:         D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN	= D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN
    // DEBUG:     } 	D3D_TESSELLATOR_PARTITIONING
    // DEBUG: typedef 
    // DEBUG: enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
    // DEBUG:     {
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_UNDEFINED	= 0,
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_POINT	= 1,
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_LINE	= 2,
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW	= 3,
    // DEBUG:         D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW	= 4,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_UNDEFINED	= D3D_TESSELLATOR_OUTPUT_UNDEFINED,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_POINT	= D3D_TESSELLATOR_OUTPUT_POINT,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_LINE	= D3D_TESSELLATOR_OUTPUT_LINE,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW	= D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW,
    // DEBUG:         D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW	= D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW
    // DEBUG:     } 	D3D_TESSELLATOR_OUTPUT_PRIMITIVE
    // DEBUG: typedef 
    // DEBUG: enum D3D_MIN_PRECISION
    // DEBUG:     {
    // DEBUG:         D3D_MIN_PRECISION_DEFAULT	= 0,
    // DEBUG:         D3D_MIN_PRECISION_FLOAT_16	= 1,
    // DEBUG:         D3D_MIN_PRECISION_FLOAT_2_8	= 2,
    // DEBUG:         D3D_MIN_PRECISION_RESERVED	= 3,
    // DEBUG:         D3D_MIN_PRECISION_SINT_16	= 4,
    // DEBUG:         D3D_MIN_PRECISION_UINT_16	= 5,
    // DEBUG:         D3D_MIN_PRECISION_ANY_16	= 0xf0,
    // DEBUG:         D3D_MIN_PRECISION_ANY_10	= 0xf1
    // DEBUG:     } 	D3D_MIN_PRECISION
    // DEBUG: typedef 
    // DEBUG: enum D3D_INTERPOLATION_MODE
    // DEBUG:     {
    // DEBUG:         D3D_INTERPOLATION_UNDEFINED	= 0,
    // DEBUG:         D3D_INTERPOLATION_CONSTANT	= 1,
    // DEBUG:         D3D_INTERPOLATION_LINEAR	= 2,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_CENTROID	= 3,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE	= 4,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID	= 5,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_SAMPLE	= 6,
    // DEBUG:         D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE	= 7
    // DEBUG:     } 	D3D_INTERPOLATION_MODE
    // DEBUG: typedef 
    // DEBUG: enum _D3D_PARAMETER_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D_PF_NONE	= 0,
    // DEBUG:         D3D_PF_IN	= 0x1,
    // DEBUG:         D3D_PF_OUT	= 0x2,
    // DEBUG:         D3D_PF_FORCE_DWORD	= 0x7fffffff
    // DEBUG:     } 	D3D_PARAMETER_FLAGS
    // DEBUG: struct _D3D_SHADER_MACRO
    // DEBUG:     {
    // DEBUG:     LPCSTR Name;
    // DEBUG:     LPCSTR Definition;
    // DEBUG:     }
    public unsafe partial class D3D_SHADER_MACRO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr Name;
            internal __IntPtr Definition;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0_D3D_SHADER_MACRO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D_SHADER_MACRO>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D_SHADER_MACRO>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D_SHADER_MACRO managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D_SHADER_MACRO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D_SHADER_MACRO managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __Name_OwnsNativeMemory = false;
        private bool __Definition_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static D3D_SHADER_MACRO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D_SHADER_MACRO(native.ToPointer(), skipVTables);
        }

        internal static D3D_SHADER_MACRO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D_SHADER_MACRO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D_SHADER_MACRO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D_SHADER_MACRO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D_SHADER_MACRO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D_SHADER_MACRO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: _D3D_SHADER_MACRO
        public D3D_SHADER_MACRO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D_SHADER_MACRO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: _D3D_SHADER_MACRO
        public D3D_SHADER_MACRO(global::SpoutDX.D3D_SHADER_MACRO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D_SHADER_MACRO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D_SHADER_MACRO.__Internal*) __Instance) = *((global::SpoutDX.D3D_SHADER_MACRO.__Internal*) _0.__Instance);
            if (_0.__Name_OwnsNativeMemory)
                this.Name = _0.Name;
            if (_0.__Definition_OwnsNativeMemory)
                this.Definition = _0.Definition;
        }

        ~D3D_SHADER_MACRO()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__Name_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->Name);
            if (__Definition_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->Definition);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->Name);
            }

            set
            {
                if (__Name_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->Name);
                __Name_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->Name = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->Name = (__IntPtr) __bytePtr0;
            }
        }

        public string Definition
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->Definition);
            }

            set
            {
                if (__Definition_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->Definition);
                __Definition_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->Definition = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->Definition = (__IntPtr) __bytePtr0;
            }
        }
    }

    // DEBUG: MIDL_INTERFACE("a06eb39a-50da-425b-8c31-4eecd6c270f3")
    // DEBUG:     ID3DDestructionNotifier : public IUnknown
    // DEBUG:     {
    // DEBUG:     public:
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE RegisterDestructionCallback( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  PFN_DESTRUCTION_CALLBACK callbackFn,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  void *pData,
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _Out_  UINT *pCallbackID) = 0;
    // DEBUG:         
    // DEBUG:         virtual HRESULT STDMETHODCALLTYPE UnregisterDestructionCallback( 
    // DEBUG:             /* [annotation] */ 
    // DEBUG:             _In_  UINT callbackID) = 0;
    // DEBUG:         
    // DEBUG:     }
    public unsafe abstract partial class ID3DDestructionNotifier : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_IUnknown;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0ID3DDestructionNotifier@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3DDestructionNotifier>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3DDestructionNotifier>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.ID3DDestructionNotifier managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.ID3DDestructionNotifier>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.ID3DDestructionNotifier managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static ID3DDestructionNotifier __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new ID3DDestructionNotifierInternal(native.ToPointer(), skipVTables);
        }

        internal static ID3DDestructionNotifier __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ID3DDestructionNotifier)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ID3DDestructionNotifier __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (ID3DDestructionNotifier)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static ID3DDestructionNotifier __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ID3DDestructionNotifierInternal(native, skipVTables);
        }

        protected ID3DDestructionNotifier(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: ID3DDestructionNotifier
        protected ID3DDestructionNotifier()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.ID3DDestructionNotifier.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.ID3DDestructionNotifier");
        }

        ~ID3DDestructionNotifier()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE RegisterDestructionCallback( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  PFN_DESTRUCTION_CALLBACK callbackFn,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  void *pData,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  UINT *pCallbackID) = 0
        public abstract int RegisterDestructionCallback(global::SpoutDX.PFN_DESTRUCTION_CALLBACK callbackFn, __IntPtr pData, ref uint pCallbackID);

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE UnregisterDestructionCallback( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT callbackID) = 0
        public abstract int UnregisterDestructionCallback(uint callbackID);

        #region Virtual table interop

        // HRESULT STDMETHODCALLTYPE RegisterDestructionCallback( /* [annotation] */ _In_ PFN_DESTRUCTION_CALLBACK callbackFn, /* [annotation] */ _In_ void *pData, /* [annotation] */ _Out_ UINT *pCallbackID) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr___IntPtr_uintPtr _RegisterDestructionCallbackDelegateInstance;

        private static int _RegisterDestructionCallbackDelegateHook(__IntPtr __instance, __IntPtr callbackFn, __IntPtr pData, uint* pCallbackID)
        {
            var __target = global::SpoutDX.ID3DDestructionNotifier.__GetInstance(__instance);
            var __ptr0 = callbackFn;
            var ___ret = __target.RegisterDestructionCallback(__ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFN_DESTRUCTION_CALLBACK) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFN_DESTRUCTION_CALLBACK)), pData, ref *pCallbackID);
            return ___ret;
        }

        // HRESULT STDMETHODCALLTYPE UnregisterDestructionCallback( /* [annotation] */ _In_ UINT callbackID) = 0
        private static global::SpoutDX.Delegates.Func_int___IntPtr_uint _UnregisterDestructionCallbackDelegateInstance;

        private static int _UnregisterDestructionCallbackDelegateHook(__IntPtr __instance, uint callbackID)
        {
            var __target = global::SpoutDX.ID3DDestructionNotifier.__GetInstance(__instance);
            var ___ret = __target.UnregisterDestructionCallback(callbackID);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _RegisterDestructionCallbackDelegateInstance += _RegisterDestructionCallbackDelegateHook;
                _UnregisterDestructionCallbackDelegateInstance += _UnregisterDestructionCallbackDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_RegisterDestructionCallbackDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_UnregisterDestructionCallbackDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 5, 0);
                            ManagedVTables[0][3] = Thunks[0];
                            ManagedVTables[0][4] = Thunks[1];
                            VTables.Methods[0] = new Delegate[5];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: DECLARE_INTERFACE(ID3DInclude)
    // DEBUG: {
    // DEBUG:     STDMETHOD(Open)(THIS_ D3D_INCLUDE_TYPE IncludeType, LPCSTR pFileName, LPCVOID pParentData, LPCVOID *ppData, UINT *pBytes) PURE;
    // DEBUG:     STDMETHOD(Close)(THIS_ LPCVOID pData) PURE;
    // DEBUG: }
    public unsafe abstract partial class ID3DInclude : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_ID3DInclude;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0ID3DInclude@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0ID3DInclude@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3DInclude>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.ID3DInclude>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.ID3DInclude managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.ID3DInclude>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.ID3DInclude managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static ID3DInclude __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new ID3DIncludeInternal(native.ToPointer(), skipVTables);
        }

        internal static ID3DInclude __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ID3DInclude)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ID3DInclude __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (ID3DInclude)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static ID3DInclude __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ID3DIncludeInternal(native, skipVTables);
        }

        protected ID3DInclude(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: ID3DInclude
        protected ID3DInclude()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.ID3DInclude.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.ID3DInclude");
        }

        // DEBUG: ID3DInclude
        protected ID3DInclude(global::SpoutDX.ID3DInclude _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.ID3DInclude.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "SpoutDX.ID3DInclude");
        }

        ~ID3DInclude()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: STDMETHOD(Open)(THIS_ D3D_INCLUDE_TYPE IncludeType, LPCSTR pFileName, LPCVOID pParentData, LPCVOID *ppData, UINT *pBytes) PURE
        public abstract int Open(global::SpoutDX.D3D_INCLUDE_TYPE IncludeType, string pFileName, __IntPtr pParentData, __IntPtr* ppData, ref uint pBytes);

        // DEBUG: STDMETHOD(Close)(THIS_ LPCVOID pData) PURE
        public abstract int Close(__IntPtr pData);

        #region Virtual table interop

        // 
        private static global::SpoutDX.Delegates.Func_int___IntPtr_SpoutDX_D3D_INCLUDE_TYPE_string8___IntPtr___IntPtrPtr_uintPtr _OpenDelegateInstance;

        private static int _OpenDelegateHook(__IntPtr __instance, global::SpoutDX.D3D_INCLUDE_TYPE IncludeType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pFileName, __IntPtr pParentData, __IntPtr* ppData, uint* pBytes)
        {
            var __target = global::SpoutDX.ID3DInclude.__GetInstance(__instance);
            var ___ret = __target.Open(IncludeType, pFileName, pParentData, ppData, ref *pBytes);
            return ___ret;
        }

        // 
        private static global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr _CloseDelegateInstance;

        private static int _CloseDelegateHook(__IntPtr __instance, __IntPtr pData)
        {
            var __target = global::SpoutDX.ID3DInclude.__GetInstance(__instance);
            var ___ret = __target.Close(pData);
            return ___ret;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _OpenDelegateInstance += _OpenDelegateHook;
                _CloseDelegateInstance += _CloseDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_OpenDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CloseDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 2, 0);
                            ManagedVTables[0][0] = Thunks[0];
                            ManagedVTables[0][1] = Thunks[1];
                            VTables.Methods[0] = new Delegate[2];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    public unsafe partial class ID3DDestructionNotifierInternal : global::SpoutDX.ID3DDestructionNotifier, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal ID3DDestructionNotifierInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal ID3DDestructionNotifierInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE RegisterDestructionCallback( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  PFN_DESTRUCTION_CALLBACK callbackFn,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  void *pData,
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _Out_  UINT *pCallbackID) = 0
        public override int RegisterDestructionCallback(global::SpoutDX.PFN_DESTRUCTION_CALLBACK callbackFn, __IntPtr pData, ref uint pCallbackID)
        {
            var ___RegisterDestructionCallbackDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr___IntPtr_uintPtr>(0, 3);
            var __arg0 = callbackFn == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callbackFn);
            fixed (uint* __pCallbackID2 = &pCallbackID)
            {
                var __arg2 = __pCallbackID2;
                var ___ret = ___RegisterDestructionCallbackDelegate(__Instance, __arg0, pData, __arg2);
                return ___ret;
            }
        }

        // DEBUG: virtual HRESULT STDMETHODCALLTYPE UnregisterDestructionCallback( 
        // DEBUG:             /* [annotation] */ 
        // DEBUG:             _In_  UINT callbackID) = 0
        public override int UnregisterDestructionCallback(uint callbackID)
        {
            var ___UnregisterDestructionCallbackDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_uint>(0, 4);
            var ___ret = ___UnregisterDestructionCallbackDelegate(__Instance, callbackID);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE AddRef( void) = 0
        public virtual uint AddRef()
        {
            var ___AddRefDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 1);
            var ___ret = ___AddRefDelegate(__Instance);
            return ___ret;
        }

        // DEBUG: virtual ULONG STDMETHODCALLTYPE Release( void) = 0
        public virtual uint Release()
        {
            var ___ReleaseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_uint___IntPtr>(0, 2);
            var ___ret = ___ReleaseDelegate(__Instance);
            return ___ret;
        }
    }

    public unsafe partial class ID3DIncludeInternal : global::SpoutDX.ID3DInclude, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal ID3DIncludeInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal ID3DIncludeInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: STDMETHOD(Open)(THIS_ D3D_INCLUDE_TYPE IncludeType, LPCSTR pFileName, LPCVOID pParentData, LPCVOID *ppData, UINT *pBytes) PURE
        public override int Open(global::SpoutDX.D3D_INCLUDE_TYPE IncludeType, string pFileName, __IntPtr pParentData, __IntPtr* ppData, ref uint pBytes)
        {
            var ___OpenDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr_SpoutDX_D3D_INCLUDE_TYPE_string8___IntPtr___IntPtrPtr_uintPtr>(0, 0);
            fixed (uint* __pBytes4 = &pBytes)
            {
                var __arg4 = __pBytes4;
                var ___ret = ___OpenDelegate(__Instance, IncludeType, pFileName, pParentData, ppData, __arg4);
                return ___ret;
            }
        }

        // DEBUG: STDMETHOD(Close)(THIS_ LPCVOID pData) PURE
        public override int Close(__IntPtr pData)
        {
            var ___CloseDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Func_int___IntPtr___IntPtr>(0, 1);
            var ___ret = ___CloseDelegate(__Instance, pData);
            return ___ret;
        }
    }

    public unsafe partial class d3dcommon
    {
        public partial struct __Internal
        {
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0000_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3dcommon0000_0000V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0000_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0000_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0000_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3dcommon0000_0000V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0000_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0000_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0001_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3dcommon0000_0001V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0001_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0001_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0001_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3dcommon0000_0001V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0001_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0001_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0002_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3dcommon0000_0002V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0002_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0002_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0002_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3dcommon0000_0002V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0002_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3dcommon_0000_0002_v0_0_s_ifspec;
                *__ptr = value;
            }
        }
    }

    // DEBUG: enum D3D11_RLDO_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D11_RLDO_SUMMARY	= 0x1,
    // DEBUG:         D3D11_RLDO_DETAIL	= 0x2,
    // DEBUG:         D3D11_RLDO_IGNORE_INTERNAL	= 0x4
    // DEBUG:     }
    [Flags]
    public enum D3D11RLDO_FLAGS
    {
        D3D11RLDO_SUMMARY = 1,
        D3D11RLDO_DETAIL = 2,
        D3D11RLDO_IGNORE_INTERNAL = 4
    }

    // DEBUG: enum D3D11_MESSAGE_CATEGORY
    // DEBUG:     {
    // DEBUG:         D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED	= 0,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_MISCELLANEOUS	= ( D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_INITIALIZATION	= ( D3D11_MESSAGE_CATEGORY_MISCELLANEOUS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_CLEANUP	= ( D3D11_MESSAGE_CATEGORY_INITIALIZATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_COMPILATION	= ( D3D11_MESSAGE_CATEGORY_CLEANUP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_STATE_CREATION	= ( D3D11_MESSAGE_CATEGORY_COMPILATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_STATE_SETTING	= ( D3D11_MESSAGE_CATEGORY_STATE_CREATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_STATE_GETTING	= ( D3D11_MESSAGE_CATEGORY_STATE_SETTING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION	= ( D3D11_MESSAGE_CATEGORY_STATE_GETTING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_EXECUTION	= ( D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_SHADER	= ( D3D11_MESSAGE_CATEGORY_EXECUTION + 1 ) 
    // DEBUG:     }
    public enum D3D11MESSAGE_CATEGORY
    {
        D3D11MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
        D3D11MESSAGE_CATEGORY_MISCELLANEOUS = 1,
        D3D11MESSAGE_CATEGORY_INITIALIZATION = 2,
        D3D11MESSAGE_CATEGORY_CLEANUP = 3,
        D3D11MESSAGE_CATEGORY_COMPILATION = 4,
        D3D11MESSAGE_CATEGORY_STATE_CREATION = 5,
        D3D11MESSAGE_CATEGORY_STATE_SETTING = 6,
        D3D11MESSAGE_CATEGORY_STATE_GETTING = 7,
        D3D11MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8,
        D3D11MESSAGE_CATEGORY_EXECUTION = 9,
        D3D11MESSAGE_CATEGORY_SHADER = 10
    }

    // DEBUG: enum D3D11_MESSAGE_SEVERITY
    // DEBUG:     {
    // DEBUG:         D3D11_MESSAGE_SEVERITY_CORRUPTION	= 0,
    // DEBUG:         D3D11_MESSAGE_SEVERITY_ERROR	= ( D3D11_MESSAGE_SEVERITY_CORRUPTION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_SEVERITY_WARNING	= ( D3D11_MESSAGE_SEVERITY_ERROR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_SEVERITY_INFO	= ( D3D11_MESSAGE_SEVERITY_WARNING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_SEVERITY_MESSAGE	= ( D3D11_MESSAGE_SEVERITY_INFO + 1 ) 
    // DEBUG:     }
    public enum D3D11MESSAGE_SEVERITY
    {
        D3D11MESSAGE_SEVERITY_CORRUPTION = 0,
        D3D11MESSAGE_SEVERITY_ERROR = 1,
        D3D11MESSAGE_SEVERITY_WARNING = 2,
        D3D11MESSAGE_SEVERITY_INFO = 3,
        D3D11MESSAGE_SEVERITY_MESSAGE = 4
    }

    // DEBUG: enum D3D11_MESSAGE_ID
    // DEBUG:     {
    // DEBUG:         D3D11_MESSAGE_ID_UNKNOWN	= 0,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_UNKNOWN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_STRING_FROM_APPLICATION	= ( D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_THIS	= ( D3D11_MESSAGE_ID_STRING_FROM_APPLICATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1	= ( D3D11_MESSAGE_ID_CORRUPTED_THIS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA	= ( D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA	= ( D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE	= ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED	= ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE	= ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID	= ( D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE	= ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT	= ( D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR	= ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH	= ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH	= ( D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID	= ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE	= ( D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE	= ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE	= ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE	= ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED	= ( D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED	= ( D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS	= ( D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE	= ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_THREADING_MODE	= ( D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION	= ( D3D11_MESSAGE_ID_REF_THREADING_MODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION	= ( D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION	= ( D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE	= ( D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER	= ( D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY	= ( D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_INFO	= ( D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_REF_INFO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT	= ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT	= ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW	= ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY	= ( D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER	= ( D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED	= ( D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER	= ( D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN	= ( D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC	= ( D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER	= ( D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER	= ( D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE	= ( D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED	= ( D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION	= ( D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE	= ( D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS	= ( D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION	= ( D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS	= ( D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN	= ( D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE	= ( D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS	= ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL	= ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_BUFFER	= ( D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE1D	= ( D3D11_MESSAGE_ID_LIVE_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE2D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE1D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE3D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE3D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW	= ( D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW	= ( D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VERTEXSHADER	= ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER	= ( D3D11_MESSAGE_ID_LIVE_VERTEXSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PIXELSHADER	= ( D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT	= ( D3D11_MESSAGE_ID_LIVE_PIXELSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SAMPLER	= ( D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_BLENDSTATE	= ( D3D11_MESSAGE_ID_LIVE_SAMPLER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE	= ( D3D11_MESSAGE_ID_LIVE_BLENDSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE	= ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_QUERY	= ( D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PREDICATE	= ( D3D11_MESSAGE_ID_LIVE_QUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_COUNTER	= ( D3D11_MESSAGE_ID_LIVE_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEVICE	= ( D3D11_MESSAGE_ID_LIVE_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SWAPCHAIN	= ( D3D11_MESSAGE_ID_LIVE_DEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D10_MESSAGES_END	= ( D3D11_MESSAGE_ID_LIVE_SWAPCHAIN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START	= 0x100000,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED	= ( D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS	= ( D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS	= ( D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS	= ( D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS	= ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS	= ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY	= ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK	= ( D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK	= ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT	= ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD	= ( D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES	= ( D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND	= ( D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3	= ( D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO	= ( D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION	= ( D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR	= ( D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA	= ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP	= ( D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END	= ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_MESSAGES_START	= 0x200000,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_D3D11_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS	= ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN	= ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL	= ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL	= ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER	= ( D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS	= ( D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_CONTEXT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_CONTEXT	= ( D3D11_MESSAGE_ID_CREATE_CONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_CONTEXT	= ( D3D11_MESSAGE_ID_LIVE_CONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_BUFFER	= ( D3D11_MESSAGE_ID_DESTROY_CONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_BUFFER	= ( D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TEXTURE1D	= ( D3D11_MESSAGE_ID_DESTROY_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7	= ( D3D11_MESSAGE_ID_CREATE_TEXTURE1D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_TEXTURE1D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TEXTURE2D	= ( D3D11_MESSAGE_ID_DESTROY_TEXTURE1D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7	= ( D3D11_MESSAGE_ID_CREATE_TEXTURE2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_TEXTURE2D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TEXTURE3D	= ( D3D11_MESSAGE_ID_DESTROY_TEXTURE2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7	= ( D3D11_MESSAGE_ID_CREATE_TEXTURE3D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_TEXTURE3D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW	= ( D3D11_MESSAGE_ID_DESTROY_TEXTURE3D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7	= ( D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW	= ( D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW	= ( D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7	= ( D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW	= ( D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW	= ( D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7	= ( D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW	= ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_VERTEXSHADER	= ( D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_VERTEXSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER	= ( D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_HULLSHADER	= ( D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_HULLSHADER	= ( D3D11_MESSAGE_ID_CREATE_HULLSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_HULLSHADER	= ( D3D11_MESSAGE_ID_LIVE_HULLSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DOMAINSHADER	= ( D3D11_MESSAGE_ID_DESTROY_HULLSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DOMAINSHADER	= ( D3D11_MESSAGE_ID_CREATE_DOMAINSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER	= ( D3D11_MESSAGE_ID_LIVE_DOMAINSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER	= ( D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER	= ( D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_PIXELSHADER	= ( D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_PIXELSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_PIXELSHADER	= ( D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT	= ( D3D11_MESSAGE_ID_DESTROY_PIXELSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7	= ( D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT	= ( D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_SAMPLER	= ( D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_SAMPLER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_SAMPLER	= ( D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_BLENDSTATE	= ( D3D11_MESSAGE_ID_DESTROY_SAMPLER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7	= ( D3D11_MESSAGE_ID_CREATE_BLENDSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_BLENDSTATE	= ( D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE	= ( D3D11_MESSAGE_ID_DESTROY_BLENDSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7	= ( D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE	= ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE	= ( D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7	= ( D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE	= ( D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_QUERY	= ( D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_QUERY_WIN7	= ( D3D11_MESSAGE_ID_CREATE_QUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_QUERY	= ( D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_PREDICATE	= ( D3D11_MESSAGE_ID_DESTROY_QUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7	= ( D3D11_MESSAGE_ID_CREATE_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_PREDICATE	= ( D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_COUNTER	= ( D3D11_MESSAGE_ID_DESTROY_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_COUNTER	= ( D3D11_MESSAGE_ID_CREATE_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_COMMANDLIST	= ( D3D11_MESSAGE_ID_DESTROY_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_COMMANDLIST	= ( D3D11_MESSAGE_ID_CREATE_COMMANDLIST + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_COMMANDLIST	= ( D3D11_MESSAGE_ID_LIVE_COMMANDLIST + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE	= ( D3D11_MESSAGE_ID_DESTROY_COMMANDLIST + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE	= ( D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE	= ( D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE	= ( D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE	= ( D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7	= ( D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7	= ( D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_COMPUTESHADER	= ( D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_COMPUTESHADER	= ( D3D11_MESSAGE_ID_CREATE_COMPUTESHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER	= ( D3D11_MESSAGE_ID_LIVE_COMPUTESHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW	= ( D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW	= ( D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW	= ( D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL	= ( D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE	= ( D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE	= ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL	= ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE	= ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER	= ( D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD	= ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT	= ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY	= ( D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY	= ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED	= ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET	= ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE	= ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE	= ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW	= ( D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED	= ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV	= ( D3D11_MESSAGE_ID_REF_WARNING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SHADER_ABORT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SHADER_MESSAGE	= ( D3D11_MESSAGE_ID_SHADER_ABORT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SHADER_ERROR	= ( D3D11_MESSAGE_ID_SHADER_MESSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_SHADER_ERROR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN	= ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE	= ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_MESSAGES_END	= ( D3D11_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START	= 0x300000,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_VIDEODECODER	= ( D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM	= ( D3D11_MESSAGE_ID_CREATE_VIDEODECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR	= ( D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW	= ( D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW	= ( D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW	= ( D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE	= ( D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VIDEODECODER	= ( D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM	= ( D3D11_MESSAGE_ID_LIVE_VIDEODECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR	= ( D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW	= ( D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW	= ( D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW	= ( D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE	= ( D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_VIDEODECODER	= ( D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM	= ( D3D11_MESSAGE_ID_DESTROY_VIDEODECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR	= ( D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW	= ( D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW	= ( D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW	= ( D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE	= ( D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL	= ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID	= ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW	= ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS	= ( D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX	= ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE	= ( D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED	= ( D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE	= ( D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED	= ( D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM	= ( D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM	= ( D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE	= ( D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT	= ( D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE	= ( D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD	= ( D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD	= ( D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD	= ( D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM	= ( D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED	= ( D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE	= ( D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM	= ( D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM	= ( D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE	= ( D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX	= ( D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED	= ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE	= ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL	= ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM	= ( D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM	= ( D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE	= ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE	= ( D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY	= ( D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE	= ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND	= ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY	= ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM	= ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION	= ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET	= ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1	= ( D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDC_INACCESSIBLE	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT	= ( D3D11_MESSAGE_ID_GETDC_INACCESSIBLE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE	= ( D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA	= ( D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE	= ( D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM	= ( D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_ACCESS_DENIED	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_ACCESS_DENIED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START	= ( D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING	= ( D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR	= ( D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS	= ( D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA	= ( D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE	= ( D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES	= ( D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT	= ( D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE	= ( D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END	= ( D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER	= ( D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS	= ( D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICE_WARNING	= ( D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD	= ( D3D11_MESSAGE_ID_CREATEDEVICE_WARNING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD	= ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH	= ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_CRYPTOSESSION	= ( D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL	= ( D3D11_MESSAGE_ID_CREATE_CRYPTOSESSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_CRYPTOSESSION	= ( D3D11_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL	= ( D3D11_MESSAGE_ID_LIVE_CRYPTOSESSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_CRYPTOSESSION	= ( D3D11_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL	= ( D3D11_MESSAGE_ID_DESTROY_CRYPTOSESSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END	= ( D3D11_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_3_MESSAGES_START	= ( D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE	= ( D3D11_MESSAGE_ID_D3D11_3_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS	= ( D3D11_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D	= ( D3D11_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB	= ( D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT	= ( D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD	= ( D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD	= ( D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS	= ( D3D11_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE	= ( D3D11_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_HAZARD	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS	= ( D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS	= ( D3D11_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET	= ( D3D11_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS	= ( D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_SOURCENOT2D	= ( D3D11_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGENCODE_SOURCENOT2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL	= ( D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE	= ( D3D11_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_HAZARD	= ( D3D11_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE	= ( D3D11_MESSAGE_ID_JPEGENCODE_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS	= ( D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE	= ( D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY	= ( D3D11_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT	= ( D3D11_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM	= ( D3D11_MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_FENCE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_FENCE	= ( D3D11_MESSAGE_ID_CREATE_FENCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_FENCE	= ( D3D11_MESSAGE_ID_LIVE_FENCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL	= ( D3D11_MESSAGE_ID_DESTROY_FENCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL	= ( D3D11_MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL	= ( D3D11_MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEFENCE_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_3_MESSAGES_END	= ( D3D11_MESSAGE_ID_CREATEFENCE_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_5_MESSAGES_START	= ( D3D11_MESSAGE_ID_D3D11_3_MESSAGES_END + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE	= ( D3D11_MESSAGE_ID_D3D11_5_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT	= ( D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKEDWORKLOAD	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TRACKEDWORKLOAD	= ( D3D11_MESSAGE_ID_CREATE_TRACKEDWORKLOAD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD	= ( D3D11_MESSAGE_ID_LIVE_TRACKEDWORKLOAD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM	= ( D3D11_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES	= ( D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE	= ( D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE	= ( D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS	= ( D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS	= ( D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR	= ( D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR	= ( D3D11_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD	= ( D3D11_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND	= ( D3D11_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE	= ( D3D11_MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG	= ( D3D11_MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE	= ( D3D11_MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_5_MESSAGES_END	= ( D3D11_MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE + 1 ) 
    // DEBUG:     }
    public enum D3D11MESSAGE_ID
    {
        D3D11MESSAGE_ID_UNKNOWN = 0,
        D3D11MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1,
        D3D11MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2,
        D3D11MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3,
        D3D11MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4,
        D3D11MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5,
        D3D11MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6,
        D3D11MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7,
        D3D11MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8,
        D3D11MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9,
        D3D11MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10,
        D3D11MESSAGE_ID_STRING_FROM_APPLICATION = 11,
        D3D11MESSAGE_ID_CORRUPTED_THIS = 12,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER1 = 13,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER2 = 14,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER3 = 15,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER4 = 16,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER5 = 17,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER6 = 18,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER7 = 19,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER8 = 20,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER9 = 21,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER10 = 22,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER11 = 23,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER12 = 24,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER13 = 25,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER14 = 26,
        D3D11MESSAGE_ID_CORRUPTED_PARAMETER15 = 27,
        D3D11MESSAGE_ID_CORRUPTED_MULTITHREADING = 28,
        D3D11MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29,
        D3D11MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30,
        D3D11MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31,
        D3D11MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32,
        D3D11MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33,
        D3D11MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34,
        D3D11MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35,
        D3D11MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36,
        D3D11MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37,
        D3D11MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38,
        D3D11MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39,
        D3D11MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40,
        D3D11MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41,
        D3D11MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42,
        D3D11MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43,
        D3D11MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44,
        D3D11MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45,
        D3D11MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46,
        D3D11MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47,
        D3D11MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48,
        D3D11MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49,
        D3D11MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50,
        D3D11MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51,
        D3D11MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52,
        D3D11MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53,
        D3D11MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54,
        D3D11MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55,
        D3D11MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56,
        D3D11MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58,
        D3D11MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59,
        D3D11MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60,
        D3D11MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61,
        D3D11MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69,
        D3D11MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70,
        D3D11MESSAGE_ID_CREATEBUFFER_NULLDESC = 71,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72,
        D3D11MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73,
        D3D11MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74,
        D3D11MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75,
        D3D11MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76,
        D3D11MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77,
        D3D11MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78,
        D3D11MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79,
        D3D11MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80,
        D3D11MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81,
        D3D11MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82,
        D3D11MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83,
        D3D11MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84,
        D3D11MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85,
        D3D11MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86,
        D3D11MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87,
        D3D11MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88,
        D3D11MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89,
        D3D11MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90,
        D3D11MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91,
        D3D11MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92,
        D3D11MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93,
        D3D11MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94,
        D3D11MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95,
        D3D11MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96,
        D3D11MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97,
        D3D11MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98,
        D3D11MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99,
        D3D11MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100,
        D3D11MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101,
        D3D11MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102,
        D3D11MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103,
        D3D11MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104,
        D3D11MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105,
        D3D11MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106,
        D3D11MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107,
        D3D11MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108,
        D3D11MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109,
        D3D11MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110,
        D3D11MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111,
        D3D11MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112,
        D3D11MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113,
        D3D11MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114,
        D3D11MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115,
        D3D11MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116,
        D3D11MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117,
        D3D11MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118,
        D3D11MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119,
        D3D11MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120,
        D3D11MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121,
        D3D11MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122,
        D3D11MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123,
        D3D11MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164,
        D3D11MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165,
        D3D11MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166,
        D3D11MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190,
        D3D11MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191,
        D3D11MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192,
        D3D11MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231,
        D3D11MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232,
        D3D11MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233,
        D3D11MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234,
        D3D11MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235,
        D3D11MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236,
        D3D11MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237,
        D3D11MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238,
        D3D11MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239,
        D3D11MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240,
        D3D11MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241,
        D3D11MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242,
        D3D11MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243,
        D3D11MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244,
        D3D11MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245,
        D3D11MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246,
        D3D11MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247,
        D3D11MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248,
        D3D11MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249,
        D3D11MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250,
        D3D11MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251,
        D3D11MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252,
        D3D11MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253,
        D3D11MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254,
        D3D11MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255,
        D3D11MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256,
        D3D11MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257,
        D3D11MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258,
        D3D11MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259,
        D3D11MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260,
        D3D11MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261,
        D3D11MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262,
        D3D11MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263,
        D3D11MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264,
        D3D11MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265,
        D3D11MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266,
        D3D11MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267,
        D3D11MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268,
        D3D11MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269,
        D3D11MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270,
        D3D11MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271,
        D3D11MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272,
        D3D11MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273,
        D3D11MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274,
        D3D11MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275,
        D3D11MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276,
        D3D11MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277,
        D3D11MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278,
        D3D11MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279,
        D3D11MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280,
        D3D11MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281,
        D3D11MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282,
        D3D11MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283,
        D3D11MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284,
        D3D11MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285,
        D3D11MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286,
        D3D11MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287,
        D3D11MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288,
        D3D11MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289,
        D3D11MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290,
        D3D11MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291,
        D3D11MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292,
        D3D11MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293,
        D3D11MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294,
        D3D11MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295,
        D3D11MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296,
        D3D11MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297,
        D3D11MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298,
        D3D11MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299,
        D3D11MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300,
        D3D11MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301,
        D3D11MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302,
        D3D11MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303,
        D3D11MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304,
        D3D11MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305,
        D3D11MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306,
        D3D11MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307,
        D3D11MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308,
        D3D11MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309,
        D3D11MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310,
        D3D11MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311,
        D3D11MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312,
        D3D11MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313,
        D3D11MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314,
        D3D11MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315,
        D3D11MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316,
        D3D11MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317,
        D3D11MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318,
        D3D11MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319,
        D3D11MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320,
        D3D11MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321,
        D3D11MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322,
        D3D11MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323,
        D3D11MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324,
        D3D11MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325,
        D3D11MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326,
        D3D11MESSAGE_ID_REF_THREADING_MODE = 327,
        D3D11MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328,
        D3D11MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329,
        D3D11MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330,
        D3D11MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331,
        D3D11MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332,
        D3D11MESSAGE_ID_REF_OUT_OF_MEMORY = 333,
        D3D11MESSAGE_ID_REF_INFO = 334,
        D3D11MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335,
        D3D11MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336,
        D3D11MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337,
        D3D11MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338,
        D3D11MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339,
        D3D11MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340,
        D3D11MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341,
        D3D11MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342,
        D3D11MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343,
        D3D11MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344,
        D3D11MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345,
        D3D11MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346,
        D3D11MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347,
        D3D11MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348,
        D3D11MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349,
        D3D11MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350,
        D3D11MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351,
        D3D11MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352,
        D3D11MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353,
        D3D11MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354,
        D3D11MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355,
        D3D11MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356,
        D3D11MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357,
        D3D11MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358,
        D3D11MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359,
        D3D11MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360,
        D3D11MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361,
        D3D11MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362,
        D3D11MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363,
        D3D11MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364,
        D3D11MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365,
        D3D11MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366,
        D3D11MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367,
        D3D11MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368,
        D3D11MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369,
        D3D11MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370,
        D3D11MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371,
        D3D11MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372,
        D3D11MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373,
        D3D11MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374,
        D3D11MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375,
        D3D11MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376,
        D3D11MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377,
        D3D11MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378,
        D3D11MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379,
        D3D11MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380,
        D3D11MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381,
        D3D11MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382,
        D3D11MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383,
        D3D11MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386,
        D3D11MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387,
        D3D11MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388,
        D3D11MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389,
        D3D11MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391,
        D3D11MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392,
        D3D11MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393,
        D3D11MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394,
        D3D11MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395,
        D3D11MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396,
        D3D11MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397,
        D3D11MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398,
        D3D11MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399,
        D3D11MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400,
        D3D11MESSAGE_ID_CREATECOUNTER_NULLDESC = 401,
        D3D11MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402,
        D3D11MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403,
        D3D11MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404,
        D3D11MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405,
        D3D11MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406,
        D3D11MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407,
        D3D11MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408,
        D3D11MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409,
        D3D11MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410,
        D3D11MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411,
        D3D11MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412,
        D3D11MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413,
        D3D11MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414,
        D3D11MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415,
        D3D11MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416,
        D3D11MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417,
        D3D11MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418,
        D3D11MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420,
        D3D11MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421,
        D3D11MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422,
        D3D11MESSAGE_ID_LIVE_BUFFER = 423,
        D3D11MESSAGE_ID_LIVE_TEXTURE1D = 424,
        D3D11MESSAGE_ID_LIVE_TEXTURE2D = 425,
        D3D11MESSAGE_ID_LIVE_TEXTURE3D = 426,
        D3D11MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427,
        D3D11MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428,
        D3D11MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429,
        D3D11MESSAGE_ID_LIVE_VERTEXSHADER = 430,
        D3D11MESSAGE_ID_LIVE_GEOMETRYSHADER = 431,
        D3D11MESSAGE_ID_LIVE_PIXELSHADER = 432,
        D3D11MESSAGE_ID_LIVE_INPUTLAYOUT = 433,
        D3D11MESSAGE_ID_LIVE_SAMPLER = 434,
        D3D11MESSAGE_ID_LIVE_BLENDSTATE = 435,
        D3D11MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436,
        D3D11MESSAGE_ID_LIVE_RASTERIZERSTATE = 437,
        D3D11MESSAGE_ID_LIVE_QUERY = 438,
        D3D11MESSAGE_ID_LIVE_PREDICATE = 439,
        D3D11MESSAGE_ID_LIVE_COUNTER = 440,
        D3D11MESSAGE_ID_LIVE_DEVICE = 441,
        D3D11MESSAGE_ID_LIVE_SWAPCHAIN = 442,
        D3D11MESSAGE_ID_D3D10MESSAGES_END = 443,
        D3D11MESSAGE_ID_D3D10L9MESSAGES_START = 1048576,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClampNOT_SUPPORTED = 1048578,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581,
        D3D11MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582,
        D3D11MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583,
        D3D11MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584,
        D3D11MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585,
        D3D11MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586,
        D3D11MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587,
        D3D11MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588,
        D3D11MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589,
        D3D11MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590,
        D3D11MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591,
        D3D11MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592,
        D3D11MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593,
        D3D11MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594,
        D3D11MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595,
        D3D11MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596,
        D3D11MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597,
        D3D11MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnableMUST_BE_TRUE = 1048601,
        D3D11MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6SIDES = 1048607,
        D3D11MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608,
        D3D11MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609,
        D3D11MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610,
        D3D11MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613,
        D3D11MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614,
        D3D11MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615,
        D3D11MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616,
        D3D11MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8CANNOT_BE_SHARED = 1048617,
        D3D11MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618,
        D3D11MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619,
        D3D11MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620,
        D3D11MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625,
        D3D11MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626,
        D3D11MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627,
        D3D11MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628,
        D3D11MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629,
        D3D11MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630,
        D3D11MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631,
        D3D11MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632,
        D3D11MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10INPUT_PER_VERTEX_DATA = 1048633,
        D3D11MESSAGE_ID_CREATERESOURCE_NON_POW_2MIPMAP = 1048634,
        D3D11MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635,
        D3D11MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636,
        D3D11MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637,
        D3D11MESSAGE_ID_D3D10L9MESSAGES_END = 1048638,
        D3D11MESSAGE_ID_D3D11MESSAGES_START = 2097152,
        D3D11MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 2097153,
        D3D11MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 2097154,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 2097155,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 2097156,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 2097157,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 2097158,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 2097159,
        D3D11MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 2097160,
        D3D11MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 2097161,
        D3D11MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 2097162,
        D3D11MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 2097163,
        D3D11MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 2097164,
        D3D11MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 2097165,
        D3D11MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 2097166,
        D3D11MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 2097167,
        D3D11MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 2097168,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 2097169,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 2097170,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 2097171,
        D3D11MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 2097172,
        D3D11MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 2097173,
        D3D11MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 2097174,
        D3D11MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097175,
        D3D11MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097176,
        D3D11MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 2097177,
        D3D11MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 2097178,
        D3D11MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 2097179,
        D3D11MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 2097180,
        D3D11MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 2097181,
        D3D11MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 2097182,
        D3D11MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097183,
        D3D11MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097184,
        D3D11MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 2097185,
        D3D11MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 2097186,
        D3D11MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097187,
        D3D11MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 2097188,
        D3D11MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 2097189,
        D3D11MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 2097190,
        D3D11MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097191,
        D3D11MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097192,
        D3D11MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 2097193,
        D3D11MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 2097194,
        D3D11MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 2097195,
        D3D11MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 2097196,
        D3D11MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 2097197,
        D3D11MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 2097198,
        D3D11MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097199,
        D3D11MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097200,
        D3D11MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 2097201,
        D3D11MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 2097202,
        D3D11MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097203,
        D3D11MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 2097204,
        D3D11MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 2097205,
        D3D11MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 2097206,
        D3D11MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 2097207,
        D3D11MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 2097208,
        D3D11MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 2097209,
        D3D11MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 2097210,
        D3D11MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 2097211,
        D3D11MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 2097212,
        D3D11MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 2097213,
        D3D11MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 2097214,
        D3D11MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 2097215,
        D3D11MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 2097216,
        D3D11MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 2097217,
        D3D11MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 2097218,
        D3D11MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 2097219,
        D3D11MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 2097220,
        D3D11MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 2097221,
        D3D11MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 2097222,
        D3D11MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 2097223,
        D3D11MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 2097224,
        D3D11MESSAGE_ID_CREATE_CONTEXT = 2097225,
        D3D11MESSAGE_ID_LIVE_CONTEXT = 2097226,
        D3D11MESSAGE_ID_DESTROY_CONTEXT = 2097227,
        D3D11MESSAGE_ID_CREATE_BUFFER = 2097228,
        D3D11MESSAGE_ID_LIVE_BUFFER_WIN7 = 2097229,
        D3D11MESSAGE_ID_DESTROY_BUFFER = 2097230,
        D3D11MESSAGE_ID_CREATE_TEXTURE1D = 2097231,
        D3D11MESSAGE_ID_LIVE_TEXTURE1D_WIN7 = 2097232,
        D3D11MESSAGE_ID_DESTROY_TEXTURE1D = 2097233,
        D3D11MESSAGE_ID_CREATE_TEXTURE2D = 2097234,
        D3D11MESSAGE_ID_LIVE_TEXTURE2D_WIN7 = 2097235,
        D3D11MESSAGE_ID_DESTROY_TEXTURE2D = 2097236,
        D3D11MESSAGE_ID_CREATE_TEXTURE3D = 2097237,
        D3D11MESSAGE_ID_LIVE_TEXTURE3D_WIN7 = 2097238,
        D3D11MESSAGE_ID_DESTROY_TEXTURE3D = 2097239,
        D3D11MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 2097240,
        D3D11MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 = 2097241,
        D3D11MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 2097242,
        D3D11MESSAGE_ID_CREATE_RENDERTARGETVIEW = 2097243,
        D3D11MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 = 2097244,
        D3D11MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 2097245,
        D3D11MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 2097246,
        D3D11MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 = 2097247,
        D3D11MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 2097248,
        D3D11MESSAGE_ID_CREATE_VERTEXSHADER = 2097249,
        D3D11MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 = 2097250,
        D3D11MESSAGE_ID_DESTROY_VERTEXSHADER = 2097251,
        D3D11MESSAGE_ID_CREATE_HULLSHADER = 2097252,
        D3D11MESSAGE_ID_LIVE_HULLSHADER = 2097253,
        D3D11MESSAGE_ID_DESTROY_HULLSHADER = 2097254,
        D3D11MESSAGE_ID_CREATE_DOMAINSHADER = 2097255,
        D3D11MESSAGE_ID_LIVE_DOMAINSHADER = 2097256,
        D3D11MESSAGE_ID_DESTROY_DOMAINSHADER = 2097257,
        D3D11MESSAGE_ID_CREATE_GEOMETRYSHADER = 2097258,
        D3D11MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 = 2097259,
        D3D11MESSAGE_ID_DESTROY_GEOMETRYSHADER = 2097260,
        D3D11MESSAGE_ID_CREATE_PIXELSHADER = 2097261,
        D3D11MESSAGE_ID_LIVE_PIXELSHADER_WIN7 = 2097262,
        D3D11MESSAGE_ID_DESTROY_PIXELSHADER = 2097263,
        D3D11MESSAGE_ID_CREATE_INPUTLAYOUT = 2097264,
        D3D11MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 = 2097265,
        D3D11MESSAGE_ID_DESTROY_INPUTLAYOUT = 2097266,
        D3D11MESSAGE_ID_CREATE_SAMPLER = 2097267,
        D3D11MESSAGE_ID_LIVE_SAMPLER_WIN7 = 2097268,
        D3D11MESSAGE_ID_DESTROY_SAMPLER = 2097269,
        D3D11MESSAGE_ID_CREATE_BLENDSTATE = 2097270,
        D3D11MESSAGE_ID_LIVE_BLENDSTATE_WIN7 = 2097271,
        D3D11MESSAGE_ID_DESTROY_BLENDSTATE = 2097272,
        D3D11MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 2097273,
        D3D11MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 = 2097274,
        D3D11MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 2097275,
        D3D11MESSAGE_ID_CREATE_RASTERIZERSTATE = 2097276,
        D3D11MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 = 2097277,
        D3D11MESSAGE_ID_DESTROY_RASTERIZERSTATE = 2097278,
        D3D11MESSAGE_ID_CREATE_QUERY = 2097279,
        D3D11MESSAGE_ID_LIVE_QUERY_WIN7 = 2097280,
        D3D11MESSAGE_ID_DESTROY_QUERY = 2097281,
        D3D11MESSAGE_ID_CREATE_PREDICATE = 2097282,
        D3D11MESSAGE_ID_LIVE_PREDICATE_WIN7 = 2097283,
        D3D11MESSAGE_ID_DESTROY_PREDICATE = 2097284,
        D3D11MESSAGE_ID_CREATE_COUNTER = 2097285,
        D3D11MESSAGE_ID_DESTROY_COUNTER = 2097286,
        D3D11MESSAGE_ID_CREATE_COMMANDLIST = 2097287,
        D3D11MESSAGE_ID_LIVE_COMMANDLIST = 2097288,
        D3D11MESSAGE_ID_DESTROY_COMMANDLIST = 2097289,
        D3D11MESSAGE_ID_CREATE_CLASSINSTANCE = 2097290,
        D3D11MESSAGE_ID_LIVE_CLASSINSTANCE = 2097291,
        D3D11MESSAGE_ID_DESTROY_CLASSINSTANCE = 2097292,
        D3D11MESSAGE_ID_CREATE_CLASSLINKAGE = 2097293,
        D3D11MESSAGE_ID_LIVE_CLASSLINKAGE = 2097294,
        D3D11MESSAGE_ID_DESTROY_CLASSLINKAGE = 2097295,
        D3D11MESSAGE_ID_LIVE_DEVICE_WIN7 = 2097296,
        D3D11MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 = 2097297,
        D3D11MESSAGE_ID_CREATE_COMPUTESHADER = 2097298,
        D3D11MESSAGE_ID_LIVE_COMPUTESHADER = 2097299,
        D3D11MESSAGE_ID_DESTROY_COMPUTESHADER = 2097300,
        D3D11MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 2097301,
        D3D11MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 2097302,
        D3D11MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 2097303,
        D3D11MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 2097304,
        D3D11MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 2097305,
        D3D11MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 2097306,
        D3D11MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 2097307,
        D3D11MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 2097308,
        D3D11MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 2097309,
        D3D11MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 2097310,
        D3D11MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 2097311,
        D3D11MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 2097312,
        D3D11MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 2097313,
        D3D11MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 2097314,
        D3D11MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 2097315,
        D3D11MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 2097316,
        D3D11MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 2097317,
        D3D11MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097318,
        D3D11MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097319,
        D3D11MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 2097320,
        D3D11MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 2097321,
        D3D11MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 2097322,
        D3D11MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 2097323,
        D3D11MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 2097324,
        D3D11MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 2097325,
        D3D11MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097326,
        D3D11MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097327,
        D3D11MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 2097328,
        D3D11MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 2097329,
        D3D11MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097330,
        D3D11MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 2097331,
        D3D11MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097332,
        D3D11MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097333,
        D3D11MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097334,
        D3D11MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097335,
        D3D11MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 2097336,
        D3D11MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097337,
        D3D11MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097338,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 2097339,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 2097340,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 2097341,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 2097342,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 2097343,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 2097344,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 2097345,
        D3D11MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 2097346,
        D3D11MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 2097347,
        D3D11MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 2097348,
        D3D11MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097349,
        D3D11MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097350,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 2097351,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 2097352,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 2097353,
        D3D11MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 2097354,
        D3D11MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 2097355,
        D3D11MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 2097356,
        D3D11MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 2097357,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 2097358,
        D3D11MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 2097359,
        D3D11MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 2097360,
        D3D11MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 2097361,
        D3D11MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 2097362,
        D3D11MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 2097363,
        D3D11MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 2097364,
        D3D11MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 2097365,
        D3D11MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 2097366,
        D3D11MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 2097367,
        D3D11MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 2097368,
        D3D11MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 2097369,
        D3D11MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 2097370,
        D3D11MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 2097371,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 2097372,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 2097373,
        D3D11MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 2097374,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 2097375,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 2097376,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 2097377,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 2097378,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 2097379,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 2097380,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 2097381,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 2097382,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 2097383,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 2097384,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 2097385,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 2097386,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 2097387,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 2097388,
        D3D11MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 2097389,
        D3D11MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 2097390,
        D3D11MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 2097391,
        D3D11MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 2097392,
        D3D11MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 2097393,
        D3D11MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 2097394,
        D3D11MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 2097395,
        D3D11MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 2097396,
        D3D11MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 2097397,
        D3D11MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 2097398,
        D3D11MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 2097399,
        D3D11MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 2097400,
        D3D11MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 2097401,
        D3D11MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 2097402,
        D3D11MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 2097403,
        D3D11MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 2097404,
        D3D11MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 2097405,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 2097406,
        D3D11MESSAGE_ID_REF_WARNING = 2097407,
        D3D11MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV = 2097408,
        D3D11MESSAGE_ID_SHADER_ABORT = 2097409,
        D3D11MESSAGE_ID_SHADER_MESSAGE = 2097410,
        D3D11MESSAGE_ID_SHADER_ERROR = 2097411,
        D3D11MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE = 2097412,
        D3D11MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097413,
        D3D11MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097414,
        D3D11MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097415,
        D3D11MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT = 2097416,
        D3D11MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT = 2097417,
        D3D11MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT = 2097418,
        D3D11MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN = 2097419,
        D3D11MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN = 2097420,
        D3D11MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN = 2097421,
        D3D11MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE = 2097422,
        D3D11MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 2097423,
        D3D11MESSAGE_ID_D3D11MESSAGES_END = 2097424,
        D3D11MESSAGE_ID_D3D11_1MESSAGES_START = 3145728,
        D3D11MESSAGE_ID_CREATE_VIDEODECODER = 3145729,
        D3D11MESSAGE_ID_CREATE_VIDEOPROCESSORENUM = 3145730,
        D3D11MESSAGE_ID_CREATE_VIDEOPROCESSOR = 3145731,
        D3D11MESSAGE_ID_CREATE_DECODEROUTPUTVIEW = 3145732,
        D3D11MESSAGE_ID_CREATE_PROCESSORINPUTVIEW = 3145733,
        D3D11MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW = 3145734,
        D3D11MESSAGE_ID_CREATE_DEVICECONTEXTSTATE = 3145735,
        D3D11MESSAGE_ID_LIVE_VIDEODECODER = 3145736,
        D3D11MESSAGE_ID_LIVE_VIDEOPROCESSORENUM = 3145737,
        D3D11MESSAGE_ID_LIVE_VIDEOPROCESSOR = 3145738,
        D3D11MESSAGE_ID_LIVE_DECODEROUTPUTVIEW = 3145739,
        D3D11MESSAGE_ID_LIVE_PROCESSORINPUTVIEW = 3145740,
        D3D11MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW = 3145741,
        D3D11MESSAGE_ID_LIVE_DEVICECONTEXTSTATE = 3145742,
        D3D11MESSAGE_ID_DESTROY_VIDEODECODER = 3145743,
        D3D11MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM = 3145744,
        D3D11MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 3145745,
        D3D11MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW = 3145746,
        D3D11MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW = 3145747,
        D3D11MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW = 3145748,
        D3D11MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE = 3145749,
        D3D11MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS = 3145750,
        D3D11MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL = 3145751,
        D3D11MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED = 3145752,
        D3D11MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID = 3145753,
        D3D11MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW = 3145754,
        D3D11MESSAGE_ID_COPYSUBRESOURCEREGION1INVALIDCOPYFLAGS = 3145755,
        D3D11MESSAGE_ID_UPDATESUBRESOURCE1INVALIDCOPYFLAGS = 3145756,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 3145757,
        D3D11MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN = 3145758,
        D3D11MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM = 3145759,
        D3D11MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT = 3145760,
        D3D11MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT = 3145761,
        D3D11MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE = 3145762,
        D3D11MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE = 3145763,
        D3D11MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY = 3145764,
        D3D11MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM = 3145765,
        D3D11MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX = 3145766,
        D3D11MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN = 3145767,
        D3D11MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM = 3145768,
        D3D11MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN = 3145769,
        D3D11MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM = 3145770,
        D3D11MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN = 3145771,
        D3D11MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM = 3145772,
        D3D11MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX = 3145773,
        D3D11MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN = 3145774,
        D3D11MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM = 3145775,
        D3D11MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM = 3145776,
        D3D11MESSAGE_ID_GETDECODERBUFFER_NULLPARAM = 3145777,
        D3D11MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER = 3145778,
        D3D11MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE = 3145779,
        D3D11MESSAGE_ID_GETDECODERBUFFER_LOCKED = 3145780,
        D3D11MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM = 3145781,
        D3D11MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE = 3145782,
        D3D11MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED = 3145783,
        D3D11MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM = 3145784,
        D3D11MESSAGE_ID_DECODERBEGINFRAME_HAZARD = 3145785,
        D3D11MESSAGE_ID_DECODERENDFRAME_NULLPARAM = 3145786,
        D3D11MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM = 3145787,
        D3D11MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE = 3145788,
        D3D11MESSAGE_ID_DECODEREXTENSION_NULLPARAM = 3145789,
        D3D11MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE = 3145790,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN = 3145791,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM = 3145792,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT = 3145793,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE = 3145794,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE = 3145795,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE = 3145796,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT = 3145797,
        D3D11MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM = 3145798,
        D3D11MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM = 3145799,
        D3D11MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM = 3145800,
        D3D11MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM = 3145801,
        D3D11MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX = 3145802,
        D3D11MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM = 3145803,
        D3D11MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX = 3145804,
        D3D11MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM = 3145805,
        D3D11MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED = 3145806,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN = 3145807,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM = 3145808,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM = 3145809,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145810,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA = 3145811,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM = 3145812,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM = 3145813,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED = 3145814,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM = 3145815,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE = 3145816,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM = 3145817,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM = 3145818,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED = 3145819,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM = 3145820,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM = 3145821,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145822,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM = 3145823,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM = 3145824,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM = 3145825,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED = 3145826,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE = 3145827,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM = 3145828,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM = 3145829,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM = 3145830,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT = 3145831,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3145832,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM = 3145833,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM = 3145834,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM = 3145835,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE = 3145836,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG = 3145837,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM = 3145838,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM = 3145839,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM = 3145840,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT = 3145841,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM = 3145842,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM = 3145843,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT = 3145844,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM = 3145845,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM = 3145846,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA = 3145847,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM = 3145848,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM = 3145849,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT = 3145850,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA = 3145851,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145852,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3145853,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO = 3145854,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM = 3145855,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM = 3145856,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE = 3145857,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED = 3145858,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM = 3145859,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3145860,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED = 3145861,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED = 3145862,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED = 3145863,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED = 3145864,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT = 3145865,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145866,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3145867,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM = 3145868,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM = 3145869,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER = 3145870,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED = 3145871,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL = 3145872,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM = 3145873,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM = 3145874,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM = 3145875,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM = 3145876,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM = 3145877,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM = 3145878,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM = 3145879,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM = 3145880,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM = 3145881,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145882,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM = 3145883,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM = 3145884,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145885,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM = 3145886,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM = 3145887,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM = 3145888,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM = 3145889,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT = 3145890,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT = 3145891,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT = 3145892,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES = 3145893,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES = 3145894,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT = 3145895,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT = 3145896,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE = 3145897,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE = 3145898,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY = 3145899,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED = 3145900,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED = 3145901,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED = 3145902,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE = 3145903,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS = 3145904,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD = 3145905,
        D3D11MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD = 3145906,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145907,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM = 3145908,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE = 3145909,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND = 3145910,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT = 3145911,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP = 3145912,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP = 3145913,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE = 3145914,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY = 3145915,
        D3D11MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION = 3145916,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN = 3145917,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM = 3145918,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE = 3145919,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND = 3145920,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC = 3145921,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE = 3145922,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT = 3145923,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC = 3145924,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP = 3145925,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP = 3145926,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE = 3145927,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY = 3145928,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION = 3145929,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145930,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM = 3145931,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE = 3145932,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND = 3145933,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT = 3145934,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP = 3145935,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP = 3145936,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY = 3145937,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY = 3145938,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION = 3145939,
        D3D11MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 3145940,
        D3D11MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 3145941,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER = 3145942,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER = 3145943,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER = 3145944,
        D3D11MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE = 3145945,
        D3D11MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT = 3145946,
        D3D11MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE = 3145947,
        D3D11MESSAGE_ID_REF_WARNING_RAW_HAZARD = 3145948,
        D3D11MESSAGE_ID_REF_WARNING_WAR_HAZARD = 3145949,
        D3D11MESSAGE_ID_REF_WARNING_WAW_HAZARD = 3145950,
        D3D11MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM = 3145951,
        D3D11MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN = 3145952,
        D3D11MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM = 3145953,
        D3D11MESSAGE_ID_GETDECODERPROFILE_NULLPARAM = 3145954,
        D3D11MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM = 3145955,
        D3D11MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM = 3145956,
        D3D11MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE = 3145957,
        D3D11MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE = 3145958,
        D3D11MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM = 3145959,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED = 3145960,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM = 3145961,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE = 3145962,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE = 3145963,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH = 3145964,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH = 3145965,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED = 3145966,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING = 3145967,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED = 3145968,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED = 3145969,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED = 3145970,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED = 3145971,
        D3D11MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145972,
        D3D11MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED = 3145973,
        D3D11MESSAGE_ID_DECRYPTIONBLT_NULLPARAM = 3145974,
        D3D11MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE = 3145975,
        D3D11MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE = 3145976,
        D3D11MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH = 3145977,
        D3D11MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH = 3145978,
        D3D11MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED = 3145979,
        D3D11MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING = 3145980,
        D3D11MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET = 3145981,
        D3D11MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED = 3145982,
        D3D11MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED = 3145983,
        D3D11MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED = 3145984,
        D3D11MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED = 3145985,
        D3D11MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145986,
        D3D11MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM = 3145987,
        D3D11MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE = 3145988,
        D3D11MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM = 3145989,
        D3D11MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM = 3145990,
        D3D11MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE = 3145991,
        D3D11MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM = 3145992,
        D3D11MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM = 3145993,
        D3D11MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX = 3145994,
        D3D11MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM = 3145995,
        D3D11MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED = 3145996,
        D3D11MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE = 3145997,
        D3D11MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN = 3145998,
        D3D11MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL = 3145999,
        D3D11MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM = 3146000,
        D3D11MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL = 3146001,
        D3D11MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM = 3146002,
        D3D11MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE = 3146003,
        D3D11MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL = 3146004,
        D3D11MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM = 3146005,
        D3D11MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM = 3146006,
        D3D11MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146007,
        D3D11MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY = 3146008,
        D3D11MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE = 3146009,
        D3D11MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX = 3146010,
        D3D11MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM = 3146011,
        D3D11MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146012,
        D3D11MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE = 3146013,
        D3D11MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE = 3146014,
        D3D11MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE = 3146015,
        D3D11MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146016,
        D3D11MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146017,
        D3D11MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146018,
        D3D11MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146019,
        D3D11MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146020,
        D3D11MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146021,
        D3D11MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE = 3146022,
        D3D11MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE = 3146023,
        D3D11MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY = 3146024,
        D3D11MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY = 3146025,
        D3D11MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM = 3146026,
        D3D11MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE = 3146027,
        D3D11MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND = 3146028,
        D3D11MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY = 3146029,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM = 3146030,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM = 3146031,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID = 3146032,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED = 3146033,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM = 3146034,
        D3D11MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW = 3146035,
        D3D11MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146036,
        D3D11MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146037,
        D3D11MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146038,
        D3D11MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146039,
        D3D11MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146040,
        D3D11MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146041,
        D3D11MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146042,
        D3D11MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146043,
        D3D11MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 3146044,
        D3D11MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED = 3146045,
        D3D11MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146046,
        D3D11MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146047,
        D3D11MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146048,
        D3D11MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146049,
        D3D11MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION = 3146050,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED = 3146051,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED = 3146052,
        D3D11MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 3146053,
        D3D11MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 3146054,
        D3D11MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 3146055,
        D3D11MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 3146056,
        D3D11MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 3146057,
        D3D11MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 3146058,
        D3D11MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 3146059,
        D3D11MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET = 3146060,
        D3D11MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 3146061,
        D3D11MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED = 3146062,
        D3D11MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED = 3146063,
        D3D11MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 = 3146064,
        D3D11MESSAGE_ID_GETDC_INACCESSIBLE = 3146065,
        D3D11MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT = 3146066,
        D3D11MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 = 3146067,
        D3D11MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1NOT_SUPPORTED = 3146068,
        D3D11MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED = 3146069,
        D3D11MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED = 3146070,
        D3D11MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED = 3146071,
        D3D11MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE = 3146072,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA = 3146073,
        D3D11MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA = 3146074,
        D3D11MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 3146075,
        D3D11MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 3146076,
        D3D11MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX = 3146077,
        D3D11MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX = 3146078,
        D3D11MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 3146079,
        D3D11MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET = 3146080,
        D3D11MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET = 3146081,
        D3D11MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146082,
        D3D11MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146083,
        D3D11MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM = 3146084,
        D3D11MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM = 3146085,
        D3D11MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM = 3146086,
        D3D11MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM = 3146087,
        D3D11MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT = 3146088,
        D3D11MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146089,
        D3D11MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146090,
        D3D11MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146091,
        D3D11MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM = 3146092,
        D3D11MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED = 3146093,
        D3D11MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM = 3146094,
        D3D11MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED = 3146095,
        D3D11MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM = 3146096,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1NULLPARAM = 3146097,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1NULLPARAM = 3146098,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1NULLPARAM = 3146099,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1INVALIDSTREAM = 3146100,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM = 3146101,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM = 3146102,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED = 3146103,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1NULLPARAM = 3146104,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM = 3146105,
        D3D11MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146106,
        D3D11MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146107,
        D3D11MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146108,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM = 3146109,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM = 3146110,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM = 3146111,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT = 3146112,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT = 3146113,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT = 3146114,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT = 3146115,
        D3D11MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE = 3146116,
        D3D11MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1ACCESS_DENIED = 3146117,
        D3D11MESSAGE_ID_D3D11_1MESSAGES_END = 3146118,
        D3D11MESSAGE_ID_D3D11_2MESSAGES_START = 3146119,
        D3D11MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE = 3146120,
        D3D11MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE = 3146121,
        D3D11MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE = 3146122,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9STEPRATE_NOT_1 = 3146123,
        D3D11MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9INSTANCING_NOT_SUPPORTED = 3146124,
        D3D11MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 3146125,
        D3D11MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 3146126,
        D3D11MESSAGE_ID_COPYTILES_INVALID_PARAMETER = 3146127,
        D3D11MESSAGE_ID_UPDATETILES_INVALID_PARAMETER = 3146128,
        D3D11MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER = 3146129,
        D3D11MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER = 3146130,
        D3D11MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING = 3146131,
        D3D11MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR = 3146132,
        D3D11MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS = 3146133,
        D3D11MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA = 3146134,
        D3D11MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE = 3146135,
        D3D11MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES = 3146136,
        D3D11MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT = 3146137,
        D3D11MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS = 3146138,
        D3D11MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE = 3146139,
        D3D11MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END = 3146140,
        D3D11MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER = 3146141,
        D3D11MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 3146142,
        D3D11MESSAGE_ID_CREATEDEVICE_WARNING = 3146143,
        D3D11MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD = 3146144,
        D3D11MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD = 3146145,
        D3D11MESSAGE_ID_TILED_RESOURCE_TIER_1BUFFER_TEXTURE_MISMATCH = 3146146,
        D3D11MESSAGE_ID_CREATE_CRYPTOSESSION = 3146147,
        D3D11MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL = 3146148,
        D3D11MESSAGE_ID_LIVE_CRYPTOSESSION = 3146149,
        D3D11MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL = 3146150,
        D3D11MESSAGE_ID_DESTROY_CRYPTOSESSION = 3146151,
        D3D11MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL = 3146152,
        D3D11MESSAGE_ID_D3D11_2MESSAGES_END = 3146153,
        D3D11MESSAGE_ID_D3D11_3MESSAGES_START = 3146154,
        D3D11MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 3146155,
        D3D11MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE = 3146156,
        D3D11MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE = 3146157,
        D3D11MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED = 3146158,
        D3D11MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED = 3146159,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX = 3146160,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX = 3146161,
        D3D11MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146162,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX = 3146163,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX = 3146164,
        D3D11MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146165,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX = 3146166,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX = 3146167,
        D3D11MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146168,
        D3D11MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET = 3146169,
        D3D11MESSAGE_ID_JPEGDECODE_NOTSUPPORTED = 3146170,
        D3D11MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE = 3146171,
        D3D11MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS = 3146172,
        D3D11MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D = 3146173,
        D3D11MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED = 3146174,
        D3D11MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED = 3146175,
        D3D11MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED = 3146176,
        D3D11MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE = 3146177,
        D3D11MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL = 3146178,
        D3D11MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX = 3146179,
        D3D11MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D = 3146180,
        D3D11MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB = 3146181,
        D3D11MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT = 3146182,
        D3D11MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH = 3146183,
        D3D11MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH = 3146184,
        D3D11MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD = 3146185,
        D3D11MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD = 3146186,
        D3D11MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE = 3146187,
        D3D11MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED = 3146188,
        D3D11MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE = 3146189,
        D3D11MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH = 3146190,
        D3D11MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH = 3146191,
        D3D11MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS = 3146192,
        D3D11MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED = 3146193,
        D3D11MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT = 3146194,
        D3D11MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT = 3146195,
        D3D11MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED = 3146196,
        D3D11MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE = 3146197,
        D3D11MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS = 3146198,
        D3D11MESSAGE_ID_JPEGDECODE_HAZARD = 3146199,
        D3D11MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE = 3146200,
        D3D11MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS = 3146201,
        D3D11MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE = 3146202,
        D3D11MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED = 3146203,
        D3D11MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS = 3146204,
        D3D11MESSAGE_ID_JPEGENCODE_NOTSUPPORTED = 3146205,
        D3D11MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET = 3146206,
        D3D11MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS = 3146207,
        D3D11MESSAGE_ID_JPEGENCODE_SOURCENOT2D = 3146208,
        D3D11MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED = 3146209,
        D3D11MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED = 3146210,
        D3D11MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH = 3146211,
        D3D11MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH = 3146212,
        D3D11MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED = 3146213,
        D3D11MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE = 3146214,
        D3D11MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL = 3146215,
        D3D11MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE = 3146216,
        D3D11MESSAGE_ID_JPEGENCODE_HAZARD = 3146217,
        D3D11MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE = 3146218,
        D3D11MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS = 3146219,
        D3D11MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE = 3146220,
        D3D11MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED = 3146221,
        D3D11MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY = 3146222,
        D3D11MESSAGE_ID_FLUSH1INVALIDCONTEXTTYPE = 3146223,
        D3D11MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT = 3146224,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM = 3146225,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE = 3146226,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM = 3146227,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE = 3146228,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM = 3146229,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM = 3146230,
        D3D11MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE = 3146231,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM = 3146232,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM = 3146233,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE = 3146234,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3146235,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM = 3146236,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM = 3146237,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM = 3146238,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM = 3146239,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM = 3146240,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM = 3146241,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3146242,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM = 3146243,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3146244,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3146245,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM = 3146246,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM = 3146247,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1INVALIDSTREAM = 3146248,
        D3D11MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM = 3146249,
        D3D11MESSAGE_ID_CREATE_FENCE = 3146250,
        D3D11MESSAGE_ID_LIVE_FENCE = 3146251,
        D3D11MESSAGE_ID_DESTROY_FENCE = 3146252,
        D3D11MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL = 3146253,
        D3D11MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL = 3146254,
        D3D11MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL = 3146255,
        D3D11MESSAGE_ID_CREATEFENCE_INVALIDFLAGS = 3146256,
        D3D11MESSAGE_ID_D3D11_3MESSAGES_END = 3146257,
        D3D11MESSAGE_ID_D3D11_5MESSAGES_START = 3146258,
        D3D11MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE = 3146259,
        D3D11MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED = 3146260,
        D3D11MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT = 3146261,
        D3D11MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT = 3146262,
        D3D11MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE = 3146263,
        D3D11MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE = 3146264,
        D3D11MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS = 3146265,
        D3D11MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET = 3146266,
        D3D11MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 3146267,
        D3D11MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 3146268,
        D3D11MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 3146269,
        D3D11MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM = 3146270,
        D3D11MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES = 3146271,
        D3D11MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE = 3146272,
        D3D11MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE = 3146273,
        D3D11MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 3146274,
        D3D11MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 3146275,
        D3D11MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 3146276,
        D3D11MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 3146277,
        D3D11MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 3146278,
        D3D11MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 3146279,
        D3D11MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND = 3146280,
        D3D11MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE = 3146281,
        D3D11MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG = 3146282,
        D3D11MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE = 3146283,
        D3D11MESSAGE_ID_D3D11_5MESSAGES_END = 3146284
    }

    // DEBUG: enum D3D11_SHADER_TRACKING_RESOURCE_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_NONE	= 0,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_UAV_DEVICEMEMORY	= 1,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_NON_UAV_DEVICEMEMORY	= 2,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_DEVICEMEMORY	= 3,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_MEMORY	= 4,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_SHARED_MEMORY	= 5,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_NON_UAV	= 6,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL	= 7
    // DEBUG:     }
    public enum D3D11SHADER_TRACKING_RESOURCE_TYPE
    {
        D3D11SHADER_TRACKING_RESOURCE_TYPE_NONE = 0,
        D3D11SHADER_TRACKING_RESOURCE_TYPE_UAV_DEVICEMEMORY = 1,
        D3D11SHADER_TRACKING_RESOURCE_TYPE_NON_UAV_DEVICEMEMORY = 2,
        D3D11SHADER_TRACKING_RESOURCE_TYPE_ALL_DEVICEMEMORY = 3,
        D3D11SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_MEMORY = 4,
        D3D11SHADER_TRACKING_RESOURCE_TYPE_ALL_SHARED_MEMORY = 5,
        D3D11SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_NON_UAV = 6,
        D3D11SHADER_TRACKING_RESOURCE_TYPE_ALL = 7
    }

    // DEBUG: enum D3D11_SHADER_TRACKING_OPTION
    // DEBUG:     {
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_IGNORE	= 0,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED	= 0x1,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_RAW	= 0x2,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_WAR	= 0x4,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_WAW	= 0x8,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME	= 0x10,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY	= 0x20,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS	= 0x40,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS	= 0x80,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS	= 0x100,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS	= 0x200,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS	= ( ( ( D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS | D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS ) ,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS	= ( ( ( ( ( ( ( D3D11_SHADER_TRACKING_OPTION_TRACK_RAW | D3D11_SHADER_TRACKING_OPTION_TRACK_WAR )  | D3D11_SHADER_TRACKING_OPTION_TRACK_WAW )  | D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY )  | D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS ) ,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME	= ( D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS | D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME ) ,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS	= ( D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME | D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED ) 
    // DEBUG:     }
    public enum D3D11SHADER_TRACKING_OPTION
    {
        D3D11SHADER_TRACKING_OPTION_IGNORE = 0,
        D3D11SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED = 1,
        D3D11SHADER_TRACKING_OPTION_TRACK_RAW = 2,
        D3D11SHADER_TRACKING_OPTION_TRACK_WAR = 4,
        D3D11SHADER_TRACKING_OPTION_TRACK_WAW = 8,
        D3D11SHADER_TRACKING_OPTION_ALLOW_SAME = 16,
        D3D11SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY = 32,
        D3D11SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS = 64,
        D3D11SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS = 128,
        D3D11SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS = 256,
        D3D11SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS = 512,
        D3D11SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS = 960,
        D3D11SHADER_TRACKING_OPTION_ALL_HAZARDS = 1006,
        D3D11SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME = 1022,
        D3D11SHADER_TRACKING_OPTION_ALL_OPTIONS = 1023
    }

    // DEBUG: typedef 
    // DEBUG: enum D3D11_RLDO_FLAGS
    // DEBUG:     {
    // DEBUG:         D3D11_RLDO_SUMMARY	= 0x1,
    // DEBUG:         D3D11_RLDO_DETAIL	= 0x2,
    // DEBUG:         D3D11_RLDO_IGNORE_INTERNAL	= 0x4
    // DEBUG:     } 	D3D11_RLDO_FLAGS
    // DEBUG: typedef 
    // DEBUG: enum D3D11_MESSAGE_CATEGORY
    // DEBUG:     {
    // DEBUG:         D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED	= 0,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_MISCELLANEOUS	= ( D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_INITIALIZATION	= ( D3D11_MESSAGE_CATEGORY_MISCELLANEOUS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_CLEANUP	= ( D3D11_MESSAGE_CATEGORY_INITIALIZATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_COMPILATION	= ( D3D11_MESSAGE_CATEGORY_CLEANUP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_STATE_CREATION	= ( D3D11_MESSAGE_CATEGORY_COMPILATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_STATE_SETTING	= ( D3D11_MESSAGE_CATEGORY_STATE_CREATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_STATE_GETTING	= ( D3D11_MESSAGE_CATEGORY_STATE_SETTING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION	= ( D3D11_MESSAGE_CATEGORY_STATE_GETTING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_EXECUTION	= ( D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_CATEGORY_SHADER	= ( D3D11_MESSAGE_CATEGORY_EXECUTION + 1 ) 
    // DEBUG:     } 	D3D11_MESSAGE_CATEGORY
    // DEBUG: typedef 
    // DEBUG: enum D3D11_MESSAGE_SEVERITY
    // DEBUG:     {
    // DEBUG:         D3D11_MESSAGE_SEVERITY_CORRUPTION	= 0,
    // DEBUG:         D3D11_MESSAGE_SEVERITY_ERROR	= ( D3D11_MESSAGE_SEVERITY_CORRUPTION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_SEVERITY_WARNING	= ( D3D11_MESSAGE_SEVERITY_ERROR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_SEVERITY_INFO	= ( D3D11_MESSAGE_SEVERITY_WARNING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_SEVERITY_MESSAGE	= ( D3D11_MESSAGE_SEVERITY_INFO + 1 ) 
    // DEBUG:     } 	D3D11_MESSAGE_SEVERITY
    // DEBUG: typedef 
    // DEBUG: enum D3D11_MESSAGE_ID
    // DEBUG:     {
    // DEBUG:         D3D11_MESSAGE_ID_UNKNOWN	= 0,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_UNKNOWN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_STRING_FROM_APPLICATION	= ( D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_THIS	= ( D3D11_MESSAGE_ID_STRING_FROM_APPLICATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1	= ( D3D11_MESSAGE_ID_CORRUPTED_THIS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING	= ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA	= ( D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA	= ( D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE	= ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED	= ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE	= ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID	= ( D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE	= ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT	= ( D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR	= ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH	= ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH	= ( D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID	= ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE	= ( D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE	= ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE	= ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE	= ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED	= ( D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED	= ( D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS	= ( D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE	= ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_THREADING_MODE	= ( D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION	= ( D3D11_MESSAGE_ID_REF_THREADING_MODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION	= ( D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION	= ( D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE	= ( D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER	= ( D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY	= ( D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_INFO	= ( D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_REF_INFO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT	= ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT	= ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW	= ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY	= ( D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER	= ( D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED	= ( D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER	= ( D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN	= ( D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC	= ( D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER	= ( D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER	= ( D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE	= ( D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED	= ( D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION	= ( D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE	= ( D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS	= ( D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION	= ( D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS	= ( D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN	= ( D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE	= ( D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS	= ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL	= ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT	= ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_BUFFER	= ( D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE1D	= ( D3D11_MESSAGE_ID_LIVE_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE2D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE1D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE3D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE3D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW	= ( D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW	= ( D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VERTEXSHADER	= ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER	= ( D3D11_MESSAGE_ID_LIVE_VERTEXSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PIXELSHADER	= ( D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT	= ( D3D11_MESSAGE_ID_LIVE_PIXELSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SAMPLER	= ( D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_BLENDSTATE	= ( D3D11_MESSAGE_ID_LIVE_SAMPLER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE	= ( D3D11_MESSAGE_ID_LIVE_BLENDSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE	= ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_QUERY	= ( D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PREDICATE	= ( D3D11_MESSAGE_ID_LIVE_QUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_COUNTER	= ( D3D11_MESSAGE_ID_LIVE_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEVICE	= ( D3D11_MESSAGE_ID_LIVE_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SWAPCHAIN	= ( D3D11_MESSAGE_ID_LIVE_DEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D10_MESSAGES_END	= ( D3D11_MESSAGE_ID_LIVE_SWAPCHAIN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START	= 0x100000,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED	= ( D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS	= ( D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS	= ( D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS	= ( D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS	= ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS	= ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY	= ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK	= ( D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK	= ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT	= ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD	= ( D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE	= ( D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES	= ( D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND	= ( D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3	= ( D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO	= ( D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION	= ( D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR	= ( D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA	= ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP	= ( D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT	= ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES	= ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END	= ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_MESSAGES_START	= 0x200000,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_D3D11_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS	= ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT	= ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN	= ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL	= ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL	= ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER	= ( D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE	= ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED	= ( D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS	= ( D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_CONTEXT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_CONTEXT	= ( D3D11_MESSAGE_ID_CREATE_CONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_CONTEXT	= ( D3D11_MESSAGE_ID_LIVE_CONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_BUFFER	= ( D3D11_MESSAGE_ID_DESTROY_CONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_BUFFER	= ( D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TEXTURE1D	= ( D3D11_MESSAGE_ID_DESTROY_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7	= ( D3D11_MESSAGE_ID_CREATE_TEXTURE1D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_TEXTURE1D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TEXTURE2D	= ( D3D11_MESSAGE_ID_DESTROY_TEXTURE1D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7	= ( D3D11_MESSAGE_ID_CREATE_TEXTURE2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_TEXTURE2D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TEXTURE3D	= ( D3D11_MESSAGE_ID_DESTROY_TEXTURE2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7	= ( D3D11_MESSAGE_ID_CREATE_TEXTURE3D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_TEXTURE3D	= ( D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW	= ( D3D11_MESSAGE_ID_DESTROY_TEXTURE3D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7	= ( D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW	= ( D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW	= ( D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7	= ( D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW	= ( D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW	= ( D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7	= ( D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW	= ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_VERTEXSHADER	= ( D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_VERTEXSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER	= ( D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_HULLSHADER	= ( D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_HULLSHADER	= ( D3D11_MESSAGE_ID_CREATE_HULLSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_HULLSHADER	= ( D3D11_MESSAGE_ID_LIVE_HULLSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DOMAINSHADER	= ( D3D11_MESSAGE_ID_DESTROY_HULLSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DOMAINSHADER	= ( D3D11_MESSAGE_ID_CREATE_DOMAINSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER	= ( D3D11_MESSAGE_ID_LIVE_DOMAINSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER	= ( D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER	= ( D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_PIXELSHADER	= ( D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_PIXELSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_PIXELSHADER	= ( D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT	= ( D3D11_MESSAGE_ID_DESTROY_PIXELSHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7	= ( D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT	= ( D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_SAMPLER	= ( D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7	= ( D3D11_MESSAGE_ID_CREATE_SAMPLER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_SAMPLER	= ( D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_BLENDSTATE	= ( D3D11_MESSAGE_ID_DESTROY_SAMPLER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7	= ( D3D11_MESSAGE_ID_CREATE_BLENDSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_BLENDSTATE	= ( D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE	= ( D3D11_MESSAGE_ID_DESTROY_BLENDSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7	= ( D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE	= ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE	= ( D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7	= ( D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE	= ( D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_QUERY	= ( D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_QUERY_WIN7	= ( D3D11_MESSAGE_ID_CREATE_QUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_QUERY	= ( D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_PREDICATE	= ( D3D11_MESSAGE_ID_DESTROY_QUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7	= ( D3D11_MESSAGE_ID_CREATE_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_PREDICATE	= ( D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_COUNTER	= ( D3D11_MESSAGE_ID_DESTROY_PREDICATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_COUNTER	= ( D3D11_MESSAGE_ID_CREATE_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_COMMANDLIST	= ( D3D11_MESSAGE_ID_DESTROY_COUNTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_COMMANDLIST	= ( D3D11_MESSAGE_ID_CREATE_COMMANDLIST + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_COMMANDLIST	= ( D3D11_MESSAGE_ID_LIVE_COMMANDLIST + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE	= ( D3D11_MESSAGE_ID_DESTROY_COMMANDLIST + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE	= ( D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE	= ( D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE	= ( D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE	= ( D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7	= ( D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7	= ( D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_COMPUTESHADER	= ( D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_COMPUTESHADER	= ( D3D11_MESSAGE_ID_CREATE_COMPUTESHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER	= ( D3D11_MESSAGE_ID_LIVE_COMPUTESHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW	= ( D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW	= ( D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW	= ( D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL	= ( D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL	= ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE	= ( D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE	= ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD	= ( D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL	= ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE	= ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER	= ( D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD	= ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT	= ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY	= ( D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY	= ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED	= ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH	= ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET	= ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET	= ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE	= ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE	= ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW	= ( D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED	= ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV	= ( D3D11_MESSAGE_ID_REF_WARNING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SHADER_ABORT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SHADER_MESSAGE	= ( D3D11_MESSAGE_ID_SHADER_ABORT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SHADER_ERROR	= ( D3D11_MESSAGE_ID_SHADER_MESSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_SHADER_ERROR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN	= ( D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN	= ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE	= ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_MESSAGES_END	= ( D3D11_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START	= 0x300000,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_VIDEODECODER	= ( D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM	= ( D3D11_MESSAGE_ID_CREATE_VIDEODECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR	= ( D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW	= ( D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW	= ( D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW	= ( D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE	= ( D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VIDEODECODER	= ( D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM	= ( D3D11_MESSAGE_ID_LIVE_VIDEODECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR	= ( D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW	= ( D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW	= ( D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW	= ( D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE	= ( D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_VIDEODECODER	= ( D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM	= ( D3D11_MESSAGE_ID_DESTROY_VIDEODECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR	= ( D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW	= ( D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW	= ( D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW	= ( D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE	= ( D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL	= ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID	= ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW	= ( D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS	= ( D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX	= ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER	= ( D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE	= ( D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED	= ( D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE	= ( D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED	= ( D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM	= ( D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM	= ( D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE	= ( D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE	= ( D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER	= ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT	= ( D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE	= ( D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD	= ( D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD	= ( D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD	= ( D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM	= ( D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM	= ( D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED	= ( D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED	= ( D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM	= ( D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE	= ( D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM	= ( D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM	= ( D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE	= ( D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX	= ( D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED	= ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE	= ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN	= ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL	= ( D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL	= ( D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM	= ( D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM	= ( D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM	= ( D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT	= ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE	= ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE	= ( D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY	= ( D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY	= ( D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE	= ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND	= ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY	= ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM	= ( D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION	= ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET	= ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1	= ( D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDC_INACCESSIBLE	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT	= ( D3D11_MESSAGE_ID_GETDC_INACCESSIBLE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE	= ( D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA	= ( D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT	= ( D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX	= ( D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX	= ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS	= ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM	= ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM	= ( D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM	= ( D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE	= ( D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT	= ( D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM	= ( D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_ACCESS_DENIED	= ( D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END	= ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_ACCESS_DENIED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START	= ( D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE	= ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1	= ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER	= ( D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING	= ( D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR	= ( D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS	= ( D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA	= ( D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE	= ( D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES	= ( D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT	= ( D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE	= ( D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END	= ( D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER	= ( D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS	= ( D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEDEVICE_WARNING	= ( D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD	= ( D3D11_MESSAGE_ID_CREATEDEVICE_WARNING + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD	= ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH	= ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_CRYPTOSESSION	= ( D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL	= ( D3D11_MESSAGE_ID_CREATE_CRYPTOSESSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_CRYPTOSESSION	= ( D3D11_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL	= ( D3D11_MESSAGE_ID_LIVE_CRYPTOSESSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_CRYPTOSESSION	= ( D3D11_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL	= ( D3D11_MESSAGE_ID_DESTROY_CRYPTOSESSION + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END	= ( D3D11_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_3_MESSAGES_START	= ( D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE	= ( D3D11_MESSAGE_ID_D3D11_3_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE	= ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE	= ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET	= ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS	= ( D3D11_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D	= ( D3D11_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB	= ( D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT	= ( D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD	= ( D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD	= ( D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS	= ( D3D11_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT	= ( D3D11_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE	= ( D3D11_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_HAZARD	= ( D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS	= ( D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE	= ( D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS	= ( D3D11_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET	= ( D3D11_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS	= ( D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_SOURCENOT2D	= ( D3D11_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGENCODE_SOURCENOT2D + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH	= ( D3D11_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE	= ( D3D11_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL	= ( D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE	= ( D3D11_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_HAZARD	= ( D3D11_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE	= ( D3D11_MESSAGE_ID_JPEGENCODE_HAZARD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS	= ( D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE	= ( D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED	= ( D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY	= ( D3D11_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE	= ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT	= ( D3D11_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM	= ( D3D11_MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_FENCE	= ( D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_FENCE	= ( D3D11_MESSAGE_ID_CREATE_FENCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_FENCE	= ( D3D11_MESSAGE_ID_LIVE_FENCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL	= ( D3D11_MESSAGE_ID_DESTROY_FENCE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL	= ( D3D11_MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL	= ( D3D11_MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATEFENCE_INVALIDFLAGS	= ( D3D11_MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_3_MESSAGES_END	= ( D3D11_MESSAGE_ID_CREATEFENCE_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_5_MESSAGES_START	= ( D3D11_MESSAGE_ID_D3D11_3_MESSAGES_END + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE	= ( D3D11_MESSAGE_ID_D3D11_5_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT	= ( D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKEDWORKLOAD	= ( D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_LIVE_TRACKEDWORKLOAD	= ( D3D11_MESSAGE_ID_CREATE_TRACKEDWORKLOAD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD	= ( D3D11_MESSAGE_ID_LIVE_TRACKEDWORKLOAD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM	= ( D3D11_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES	= ( D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE	= ( D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE	= ( D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS	= ( D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS	= ( D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR	= ( D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR	= ( D3D11_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD	= ( D3D11_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED	= ( D3D11_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND	= ( D3D11_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE	= ( D3D11_MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG	= ( D3D11_MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE	= ( D3D11_MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG + 1 ) ,
    // DEBUG:         D3D11_MESSAGE_ID_D3D11_5_MESSAGES_END	= ( D3D11_MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE + 1 ) 
    // DEBUG:     } 	D3D11_MESSAGE_ID
    // DEBUG: typedef struct D3D11_MESSAGE
    // DEBUG:     {
    // DEBUG:     D3D11_MESSAGE_CATEGORY Category;
    // DEBUG:     D3D11_MESSAGE_SEVERITY Severity;
    // DEBUG:     D3D11_MESSAGE_ID ID;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(DescriptionByteLength)  const char *pDescription;
    // DEBUG:     SIZE_T DescriptionByteLength;
    // DEBUG:     } 	D3D11_MESSAGE
    // DEBUG: typedef struct D3D11_INFO_QUEUE_FILTER_DESC
    // DEBUG:     {
    // DEBUG:     UINT NumCategories;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumCategories)  D3D11_MESSAGE_CATEGORY *pCategoryList;
    // DEBUG:     UINT NumSeverities;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumSeverities)  D3D11_MESSAGE_SEVERITY *pSeverityList;
    // DEBUG:     UINT NumIDs;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumIDs)  D3D11_MESSAGE_ID *pIDList;
    // DEBUG:     } 	D3D11_INFO_QUEUE_FILTER_DESC
    // DEBUG: typedef struct D3D11_INFO_QUEUE_FILTER
    // DEBUG:     {
    // DEBUG:     D3D11_INFO_QUEUE_FILTER_DESC AllowList;
    // DEBUG:     D3D11_INFO_QUEUE_FILTER_DESC DenyList;
    // DEBUG:     } 	D3D11_INFO_QUEUE_FILTER
    // DEBUG: typedef 
    // DEBUG: enum D3D11_SHADER_TRACKING_RESOURCE_TYPE
    // DEBUG:     {
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_NONE	= 0,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_UAV_DEVICEMEMORY	= 1,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_NON_UAV_DEVICEMEMORY	= 2,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_DEVICEMEMORY	= 3,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_MEMORY	= 4,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_SHARED_MEMORY	= 5,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_NON_UAV	= 6,
    // DEBUG:         D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL	= 7
    // DEBUG:     } 	D3D11_SHADER_TRACKING_RESOURCE_TYPE
    // DEBUG: typedef 
    // DEBUG: enum D3D11_SHADER_TRACKING_OPTION
    // DEBUG:     {
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_IGNORE	= 0,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED	= 0x1,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_RAW	= 0x2,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_WAR	= 0x4,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_WAW	= 0x8,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME	= 0x10,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY	= 0x20,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS	= 0x40,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS	= 0x80,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS	= 0x100,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS	= 0x200,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS	= ( ( ( D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS | D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS ) ,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS	= ( ( ( ( ( ( ( D3D11_SHADER_TRACKING_OPTION_TRACK_RAW | D3D11_SHADER_TRACKING_OPTION_TRACK_WAR )  | D3D11_SHADER_TRACKING_OPTION_TRACK_WAW )  | D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY )  | D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS )  | D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS ) ,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME	= ( D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS | D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME ) ,
    // DEBUG:         D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS	= ( D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME | D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED ) 
    // DEBUG:     } 	D3D11_SHADER_TRACKING_OPTIONS
    // DEBUG: struct D3D11_MESSAGE
    // DEBUG:     {
    // DEBUG:     D3D11_MESSAGE_CATEGORY Category;
    // DEBUG:     D3D11_MESSAGE_SEVERITY Severity;
    // DEBUG:     D3D11_MESSAGE_ID ID;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(DescriptionByteLength)  const char *pDescription;
    // DEBUG:     SIZE_T DescriptionByteLength;
    // DEBUG:     }
    public unsafe partial class D3D11MESSAGE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11MESSAGE_CATEGORY Category;
            internal global::SpoutDX.D3D11MESSAGE_SEVERITY Severity;
            internal global::SpoutDX.D3D11MESSAGE_ID ID;
            internal __IntPtr pDescription;
            internal ulong DescriptionByteLength;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_MESSAGE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11MESSAGE>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11MESSAGE>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11MESSAGE managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11MESSAGE>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11MESSAGE managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __pDescription_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static D3D11MESSAGE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11MESSAGE(native.ToPointer(), skipVTables);
        }

        internal static D3D11MESSAGE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11MESSAGE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11MESSAGE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11MESSAGE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11MESSAGE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11MESSAGE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_MESSAGE
        public D3D11MESSAGE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11MESSAGE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_MESSAGE
        public D3D11MESSAGE(global::SpoutDX.D3D11MESSAGE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11MESSAGE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11MESSAGE.__Internal*) __Instance) = *((global::SpoutDX.D3D11MESSAGE.__Internal*) _0.__Instance);
            if (_0.__pDescription_OwnsNativeMemory)
                this.PDescription = _0.PDescription;
        }

        ~D3D11MESSAGE()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__pDescription_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->pDescription);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11MESSAGE_CATEGORY Category
        {
            get
            {
                return ((__Internal*)__Instance)->Category;
            }

            set
            {
                ((__Internal*)__Instance)->Category = value;
            }
        }

        public global::SpoutDX.D3D11MESSAGE_SEVERITY Severity
        {
            get
            {
                return ((__Internal*)__Instance)->Severity;
            }

            set
            {
                ((__Internal*)__Instance)->Severity = value;
            }
        }

        public global::SpoutDX.D3D11MESSAGE_ID ID
        {
            get
            {
                return ((__Internal*)__Instance)->ID;
            }

            set
            {
                ((__Internal*)__Instance)->ID = value;
            }
        }

        public string PDescription
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->pDescription);
            }

            set
            {
                if (__pDescription_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->pDescription);
                __pDescription_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->pDescription = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->pDescription = (__IntPtr) __bytePtr0;
            }
        }

        public ulong DescriptionByteLength
        {
            get
            {
                return ((__Internal*)__Instance)->DescriptionByteLength;
            }

            set
            {
                ((__Internal*)__Instance)->DescriptionByteLength = value;
            }
        }
    }

    // DEBUG: struct D3D11_INFO_QUEUE_FILTER_DESC
    // DEBUG:     {
    // DEBUG:     UINT NumCategories;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumCategories)  D3D11_MESSAGE_CATEGORY *pCategoryList;
    // DEBUG:     UINT NumSeverities;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumSeverities)  D3D11_MESSAGE_SEVERITY *pSeverityList;
    // DEBUG:     UINT NumIDs;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumIDs)  D3D11_MESSAGE_ID *pIDList;
    // DEBUG:     }
    public unsafe partial class D3D11INFO_QUEUE_FILTER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal uint NumCategories;
            internal global::SpoutDX.D3D11MESSAGE_CATEGORY* pCategoryList;
            internal uint NumSeverities;
            internal global::SpoutDX.D3D11MESSAGE_SEVERITY* pSeverityList;
            internal uint NumIDs;
            internal global::SpoutDX.D3D11MESSAGE_ID* pIDList;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_INFO_QUEUE_FILTER_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11INFO_QUEUE_FILTER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11INFO_QUEUE_FILTER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D11INFO_QUEUE_FILTER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11INFO_QUEUE_FILTER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11INFO_QUEUE_FILTER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11INFO_QUEUE_FILTER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11INFO_QUEUE_FILTER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11INFO_QUEUE_FILTER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_INFO_QUEUE_FILTER_DESC
        public D3D11INFO_QUEUE_FILTER_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_INFO_QUEUE_FILTER_DESC
        public D3D11INFO_QUEUE_FILTER_DESC(global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__Internal*) _0.__Instance);
        }

        ~D3D11INFO_QUEUE_FILTER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint NumCategories
        {
            get
            {
                return ((__Internal*)__Instance)->NumCategories;
            }

            set
            {
                ((__Internal*)__Instance)->NumCategories = value;
            }
        }

        public global::SpoutDX.D3D11MESSAGE_CATEGORY* PCategoryList
        {
            get
            {
                return ((__Internal*)__Instance)->pCategoryList;
            }

            set
            {
                ((__Internal*)__Instance)->pCategoryList = value;
            }
        }

        public uint NumSeverities
        {
            get
            {
                return ((__Internal*)__Instance)->NumSeverities;
            }

            set
            {
                ((__Internal*)__Instance)->NumSeverities = value;
            }
        }

        public global::SpoutDX.D3D11MESSAGE_SEVERITY* PSeverityList
        {
            get
            {
                return ((__Internal*)__Instance)->pSeverityList;
            }

            set
            {
                ((__Internal*)__Instance)->pSeverityList = value;
            }
        }

        public uint NumIDs
        {
            get
            {
                return ((__Internal*)__Instance)->NumIDs;
            }

            set
            {
                ((__Internal*)__Instance)->NumIDs = value;
            }
        }

        public global::SpoutDX.D3D11MESSAGE_ID* PIDList
        {
            get
            {
                return ((__Internal*)__Instance)->pIDList;
            }

            set
            {
                ((__Internal*)__Instance)->pIDList = value;
            }
        }
    }

    // DEBUG: struct D3D11_INFO_QUEUE_FILTER
    // DEBUG:     {
    // DEBUG:     D3D11_INFO_QUEUE_FILTER_DESC AllowList;
    // DEBUG:     D3D11_INFO_QUEUE_FILTER_DESC DenyList;
    // DEBUG:     }
    public unsafe partial class D3D11INFO_QUEUE_FILTER : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 96)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__Internal AllowList;
            internal global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__Internal DenyList;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D11_INFO_QUEUE_FILTER@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11INFO_QUEUE_FILTER>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D11INFO_QUEUE_FILTER>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D11INFO_QUEUE_FILTER managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D11INFO_QUEUE_FILTER>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D11INFO_QUEUE_FILTER managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D11INFO_QUEUE_FILTER __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D11INFO_QUEUE_FILTER(native.ToPointer(), skipVTables);
        }

        internal static D3D11INFO_QUEUE_FILTER __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D11INFO_QUEUE_FILTER)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D11INFO_QUEUE_FILTER __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D11INFO_QUEUE_FILTER(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D11INFO_QUEUE_FILTER(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D11INFO_QUEUE_FILTER(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D11_INFO_QUEUE_FILTER
        public D3D11INFO_QUEUE_FILTER()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11INFO_QUEUE_FILTER.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D11_INFO_QUEUE_FILTER
        public D3D11INFO_QUEUE_FILTER(global::SpoutDX.D3D11INFO_QUEUE_FILTER _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D11INFO_QUEUE_FILTER.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D11INFO_QUEUE_FILTER.__Internal*) __Instance) = *((global::SpoutDX.D3D11INFO_QUEUE_FILTER.__Internal*) _0.__Instance);
        }

        ~D3D11INFO_QUEUE_FILTER()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC AllowList
        {
            get
            {
                return global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->AllowList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->AllowList = *(global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC DenyList
        {
            get
            {
                return global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->DenyList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->DenyList = *(global::SpoutDX.D3D11INFO_QUEUE_FILTER_DESC.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class d3d11sdklayers
    {
        public partial struct __Internal
        {
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0000V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0000_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0000_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0000V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0000_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0000_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0001_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0001V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0001_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0001_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0001_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0001V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0001_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0001_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0002V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0002_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0002_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0002V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0002_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0002_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0005_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0005V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0005_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0005_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0005_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0005V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0005_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0005_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0006_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0006V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0006_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0006_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0006_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d11sdklayers0000_0006V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0006_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d11sdklayers_0000_0006_v0_0_s_ifspec;
                *__ptr = value;
            }
        }
    }

    // DEBUG: enum D3D10_FEATURE_LEVEL1
    // DEBUG:     {
    // DEBUG:         D3D10_FEATURE_LEVEL_10_0	= 0xa000,
    // DEBUG:         D3D10_FEATURE_LEVEL_10_1	= 0xa100,
    // DEBUG:         D3D10_FEATURE_LEVEL_9_1	= 0x9100,
    // DEBUG:         D3D10_FEATURE_LEVEL_9_2	= 0x9200,
    // DEBUG:         D3D10_FEATURE_LEVEL_9_3	= 0x9300
    // DEBUG:     }
    public enum D3D10FEATURE_LEVEL1
    {
        D3D10FEATURE_LEVEL_10_0 = 40960,
        D3D10FEATURE_LEVEL_10_1 = 41216,
        D3D10FEATURE_LEVEL_9_1 = 37120,
        D3D10FEATURE_LEVEL_9_2 = 37376,
        D3D10FEATURE_LEVEL_9_3 = 37632
    }

    // DEBUG: enum D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    // DEBUG:     {
    // DEBUG:         D3D10_STANDARD_MULTISAMPLE_PATTERN	= 0xffffffff,
    // DEBUG:         D3D10_CENTER_MULTISAMPLE_PATTERN	= 0xfffffffe
    // DEBUG:     }
    public enum D3D10STANDARD_MULTISAMPLE_QUALITY_LEVELS
    {
        D3D10STANDARD_MULTISAMPLE_PATTERN = -1,
        D3D10CENTER_MULTISAMPLE_PATTERN = -2
    }

    // DEBUG: enum _D3D10_SHADER_DEBUG_REGTYPE
    // DEBUG: {
    // DEBUG:     D3D10_SHADER_DEBUG_REG_INPUT,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_OUTPUT,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_CBUFFER,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_TBUFFER,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_TEMP,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_TEMPARRAY,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_TEXTURE,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_SAMPLER,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_LITERAL,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_UNUSED,
    // DEBUG:     D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS,
    // DEBUG:     D3D11_SHADER_DEBUG_REG_UAV,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_FORCE_DWORD = 0x7fffffff,
    // DEBUG: }
    public enum D3D10SHADER_DEBUG_REGTYPE
    {
        D3D10SHADER_DEBUG_REG_INPUT = 0,
        D3D10SHADER_DEBUG_REG_OUTPUT = 1,
        D3D10SHADER_DEBUG_REG_CBUFFER = 2,
        D3D10SHADER_DEBUG_REG_TBUFFER = 3,
        D3D10SHADER_DEBUG_REG_TEMP = 4,
        D3D10SHADER_DEBUG_REG_TEMPARRAY = 5,
        D3D10SHADER_DEBUG_REG_TEXTURE = 6,
        D3D10SHADER_DEBUG_REG_SAMPLER = 7,
        D3D10SHADER_DEBUG_REG_IMMEDIATECBUFFER = 8,
        D3D10SHADER_DEBUG_REG_LITERAL = 9,
        D3D10SHADER_DEBUG_REG_UNUSED = 10,
        D3D11SHADER_DEBUG_REG_INTERFACE_POINTERS = 11,
        D3D11SHADER_DEBUG_REG_UAV = 12,
        D3D10SHADER_DEBUG_REG_FORCE_DWORD = 2147483647
    }

    // DEBUG: enum _D3D10_SHADER_DEBUG_SCOPETYPE
    // DEBUG: {
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_GLOBAL,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_BLOCK,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_FORLOOP,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_STRUCT,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_NAMESPACE,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_ANNOTATION,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = 0x7fffffff,
    // DEBUG: }
    public enum D3D10SHADER_DEBUG_SCOPETYPE
    {
        D3D10SHADER_DEBUG_SCOPE_GLOBAL = 0,
        D3D10SHADER_DEBUG_SCOPE_BLOCK = 1,
        D3D10SHADER_DEBUG_SCOPE_FORLOOP = 2,
        D3D10SHADER_DEBUG_SCOPE_STRUCT = 3,
        D3D10SHADER_DEBUG_SCOPE_FUNC_PARAMS = 4,
        D3D10SHADER_DEBUG_SCOPE_STATEBLOCK = 5,
        D3D10SHADER_DEBUG_SCOPE_NAMESPACE = 6,
        D3D10SHADER_DEBUG_SCOPE_ANNOTATION = 7,
        D3D10SHADER_DEBUG_SCOPE_FORCE_DWORD = 2147483647
    }

    // DEBUG: enum _D3D10_SHADER_DEBUG_VARTYPE
    // DEBUG: {
    // DEBUG:     D3D10_SHADER_DEBUG_VAR_VARIABLE,
    // DEBUG:     D3D10_SHADER_DEBUG_VAR_FUNCTION,
    // DEBUG:     D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = 0x7fffffff,
    // DEBUG: }
    public enum D3D10SHADER_DEBUG_VARTYPE
    {
        D3D10SHADER_DEBUG_VAR_VARIABLE = 0,
        D3D10SHADER_DEBUG_VAR_FUNCTION = 1,
        D3D10SHADER_DEBUG_VAR_FORCE_DWORD = 2147483647
    }

    // DEBUG: typedef struct D3D10_RENDER_TARGET_BLEND_DESC1
    // DEBUG:     {
    // DEBUG:     BOOL BlendEnable;
    // DEBUG:     D3D10_BLEND SrcBlend;
    // DEBUG:     D3D10_BLEND DestBlend;
    // DEBUG:     D3D10_BLEND_OP BlendOp;
    // DEBUG:     D3D10_BLEND SrcBlendAlpha;
    // DEBUG:     D3D10_BLEND DestBlendAlpha;
    // DEBUG:     D3D10_BLEND_OP BlendOpAlpha;
    // DEBUG:     UINT8 RenderTargetWriteMask;
    // DEBUG:     } 	D3D10_RENDER_TARGET_BLEND_DESC1
    // DEBUG: typedef struct D3D10_BLEND_DESC1
    // DEBUG:     {
    // DEBUG:     BOOL AlphaToCoverageEnable;
    // DEBUG:     BOOL IndependentBlendEnable;
    // DEBUG:     D3D10_RENDER_TARGET_BLEND_DESC1 RenderTarget[ 8 ];
    // DEBUG:     } 	D3D10_BLEND_DESC1
    // DEBUG: typedef D3D_SRV_DIMENSION D3D10_SRV_DIMENSION1
    // DEBUG: typedef struct D3D10_TEXCUBE_ARRAY_SRV1
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT First2DArrayFace;
    // DEBUG:     UINT NumCubes;
    // DEBUG:     } 	D3D10_TEXCUBE_ARRAY_SRV1
    // DEBUG: typedef struct D3D10_SHADER_RESOURCE_VIEW_DESC1
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_SRV_DIMENSION1 ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D10_BUFFER_SRV Buffer;
    // DEBUG:         D3D10_TEX1D_SRV Texture1D;
    // DEBUG:         D3D10_TEX1D_ARRAY_SRV Texture1DArray;
    // DEBUG:         D3D10_TEX2D_SRV Texture2D;
    // DEBUG:         D3D10_TEX2D_ARRAY_SRV Texture2DArray;
    // DEBUG:         D3D10_TEX2DMS_SRV Texture2DMS;
    // DEBUG:         D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    // DEBUG:         D3D10_TEX3D_SRV Texture3D;
    // DEBUG:         D3D10_TEXCUBE_SRV TextureCube;
    // DEBUG:         D3D10_TEXCUBE_ARRAY_SRV1 TextureCubeArray;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D10_SHADER_RESOURCE_VIEW_DESC1
    // DEBUG: typedef 
    // DEBUG: enum D3D10_FEATURE_LEVEL1
    // DEBUG:     {
    // DEBUG:         D3D10_FEATURE_LEVEL_10_0	= 0xa000,
    // DEBUG:         D3D10_FEATURE_LEVEL_10_1	= 0xa100,
    // DEBUG:         D3D10_FEATURE_LEVEL_9_1	= 0x9100,
    // DEBUG:         D3D10_FEATURE_LEVEL_9_2	= 0x9200,
    // DEBUG:         D3D10_FEATURE_LEVEL_9_3	= 0x9300
    // DEBUG:     } 	D3D10_FEATURE_LEVEL1
    // DEBUG: typedef 
    // DEBUG: enum D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    // DEBUG:     {
    // DEBUG:         D3D10_STANDARD_MULTISAMPLE_PATTERN	= 0xffffffff,
    // DEBUG:         D3D10_CENTER_MULTISAMPLE_PATTERN	= 0xfffffffe
    // DEBUG:     } 	D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    // DEBUG: typedef enum _D3D10_SHADER_DEBUG_REGTYPE
    // DEBUG: {
    // DEBUG:     D3D10_SHADER_DEBUG_REG_INPUT,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_OUTPUT,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_CBUFFER,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_TBUFFER,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_TEMP,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_TEMPARRAY,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_TEXTURE,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_SAMPLER,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_LITERAL,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_UNUSED,
    // DEBUG:     D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS,
    // DEBUG:     D3D11_SHADER_DEBUG_REG_UAV,
    // DEBUG:     D3D10_SHADER_DEBUG_REG_FORCE_DWORD = 0x7fffffff,
    // DEBUG: } D3D10_SHADER_DEBUG_REGTYPE
    // DEBUG: typedef enum _D3D10_SHADER_DEBUG_SCOPETYPE
    // DEBUG: {
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_GLOBAL,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_BLOCK,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_FORLOOP,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_STRUCT,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_NAMESPACE,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_ANNOTATION,
    // DEBUG:     D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = 0x7fffffff,
    // DEBUG: } D3D10_SHADER_DEBUG_SCOPETYPE
    // DEBUG: typedef enum _D3D10_SHADER_DEBUG_VARTYPE
    // DEBUG: {
    // DEBUG:     D3D10_SHADER_DEBUG_VAR_VARIABLE,
    // DEBUG:     D3D10_SHADER_DEBUG_VAR_FUNCTION,
    // DEBUG:     D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = 0x7fffffff,
    // DEBUG: } D3D10_SHADER_DEBUG_VARTYPE
    // DEBUG: struct D3D10_RENDER_TARGET_BLEND_DESC1
    // DEBUG:     {
    // DEBUG:     BOOL BlendEnable;
    // DEBUG:     D3D10_BLEND SrcBlend;
    // DEBUG:     D3D10_BLEND DestBlend;
    // DEBUG:     D3D10_BLEND_OP BlendOp;
    // DEBUG:     D3D10_BLEND SrcBlendAlpha;
    // DEBUG:     D3D10_BLEND DestBlendAlpha;
    // DEBUG:     D3D10_BLEND_OP BlendOpAlpha;
    // DEBUG:     UINT8 RenderTargetWriteMask;
    // DEBUG:     }
    public unsafe partial class D3D10RENDER_TARGET_BLEND_DESC1 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal int BlendEnable;
            internal global::SpoutDX.D3D10BLEND SrcBlend;
            internal global::SpoutDX.D3D10BLEND DestBlend;
            internal global::SpoutDX.D3D10BLEND_OP BlendOp;
            internal global::SpoutDX.D3D10BLEND SrcBlendAlpha;
            internal global::SpoutDX.D3D10BLEND DestBlendAlpha;
            internal global::SpoutDX.D3D10BLEND_OP BlendOpAlpha;
            internal byte RenderTargetWriteMask;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_RENDER_TARGET_BLEND_DESC1@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10RENDER_TARGET_BLEND_DESC1 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10RENDER_TARGET_BLEND_DESC1(native.ToPointer(), skipVTables);
        }

        internal static D3D10RENDER_TARGET_BLEND_DESC1 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10RENDER_TARGET_BLEND_DESC1)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10RENDER_TARGET_BLEND_DESC1 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10RENDER_TARGET_BLEND_DESC1(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10RENDER_TARGET_BLEND_DESC1(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10RENDER_TARGET_BLEND_DESC1(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_RENDER_TARGET_BLEND_DESC1
        public D3D10RENDER_TARGET_BLEND_DESC1()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_RENDER_TARGET_BLEND_DESC1
        public D3D10RENDER_TARGET_BLEND_DESC1(global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__Internal*) __Instance) = *((global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__Internal*) _0.__Instance);
        }

        ~D3D10RENDER_TARGET_BLEND_DESC1()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int BlendEnable
        {
            get
            {
                return ((__Internal*)__Instance)->BlendEnable;
            }

            set
            {
                ((__Internal*)__Instance)->BlendEnable = value;
            }
        }

        public global::SpoutDX.D3D10BLEND SrcBlend
        {
            get
            {
                return ((__Internal*)__Instance)->SrcBlend;
            }

            set
            {
                ((__Internal*)__Instance)->SrcBlend = value;
            }
        }

        public global::SpoutDX.D3D10BLEND DestBlend
        {
            get
            {
                return ((__Internal*)__Instance)->DestBlend;
            }

            set
            {
                ((__Internal*)__Instance)->DestBlend = value;
            }
        }

        public global::SpoutDX.D3D10BLEND_OP BlendOp
        {
            get
            {
                return ((__Internal*)__Instance)->BlendOp;
            }

            set
            {
                ((__Internal*)__Instance)->BlendOp = value;
            }
        }

        public global::SpoutDX.D3D10BLEND SrcBlendAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->SrcBlendAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->SrcBlendAlpha = value;
            }
        }

        public global::SpoutDX.D3D10BLEND DestBlendAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->DestBlendAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->DestBlendAlpha = value;
            }
        }

        public global::SpoutDX.D3D10BLEND_OP BlendOpAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->BlendOpAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->BlendOpAlpha = value;
            }
        }

        public byte RenderTargetWriteMask
        {
            get
            {
                return ((__Internal*)__Instance)->RenderTargetWriteMask;
            }

            set
            {
                ((__Internal*)__Instance)->RenderTargetWriteMask = value;
            }
        }
    }

    // DEBUG: struct D3D10_BLEND_DESC1
    // DEBUG:     {
    // DEBUG:     BOOL AlphaToCoverageEnable;
    // DEBUG:     BOOL IndependentBlendEnable;
    // DEBUG:     D3D10_RENDER_TARGET_BLEND_DESC1 RenderTarget[ 8 ];
    // DEBUG:     }
    public unsafe partial class D3D10BLEND_DESC1 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 264)]
        public partial struct __Internal
        {
            internal int AlphaToCoverageEnable;
            internal int IndependentBlendEnable;
            internal fixed byte RenderTarget[256];

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_BLEND_DESC1@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BLEND_DESC1>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BLEND_DESC1>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10BLEND_DESC1 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10BLEND_DESC1>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10BLEND_DESC1 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10BLEND_DESC1 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10BLEND_DESC1(native.ToPointer(), skipVTables);
        }

        internal static D3D10BLEND_DESC1 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10BLEND_DESC1)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10BLEND_DESC1 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10BLEND_DESC1(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10BLEND_DESC1(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10BLEND_DESC1(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_BLEND_DESC1
        public D3D10BLEND_DESC1()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BLEND_DESC1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_BLEND_DESC1
        public D3D10BLEND_DESC1(global::SpoutDX.D3D10BLEND_DESC1 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BLEND_DESC1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10BLEND_DESC1.__Internal*) __Instance) = *((global::SpoutDX.D3D10BLEND_DESC1.__Internal*) _0.__Instance);
        }

        ~D3D10BLEND_DESC1()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int AlphaToCoverageEnable
        {
            get
            {
                return ((__Internal*)__Instance)->AlphaToCoverageEnable;
            }

            set
            {
                ((__Internal*)__Instance)->AlphaToCoverageEnable = value;
            }
        }

        public int IndependentBlendEnable
        {
            get
            {
                return ((__Internal*)__Instance)->IndependentBlendEnable;
            }

            set
            {
                ((__Internal*)__Instance)->IndependentBlendEnable = value;
            }
        }

        public global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1[] RenderTarget
        {
            get
            {
                global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1[] __value = null;
                if (((__Internal*)__Instance)->RenderTarget != null)
                {
                    __value = new global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__GetOrCreateInstance((IntPtr)((global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__Internal*)&(((__Internal*)__Instance)->RenderTarget[i * sizeof(global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__Internal)])), true, true);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 8)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 8; i++)
                        *(global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__Internal*) &((__Internal*)__Instance)->RenderTarget[i * sizeof(global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__Internal)] = *(global::SpoutDX.D3D10RENDER_TARGET_BLEND_DESC1.__Internal*)value[i].__Instance;
                }
            }
        }
    }

    // DEBUG: struct D3D10_TEXCUBE_ARRAY_SRV1
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT First2DArrayFace;
    // DEBUG:     UINT NumCubes;
    // DEBUG:     }
    public unsafe partial class D3D10TEXCUBE_ARRAY_SRV1 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
            internal uint First2DArrayFace;
            internal uint NumCubes;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEXCUBE_ARRAY_SRV1@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEXCUBE_ARRAY_SRV1 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEXCUBE_ARRAY_SRV1(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEXCUBE_ARRAY_SRV1 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEXCUBE_ARRAY_SRV1)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEXCUBE_ARRAY_SRV1 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEXCUBE_ARRAY_SRV1(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEXCUBE_ARRAY_SRV1(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEXCUBE_ARRAY_SRV1(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEXCUBE_ARRAY_SRV1
        public D3D10TEXCUBE_ARRAY_SRV1()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEXCUBE_ARRAY_SRV1
        public D3D10TEXCUBE_ARRAY_SRV1(global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1.__Internal*) _0.__Instance);
        }

        ~D3D10TEXCUBE_ARRAY_SRV1()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint First2DArrayFace
        {
            get
            {
                return ((__Internal*)__Instance)->First2DArrayFace;
            }

            set
            {
                ((__Internal*)__Instance)->First2DArrayFace = value;
            }
        }

        public uint NumCubes
        {
            get
            {
                return ((__Internal*)__Instance)->NumCubes;
            }

            set
            {
                ((__Internal*)__Instance)->NumCubes = value;
            }
        }
    }

    // DEBUG: struct D3D10_SHADER_RESOURCE_VIEW_DESC1
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_SRV_DIMENSION1 ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D10_BUFFER_SRV Buffer;
    // DEBUG:         D3D10_TEX1D_SRV Texture1D;
    // DEBUG:         D3D10_TEX1D_ARRAY_SRV Texture1DArray;
    // DEBUG:         D3D10_TEX2D_SRV Texture2D;
    // DEBUG:         D3D10_TEX2D_ARRAY_SRV Texture2DArray;
    // DEBUG:         D3D10_TEX2DMS_SRV Texture2DMS;
    // DEBUG:         D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    // DEBUG:         D3D10_TEX3D_SRV Texture3D;
    // DEBUG:         D3D10_TEXCUBE_SRV TextureCube;
    // DEBUG:         D3D10_TEXCUBE_ARRAY_SRV1 TextureCubeArray;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D10SHADER_RESOURCE_VIEW_DESC1 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D_SRV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10BUFFER_SRV.__Internal Buffer;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX1D_SRV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2D_SRV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2DMS_SRV.__Internal Texture2DMS;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__Internal Texture2DMSArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX3D_SRV.__Internal Texture3D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEXCUBE_SRV.__Internal TextureCube;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1.__Internal TextureCubeArray;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_SHADER_RESOURCE_VIEW_DESC1@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1 managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1 managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10SHADER_RESOURCE_VIEW_DESC1 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10SHADER_RESOURCE_VIEW_DESC1(native.ToPointer(), skipVTables);
        }

        internal static D3D10SHADER_RESOURCE_VIEW_DESC1 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10SHADER_RESOURCE_VIEW_DESC1)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10SHADER_RESOURCE_VIEW_DESC1 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10SHADER_RESOURCE_VIEW_DESC1(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10SHADER_RESOURCE_VIEW_DESC1(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10SHADER_RESOURCE_VIEW_DESC1(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_SHADER_RESOURCE_VIEW_DESC1
        public D3D10SHADER_RESOURCE_VIEW_DESC1()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_SHADER_RESOURCE_VIEW_DESC1
        public D3D10SHADER_RESOURCE_VIEW_DESC1(global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1.__Internal*) __Instance) = *((global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC1.__Internal*) _0.__Instance);
        }

        ~D3D10SHADER_RESOURCE_VIEW_DESC1()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D_SRV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D10BUFFER_SRV Buffer
        {
            get
            {
                return global::SpoutDX.D3D10BUFFER_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Buffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Buffer = *(global::SpoutDX.D3D10BUFFER_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX1D_SRV Texture1D
        {
            get
            {
                return global::SpoutDX.D3D10TEX1D_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1D = *(global::SpoutDX.D3D10TEX1D_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX1D_ARRAY_SRV Texture1DArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1DArray = *(global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2D_SRV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D10TEX2D_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D10TEX2D_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2D_ARRAY_SRV Texture2DArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DArray = *(global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2DMS_SRV Texture2DMS
        {
            get
            {
                return global::SpoutDX.D3D10TEX2DMS_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMS));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMS = *(global::SpoutDX.D3D10TEX2DMS_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV Texture2DMSArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMSArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMSArray = *(global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX3D_SRV Texture3D
        {
            get
            {
                return global::SpoutDX.D3D10TEX3D_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture3D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture3D = *(global::SpoutDX.D3D10TEX3D_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEXCUBE_SRV TextureCube
        {
            get
            {
                return global::SpoutDX.D3D10TEXCUBE_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->TextureCube));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->TextureCube = *(global::SpoutDX.D3D10TEXCUBE_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1 TextureCubeArray
        {
            get
            {
                return global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->TextureCubeArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->TextureCubeArray = *(global::SpoutDX.D3D10TEXCUBE_ARRAY_SRV1.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class d3d10_1
    {
        public partial struct __Internal
        {
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0000_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_1_0000_0000V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0000_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0000_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0000_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_1_0000_0000V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0000_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0000_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0001_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_1_0000_0001V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0001_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0001_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0001_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_1_0000_0001V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0001_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0001_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0002_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_1_0000_0002V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0002_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0002_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0002_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_1_0000_0002V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0002_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0002_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0003_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_1_0000_0003V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0003_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0003_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0003_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_1_0000_0003V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0003_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_1_0000_0003_v0_0_s_ifspec;
                *__ptr = value;
            }
        }
    }

    // DEBUG: enum D3D10_RESOURCE_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D10_RESOURCE_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D10_RESOURCE_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D10_RESOURCE_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D10_RESOURCE_DIMENSION_TEXTURE2D	= 3,
    // DEBUG:         D3D10_RESOURCE_DIMENSION_TEXTURE3D	= 4
    // DEBUG:     }
    public enum D3D10RESOURCE_DIMENSION
    {
        D3D10RESOURCE_DIMENSION_UNKNOWN = 0,
        D3D10RESOURCE_DIMENSION_BUFFER = 1,
        D3D10RESOURCE_DIMENSION_TEXTURE1D = 2,
        D3D10RESOURCE_DIMENSION_TEXTURE2D = 3,
        D3D10RESOURCE_DIMENSION_TEXTURE3D = 4
    }

    // DEBUG: enum D3D10_MAP
    // DEBUG:     {
    // DEBUG:         D3D10_MAP_READ	= 1,
    // DEBUG:         D3D10_MAP_WRITE	= 2,
    // DEBUG:         D3D10_MAP_READ_WRITE	= 3,
    // DEBUG:         D3D10_MAP_WRITE_DISCARD	= 4,
    // DEBUG:         D3D10_MAP_WRITE_NO_OVERWRITE	= 5
    // DEBUG:     }
    public enum D3D10MAP
    {
        D3D10MAP_READ = 1,
        D3D10MAP_WRITE = 2,
        D3D10MAP_READ_WRITE = 3,
        D3D10MAP_WRITE_DISCARD = 4,
        D3D10MAP_WRITE_NO_OVERWRITE = 5
    }

    // DEBUG: enum D3D10_USAGE
    // DEBUG:     {
    // DEBUG:         D3D10_USAGE_DEFAULT	= 0,
    // DEBUG:         D3D10_USAGE_IMMUTABLE	= 1,
    // DEBUG:         D3D10_USAGE_DYNAMIC	= 2,
    // DEBUG:         D3D10_USAGE_STAGING	= 3
    // DEBUG:     }
    public enum D3D10USAGE
    {
        D3D10USAGE_DEFAULT = 0,
        D3D10USAGE_IMMUTABLE = 1,
        D3D10USAGE_DYNAMIC = 2,
        D3D10USAGE_STAGING = 3
    }

    // DEBUG: enum D3D10_FILTER
    // DEBUG:     {
    // DEBUG:         D3D10_FILTER_MIN_MAG_MIP_POINT	= 0,
    // DEBUG:         D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR	= 0x1,
    // DEBUG:         D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x4,
    // DEBUG:         D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR	= 0x5,
    // DEBUG:         D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT	= 0x10,
    // DEBUG:         D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x11,
    // DEBUG:         D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT	= 0x14,
    // DEBUG:         D3D10_FILTER_MIN_MAG_MIP_LINEAR	= 0x15,
    // DEBUG:         D3D10_FILTER_ANISOTROPIC	= 0x55,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT	= 0x80,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= 0x81,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x84,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= 0x85,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= 0x90,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x91,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= 0x94,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	= 0x95,
    // DEBUG:         D3D10_FILTER_COMPARISON_ANISOTROPIC	= 0xd5,
    // DEBUG:         D3D10_FILTER_TEXT_1BIT	= 0x80000000
    // DEBUG:     }
    public enum D3D10FILTER
    {
        D3D10FILTER_MIN_MAG_MIP_POINT = 0,
        D3D10FILTER_MIN_MAG_POINT_MIP_LINEAR = 1,
        D3D10FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
        D3D10FILTER_MIN_POINT_MAG_MIP_LINEAR = 5,
        D3D10FILTER_MIN_LINEAR_MAG_MIP_POINT = 16,
        D3D10FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
        D3D10FILTER_MIN_MAG_LINEAR_MIP_POINT = 20,
        D3D10FILTER_MIN_MAG_MIP_LINEAR = 21,
        D3D10FILTER_ANISOTROPIC = 85,
        D3D10FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128,
        D3D10FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129,
        D3D10FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132,
        D3D10FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133,
        D3D10FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144,
        D3D10FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145,
        D3D10FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148,
        D3D10FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149,
        D3D10FILTER_COMPARISON_ANISOTROPIC = 213,
        D3D10FILTER_TEXT_1BIT = -2147483648
    }

    // DEBUG: enum D3D10_TEXTURE_ADDRESS_MODE
    // DEBUG:     {
    // DEBUG:         D3D10_TEXTURE_ADDRESS_WRAP	= 1,
    // DEBUG:         D3D10_TEXTURE_ADDRESS_MIRROR	= 2,
    // DEBUG:         D3D10_TEXTURE_ADDRESS_CLAMP	= 3,
    // DEBUG:         D3D10_TEXTURE_ADDRESS_BORDER	= 4,
    // DEBUG:         D3D10_TEXTURE_ADDRESS_MIRROR_ONCE	= 5
    // DEBUG:     }
    public enum D3D10TEXTURE_ADDRESS_MODE
    {
        D3D10TEXTURE_ADDRESS_WRAP = 1,
        D3D10TEXTURE_ADDRESS_MIRROR = 2,
        D3D10TEXTURE_ADDRESS_CLAMP = 3,
        D3D10TEXTURE_ADDRESS_BORDER = 4,
        D3D10TEXTURE_ADDRESS_MIRROR_ONCE = 5
    }

    // DEBUG: enum D3D10_COMPARISON_FUNC
    // DEBUG:     {
    // DEBUG:         D3D10_COMPARISON_NEVER	= 1,
    // DEBUG:         D3D10_COMPARISON_LESS	= 2,
    // DEBUG:         D3D10_COMPARISON_EQUAL	= 3,
    // DEBUG:         D3D10_COMPARISON_LESS_EQUAL	= 4,
    // DEBUG:         D3D10_COMPARISON_GREATER	= 5,
    // DEBUG:         D3D10_COMPARISON_NOT_EQUAL	= 6,
    // DEBUG:         D3D10_COMPARISON_GREATER_EQUAL	= 7,
    // DEBUG:         D3D10_COMPARISON_ALWAYS	= 8
    // DEBUG:     }
    public enum D3D10COMPARISON_FUNC
    {
        D3D10COMPARISON_NEVER = 1,
        D3D10COMPARISON_LESS = 2,
        D3D10COMPARISON_EQUAL = 3,
        D3D10COMPARISON_LESS_EQUAL = 4,
        D3D10COMPARISON_GREATER = 5,
        D3D10COMPARISON_NOT_EQUAL = 6,
        D3D10COMPARISON_GREATER_EQUAL = 7,
        D3D10COMPARISON_ALWAYS = 8
    }

    // DEBUG: enum D3D10_QUERY
    // DEBUG:     {
    // DEBUG:         D3D10_QUERY_EVENT	= 0,
    // DEBUG:         D3D10_QUERY_OCCLUSION	= ( D3D10_QUERY_EVENT + 1 ) ,
    // DEBUG:         D3D10_QUERY_TIMESTAMP	= ( D3D10_QUERY_OCCLUSION + 1 ) ,
    // DEBUG:         D3D10_QUERY_TIMESTAMP_DISJOINT	= ( D3D10_QUERY_TIMESTAMP + 1 ) ,
    // DEBUG:         D3D10_QUERY_PIPELINE_STATISTICS	= ( D3D10_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
    // DEBUG:         D3D10_QUERY_OCCLUSION_PREDICATE	= ( D3D10_QUERY_PIPELINE_STATISTICS + 1 ) ,
    // DEBUG:         D3D10_QUERY_SO_STATISTICS	= ( D3D10_QUERY_OCCLUSION_PREDICATE + 1 ) ,
    // DEBUG:         D3D10_QUERY_SO_OVERFLOW_PREDICATE	= ( D3D10_QUERY_SO_STATISTICS + 1 ) 
    // DEBUG:     }
    public enum D3D10QUERY
    {
        D3D10QUERY_EVENT = 0,
        D3D10QUERY_OCCLUSION = 1,
        D3D10QUERY_TIMESTAMP = 2,
        D3D10QUERY_TIMESTAMP_DISJOINT = 3,
        D3D10QUERY_PIPELINE_STATISTICS = 4,
        D3D10QUERY_OCCLUSION_PREDICATE = 5,
        D3D10QUERY_SO_STATISTICS = 6,
        D3D10QUERY_SO_OVERFLOW_PREDICATE = 7
    }

    // DEBUG: enum D3D10_RTV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D10_RTV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D10_RTV_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE1DARRAY	= 3,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE2D	= 4,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE2DARRAY	= 5,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE2DMS	= 6,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE3D	= 8
    // DEBUG:     }
    public enum D3D10RTV_DIMENSION
    {
        D3D10RTV_DIMENSION_UNKNOWN = 0,
        D3D10RTV_DIMENSION_BUFFER = 1,
        D3D10RTV_DIMENSION_TEXTURE1D = 2,
        D3D10RTV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D10RTV_DIMENSION_TEXTURE2D = 4,
        D3D10RTV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D10RTV_DIMENSION_TEXTURE2DMS = 6,
        D3D10RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D10RTV_DIMENSION_TEXTURE3D = 8
    }

    // DEBUG: enum D3D10_DSV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D10_DSV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE1D	= 1,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE1DARRAY	= 2,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE2D	= 3,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE2DARRAY	= 4,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE2DMS	= 5,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY	= 6
    // DEBUG:     }
    public enum D3D10DSV_DIMENSION
    {
        D3D10DSV_DIMENSION_UNKNOWN = 0,
        D3D10DSV_DIMENSION_TEXTURE1D = 1,
        D3D10DSV_DIMENSION_TEXTURE1DARRAY = 2,
        D3D10DSV_DIMENSION_TEXTURE2D = 3,
        D3D10DSV_DIMENSION_TEXTURE2DARRAY = 4,
        D3D10DSV_DIMENSION_TEXTURE2DMS = 5,
        D3D10DSV_DIMENSION_TEXTURE2DMSARRAY = 6
    }

    // DEBUG: enum D3D10_DEPTH_WRITE_MASK
    // DEBUG:     {
    // DEBUG:         D3D10_DEPTH_WRITE_MASK_ZERO	= 0,
    // DEBUG:         D3D10_DEPTH_WRITE_MASK_ALL	= 1
    // DEBUG:     }
    public enum D3D10DEPTH_WRITE_MASK
    {
        D3D10DEPTH_WRITE_MASK_ZERO = 0,
        D3D10DEPTH_WRITE_MASK_ALL = 1
    }

    // DEBUG: enum D3D10_STENCIL_OP
    // DEBUG:     {
    // DEBUG:         D3D10_STENCIL_OP_KEEP	= 1,
    // DEBUG:         D3D10_STENCIL_OP_ZERO	= 2,
    // DEBUG:         D3D10_STENCIL_OP_REPLACE	= 3,
    // DEBUG:         D3D10_STENCIL_OP_INCR_SAT	= 4,
    // DEBUG:         D3D10_STENCIL_OP_DECR_SAT	= 5,
    // DEBUG:         D3D10_STENCIL_OP_INVERT	= 6,
    // DEBUG:         D3D10_STENCIL_OP_INCR	= 7,
    // DEBUG:         D3D10_STENCIL_OP_DECR	= 8
    // DEBUG:     }
    public enum D3D10STENCIL_OP
    {
        D3D10STENCIL_OP_KEEP = 1,
        D3D10STENCIL_OP_ZERO = 2,
        D3D10STENCIL_OP_REPLACE = 3,
        D3D10STENCIL_OP_INCR_SAT = 4,
        D3D10STENCIL_OP_DECR_SAT = 5,
        D3D10STENCIL_OP_INVERT = 6,
        D3D10STENCIL_OP_INCR = 7,
        D3D10STENCIL_OP_DECR = 8
    }

    // DEBUG: enum D3D10_FILL_MODE
    // DEBUG:     {
    // DEBUG:         D3D10_FILL_WIREFRAME	= 2,
    // DEBUG:         D3D10_FILL_SOLID	= 3
    // DEBUG:     }
    public enum D3D10FILL_MODE
    {
        D3D10FILL_WIREFRAME = 2,
        D3D10FILL_SOLID = 3
    }

    // DEBUG: enum D3D10_CULL_MODE
    // DEBUG:     {
    // DEBUG:         D3D10_CULL_NONE	= 1,
    // DEBUG:         D3D10_CULL_FRONT	= 2,
    // DEBUG:         D3D10_CULL_BACK	= 3
    // DEBUG:     }
    public enum D3D10CULL_MODE
    {
        D3D10CULL_NONE = 1,
        D3D10CULL_FRONT = 2,
        D3D10CULL_BACK = 3
    }

    // DEBUG: enum D3D10_INPUT_CLASSIFICATION
    // DEBUG:     {
    // DEBUG:         D3D10_INPUT_PER_VERTEX_DATA	= 0,
    // DEBUG:         D3D10_INPUT_PER_INSTANCE_DATA	= 1
    // DEBUG:     }
    public enum D3D10INPUT_CLASSIFICATION
    {
        D3D10INPUT_PER_VERTEX_DATA = 0,
        D3D10INPUT_PER_INSTANCE_DATA = 1
    }

    // DEBUG: enum D3D10_BLEND
    // DEBUG:     {
    // DEBUG:         D3D10_BLEND_ZERO	= 1,
    // DEBUG:         D3D10_BLEND_ONE	= 2,
    // DEBUG:         D3D10_BLEND_SRC_COLOR	= 3,
    // DEBUG:         D3D10_BLEND_INV_SRC_COLOR	= 4,
    // DEBUG:         D3D10_BLEND_SRC_ALPHA	= 5,
    // DEBUG:         D3D10_BLEND_INV_SRC_ALPHA	= 6,
    // DEBUG:         D3D10_BLEND_DEST_ALPHA	= 7,
    // DEBUG:         D3D10_BLEND_INV_DEST_ALPHA	= 8,
    // DEBUG:         D3D10_BLEND_DEST_COLOR	= 9,
    // DEBUG:         D3D10_BLEND_INV_DEST_COLOR	= 10,
    // DEBUG:         D3D10_BLEND_SRC_ALPHA_SAT	= 11,
    // DEBUG:         D3D10_BLEND_BLEND_FACTOR	= 14,
    // DEBUG:         D3D10_BLEND_INV_BLEND_FACTOR	= 15,
    // DEBUG:         D3D10_BLEND_SRC1_COLOR	= 16,
    // DEBUG:         D3D10_BLEND_INV_SRC1_COLOR	= 17,
    // DEBUG:         D3D10_BLEND_SRC1_ALPHA	= 18,
    // DEBUG:         D3D10_BLEND_INV_SRC1_ALPHA	= 19
    // DEBUG:     }
    public enum D3D10BLEND
    {
        D3D10BLEND_ZERO = 1,
        D3D10BLEND_ONE = 2,
        D3D10BLEND_SRC_COLOR = 3,
        D3D10BLEND_INV_SRC_COLOR = 4,
        D3D10BLEND_SRC_ALPHA = 5,
        D3D10BLEND_INV_SRC_ALPHA = 6,
        D3D10BLEND_DEST_ALPHA = 7,
        D3D10BLEND_INV_DEST_ALPHA = 8,
        D3D10BLEND_DEST_COLOR = 9,
        D3D10BLEND_INV_DEST_COLOR = 10,
        D3D10BLEND_SRC_ALPHA_SAT = 11,
        D3D10BLEND_BLEND_FACTOR = 14,
        D3D10BLEND_INV_BLEND_FACTOR = 15,
        D3D10BLEND_SRC1COLOR = 16,
        D3D10BLEND_INV_SRC1COLOR = 17,
        D3D10BLEND_SRC1ALPHA = 18,
        D3D10BLEND_INV_SRC1ALPHA = 19
    }

    // DEBUG: enum D3D10_BLEND_OP
    // DEBUG:     {
    // DEBUG:         D3D10_BLEND_OP_ADD	= 1,
    // DEBUG:         D3D10_BLEND_OP_SUBTRACT	= 2,
    // DEBUG:         D3D10_BLEND_OP_REV_SUBTRACT	= 3,
    // DEBUG:         D3D10_BLEND_OP_MIN	= 4,
    // DEBUG:         D3D10_BLEND_OP_MAX	= 5
    // DEBUG:     }
    public enum D3D10BLEND_OP
    {
        D3D10BLEND_OP_ADD = 1,
        D3D10BLEND_OP_SUBTRACT = 2,
        D3D10BLEND_OP_REV_SUBTRACT = 3,
        D3D10BLEND_OP_MIN = 4,
        D3D10BLEND_OP_MAX = 5
    }

    // DEBUG: enum D3D10_COUNTER
    // DEBUG:     {
    // DEBUG:         D3D10_COUNTER_GPU_IDLE	= 0,
    // DEBUG:         D3D10_COUNTER_VERTEX_PROCESSING	= ( D3D10_COUNTER_GPU_IDLE + 1 ) ,
    // DEBUG:         D3D10_COUNTER_GEOMETRY_PROCESSING	= ( D3D10_COUNTER_VERTEX_PROCESSING + 1 ) ,
    // DEBUG:         D3D10_COUNTER_PIXEL_PROCESSING	= ( D3D10_COUNTER_GEOMETRY_PROCESSING + 1 ) ,
    // DEBUG:         D3D10_COUNTER_OTHER_GPU_PROCESSING	= ( D3D10_COUNTER_PIXEL_PROCESSING + 1 ) ,
    // DEBUG:         D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION	= ( D3D10_COUNTER_OTHER_GPU_PROCESSING + 1 ) ,
    // DEBUG:         D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION	= ( D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION	= ( D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION	= ( D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION	= ( D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_VS_MEMORY_LIMITED	= ( D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_VS_COMPUTATION_LIMITED	= ( D3D10_COUNTER_VS_MEMORY_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_GS_MEMORY_LIMITED	= ( D3D10_COUNTER_VS_COMPUTATION_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_GS_COMPUTATION_LIMITED	= ( D3D10_COUNTER_GS_MEMORY_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_PS_MEMORY_LIMITED	= ( D3D10_COUNTER_GS_COMPUTATION_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_PS_COMPUTATION_LIMITED	= ( D3D10_COUNTER_PS_MEMORY_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE	= ( D3D10_COUNTER_PS_COMPUTATION_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE	= ( D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE + 1 ) ,
    // DEBUG:         D3D10_COUNTER_DEVICE_DEPENDENT_0	= 0x40000000
    // DEBUG:     }
    public enum D3D10COUNTER
    {
        D3D10COUNTER_GPU_IDLE = 0,
        D3D10COUNTER_VERTEX_PROCESSING = 1,
        D3D10COUNTER_GEOMETRY_PROCESSING = 2,
        D3D10COUNTER_PIXEL_PROCESSING = 3,
        D3D10COUNTER_OTHER_GPU_PROCESSING = 4,
        D3D10COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 5,
        D3D10COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 6,
        D3D10COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 7,
        D3D10COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 8,
        D3D10COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 9,
        D3D10COUNTER_VS_MEMORY_LIMITED = 10,
        D3D10COUNTER_VS_COMPUTATION_LIMITED = 11,
        D3D10COUNTER_GS_MEMORY_LIMITED = 12,
        D3D10COUNTER_GS_COMPUTATION_LIMITED = 13,
        D3D10COUNTER_PS_MEMORY_LIMITED = 14,
        D3D10COUNTER_PS_COMPUTATION_LIMITED = 15,
        D3D10COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 16,
        D3D10COUNTER_TEXTURE_CACHE_HIT_RATE = 17,
        D3D10COUNTER_DEVICE_DEPENDENT_0 = 1073741824
    }

    // DEBUG: enum D3D10_COUNTER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D10_COUNTER_TYPE_FLOAT32	= 0,
    // DEBUG:         D3D10_COUNTER_TYPE_UINT16	= ( D3D10_COUNTER_TYPE_FLOAT32 + 1 ) ,
    // DEBUG:         D3D10_COUNTER_TYPE_UINT32	= ( D3D10_COUNTER_TYPE_UINT16 + 1 ) ,
    // DEBUG:         D3D10_COUNTER_TYPE_UINT64	= ( D3D10_COUNTER_TYPE_UINT32 + 1 ) 
    // DEBUG:     }
    public enum D3D10COUNTER_TYPE
    {
        D3D10COUNTER_TYPE_FLOAT32 = 0,
        D3D10COUNTER_TYPE_UINT16 = 1,
        D3D10COUNTER_TYPE_UINT32 = 2,
        D3D10COUNTER_TYPE_UINT64 = 3
    }

    // DEBUG: enum D3D10_BIND_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_BIND_VERTEX_BUFFER	= 0x1L,
    // DEBUG:         D3D10_BIND_INDEX_BUFFER	= 0x2L,
    // DEBUG:         D3D10_BIND_CONSTANT_BUFFER	= 0x4L,
    // DEBUG:         D3D10_BIND_SHADER_RESOURCE	= 0x8L,
    // DEBUG:         D3D10_BIND_STREAM_OUTPUT	= 0x10L,
    // DEBUG:         D3D10_BIND_RENDER_TARGET	= 0x20L,
    // DEBUG:         D3D10_BIND_DEPTH_STENCIL	= 0x40L
    // DEBUG:     }
    [Flags]
    public enum D3D10BIND_FLAG
    {
        D3D10BIND_VERTEX_BUFFER = 1,
        D3D10BIND_INDEX_BUFFER = 2,
        D3D10BIND_CONSTANT_BUFFER = 4,
        D3D10BIND_SHADER_RESOURCE = 8,
        D3D10BIND_STREAM_OUTPUT = 16,
        D3D10BIND_RENDER_TARGET = 32,
        D3D10BIND_DEPTH_STENCIL = 64
    }

    // DEBUG: enum D3D10_CPU_ACCESS_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_CPU_ACCESS_WRITE	= 0x10000L,
    // DEBUG:         D3D10_CPU_ACCESS_READ	= 0x20000L
    // DEBUG:     }
    [Flags]
    public enum D3D10CPU_ACCESS_FLAG
    {
        D3D10CPU_ACCESS_WRITE = 65536,
        D3D10CPU_ACCESS_READ = 131072
    }

    // DEBUG: enum D3D10_RESOURCE_MISC_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_RESOURCE_MISC_GENERATE_MIPS	= 0x1L,
    // DEBUG:         D3D10_RESOURCE_MISC_SHARED	= 0x2L,
    // DEBUG:         D3D10_RESOURCE_MISC_TEXTURECUBE	= 0x4L,
    // DEBUG:         D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX	= 0x10L,
    // DEBUG:         D3D10_RESOURCE_MISC_GDI_COMPATIBLE	= 0x20L
    // DEBUG:     }
    [Flags]
    public enum D3D10RESOURCE_MISC_FLAG
    {
        D3D10RESOURCE_MISC_GENERATE_MIPS = 1,
        D3D10RESOURCE_MISC_SHARED = 2,
        D3D10RESOURCE_MISC_TEXTURECUBE = 4,
        D3D10RESOURCE_MISC_SHARED_KEYEDMUTEX = 16,
        D3D10RESOURCE_MISC_GDI_COMPATIBLE = 32
    }

    // DEBUG: enum D3D10_MAP_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_MAP_FLAG_DO_NOT_WAIT	= 0x100000L
    // DEBUG:     }
    [Flags]
    public enum D3D10MAP_FLAG
    {
        D3D10MAP_FLAG_DO_NOT_WAIT = 1048576
    }

    // DEBUG: enum D3D10_RAISE_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR	= 0x1L
    // DEBUG:     }
    public enum D3D10RAISE_FLAG
    {
        D3D10RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1
    }

    // DEBUG: enum D3D10_CLEAR_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_CLEAR_DEPTH	= 0x1L,
    // DEBUG:         D3D10_CLEAR_STENCIL	= 0x2L
    // DEBUG:     }
    public enum D3D10CLEAR_FLAG
    {
        D3D10CLEAR_DEPTH = 1,
        D3D10CLEAR_STENCIL = 2
    }

    // DEBUG: enum D3D10_COLOR_WRITE_ENABLE
    // DEBUG:     {
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_RED	= 1,
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_GREEN	= 2,
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_BLUE	= 4,
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_ALPHA	= 8,
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_ALL	= ( ( ( D3D10_COLOR_WRITE_ENABLE_RED | D3D10_COLOR_WRITE_ENABLE_GREEN )  | D3D10_COLOR_WRITE_ENABLE_BLUE )  | D3D10_COLOR_WRITE_ENABLE_ALPHA ) 
    // DEBUG:     }
    public enum D3D10COLOR_WRITE_ENABLE
    {
        D3D10COLOR_WRITE_ENABLE_RED = 1,
        D3D10COLOR_WRITE_ENABLE_GREEN = 2,
        D3D10COLOR_WRITE_ENABLE_BLUE = 4,
        D3D10COLOR_WRITE_ENABLE_ALPHA = 8,
        D3D10COLOR_WRITE_ENABLE_ALL = 15
    }

    // DEBUG: enum D3D10_TEXTURECUBE_FACE
    // DEBUG:     {
    // DEBUG:         D3D10_TEXTURECUBE_FACE_POSITIVE_X	= 0,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_NEGATIVE_X	= 1,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_POSITIVE_Y	= 2,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_NEGATIVE_Y	= 3,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_POSITIVE_Z	= 4,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_NEGATIVE_Z	= 5
    // DEBUG:     }
    public enum D3D10TEXTURECUBE_FACE
    {
        D3D10TEXTURECUBE_FACE_POSITIVE_X = 0,
        D3D10TEXTURECUBE_FACE_NEGATIVE_X = 1,
        D3D10TEXTURECUBE_FACE_POSITIVE_Y = 2,
        D3D10TEXTURECUBE_FACE_NEGATIVE_Y = 3,
        D3D10TEXTURECUBE_FACE_POSITIVE_Z = 4,
        D3D10TEXTURECUBE_FACE_NEGATIVE_Z = 5
    }

    // DEBUG: enum D3D10_FILTER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D10_FILTER_TYPE_POINT	= 0,
    // DEBUG:         D3D10_FILTER_TYPE_LINEAR	= 1
    // DEBUG:     }
    public enum D3D10FILTER_TYPE
    {
        D3D10FILTER_TYPE_POINT = 0,
        D3D10FILTER_TYPE_LINEAR = 1
    }

    // DEBUG: enum D3D10_FORMAT_SUPPORT
    // DEBUG:     {
    // DEBUG:         D3D10_FORMAT_SUPPORT_BUFFER	= 0x1,
    // DEBUG:         D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER	= 0x2,
    // DEBUG:         D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER	= 0x4,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SO_BUFFER	= 0x8,
    // DEBUG:         D3D10_FORMAT_SUPPORT_TEXTURE1D	= 0x10,
    // DEBUG:         D3D10_FORMAT_SUPPORT_TEXTURE2D	= 0x20,
    // DEBUG:         D3D10_FORMAT_SUPPORT_TEXTURE3D	= 0x40,
    // DEBUG:         D3D10_FORMAT_SUPPORT_TEXTURECUBE	= 0x80,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_LOAD	= 0x100,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_SAMPLE	= 0x200,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON	= 0x400,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT	= 0x800,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MIP	= 0x1000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MIP_AUTOGEN	= 0x2000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_RENDER_TARGET	= 0x4000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_BLENDABLE	= 0x8000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_DEPTH_STENCIL	= 0x10000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_CPU_LOCKABLE	= 0x20000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE	= 0x40000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_DISPLAY	= 0x80000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT	= 0x100000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET	= 0x200000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD	= 0x400000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_GATHER	= 0x800000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST	= 0x1000000
    // DEBUG:     }
    [Flags]
    public enum D3D10FORMAT_SUPPORT
    {
        D3D10FORMAT_SUPPORT_BUFFER = 1,
        D3D10FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2,
        D3D10FORMAT_SUPPORT_IA_INDEX_BUFFER = 4,
        D3D10FORMAT_SUPPORT_SO_BUFFER = 8,
        D3D10FORMAT_SUPPORT_TEXTURE1D = 16,
        D3D10FORMAT_SUPPORT_TEXTURE2D = 32,
        D3D10FORMAT_SUPPORT_TEXTURE3D = 64,
        D3D10FORMAT_SUPPORT_TEXTURECUBE = 128,
        D3D10FORMAT_SUPPORT_SHADER_LOAD = 256,
        D3D10FORMAT_SUPPORT_SHADER_SAMPLE = 512,
        D3D10FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024,
        D3D10FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048,
        D3D10FORMAT_SUPPORT_MIP = 4096,
        D3D10FORMAT_SUPPORT_MIP_AUTOGEN = 8192,
        D3D10FORMAT_SUPPORT_RENDER_TARGET = 16384,
        D3D10FORMAT_SUPPORT_BLENDABLE = 32768,
        D3D10FORMAT_SUPPORT_DEPTH_STENCIL = 65536,
        D3D10FORMAT_SUPPORT_CPU_LOCKABLE = 131072,
        D3D10FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144,
        D3D10FORMAT_SUPPORT_DISPLAY = 524288,
        D3D10FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576,
        D3D10FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152,
        D3D10FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304,
        D3D10FORMAT_SUPPORT_SHADER_GATHER = 8388608,
        D3D10FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216
    }

    // DEBUG: enum D3D10_ASYNC_GETDATA_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_ASYNC_GETDATA_DONOTFLUSH	= 0x1
    // DEBUG:     }
    public enum D3D10ASYNC_GETDATA_FLAG
    {
        D3D10ASYNC_GETDATA_DONOTFLUSH = 1
    }

    // DEBUG: enum D3D10_QUERY_MISC_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_QUERY_MISC_PREDICATEHINT	= 0x1
    // DEBUG:     }
    public enum D3D10QUERY_MISC_FLAG
    {
        D3D10QUERY_MISC_PREDICATEHINT = 1
    }

    // DEBUG: enum D3D10_CREATE_DEVICE_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_CREATE_DEVICE_SINGLETHREADED	= 0x1,
    // DEBUG:         D3D10_CREATE_DEVICE_DEBUG	= 0x2,
    // DEBUG:         D3D10_CREATE_DEVICE_SWITCH_TO_REF	= 0x4,
    // DEBUG:         D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS	= 0x8,
    // DEBUG:         D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP	= 0x10,
    // DEBUG:         D3D10_CREATE_DEVICE_BGRA_SUPPORT	= 0x20,
    // DEBUG:         D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY	= 0x80,
    // DEBUG:         D3D10_CREATE_DEVICE_STRICT_VALIDATION	= 0x200,
    // DEBUG:         D3D10_CREATE_DEVICE_DEBUGGABLE	= 0x400
    // DEBUG:     }
    [Flags]
    public enum D3D10CREATE_DEVICE_FLAG
    {
        D3D10CREATE_DEVICE_SINGLETHREADED = 1,
        D3D10CREATE_DEVICE_DEBUG = 2,
        D3D10CREATE_DEVICE_SWITCH_TO_REF = 4,
        D3D10CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8,
        D3D10CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 16,
        D3D10CREATE_DEVICE_BGRA_SUPPORT = 32,
        D3D10CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128,
        D3D10CREATE_DEVICE_STRICT_VALIDATION = 512,
        D3D10CREATE_DEVICE_DEBUGGABLE = 1024
    }

    /// <summary>///////////////////////////////////////////////////////////////////////////</summary>
    // DEBUG: enum _D3D10_DEVICE_STATE_TYPES
    // DEBUG: {
    // DEBUG:     
    // DEBUG:     D3D10_DST_SO_BUFFERS=1,             // Single-value state (atomical gets/sets)
    // DEBUG:     D3D10_DST_OM_RENDER_TARGETS,        // Single-value state (atomical gets/sets)
    // DEBUG:     D3D10_DST_OM_DEPTH_STENCIL_STATE,   // Single-value state
    // DEBUG:     D3D10_DST_OM_BLEND_STATE,           // Single-value state
    // DEBUG: 
    // DEBUG:     D3D10_DST_VS,                       // Single-value state
    // DEBUG:     D3D10_DST_VS_SAMPLERS,              // Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
    // DEBUG:     D3D10_DST_VS_SHADER_RESOURCES,      // Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
    // DEBUG:     D3D10_DST_VS_CONSTANT_BUFFERS,      // Count:			
    // DEBUG: 
    // DEBUG:     D3D10_DST_GS,                       // Single-value state
    // DEBUG:     D3D10_DST_GS_SAMPLERS,              // Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
    // DEBUG:     D3D10_DST_GS_SHADER_RESOURCES,      // Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
    // DEBUG:     D3D10_DST_GS_CONSTANT_BUFFERS,      // Count: D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT
    // DEBUG: 
    // DEBUG:     D3D10_DST_PS,                       // Single-value state
    // DEBUG:     D3D10_DST_PS_SAMPLERS,              // Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
    // DEBUG:     D3D10_DST_PS_SHADER_RESOURCES,      // Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
    // DEBUG:     D3D10_DST_PS_CONSTANT_BUFFERS,      // Count: D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT
    // DEBUG:     
    // DEBUG:     D3D10_DST_IA_VERTEX_BUFFERS,        // Count: D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT
    // DEBUG:     D3D10_DST_IA_INDEX_BUFFER,          // Single-value state
    // DEBUG:     D3D10_DST_IA_INPUT_LAYOUT,          // Single-value state
    // DEBUG:     D3D10_DST_IA_PRIMITIVE_TOPOLOGY,    // Single-value state
    // DEBUG: 
    // DEBUG:     D3D10_DST_RS_VIEWPORTS,             // Single-value state (atomical gets/sets)
    // DEBUG:     D3D10_DST_RS_SCISSOR_RECTS,         // Single-value state (atomical gets/sets)
    // DEBUG:     D3D10_DST_RS_RASTERIZER_STATE,      // Single-value state
    // DEBUG: 
    // DEBUG:     D3D10_DST_PREDICATION,              // Single-value state
    // DEBUG: }
    public enum D3D10DEVICE_STATE_TYPES
    {
        D3D10DST_SO_BUFFERS = 1,
        D3D10DST_OM_RENDER_TARGETS = 2,
        D3D10DST_OM_DEPTH_STENCIL_STATE = 3,
        D3D10DST_OM_BLEND_STATE = 4,
        D3D10DST_VS = 5,
        D3D10DST_VS_SAMPLERS = 6,
        D3D10DST_VS_SHADER_RESOURCES = 7,
        D3D10DST_VS_CONSTANT_BUFFERS = 8,
        D3D10DST_GS = 9,
        D3D10DST_GS_SAMPLERS = 10,
        D3D10DST_GS_SHADER_RESOURCES = 11,
        D3D10DST_GS_CONSTANT_BUFFERS = 12,
        D3D10DST_PS = 13,
        D3D10DST_PS_SAMPLERS = 14,
        D3D10DST_PS_SHADER_RESOURCES = 15,
        D3D10DST_PS_CONSTANT_BUFFERS = 16,
        D3D10DST_IA_VERTEX_BUFFERS = 17,
        D3D10DST_IA_INDEX_BUFFER = 18,
        D3D10DST_IA_INPUT_LAYOUT = 19,
        D3D10DST_IA_PRIMITIVE_TOPOLOGY = 20,
        D3D10DST_RS_VIEWPORTS = 21,
        D3D10DST_RS_SCISSOR_RECTS = 22,
        D3D10DST_RS_RASTERIZER_STATE = 23,
        D3D10DST_PREDICATION = 24
    }

    // DEBUG: typedef 
    // DEBUG: enum D3D10_RESOURCE_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D10_RESOURCE_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D10_RESOURCE_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D10_RESOURCE_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D10_RESOURCE_DIMENSION_TEXTURE2D	= 3,
    // DEBUG:         D3D10_RESOURCE_DIMENSION_TEXTURE3D	= 4
    // DEBUG:     } 	D3D10_RESOURCE_DIMENSION
    // DEBUG: typedef 
    // DEBUG: enum D3D10_MAP
    // DEBUG:     {
    // DEBUG:         D3D10_MAP_READ	= 1,
    // DEBUG:         D3D10_MAP_WRITE	= 2,
    // DEBUG:         D3D10_MAP_READ_WRITE	= 3,
    // DEBUG:         D3D10_MAP_WRITE_DISCARD	= 4,
    // DEBUG:         D3D10_MAP_WRITE_NO_OVERWRITE	= 5
    // DEBUG:     } 	D3D10_MAP
    // DEBUG: typedef 
    // DEBUG: enum D3D10_USAGE
    // DEBUG:     {
    // DEBUG:         D3D10_USAGE_DEFAULT	= 0,
    // DEBUG:         D3D10_USAGE_IMMUTABLE	= 1,
    // DEBUG:         D3D10_USAGE_DYNAMIC	= 2,
    // DEBUG:         D3D10_USAGE_STAGING	= 3
    // DEBUG:     } 	D3D10_USAGE
    // DEBUG: typedef struct D3D10_BUFFER_DESC
    // DEBUG:     {
    // DEBUG:     UINT ByteWidth;
    // DEBUG:     D3D10_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D10_BUFFER_DESC
    // DEBUG: typedef D3D_SRV_DIMENSION D3D10_SRV_DIMENSION
    // DEBUG: typedef struct D3D10_BUFFER_SRV
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT FirstElement;
    // DEBUG:         UINT ElementOffset;
    // DEBUG:         } 	;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT NumElements;
    // DEBUG:         UINT ElementWidth;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D10_BUFFER_SRV
    // DEBUG: typedef struct D3D10_TEX1D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     } 	D3D10_TEX1D_SRV
    // DEBUG: typedef struct D3D10_TEX1D_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D10_TEX1D_ARRAY_SRV
    // DEBUG: typedef struct D3D10_TEX2D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     } 	D3D10_TEX2D_SRV
    // DEBUG: typedef struct D3D10_TEX2D_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D10_TEX2D_ARRAY_SRV
    // DEBUG: typedef struct D3D10_TEX2DMS_SRV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     } 	D3D10_TEX2DMS_SRV
    // DEBUG: typedef struct D3D10_TEX2DMS_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D10_TEX2DMS_ARRAY_SRV
    // DEBUG: typedef struct D3D10_TEX3D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     } 	D3D10_TEX3D_SRV
    // DEBUG: typedef struct D3D10_TEXCUBE_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     } 	D3D10_TEXCUBE_SRV
    // DEBUG: typedef struct D3D10_SHADER_RESOURCE_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_SRV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D10_BUFFER_SRV Buffer;
    // DEBUG:         D3D10_TEX1D_SRV Texture1D;
    // DEBUG:         D3D10_TEX1D_ARRAY_SRV Texture1DArray;
    // DEBUG:         D3D10_TEX2D_SRV Texture2D;
    // DEBUG:         D3D10_TEX2D_ARRAY_SRV Texture2DArray;
    // DEBUG:         D3D10_TEX2DMS_SRV Texture2DMS;
    // DEBUG:         D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    // DEBUG:         D3D10_TEX3D_SRV Texture3D;
    // DEBUG:         D3D10_TEXCUBE_SRV TextureCube;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D10_SHADER_RESOURCE_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D10_FILTER
    // DEBUG:     {
    // DEBUG:         D3D10_FILTER_MIN_MAG_MIP_POINT	= 0,
    // DEBUG:         D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR	= 0x1,
    // DEBUG:         D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x4,
    // DEBUG:         D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR	= 0x5,
    // DEBUG:         D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT	= 0x10,
    // DEBUG:         D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x11,
    // DEBUG:         D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT	= 0x14,
    // DEBUG:         D3D10_FILTER_MIN_MAG_MIP_LINEAR	= 0x15,
    // DEBUG:         D3D10_FILTER_ANISOTROPIC	= 0x55,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT	= 0x80,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= 0x81,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x84,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= 0x85,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= 0x90,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x91,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= 0x94,
    // DEBUG:         D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	= 0x95,
    // DEBUG:         D3D10_FILTER_COMPARISON_ANISOTROPIC	= 0xd5,
    // DEBUG:         D3D10_FILTER_TEXT_1BIT	= 0x80000000
    // DEBUG:     } 	D3D10_FILTER
    // DEBUG: typedef 
    // DEBUG: enum D3D10_TEXTURE_ADDRESS_MODE
    // DEBUG:     {
    // DEBUG:         D3D10_TEXTURE_ADDRESS_WRAP	= 1,
    // DEBUG:         D3D10_TEXTURE_ADDRESS_MIRROR	= 2,
    // DEBUG:         D3D10_TEXTURE_ADDRESS_CLAMP	= 3,
    // DEBUG:         D3D10_TEXTURE_ADDRESS_BORDER	= 4,
    // DEBUG:         D3D10_TEXTURE_ADDRESS_MIRROR_ONCE	= 5
    // DEBUG:     } 	D3D10_TEXTURE_ADDRESS_MODE
    // DEBUG: typedef 
    // DEBUG: enum D3D10_COMPARISON_FUNC
    // DEBUG:     {
    // DEBUG:         D3D10_COMPARISON_NEVER	= 1,
    // DEBUG:         D3D10_COMPARISON_LESS	= 2,
    // DEBUG:         D3D10_COMPARISON_EQUAL	= 3,
    // DEBUG:         D3D10_COMPARISON_LESS_EQUAL	= 4,
    // DEBUG:         D3D10_COMPARISON_GREATER	= 5,
    // DEBUG:         D3D10_COMPARISON_NOT_EQUAL	= 6,
    // DEBUG:         D3D10_COMPARISON_GREATER_EQUAL	= 7,
    // DEBUG:         D3D10_COMPARISON_ALWAYS	= 8
    // DEBUG:     } 	D3D10_COMPARISON_FUNC
    // DEBUG: typedef struct D3D10_SAMPLER_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_FILTER Filter;
    // DEBUG:     D3D10_TEXTURE_ADDRESS_MODE AddressU;
    // DEBUG:     D3D10_TEXTURE_ADDRESS_MODE AddressV;
    // DEBUG:     D3D10_TEXTURE_ADDRESS_MODE AddressW;
    // DEBUG:     FLOAT MipLODBias;
    // DEBUG:     UINT MaxAnisotropy;
    // DEBUG:     D3D10_COMPARISON_FUNC ComparisonFunc;
    // DEBUG:     FLOAT BorderColor[ 4 ];
    // DEBUG:     FLOAT MinLOD;
    // DEBUG:     FLOAT MaxLOD;
    // DEBUG:     } 	D3D10_SAMPLER_DESC
    // DEBUG: typedef D3D_PRIMITIVE_TOPOLOGY D3D10_PRIMITIVE_TOPOLOGY
    // DEBUG: typedef 
    // DEBUG: enum D3D10_QUERY
    // DEBUG:     {
    // DEBUG:         D3D10_QUERY_EVENT	= 0,
    // DEBUG:         D3D10_QUERY_OCCLUSION	= ( D3D10_QUERY_EVENT + 1 ) ,
    // DEBUG:         D3D10_QUERY_TIMESTAMP	= ( D3D10_QUERY_OCCLUSION + 1 ) ,
    // DEBUG:         D3D10_QUERY_TIMESTAMP_DISJOINT	= ( D3D10_QUERY_TIMESTAMP + 1 ) ,
    // DEBUG:         D3D10_QUERY_PIPELINE_STATISTICS	= ( D3D10_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
    // DEBUG:         D3D10_QUERY_OCCLUSION_PREDICATE	= ( D3D10_QUERY_PIPELINE_STATISTICS + 1 ) ,
    // DEBUG:         D3D10_QUERY_SO_STATISTICS	= ( D3D10_QUERY_OCCLUSION_PREDICATE + 1 ) ,
    // DEBUG:         D3D10_QUERY_SO_OVERFLOW_PREDICATE	= ( D3D10_QUERY_SO_STATISTICS + 1 ) 
    // DEBUG:     } 	D3D10_QUERY
    // DEBUG: typedef struct D3D10_QUERY_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_QUERY Query;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D10_QUERY_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D10_RTV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D10_RTV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D10_RTV_DIMENSION_BUFFER	= 1,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE1D	= 2,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE1DARRAY	= 3,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE2D	= 4,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE2DARRAY	= 5,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE2DMS	= 6,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    // DEBUG:         D3D10_RTV_DIMENSION_TEXTURE3D	= 8
    // DEBUG:     } 	D3D10_RTV_DIMENSION
    // DEBUG: typedef struct D3D10_BUFFER_RTV
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT FirstElement;
    // DEBUG:         UINT ElementOffset;
    // DEBUG:         } 	;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT NumElements;
    // DEBUG:         UINT ElementWidth;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D10_BUFFER_RTV
    // DEBUG: typedef struct D3D10_TEX1D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D10_TEX1D_RTV
    // DEBUG: typedef struct D3D10_TEX1D_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D10_TEX1D_ARRAY_RTV
    // DEBUG: typedef struct D3D10_TEX2D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D10_TEX2D_RTV
    // DEBUG: typedef struct D3D10_TEX2D_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D10_TEX2D_ARRAY_RTV
    // DEBUG: typedef struct D3D10_TEX2DMS_RTV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     } 	D3D10_TEX2DMS_RTV
    // DEBUG: typedef struct D3D10_TEX2DMS_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D10_TEX2DMS_ARRAY_RTV
    // DEBUG: typedef struct D3D10_TEX3D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstWSlice;
    // DEBUG:     UINT WSize;
    // DEBUG:     } 	D3D10_TEX3D_RTV
    // DEBUG: typedef struct D3D10_RENDER_TARGET_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_RTV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D10_BUFFER_RTV Buffer;
    // DEBUG:         D3D10_TEX1D_RTV Texture1D;
    // DEBUG:         D3D10_TEX1D_ARRAY_RTV Texture1DArray;
    // DEBUG:         D3D10_TEX2D_RTV Texture2D;
    // DEBUG:         D3D10_TEX2D_ARRAY_RTV Texture2DArray;
    // DEBUG:         D3D10_TEX2DMS_RTV Texture2DMS;
    // DEBUG:         D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
    // DEBUG:         D3D10_TEX3D_RTV Texture3D;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D10_RENDER_TARGET_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D10_DSV_DIMENSION
    // DEBUG:     {
    // DEBUG:         D3D10_DSV_DIMENSION_UNKNOWN	= 0,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE1D	= 1,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE1DARRAY	= 2,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE2D	= 3,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE2DARRAY	= 4,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE2DMS	= 5,
    // DEBUG:         D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY	= 6
    // DEBUG:     } 	D3D10_DSV_DIMENSION
    // DEBUG: typedef struct D3D10_TEX1D_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D10_TEX1D_DSV
    // DEBUG: typedef struct D3D10_TEX1D_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D10_TEX1D_ARRAY_DSV
    // DEBUG: typedef struct D3D10_TEX2D_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     } 	D3D10_TEX2D_DSV
    // DEBUG: typedef struct D3D10_TEX2D_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D10_TEX2D_ARRAY_DSV
    // DEBUG: typedef struct D3D10_TEX2DMS_DSV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     } 	D3D10_TEX2DMS_DSV
    // DEBUG: typedef struct D3D10_TEX2DMS_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     } 	D3D10_TEX2DMS_ARRAY_DSV
    // DEBUG: typedef struct D3D10_DEPTH_STENCIL_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_DSV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D10_TEX1D_DSV Texture1D;
    // DEBUG:         D3D10_TEX1D_ARRAY_DSV Texture1DArray;
    // DEBUG:         D3D10_TEX2D_DSV Texture2D;
    // DEBUG:         D3D10_TEX2D_ARRAY_DSV Texture2DArray;
    // DEBUG:         D3D10_TEX2DMS_DSV Texture2DMS;
    // DEBUG:         D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    // DEBUG:         } 	;
    // DEBUG:     } 	D3D10_DEPTH_STENCIL_VIEW_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D10_DEPTH_WRITE_MASK
    // DEBUG:     {
    // DEBUG:         D3D10_DEPTH_WRITE_MASK_ZERO	= 0,
    // DEBUG:         D3D10_DEPTH_WRITE_MASK_ALL	= 1
    // DEBUG:     } 	D3D10_DEPTH_WRITE_MASK
    // DEBUG: typedef 
    // DEBUG: enum D3D10_STENCIL_OP
    // DEBUG:     {
    // DEBUG:         D3D10_STENCIL_OP_KEEP	= 1,
    // DEBUG:         D3D10_STENCIL_OP_ZERO	= 2,
    // DEBUG:         D3D10_STENCIL_OP_REPLACE	= 3,
    // DEBUG:         D3D10_STENCIL_OP_INCR_SAT	= 4,
    // DEBUG:         D3D10_STENCIL_OP_DECR_SAT	= 5,
    // DEBUG:         D3D10_STENCIL_OP_INVERT	= 6,
    // DEBUG:         D3D10_STENCIL_OP_INCR	= 7,
    // DEBUG:         D3D10_STENCIL_OP_DECR	= 8
    // DEBUG:     } 	D3D10_STENCIL_OP
    // DEBUG: typedef struct D3D10_DEPTH_STENCILOP_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_STENCIL_OP StencilFailOp;
    // DEBUG:     D3D10_STENCIL_OP StencilDepthFailOp;
    // DEBUG:     D3D10_STENCIL_OP StencilPassOp;
    // DEBUG:     D3D10_COMPARISON_FUNC StencilFunc;
    // DEBUG:     } 	D3D10_DEPTH_STENCILOP_DESC
    // DEBUG: typedef struct D3D10_DEPTH_STENCIL_DESC
    // DEBUG:     {
    // DEBUG:     BOOL DepthEnable;
    // DEBUG:     D3D10_DEPTH_WRITE_MASK DepthWriteMask;
    // DEBUG:     D3D10_COMPARISON_FUNC DepthFunc;
    // DEBUG:     BOOL StencilEnable;
    // DEBUG:     UINT8 StencilReadMask;
    // DEBUG:     UINT8 StencilWriteMask;
    // DEBUG:     D3D10_DEPTH_STENCILOP_DESC FrontFace;
    // DEBUG:     D3D10_DEPTH_STENCILOP_DESC BackFace;
    // DEBUG:     } 	D3D10_DEPTH_STENCIL_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D10_FILL_MODE
    // DEBUG:     {
    // DEBUG:         D3D10_FILL_WIREFRAME	= 2,
    // DEBUG:         D3D10_FILL_SOLID	= 3
    // DEBUG:     } 	D3D10_FILL_MODE
    // DEBUG: typedef 
    // DEBUG: enum D3D10_CULL_MODE
    // DEBUG:     {
    // DEBUG:         D3D10_CULL_NONE	= 1,
    // DEBUG:         D3D10_CULL_FRONT	= 2,
    // DEBUG:         D3D10_CULL_BACK	= 3
    // DEBUG:     } 	D3D10_CULL_MODE
    // DEBUG: typedef struct D3D10_RASTERIZER_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_FILL_MODE FillMode;
    // DEBUG:     D3D10_CULL_MODE CullMode;
    // DEBUG:     BOOL FrontCounterClockwise;
    // DEBUG:     INT DepthBias;
    // DEBUG:     FLOAT DepthBiasClamp;
    // DEBUG:     FLOAT SlopeScaledDepthBias;
    // DEBUG:     BOOL DepthClipEnable;
    // DEBUG:     BOOL ScissorEnable;
    // DEBUG:     BOOL MultisampleEnable;
    // DEBUG:     BOOL AntialiasedLineEnable;
    // DEBUG:     } 	D3D10_RASTERIZER_DESC
    // DEBUG: typedef struct D3D10_VIEWPORT
    // DEBUG:     {
    // DEBUG:     INT TopLeftX;
    // DEBUG:     INT TopLeftY;
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     FLOAT MinDepth;
    // DEBUG:     FLOAT MaxDepth;
    // DEBUG:     } 	D3D10_VIEWPORT
    // DEBUG: typedef struct D3D10_BOX
    // DEBUG:     {
    // DEBUG:     UINT left;
    // DEBUG:     UINT top;
    // DEBUG:     UINT front;
    // DEBUG:     UINT right;
    // DEBUG:     UINT bottom;
    // DEBUG:     UINT back;
    // DEBUG:     } 	D3D10_BOX
    // DEBUG: typedef struct D3D10_SUBRESOURCE_DATA
    // DEBUG:     {
    // DEBUG:     const void *pSysMem;
    // DEBUG:     UINT SysMemPitch;
    // DEBUG:     UINT SysMemSlicePitch;
    // DEBUG:     } 	D3D10_SUBRESOURCE_DATA
    // DEBUG: typedef struct D3D10_TEXTURE1D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D10_TEXTURE1D_DESC
    // DEBUG: typedef struct D3D10_TEXTURE2D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     DXGI_SAMPLE_DESC SampleDesc;
    // DEBUG:     D3D10_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D10_TEXTURE2D_DESC
    // DEBUG: typedef struct D3D10_MAPPED_TEXTURE2D
    // DEBUG:     {
    // DEBUG:     void *pData;
    // DEBUG:     UINT RowPitch;
    // DEBUG:     } 	D3D10_MAPPED_TEXTURE2D
    // DEBUG: typedef struct D3D10_TEXTURE3D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT Depth;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D10_TEXTURE3D_DESC
    // DEBUG: typedef struct D3D10_MAPPED_TEXTURE3D
    // DEBUG:     {
    // DEBUG:     void *pData;
    // DEBUG:     UINT RowPitch;
    // DEBUG:     UINT DepthPitch;
    // DEBUG:     } 	D3D10_MAPPED_TEXTURE3D
    // DEBUG: typedef 
    // DEBUG: enum D3D10_INPUT_CLASSIFICATION
    // DEBUG:     {
    // DEBUG:         D3D10_INPUT_PER_VERTEX_DATA	= 0,
    // DEBUG:         D3D10_INPUT_PER_INSTANCE_DATA	= 1
    // DEBUG:     } 	D3D10_INPUT_CLASSIFICATION
    // DEBUG: typedef struct D3D10_INPUT_ELEMENT_DESC
    // DEBUG:     {
    // DEBUG:     LPCSTR SemanticName;
    // DEBUG:     UINT SemanticIndex;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     UINT InputSlot;
    // DEBUG:     UINT AlignedByteOffset;
    // DEBUG:     D3D10_INPUT_CLASSIFICATION InputSlotClass;
    // DEBUG:     UINT InstanceDataStepRate;
    // DEBUG:     } 	D3D10_INPUT_ELEMENT_DESC
    // DEBUG: typedef struct D3D10_SO_DECLARATION_ENTRY
    // DEBUG:     {
    // DEBUG:     LPCSTR SemanticName;
    // DEBUG:     UINT SemanticIndex;
    // DEBUG:     BYTE StartComponent;
    // DEBUG:     BYTE ComponentCount;
    // DEBUG:     BYTE OutputSlot;
    // DEBUG:     } 	D3D10_SO_DECLARATION_ENTRY
    // DEBUG: typedef 
    // DEBUG: enum D3D10_BLEND
    // DEBUG:     {
    // DEBUG:         D3D10_BLEND_ZERO	= 1,
    // DEBUG:         D3D10_BLEND_ONE	= 2,
    // DEBUG:         D3D10_BLEND_SRC_COLOR	= 3,
    // DEBUG:         D3D10_BLEND_INV_SRC_COLOR	= 4,
    // DEBUG:         D3D10_BLEND_SRC_ALPHA	= 5,
    // DEBUG:         D3D10_BLEND_INV_SRC_ALPHA	= 6,
    // DEBUG:         D3D10_BLEND_DEST_ALPHA	= 7,
    // DEBUG:         D3D10_BLEND_INV_DEST_ALPHA	= 8,
    // DEBUG:         D3D10_BLEND_DEST_COLOR	= 9,
    // DEBUG:         D3D10_BLEND_INV_DEST_COLOR	= 10,
    // DEBUG:         D3D10_BLEND_SRC_ALPHA_SAT	= 11,
    // DEBUG:         D3D10_BLEND_BLEND_FACTOR	= 14,
    // DEBUG:         D3D10_BLEND_INV_BLEND_FACTOR	= 15,
    // DEBUG:         D3D10_BLEND_SRC1_COLOR	= 16,
    // DEBUG:         D3D10_BLEND_INV_SRC1_COLOR	= 17,
    // DEBUG:         D3D10_BLEND_SRC1_ALPHA	= 18,
    // DEBUG:         D3D10_BLEND_INV_SRC1_ALPHA	= 19
    // DEBUG:     } 	D3D10_BLEND
    // DEBUG: typedef 
    // DEBUG: enum D3D10_BLEND_OP
    // DEBUG:     {
    // DEBUG:         D3D10_BLEND_OP_ADD	= 1,
    // DEBUG:         D3D10_BLEND_OP_SUBTRACT	= 2,
    // DEBUG:         D3D10_BLEND_OP_REV_SUBTRACT	= 3,
    // DEBUG:         D3D10_BLEND_OP_MIN	= 4,
    // DEBUG:         D3D10_BLEND_OP_MAX	= 5
    // DEBUG:     } 	D3D10_BLEND_OP
    // DEBUG: typedef struct D3D10_BLEND_DESC
    // DEBUG:     {
    // DEBUG:     BOOL AlphaToCoverageEnable;
    // DEBUG:     BOOL BlendEnable[ 8 ];
    // DEBUG:     D3D10_BLEND SrcBlend;
    // DEBUG:     D3D10_BLEND DestBlend;
    // DEBUG:     D3D10_BLEND_OP BlendOp;
    // DEBUG:     D3D10_BLEND SrcBlendAlpha;
    // DEBUG:     D3D10_BLEND DestBlendAlpha;
    // DEBUG:     D3D10_BLEND_OP BlendOpAlpha;
    // DEBUG:     UINT8 RenderTargetWriteMask[ 8 ];
    // DEBUG:     } 	D3D10_BLEND_DESC
    // DEBUG: typedef 
    // DEBUG: enum D3D10_COUNTER
    // DEBUG:     {
    // DEBUG:         D3D10_COUNTER_GPU_IDLE	= 0,
    // DEBUG:         D3D10_COUNTER_VERTEX_PROCESSING	= ( D3D10_COUNTER_GPU_IDLE + 1 ) ,
    // DEBUG:         D3D10_COUNTER_GEOMETRY_PROCESSING	= ( D3D10_COUNTER_VERTEX_PROCESSING + 1 ) ,
    // DEBUG:         D3D10_COUNTER_PIXEL_PROCESSING	= ( D3D10_COUNTER_GEOMETRY_PROCESSING + 1 ) ,
    // DEBUG:         D3D10_COUNTER_OTHER_GPU_PROCESSING	= ( D3D10_COUNTER_PIXEL_PROCESSING + 1 ) ,
    // DEBUG:         D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION	= ( D3D10_COUNTER_OTHER_GPU_PROCESSING + 1 ) ,
    // DEBUG:         D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION	= ( D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION	= ( D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION	= ( D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION	= ( D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_VS_MEMORY_LIMITED	= ( D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION + 1 ) ,
    // DEBUG:         D3D10_COUNTER_VS_COMPUTATION_LIMITED	= ( D3D10_COUNTER_VS_MEMORY_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_GS_MEMORY_LIMITED	= ( D3D10_COUNTER_VS_COMPUTATION_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_GS_COMPUTATION_LIMITED	= ( D3D10_COUNTER_GS_MEMORY_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_PS_MEMORY_LIMITED	= ( D3D10_COUNTER_GS_COMPUTATION_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_PS_COMPUTATION_LIMITED	= ( D3D10_COUNTER_PS_MEMORY_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE	= ( D3D10_COUNTER_PS_COMPUTATION_LIMITED + 1 ) ,
    // DEBUG:         D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE	= ( D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE + 1 ) ,
    // DEBUG:         D3D10_COUNTER_DEVICE_DEPENDENT_0	= 0x40000000
    // DEBUG:     } 	D3D10_COUNTER
    // DEBUG: typedef struct D3D10_COUNTER_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_COUNTER Counter;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     } 	D3D10_COUNTER_DESC
    // DEBUG: typedef struct D3D10_COUNTER_INFO
    // DEBUG:     {
    // DEBUG:     D3D10_COUNTER LastDeviceDependentCounter;
    // DEBUG:     UINT NumSimultaneousCounters;
    // DEBUG:     UINT8 NumDetectableParallelUnits;
    // DEBUG:     } 	D3D10_COUNTER_INFO
    // DEBUG: typedef 
    // DEBUG: enum D3D10_COUNTER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D10_COUNTER_TYPE_FLOAT32	= 0,
    // DEBUG:         D3D10_COUNTER_TYPE_UINT16	= ( D3D10_COUNTER_TYPE_FLOAT32 + 1 ) ,
    // DEBUG:         D3D10_COUNTER_TYPE_UINT32	= ( D3D10_COUNTER_TYPE_UINT16 + 1 ) ,
    // DEBUG:         D3D10_COUNTER_TYPE_UINT64	= ( D3D10_COUNTER_TYPE_UINT32 + 1 ) 
    // DEBUG:     } 	D3D10_COUNTER_TYPE
    // DEBUG: typedef D3D_PRIMITIVE D3D10_PRIMITIVE
    // DEBUG: typedef 
    // DEBUG: enum D3D10_BIND_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_BIND_VERTEX_BUFFER	= 0x1L,
    // DEBUG:         D3D10_BIND_INDEX_BUFFER	= 0x2L,
    // DEBUG:         D3D10_BIND_CONSTANT_BUFFER	= 0x4L,
    // DEBUG:         D3D10_BIND_SHADER_RESOURCE	= 0x8L,
    // DEBUG:         D3D10_BIND_STREAM_OUTPUT	= 0x10L,
    // DEBUG:         D3D10_BIND_RENDER_TARGET	= 0x20L,
    // DEBUG:         D3D10_BIND_DEPTH_STENCIL	= 0x40L
    // DEBUG:     } 	D3D10_BIND_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D10_CPU_ACCESS_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_CPU_ACCESS_WRITE	= 0x10000L,
    // DEBUG:         D3D10_CPU_ACCESS_READ	= 0x20000L
    // DEBUG:     } 	D3D10_CPU_ACCESS_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D10_RESOURCE_MISC_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_RESOURCE_MISC_GENERATE_MIPS	= 0x1L,
    // DEBUG:         D3D10_RESOURCE_MISC_SHARED	= 0x2L,
    // DEBUG:         D3D10_RESOURCE_MISC_TEXTURECUBE	= 0x4L,
    // DEBUG:         D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX	= 0x10L,
    // DEBUG:         D3D10_RESOURCE_MISC_GDI_COMPATIBLE	= 0x20L
    // DEBUG:     } 	D3D10_RESOURCE_MISC_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D10_MAP_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_MAP_FLAG_DO_NOT_WAIT	= 0x100000L
    // DEBUG:     } 	D3D10_MAP_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D10_RAISE_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR	= 0x1L
    // DEBUG:     } 	D3D10_RAISE_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D10_CLEAR_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_CLEAR_DEPTH	= 0x1L,
    // DEBUG:         D3D10_CLEAR_STENCIL	= 0x2L
    // DEBUG:     } 	D3D10_CLEAR_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D10_COLOR_WRITE_ENABLE
    // DEBUG:     {
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_RED	= 1,
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_GREEN	= 2,
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_BLUE	= 4,
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_ALPHA	= 8,
    // DEBUG:         D3D10_COLOR_WRITE_ENABLE_ALL	= ( ( ( D3D10_COLOR_WRITE_ENABLE_RED | D3D10_COLOR_WRITE_ENABLE_GREEN )  | D3D10_COLOR_WRITE_ENABLE_BLUE )  | D3D10_COLOR_WRITE_ENABLE_ALPHA ) 
    // DEBUG:     } 	D3D10_COLOR_WRITE_ENABLE
    // DEBUG: typedef 
    // DEBUG: enum D3D10_TEXTURECUBE_FACE
    // DEBUG:     {
    // DEBUG:         D3D10_TEXTURECUBE_FACE_POSITIVE_X	= 0,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_NEGATIVE_X	= 1,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_POSITIVE_Y	= 2,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_NEGATIVE_Y	= 3,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_POSITIVE_Z	= 4,
    // DEBUG:         D3D10_TEXTURECUBE_FACE_NEGATIVE_Z	= 5
    // DEBUG:     } 	D3D10_TEXTURECUBE_FACE
    // DEBUG: typedef 
    // DEBUG: enum D3D10_FILTER_TYPE
    // DEBUG:     {
    // DEBUG:         D3D10_FILTER_TYPE_POINT	= 0,
    // DEBUG:         D3D10_FILTER_TYPE_LINEAR	= 1
    // DEBUG:     } 	D3D10_FILTER_TYPE
    // DEBUG: typedef 
    // DEBUG: enum D3D10_FORMAT_SUPPORT
    // DEBUG:     {
    // DEBUG:         D3D10_FORMAT_SUPPORT_BUFFER	= 0x1,
    // DEBUG:         D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER	= 0x2,
    // DEBUG:         D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER	= 0x4,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SO_BUFFER	= 0x8,
    // DEBUG:         D3D10_FORMAT_SUPPORT_TEXTURE1D	= 0x10,
    // DEBUG:         D3D10_FORMAT_SUPPORT_TEXTURE2D	= 0x20,
    // DEBUG:         D3D10_FORMAT_SUPPORT_TEXTURE3D	= 0x40,
    // DEBUG:         D3D10_FORMAT_SUPPORT_TEXTURECUBE	= 0x80,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_LOAD	= 0x100,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_SAMPLE	= 0x200,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON	= 0x400,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT	= 0x800,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MIP	= 0x1000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MIP_AUTOGEN	= 0x2000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_RENDER_TARGET	= 0x4000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_BLENDABLE	= 0x8000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_DEPTH_STENCIL	= 0x10000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_CPU_LOCKABLE	= 0x20000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE	= 0x40000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_DISPLAY	= 0x80000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT	= 0x100000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET	= 0x200000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD	= 0x400000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_SHADER_GATHER	= 0x800000,
    // DEBUG:         D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST	= 0x1000000
    // DEBUG:     } 	D3D10_FORMAT_SUPPORT
    // DEBUG: typedef 
    // DEBUG: enum D3D10_ASYNC_GETDATA_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_ASYNC_GETDATA_DONOTFLUSH	= 0x1
    // DEBUG:     } 	D3D10_ASYNC_GETDATA_FLAG
    // DEBUG: typedef 
    // DEBUG: enum D3D10_QUERY_MISC_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_QUERY_MISC_PREDICATEHINT	= 0x1
    // DEBUG:     } 	D3D10_QUERY_MISC_FLAG
    // DEBUG: typedef struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
    // DEBUG:     {
    // DEBUG:     UINT64 Frequency;
    // DEBUG:     BOOL Disjoint;
    // DEBUG:     } 	D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
    // DEBUG: typedef struct D3D10_QUERY_DATA_PIPELINE_STATISTICS
    // DEBUG:     {
    // DEBUG:     UINT64 IAVertices;
    // DEBUG:     UINT64 IAPrimitives;
    // DEBUG:     UINT64 VSInvocations;
    // DEBUG:     UINT64 GSInvocations;
    // DEBUG:     UINT64 GSPrimitives;
    // DEBUG:     UINT64 CInvocations;
    // DEBUG:     UINT64 CPrimitives;
    // DEBUG:     UINT64 PSInvocations;
    // DEBUG:     } 	D3D10_QUERY_DATA_PIPELINE_STATISTICS
    // DEBUG: typedef struct D3D10_QUERY_DATA_SO_STATISTICS
    // DEBUG:     {
    // DEBUG:     UINT64 NumPrimitivesWritten;
    // DEBUG:     UINT64 PrimitivesStorageNeeded;
    // DEBUG:     } 	D3D10_QUERY_DATA_SO_STATISTICS
    // DEBUG: typedef 
    // DEBUG: enum D3D10_CREATE_DEVICE_FLAG
    // DEBUG:     {
    // DEBUG:         D3D10_CREATE_DEVICE_SINGLETHREADED	= 0x1,
    // DEBUG:         D3D10_CREATE_DEVICE_DEBUG	= 0x2,
    // DEBUG:         D3D10_CREATE_DEVICE_SWITCH_TO_REF	= 0x4,
    // DEBUG:         D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS	= 0x8,
    // DEBUG:         D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP	= 0x10,
    // DEBUG:         D3D10_CREATE_DEVICE_BGRA_SUPPORT	= 0x20,
    // DEBUG:         D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY	= 0x80,
    // DEBUG:         D3D10_CREATE_DEVICE_STRICT_VALIDATION	= 0x200,
    // DEBUG:         D3D10_CREATE_DEVICE_DEBUGGABLE	= 0x400
    // DEBUG:     } 	D3D10_CREATE_DEVICE_FLAG
    // DEBUG: typedef D3D_SHADER_MACRO D3D10_SHADER_MACRO
    // DEBUG: typedef D3D10_SHADER_MACRO* LPD3D10_SHADER_MACRO
    // DEBUG: typedef D3D_SHADER_VARIABLE_CLASS D3D10_SHADER_VARIABLE_CLASS
    // DEBUG: typedef D3D10_SHADER_VARIABLE_CLASS* LPD3D10_SHADER_VARIABLE_CLASS
    // DEBUG: typedef D3D_SHADER_VARIABLE_FLAGS D3D10_SHADER_VARIABLE_FLAGS
    // DEBUG: typedef D3D10_SHADER_VARIABLE_FLAGS* LPD3D10_SHADER_VARIABLE_FLAGS
    // DEBUG: typedef D3D_SHADER_VARIABLE_TYPE D3D10_SHADER_VARIABLE_TYPE
    // DEBUG: typedef D3D10_SHADER_VARIABLE_TYPE* LPD3D10_SHADER_VARIABLE_TYPE
    // DEBUG: typedef D3D_SHADER_INPUT_FLAGS D3D10_SHADER_INPUT_FLAGS
    // DEBUG: typedef D3D10_SHADER_INPUT_FLAGS* LPD3D10_SHADER_INPUT_FLAGS
    // DEBUG: typedef D3D_SHADER_INPUT_TYPE D3D10_SHADER_INPUT_TYPE
    // DEBUG: typedef D3D10_SHADER_INPUT_TYPE* LPD3D10_SHADER_INPUT_TYPE
    // DEBUG: typedef D3D_SHADER_CBUFFER_FLAGS D3D10_SHADER_CBUFFER_FLAGS
    // DEBUG: typedef D3D10_SHADER_CBUFFER_FLAGS* LPD3D10_SHADER_CBUFFER_FLAGS
    // DEBUG: typedef D3D_CBUFFER_TYPE D3D10_CBUFFER_TYPE
    // DEBUG: typedef D3D10_CBUFFER_TYPE* LPD3D10_CBUFFER_TYPE
    // DEBUG: typedef D3D_NAME D3D10_NAME
    // DEBUG: typedef D3D_RESOURCE_RETURN_TYPE D3D10_RESOURCE_RETURN_TYPE
    // DEBUG: typedef D3D_REGISTER_COMPONENT_TYPE D3D10_REGISTER_COMPONENT_TYPE
    // DEBUG: typedef D3D_INCLUDE_TYPE D3D10_INCLUDE_TYPE
    // DEBUG: typedef interface ID3DInclude ID3D10Include
    // DEBUG: typedef interface ID3DInclude* LPD3D10INCLUDE
    /// <summary>///////////////////////////////////////////////////////////////////////////</summary>
    // DEBUG: typedef enum _D3D10_DEVICE_STATE_TYPES
    // DEBUG: {
    // DEBUG:     
    // DEBUG:     D3D10_DST_SO_BUFFERS=1,             // Single-value state (atomical gets/sets)
    // DEBUG:     D3D10_DST_OM_RENDER_TARGETS,        // Single-value state (atomical gets/sets)
    // DEBUG:     D3D10_DST_OM_DEPTH_STENCIL_STATE,   // Single-value state
    // DEBUG:     D3D10_DST_OM_BLEND_STATE,           // Single-value state
    // DEBUG: 
    // DEBUG:     D3D10_DST_VS,                       // Single-value state
    // DEBUG:     D3D10_DST_VS_SAMPLERS,              // Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
    // DEBUG:     D3D10_DST_VS_SHADER_RESOURCES,      // Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
    // DEBUG:     D3D10_DST_VS_CONSTANT_BUFFERS,      // Count:			
    // DEBUG: 
    // DEBUG:     D3D10_DST_GS,                       // Single-value state
    // DEBUG:     D3D10_DST_GS_SAMPLERS,              // Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
    // DEBUG:     D3D10_DST_GS_SHADER_RESOURCES,      // Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
    // DEBUG:     D3D10_DST_GS_CONSTANT_BUFFERS,      // Count: D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT
    // DEBUG: 
    // DEBUG:     D3D10_DST_PS,                       // Single-value state
    // DEBUG:     D3D10_DST_PS_SAMPLERS,              // Count: D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT
    // DEBUG:     D3D10_DST_PS_SHADER_RESOURCES,      // Count: D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT
    // DEBUG:     D3D10_DST_PS_CONSTANT_BUFFERS,      // Count: D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT
    // DEBUG:     
    // DEBUG:     D3D10_DST_IA_VERTEX_BUFFERS,        // Count: D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT
    // DEBUG:     D3D10_DST_IA_INDEX_BUFFER,          // Single-value state
    // DEBUG:     D3D10_DST_IA_INPUT_LAYOUT,          // Single-value state
    // DEBUG:     D3D10_DST_IA_PRIMITIVE_TOPOLOGY,    // Single-value state
    // DEBUG: 
    // DEBUG:     D3D10_DST_RS_VIEWPORTS,             // Single-value state (atomical gets/sets)
    // DEBUG:     D3D10_DST_RS_SCISSOR_RECTS,         // Single-value state (atomical gets/sets)
    // DEBUG:     D3D10_DST_RS_RASTERIZER_STATE,      // Single-value state
    // DEBUG: 
    // DEBUG:     D3D10_DST_PREDICATION,              // Single-value state
    // DEBUG: } D3D10_DEVICE_STATE_TYPES
    // DEBUG: struct D3D10_INPUT_ELEMENT_DESC
    // DEBUG:     {
    // DEBUG:     LPCSTR SemanticName;
    // DEBUG:     UINT SemanticIndex;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     UINT InputSlot;
    // DEBUG:     UINT AlignedByteOffset;
    // DEBUG:     D3D10_INPUT_CLASSIFICATION InputSlotClass;
    // DEBUG:     UINT InstanceDataStepRate;
    // DEBUG:     }
    public unsafe partial class D3D10INPUT_ELEMENT_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal __IntPtr SemanticName;
            internal uint SemanticIndex;
            internal global::DXGI_FORMAT Format;
            internal uint InputSlot;
            internal uint AlignedByteOffset;
            internal global::SpoutDX.D3D10INPUT_CLASSIFICATION InputSlotClass;
            internal uint InstanceDataStepRate;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_INPUT_ELEMENT_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10INPUT_ELEMENT_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10INPUT_ELEMENT_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10INPUT_ELEMENT_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10INPUT_ELEMENT_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10INPUT_ELEMENT_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __SemanticName_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static D3D10INPUT_ELEMENT_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10INPUT_ELEMENT_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10INPUT_ELEMENT_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10INPUT_ELEMENT_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10INPUT_ELEMENT_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10INPUT_ELEMENT_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10INPUT_ELEMENT_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10INPUT_ELEMENT_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_INPUT_ELEMENT_DESC
        public D3D10INPUT_ELEMENT_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10INPUT_ELEMENT_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_INPUT_ELEMENT_DESC
        public D3D10INPUT_ELEMENT_DESC(global::SpoutDX.D3D10INPUT_ELEMENT_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10INPUT_ELEMENT_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10INPUT_ELEMENT_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10INPUT_ELEMENT_DESC.__Internal*) _0.__Instance);
            if (_0.__SemanticName_OwnsNativeMemory)
                this.SemanticName = _0.SemanticName;
        }

        ~D3D10INPUT_ELEMENT_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__SemanticName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->SemanticName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string SemanticName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->SemanticName);
            }

            set
            {
                if (__SemanticName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->SemanticName);
                __SemanticName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->SemanticName = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->SemanticName = (__IntPtr) __bytePtr0;
            }
        }

        public uint SemanticIndex
        {
            get
            {
                return ((__Internal*)__Instance)->SemanticIndex;
            }

            set
            {
                ((__Internal*)__Instance)->SemanticIndex = value;
            }
        }

        public uint InputSlot
        {
            get
            {
                return ((__Internal*)__Instance)->InputSlot;
            }

            set
            {
                ((__Internal*)__Instance)->InputSlot = value;
            }
        }

        public uint AlignedByteOffset
        {
            get
            {
                return ((__Internal*)__Instance)->AlignedByteOffset;
            }

            set
            {
                ((__Internal*)__Instance)->AlignedByteOffset = value;
            }
        }

        public global::SpoutDX.D3D10INPUT_CLASSIFICATION InputSlotClass
        {
            get
            {
                return ((__Internal*)__Instance)->InputSlotClass;
            }

            set
            {
                ((__Internal*)__Instance)->InputSlotClass = value;
            }
        }

        public uint InstanceDataStepRate
        {
            get
            {
                return ((__Internal*)__Instance)->InstanceDataStepRate;
            }

            set
            {
                ((__Internal*)__Instance)->InstanceDataStepRate = value;
            }
        }
    }

    // DEBUG: struct D3D10_SO_DECLARATION_ENTRY
    // DEBUG:     {
    // DEBUG:     LPCSTR SemanticName;
    // DEBUG:     UINT SemanticIndex;
    // DEBUG:     BYTE StartComponent;
    // DEBUG:     BYTE ComponentCount;
    // DEBUG:     BYTE OutputSlot;
    // DEBUG:     }
    public unsafe partial class D3D10SO_DECLARATION_ENTRY : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr SemanticName;
            internal uint SemanticIndex;
            internal byte StartComponent;
            internal byte ComponentCount;
            internal byte OutputSlot;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_SO_DECLARATION_ENTRY@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SO_DECLARATION_ENTRY>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SO_DECLARATION_ENTRY>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10SO_DECLARATION_ENTRY managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10SO_DECLARATION_ENTRY>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10SO_DECLARATION_ENTRY managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __SemanticName_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static D3D10SO_DECLARATION_ENTRY __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10SO_DECLARATION_ENTRY(native.ToPointer(), skipVTables);
        }

        internal static D3D10SO_DECLARATION_ENTRY __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10SO_DECLARATION_ENTRY)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10SO_DECLARATION_ENTRY __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10SO_DECLARATION_ENTRY(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10SO_DECLARATION_ENTRY(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10SO_DECLARATION_ENTRY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_SO_DECLARATION_ENTRY
        public D3D10SO_DECLARATION_ENTRY()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SO_DECLARATION_ENTRY.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_SO_DECLARATION_ENTRY
        public D3D10SO_DECLARATION_ENTRY(global::SpoutDX.D3D10SO_DECLARATION_ENTRY _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SO_DECLARATION_ENTRY.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10SO_DECLARATION_ENTRY.__Internal*) __Instance) = *((global::SpoutDX.D3D10SO_DECLARATION_ENTRY.__Internal*) _0.__Instance);
            if (_0.__SemanticName_OwnsNativeMemory)
                this.SemanticName = _0.SemanticName;
        }

        ~D3D10SO_DECLARATION_ENTRY()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__SemanticName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->SemanticName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string SemanticName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->SemanticName);
            }

            set
            {
                if (__SemanticName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->SemanticName);
                __SemanticName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->SemanticName = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->SemanticName = (__IntPtr) __bytePtr0;
            }
        }

        public uint SemanticIndex
        {
            get
            {
                return ((__Internal*)__Instance)->SemanticIndex;
            }

            set
            {
                ((__Internal*)__Instance)->SemanticIndex = value;
            }
        }

        public byte StartComponent
        {
            get
            {
                return ((__Internal*)__Instance)->StartComponent;
            }

            set
            {
                ((__Internal*)__Instance)->StartComponent = value;
            }
        }

        public byte ComponentCount
        {
            get
            {
                return ((__Internal*)__Instance)->ComponentCount;
            }

            set
            {
                ((__Internal*)__Instance)->ComponentCount = value;
            }
        }

        public byte OutputSlot
        {
            get
            {
                return ((__Internal*)__Instance)->OutputSlot;
            }

            set
            {
                ((__Internal*)__Instance)->OutputSlot = value;
            }
        }
    }

    // DEBUG: struct D3D10_VIEWPORT
    // DEBUG:     {
    // DEBUG:     INT TopLeftX;
    // DEBUG:     INT TopLeftY;
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     FLOAT MinDepth;
    // DEBUG:     FLOAT MaxDepth;
    // DEBUG:     }
    public unsafe partial class D3D10VIEWPORT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal int TopLeftX;
            internal int TopLeftY;
            internal uint Width;
            internal uint Height;
            internal float MinDepth;
            internal float MaxDepth;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_VIEWPORT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10VIEWPORT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10VIEWPORT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10VIEWPORT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10VIEWPORT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10VIEWPORT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10VIEWPORT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10VIEWPORT(native.ToPointer(), skipVTables);
        }

        internal static D3D10VIEWPORT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10VIEWPORT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10VIEWPORT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10VIEWPORT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10VIEWPORT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10VIEWPORT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_VIEWPORT
        public D3D10VIEWPORT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10VIEWPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_VIEWPORT
        public D3D10VIEWPORT(global::SpoutDX.D3D10VIEWPORT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10VIEWPORT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10VIEWPORT.__Internal*) __Instance) = *((global::SpoutDX.D3D10VIEWPORT.__Internal*) _0.__Instance);
        }

        ~D3D10VIEWPORT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int TopLeftX
        {
            get
            {
                return ((__Internal*)__Instance)->TopLeftX;
            }

            set
            {
                ((__Internal*)__Instance)->TopLeftX = value;
            }
        }

        public int TopLeftY
        {
            get
            {
                return ((__Internal*)__Instance)->TopLeftY;
            }

            set
            {
                ((__Internal*)__Instance)->TopLeftY = value;
            }
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        public float MinDepth
        {
            get
            {
                return ((__Internal*)__Instance)->MinDepth;
            }

            set
            {
                ((__Internal*)__Instance)->MinDepth = value;
            }
        }

        public float MaxDepth
        {
            get
            {
                return ((__Internal*)__Instance)->MaxDepth;
            }

            set
            {
                ((__Internal*)__Instance)->MaxDepth = value;
            }
        }
    }

    // DEBUG: struct D3D10_BOX
    // DEBUG:     {
    // DEBUG:     UINT left;
    // DEBUG:     UINT top;
    // DEBUG:     UINT front;
    // DEBUG:     UINT right;
    // DEBUG:     UINT bottom;
    // DEBUG:     UINT back;
    // DEBUG:     }
    public unsafe partial class D3D10BOX : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal uint left;
            internal uint top;
            internal uint front;
            internal uint right;
            internal uint bottom;
            internal uint back;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_BOX@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BOX>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BOX>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10BOX managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10BOX>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10BOX managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10BOX __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10BOX(native.ToPointer(), skipVTables);
        }

        internal static D3D10BOX __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10BOX)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10BOX __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10BOX(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10BOX(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10BOX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_BOX
        public D3D10BOX()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BOX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_BOX
        public D3D10BOX(global::SpoutDX.D3D10BOX _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BOX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10BOX.__Internal*) __Instance) = *((global::SpoutDX.D3D10BOX.__Internal*) _0.__Instance);
        }

        ~D3D10BOX()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Left
        {
            get
            {
                return ((__Internal*)__Instance)->left;
            }

            set
            {
                ((__Internal*)__Instance)->left = value;
            }
        }

        public uint Top
        {
            get
            {
                return ((__Internal*)__Instance)->top;
            }

            set
            {
                ((__Internal*)__Instance)->top = value;
            }
        }

        public uint Front
        {
            get
            {
                return ((__Internal*)__Instance)->front;
            }

            set
            {
                ((__Internal*)__Instance)->front = value;
            }
        }

        public uint Right
        {
            get
            {
                return ((__Internal*)__Instance)->right;
            }

            set
            {
                ((__Internal*)__Instance)->right = value;
            }
        }

        public uint Bottom
        {
            get
            {
                return ((__Internal*)__Instance)->bottom;
            }

            set
            {
                ((__Internal*)__Instance)->bottom = value;
            }
        }

        public uint Back
        {
            get
            {
                return ((__Internal*)__Instance)->back;
            }

            set
            {
                ((__Internal*)__Instance)->back = value;
            }
        }
    }

    // DEBUG: struct D3D10_DEPTH_STENCILOP_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_STENCIL_OP StencilFailOp;
    // DEBUG:     D3D10_STENCIL_OP StencilDepthFailOp;
    // DEBUG:     D3D10_STENCIL_OP StencilPassOp;
    // DEBUG:     D3D10_COMPARISON_FUNC StencilFunc;
    // DEBUG:     }
    public unsafe partial class D3D10DEPTH_STENCILOP_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D10STENCIL_OP StencilFailOp;
            internal global::SpoutDX.D3D10STENCIL_OP StencilDepthFailOp;
            internal global::SpoutDX.D3D10STENCIL_OP StencilPassOp;
            internal global::SpoutDX.D3D10COMPARISON_FUNC StencilFunc;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_DEPTH_STENCILOP_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10DEPTH_STENCILOP_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10DEPTH_STENCILOP_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10DEPTH_STENCILOP_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10DEPTH_STENCILOP_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10DEPTH_STENCILOP_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10DEPTH_STENCILOP_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10DEPTH_STENCILOP_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10DEPTH_STENCILOP_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10DEPTH_STENCILOP_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10DEPTH_STENCILOP_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10DEPTH_STENCILOP_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10DEPTH_STENCILOP_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10DEPTH_STENCILOP_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_DEPTH_STENCILOP_DESC
        public D3D10DEPTH_STENCILOP_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_DEPTH_STENCILOP_DESC
        public D3D10DEPTH_STENCILOP_DESC(global::SpoutDX.D3D10DEPTH_STENCILOP_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10DEPTH_STENCILOP_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10STENCIL_OP StencilFailOp
        {
            get
            {
                return ((__Internal*)__Instance)->StencilFailOp;
            }

            set
            {
                ((__Internal*)__Instance)->StencilFailOp = value;
            }
        }

        public global::SpoutDX.D3D10STENCIL_OP StencilDepthFailOp
        {
            get
            {
                return ((__Internal*)__Instance)->StencilDepthFailOp;
            }

            set
            {
                ((__Internal*)__Instance)->StencilDepthFailOp = value;
            }
        }

        public global::SpoutDX.D3D10STENCIL_OP StencilPassOp
        {
            get
            {
                return ((__Internal*)__Instance)->StencilPassOp;
            }

            set
            {
                ((__Internal*)__Instance)->StencilPassOp = value;
            }
        }

        public global::SpoutDX.D3D10COMPARISON_FUNC StencilFunc
        {
            get
            {
                return ((__Internal*)__Instance)->StencilFunc;
            }

            set
            {
                ((__Internal*)__Instance)->StencilFunc = value;
            }
        }
    }

    // DEBUG: struct D3D10_DEPTH_STENCIL_DESC
    // DEBUG:     {
    // DEBUG:     BOOL DepthEnable;
    // DEBUG:     D3D10_DEPTH_WRITE_MASK DepthWriteMask;
    // DEBUG:     D3D10_COMPARISON_FUNC DepthFunc;
    // DEBUG:     BOOL StencilEnable;
    // DEBUG:     UINT8 StencilReadMask;
    // DEBUG:     UINT8 StencilWriteMask;
    // DEBUG:     D3D10_DEPTH_STENCILOP_DESC FrontFace;
    // DEBUG:     D3D10_DEPTH_STENCILOP_DESC BackFace;
    // DEBUG:     }
    public unsafe partial class D3D10DEPTH_STENCIL_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 52)]
        public partial struct __Internal
        {
            internal int DepthEnable;
            internal global::SpoutDX.D3D10DEPTH_WRITE_MASK DepthWriteMask;
            internal global::SpoutDX.D3D10COMPARISON_FUNC DepthFunc;
            internal int StencilEnable;
            internal byte StencilReadMask;
            internal byte StencilWriteMask;
            internal global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__Internal FrontFace;
            internal global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__Internal BackFace;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_DEPTH_STENCIL_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10DEPTH_STENCIL_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10DEPTH_STENCIL_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10DEPTH_STENCIL_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10DEPTH_STENCIL_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10DEPTH_STENCIL_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10DEPTH_STENCIL_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10DEPTH_STENCIL_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10DEPTH_STENCIL_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10DEPTH_STENCIL_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10DEPTH_STENCIL_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10DEPTH_STENCIL_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10DEPTH_STENCIL_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10DEPTH_STENCIL_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_DEPTH_STENCIL_DESC
        public D3D10DEPTH_STENCIL_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10DEPTH_STENCIL_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_DEPTH_STENCIL_DESC
        public D3D10DEPTH_STENCIL_DESC(global::SpoutDX.D3D10DEPTH_STENCIL_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10DEPTH_STENCIL_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10DEPTH_STENCIL_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10DEPTH_STENCIL_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10DEPTH_STENCIL_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int DepthEnable
        {
            get
            {
                return ((__Internal*)__Instance)->DepthEnable;
            }

            set
            {
                ((__Internal*)__Instance)->DepthEnable = value;
            }
        }

        public global::SpoutDX.D3D10DEPTH_WRITE_MASK DepthWriteMask
        {
            get
            {
                return ((__Internal*)__Instance)->DepthWriteMask;
            }

            set
            {
                ((__Internal*)__Instance)->DepthWriteMask = value;
            }
        }

        public global::SpoutDX.D3D10COMPARISON_FUNC DepthFunc
        {
            get
            {
                return ((__Internal*)__Instance)->DepthFunc;
            }

            set
            {
                ((__Internal*)__Instance)->DepthFunc = value;
            }
        }

        public int StencilEnable
        {
            get
            {
                return ((__Internal*)__Instance)->StencilEnable;
            }

            set
            {
                ((__Internal*)__Instance)->StencilEnable = value;
            }
        }

        public byte StencilReadMask
        {
            get
            {
                return ((__Internal*)__Instance)->StencilReadMask;
            }

            set
            {
                ((__Internal*)__Instance)->StencilReadMask = value;
            }
        }

        public byte StencilWriteMask
        {
            get
            {
                return ((__Internal*)__Instance)->StencilWriteMask;
            }

            set
            {
                ((__Internal*)__Instance)->StencilWriteMask = value;
            }
        }

        public global::SpoutDX.D3D10DEPTH_STENCILOP_DESC FrontFace
        {
            get
            {
                return global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->FrontFace));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->FrontFace = *(global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10DEPTH_STENCILOP_DESC BackFace
        {
            get
            {
                return global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->BackFace));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->BackFace = *(global::SpoutDX.D3D10DEPTH_STENCILOP_DESC.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D10_BLEND_DESC
    // DEBUG:     {
    // DEBUG:     BOOL AlphaToCoverageEnable;
    // DEBUG:     BOOL BlendEnable[ 8 ];
    // DEBUG:     D3D10_BLEND SrcBlend;
    // DEBUG:     D3D10_BLEND DestBlend;
    // DEBUG:     D3D10_BLEND_OP BlendOp;
    // DEBUG:     D3D10_BLEND SrcBlendAlpha;
    // DEBUG:     D3D10_BLEND DestBlendAlpha;
    // DEBUG:     D3D10_BLEND_OP BlendOpAlpha;
    // DEBUG:     UINT8 RenderTargetWriteMask[ 8 ];
    // DEBUG:     }
    public unsafe partial class D3D10BLEND_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 68)]
        public partial struct __Internal
        {
            internal int AlphaToCoverageEnable;
            internal fixed int BlendEnable[8];
            internal global::SpoutDX.D3D10BLEND SrcBlend;
            internal global::SpoutDX.D3D10BLEND DestBlend;
            internal global::SpoutDX.D3D10BLEND_OP BlendOp;
            internal global::SpoutDX.D3D10BLEND SrcBlendAlpha;
            internal global::SpoutDX.D3D10BLEND DestBlendAlpha;
            internal global::SpoutDX.D3D10BLEND_OP BlendOpAlpha;
            internal fixed byte RenderTargetWriteMask[8];

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_BLEND_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BLEND_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BLEND_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10BLEND_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10BLEND_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10BLEND_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10BLEND_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10BLEND_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10BLEND_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10BLEND_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10BLEND_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10BLEND_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10BLEND_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10BLEND_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_BLEND_DESC
        public D3D10BLEND_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BLEND_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_BLEND_DESC
        public D3D10BLEND_DESC(global::SpoutDX.D3D10BLEND_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BLEND_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10BLEND_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10BLEND_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10BLEND_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int AlphaToCoverageEnable
        {
            get
            {
                return ((__Internal*)__Instance)->AlphaToCoverageEnable;
            }

            set
            {
                ((__Internal*)__Instance)->AlphaToCoverageEnable = value;
            }
        }

        public int[] BlendEnable
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<int>(((__Internal*)__Instance)->BlendEnable, 8);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((__Internal*)__Instance)->BlendEnable[i] = value[i];
                }
            }
        }

        public global::SpoutDX.D3D10BLEND SrcBlend
        {
            get
            {
                return ((__Internal*)__Instance)->SrcBlend;
            }

            set
            {
                ((__Internal*)__Instance)->SrcBlend = value;
            }
        }

        public global::SpoutDX.D3D10BLEND DestBlend
        {
            get
            {
                return ((__Internal*)__Instance)->DestBlend;
            }

            set
            {
                ((__Internal*)__Instance)->DestBlend = value;
            }
        }

        public global::SpoutDX.D3D10BLEND_OP BlendOp
        {
            get
            {
                return ((__Internal*)__Instance)->BlendOp;
            }

            set
            {
                ((__Internal*)__Instance)->BlendOp = value;
            }
        }

        public global::SpoutDX.D3D10BLEND SrcBlendAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->SrcBlendAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->SrcBlendAlpha = value;
            }
        }

        public global::SpoutDX.D3D10BLEND DestBlendAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->DestBlendAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->DestBlendAlpha = value;
            }
        }

        public global::SpoutDX.D3D10BLEND_OP BlendOpAlpha
        {
            get
            {
                return ((__Internal*)__Instance)->BlendOpAlpha;
            }

            set
            {
                ((__Internal*)__Instance)->BlendOpAlpha = value;
            }
        }

        public byte[] RenderTargetWriteMask
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->RenderTargetWriteMask, 8);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((__Internal*)__Instance)->RenderTargetWriteMask[i] = value[i];
                }
            }
        }
    }

    // DEBUG: struct D3D10_RASTERIZER_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_FILL_MODE FillMode;
    // DEBUG:     D3D10_CULL_MODE CullMode;
    // DEBUG:     BOOL FrontCounterClockwise;
    // DEBUG:     INT DepthBias;
    // DEBUG:     FLOAT DepthBiasClamp;
    // DEBUG:     FLOAT SlopeScaledDepthBias;
    // DEBUG:     BOOL DepthClipEnable;
    // DEBUG:     BOOL ScissorEnable;
    // DEBUG:     BOOL MultisampleEnable;
    // DEBUG:     BOOL AntialiasedLineEnable;
    // DEBUG:     }
    public unsafe partial class D3D10RASTERIZER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D10FILL_MODE FillMode;
            internal global::SpoutDX.D3D10CULL_MODE CullMode;
            internal int FrontCounterClockwise;
            internal int DepthBias;
            internal float DepthBiasClamp;
            internal float SlopeScaledDepthBias;
            internal int DepthClipEnable;
            internal int ScissorEnable;
            internal int MultisampleEnable;
            internal int AntialiasedLineEnable;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_RASTERIZER_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10RASTERIZER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10RASTERIZER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10RASTERIZER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10RASTERIZER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10RASTERIZER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10RASTERIZER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10RASTERIZER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10RASTERIZER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10RASTERIZER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10RASTERIZER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10RASTERIZER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10RASTERIZER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10RASTERIZER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_RASTERIZER_DESC
        public D3D10RASTERIZER_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10RASTERIZER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_RASTERIZER_DESC
        public D3D10RASTERIZER_DESC(global::SpoutDX.D3D10RASTERIZER_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10RASTERIZER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10RASTERIZER_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10RASTERIZER_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10RASTERIZER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10FILL_MODE FillMode
        {
            get
            {
                return ((__Internal*)__Instance)->FillMode;
            }

            set
            {
                ((__Internal*)__Instance)->FillMode = value;
            }
        }

        public global::SpoutDX.D3D10CULL_MODE CullMode
        {
            get
            {
                return ((__Internal*)__Instance)->CullMode;
            }

            set
            {
                ((__Internal*)__Instance)->CullMode = value;
            }
        }

        public int FrontCounterClockwise
        {
            get
            {
                return ((__Internal*)__Instance)->FrontCounterClockwise;
            }

            set
            {
                ((__Internal*)__Instance)->FrontCounterClockwise = value;
            }
        }

        public int DepthBias
        {
            get
            {
                return ((__Internal*)__Instance)->DepthBias;
            }

            set
            {
                ((__Internal*)__Instance)->DepthBias = value;
            }
        }

        public float DepthBiasClamp
        {
            get
            {
                return ((__Internal*)__Instance)->DepthBiasClamp;
            }

            set
            {
                ((__Internal*)__Instance)->DepthBiasClamp = value;
            }
        }

        public float SlopeScaledDepthBias
        {
            get
            {
                return ((__Internal*)__Instance)->SlopeScaledDepthBias;
            }

            set
            {
                ((__Internal*)__Instance)->SlopeScaledDepthBias = value;
            }
        }

        public int DepthClipEnable
        {
            get
            {
                return ((__Internal*)__Instance)->DepthClipEnable;
            }

            set
            {
                ((__Internal*)__Instance)->DepthClipEnable = value;
            }
        }

        public int ScissorEnable
        {
            get
            {
                return ((__Internal*)__Instance)->ScissorEnable;
            }

            set
            {
                ((__Internal*)__Instance)->ScissorEnable = value;
            }
        }

        public int MultisampleEnable
        {
            get
            {
                return ((__Internal*)__Instance)->MultisampleEnable;
            }

            set
            {
                ((__Internal*)__Instance)->MultisampleEnable = value;
            }
        }

        public int AntialiasedLineEnable
        {
            get
            {
                return ((__Internal*)__Instance)->AntialiasedLineEnable;
            }

            set
            {
                ((__Internal*)__Instance)->AntialiasedLineEnable = value;
            }
        }
    }

    // DEBUG: struct D3D10_SUBRESOURCE_DATA
    // DEBUG:     {
    // DEBUG:     const void *pSysMem;
    // DEBUG:     UINT SysMemPitch;
    // DEBUG:     UINT SysMemSlicePitch;
    // DEBUG:     }
    public unsafe partial class D3D10SUBRESOURCE_DATA : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr pSysMem;
            internal uint SysMemPitch;
            internal uint SysMemSlicePitch;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_SUBRESOURCE_DATA@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SUBRESOURCE_DATA>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SUBRESOURCE_DATA>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10SUBRESOURCE_DATA managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10SUBRESOURCE_DATA>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10SUBRESOURCE_DATA managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10SUBRESOURCE_DATA __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10SUBRESOURCE_DATA(native.ToPointer(), skipVTables);
        }

        internal static D3D10SUBRESOURCE_DATA __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10SUBRESOURCE_DATA)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10SUBRESOURCE_DATA __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10SUBRESOURCE_DATA(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10SUBRESOURCE_DATA(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10SUBRESOURCE_DATA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_SUBRESOURCE_DATA
        public D3D10SUBRESOURCE_DATA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SUBRESOURCE_DATA.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_SUBRESOURCE_DATA
        public D3D10SUBRESOURCE_DATA(global::SpoutDX.D3D10SUBRESOURCE_DATA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SUBRESOURCE_DATA.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10SUBRESOURCE_DATA.__Internal*) __Instance) = *((global::SpoutDX.D3D10SUBRESOURCE_DATA.__Internal*) _0.__Instance);
        }

        ~D3D10SUBRESOURCE_DATA()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public __IntPtr PSysMem
        {
            get
            {
                return ((__Internal*)__Instance)->pSysMem;
            }
        }

        public uint SysMemPitch
        {
            get
            {
                return ((__Internal*)__Instance)->SysMemPitch;
            }

            set
            {
                ((__Internal*)__Instance)->SysMemPitch = value;
            }
        }

        public uint SysMemSlicePitch
        {
            get
            {
                return ((__Internal*)__Instance)->SysMemSlicePitch;
            }

            set
            {
                ((__Internal*)__Instance)->SysMemSlicePitch = value;
            }
        }
    }

    // DEBUG: struct D3D10_BUFFER_DESC
    // DEBUG:     {
    // DEBUG:     UINT ByteWidth;
    // DEBUG:     D3D10_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D10BUFFER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 20)]
        public partial struct __Internal
        {
            internal uint ByteWidth;
            internal global::SpoutDX.D3D10USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_BUFFER_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BUFFER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BUFFER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10BUFFER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10BUFFER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10BUFFER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10BUFFER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10BUFFER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10BUFFER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10BUFFER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10BUFFER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10BUFFER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10BUFFER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10BUFFER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_BUFFER_DESC
        public D3D10BUFFER_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_BUFFER_DESC
        public D3D10BUFFER_DESC(global::SpoutDX.D3D10BUFFER_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10BUFFER_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10BUFFER_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10BUFFER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ByteWidth
        {
            get
            {
                return ((__Internal*)__Instance)->ByteWidth;
            }

            set
            {
                ((__Internal*)__Instance)->ByteWidth = value;
            }
        }

        public global::SpoutDX.D3D10USAGE Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }

        public uint BindFlags
        {
            get
            {
                return ((__Internal*)__Instance)->BindFlags;
            }

            set
            {
                ((__Internal*)__Instance)->BindFlags = value;
            }
        }

        public uint CPUAccessFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CPUAccessFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CPUAccessFlags = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct CD3D10_BUFFER_DESC : public D3D10_BUFFER_DESC
    // DEBUG: {
    // DEBUG:     CD3D10_BUFFER_DESC() = default;
    // DEBUG:     explicit CD3D10_BUFFER_DESC( const D3D10_BUFFER_DESC& o ) :
    // DEBUG:         D3D10_BUFFER_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D10_BUFFER_DESC(
    // DEBUG:         UINT byteWidth,
    // DEBUG:         UINT bindFlags,
    // DEBUG:         D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
    // DEBUG:         UINT cpuaccessFlags = 0,
    // DEBUG:         UINT miscFlags = 0 )
    // DEBUG:     {
    // DEBUG:         ByteWidth = byteWidth;
    // DEBUG:         Usage = usage;
    // DEBUG:         BindFlags = bindFlags;
    // DEBUG:         CPUAccessFlags = cpuaccessFlags ;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:     }
    // DEBUG:     ~CD3D10_BUFFER_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D10BUFFER_DESC : global::SpoutDX.D3D10BUFFER_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 20)]
        public new partial struct __Internal
        {
            internal uint ByteWidth;
            internal global::SpoutDX.D3D10USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D10_BUFFER_DESC@@QEAA@AEBUD3D10_BUFFER_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D10_BUFFER_DESC@@QEAA@IIW4D3D10_USAGE@@II@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, uint byteWidth, uint bindFlags, global::SpoutDX.D3D10USAGE usage, uint cpuaccessFlags, uint miscFlags);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D10_BUFFER_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor_1(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D10_BUFFER_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D10BUFFER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D10BUFFER_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D10BUFFER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D10BUFFER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D10BUFFER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D10BUFFER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D10BUFFER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D10BUFFER_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D10_BUFFER_DESC() = default
        public CD3D10BUFFER_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D10_BUFFER_DESC( const D3D10_BUFFER_DESC& o ) :
        // DEBUG:         D3D10_BUFFER_DESC( o )
        // DEBUG:     {}
        public CD3D10BUFFER_DESC(global::SpoutDX.D3D10BUFFER_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: explicit CD3D10_BUFFER_DESC(
        // DEBUG:         UINT byteWidth,
        // DEBUG:         UINT bindFlags,
        // DEBUG:         D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
        // DEBUG:         UINT cpuaccessFlags = 0,
        // DEBUG:         UINT miscFlags = 0 )
        // DEBUG:     {
        // DEBUG:         ByteWidth = byteWidth;
        // DEBUG:         Usage = usage;
        // DEBUG:         BindFlags = bindFlags;
        // DEBUG:         CPUAccessFlags = cpuaccessFlags ;
        // DEBUG:         MiscFlags = miscFlags;
        // DEBUG:     }
        public CD3D10BUFFER_DESC(uint byteWidth, uint bindFlags, global::SpoutDX.D3D10USAGE usage, uint cpuaccessFlags, uint miscFlags)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance, byteWidth, bindFlags, usage, cpuaccessFlags, miscFlags);
        }

        // DEBUG: CD3D10_BUFFER_DESC
        public CD3D10BUFFER_DESC(global::SpoutDX.CD3D10BUFFER_DESC _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10BUFFER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.CD3D10BUFFER_DESC.__Internal*) __Instance) = *((global::SpoutDX.CD3D10BUFFER_DESC.__Internal*) _0.__Instance);
        }

        ~CD3D10BUFFER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D10_TEXTURE1D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D10TEXTURE1D_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal uint Width;
            internal uint MipLevels;
            internal uint ArraySize;
            internal global::DXGI_FORMAT Format;
            internal global::SpoutDX.D3D10USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEXTURE1D_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXTURE1D_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXTURE1D_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEXTURE1D_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEXTURE1D_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEXTURE1D_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEXTURE1D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEXTURE1D_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEXTURE1D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEXTURE1D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEXTURE1D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEXTURE1D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEXTURE1D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEXTURE1D_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEXTURE1D_DESC
        public D3D10TEXTURE1D_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXTURE1D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEXTURE1D_DESC
        public D3D10TEXTURE1D_DESC(global::SpoutDX.D3D10TEXTURE1D_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXTURE1D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEXTURE1D_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEXTURE1D_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10TEXTURE1D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }

        public global::SpoutDX.D3D10USAGE Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }

        public uint BindFlags
        {
            get
            {
                return ((__Internal*)__Instance)->BindFlags;
            }

            set
            {
                ((__Internal*)__Instance)->BindFlags = value;
            }
        }

        public uint CPUAccessFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CPUAccessFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CPUAccessFlags = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct CD3D10_TEXTURE1D_DESC : public D3D10_TEXTURE1D_DESC
    // DEBUG: {
    // DEBUG:     CD3D10_TEXTURE1D_DESC() = default;
    // DEBUG:     explicit CD3D10_TEXTURE1D_DESC( const D3D10_TEXTURE1D_DESC& o ) :
    // DEBUG:         D3D10_TEXTURE1D_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D10_TEXTURE1D_DESC(
    // DEBUG:         DXGI_FORMAT format,
    // DEBUG:         UINT width,
    // DEBUG:         UINT arraySize = 1,
    // DEBUG:         UINT mipLevels = 0,
    // DEBUG:         UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,
    // DEBUG:         D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
    // DEBUG:         UINT cpuaccessFlags= 0,
    // DEBUG:         UINT miscFlags = 0 )
    // DEBUG:     {
    // DEBUG:         Width = width;
    // DEBUG:         MipLevels = mipLevels;
    // DEBUG:         ArraySize = arraySize;
    // DEBUG:         Format = format;
    // DEBUG:         Usage = usage;
    // DEBUG:         BindFlags = bindFlags;
    // DEBUG:         CPUAccessFlags = cpuaccessFlags;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:     }
    // DEBUG:     ~CD3D10_TEXTURE1D_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D10TEXTURE1D_DESC : global::SpoutDX.D3D10TEXTURE1D_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public new partial struct __Internal
        {
            internal uint Width;
            internal uint MipLevels;
            internal uint ArraySize;
            internal global::DXGI_FORMAT Format;
            internal global::SpoutDX.D3D10USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D10_TEXTURE1D_DESC@@QEAA@AEBUD3D10_TEXTURE1D_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D10_TEXTURE1D_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor_1(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D10_TEXTURE1D_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D10TEXTURE1D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D10TEXTURE1D_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D10TEXTURE1D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D10TEXTURE1D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D10TEXTURE1D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D10TEXTURE1D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D10TEXTURE1D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D10TEXTURE1D_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D10_TEXTURE1D_DESC() = default
        public CD3D10TEXTURE1D_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10TEXTURE1D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D10_TEXTURE1D_DESC( const D3D10_TEXTURE1D_DESC& o ) :
        // DEBUG:         D3D10_TEXTURE1D_DESC( o )
        // DEBUG:     {}
        public CD3D10TEXTURE1D_DESC(global::SpoutDX.D3D10TEXTURE1D_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10TEXTURE1D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: CD3D10_TEXTURE1D_DESC
        public CD3D10TEXTURE1D_DESC(global::SpoutDX.CD3D10TEXTURE1D_DESC _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10TEXTURE1D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.CD3D10TEXTURE1D_DESC.__Internal*) __Instance) = *((global::SpoutDX.CD3D10TEXTURE1D_DESC.__Internal*) _0.__Instance);
        }

        ~CD3D10TEXTURE1D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D10_TEXTURE2D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     DXGI_SAMPLE_DESC SampleDesc;
    // DEBUG:     D3D10_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D10TEXTURE2D_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 44)]
        public partial struct __Internal
        {
            internal uint Width;
            internal uint Height;
            internal uint MipLevels;
            internal uint ArraySize;
            internal global::DXGI_FORMAT Format;
            internal global::DXGI_SAMPLE_DESC.__Internal SampleDesc;
            internal global::SpoutDX.D3D10USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEXTURE2D_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXTURE2D_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXTURE2D_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEXTURE2D_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEXTURE2D_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEXTURE2D_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEXTURE2D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEXTURE2D_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEXTURE2D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEXTURE2D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEXTURE2D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEXTURE2D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEXTURE2D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEXTURE2D_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEXTURE2D_DESC
        public D3D10TEXTURE2D_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXTURE2D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEXTURE2D_DESC
        public D3D10TEXTURE2D_DESC(global::SpoutDX.D3D10TEXTURE2D_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXTURE2D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEXTURE2D_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEXTURE2D_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10TEXTURE2D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }

        public global::SpoutDX.D3D10USAGE Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }

        public uint BindFlags
        {
            get
            {
                return ((__Internal*)__Instance)->BindFlags;
            }

            set
            {
                ((__Internal*)__Instance)->BindFlags = value;
            }
        }

        public uint CPUAccessFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CPUAccessFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CPUAccessFlags = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct CD3D10_TEXTURE2D_DESC : public D3D10_TEXTURE2D_DESC
    // DEBUG: {
    // DEBUG:     CD3D10_TEXTURE2D_DESC() = default;
    // DEBUG:     explicit CD3D10_TEXTURE2D_DESC( const D3D10_TEXTURE2D_DESC& o ) :
    // DEBUG:         D3D10_TEXTURE2D_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D10_TEXTURE2D_DESC(
    // DEBUG:         DXGI_FORMAT format,
    // DEBUG:         UINT width,
    // DEBUG:         UINT height,
    // DEBUG:         UINT arraySize = 1,
    // DEBUG:         UINT mipLevels = 0,
    // DEBUG:         UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,
    // DEBUG:         D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
    // DEBUG:         UINT cpuaccessFlags = 0,
    // DEBUG:         UINT sampleCount = 1,
    // DEBUG:         UINT sampleQuality = 0,
    // DEBUG:         UINT miscFlags = 0 )
    // DEBUG:     {
    // DEBUG:         Width = width;
    // DEBUG:         Height = height;
    // DEBUG:         MipLevels = mipLevels;
    // DEBUG:         ArraySize = arraySize;
    // DEBUG:         Format = format;
    // DEBUG:         SampleDesc.Count = sampleCount;
    // DEBUG:         SampleDesc.Quality = sampleQuality;
    // DEBUG:         Usage = usage;
    // DEBUG:         BindFlags = bindFlags;
    // DEBUG:         CPUAccessFlags = cpuaccessFlags;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:     }
    // DEBUG:     ~CD3D10_TEXTURE2D_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D10TEXTURE2D_DESC : global::SpoutDX.D3D10TEXTURE2D_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 44)]
        public new partial struct __Internal
        {
            internal uint Width;
            internal uint Height;
            internal uint MipLevels;
            internal uint ArraySize;
            internal global::DXGI_FORMAT Format;
            internal global::DXGI_SAMPLE_DESC.__Internal SampleDesc;
            internal global::SpoutDX.D3D10USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D10_TEXTURE2D_DESC@@QEAA@AEBUD3D10_TEXTURE2D_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D10_TEXTURE2D_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor_1(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D10_TEXTURE2D_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D10TEXTURE2D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D10TEXTURE2D_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D10TEXTURE2D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D10TEXTURE2D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D10TEXTURE2D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D10TEXTURE2D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D10TEXTURE2D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D10TEXTURE2D_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D10_TEXTURE2D_DESC() = default
        public CD3D10TEXTURE2D_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10TEXTURE2D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D10_TEXTURE2D_DESC( const D3D10_TEXTURE2D_DESC& o ) :
        // DEBUG:         D3D10_TEXTURE2D_DESC( o )
        // DEBUG:     {}
        public CD3D10TEXTURE2D_DESC(global::SpoutDX.D3D10TEXTURE2D_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10TEXTURE2D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: CD3D10_TEXTURE2D_DESC
        public CD3D10TEXTURE2D_DESC(global::SpoutDX.CD3D10TEXTURE2D_DESC _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10TEXTURE2D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.CD3D10TEXTURE2D_DESC.__Internal*) __Instance) = *((global::SpoutDX.CD3D10TEXTURE2D_DESC.__Internal*) _0.__Instance);
        }

        ~CD3D10TEXTURE2D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D10_MAPPED_TEXTURE2D
    // DEBUG:     {
    // DEBUG:     void *pData;
    // DEBUG:     UINT RowPitch;
    // DEBUG:     }
    public unsafe partial class D3D10MAPPED_TEXTURE2D : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr pData;
            internal uint RowPitch;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_MAPPED_TEXTURE2D@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10MAPPED_TEXTURE2D>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10MAPPED_TEXTURE2D>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10MAPPED_TEXTURE2D managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10MAPPED_TEXTURE2D>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10MAPPED_TEXTURE2D managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10MAPPED_TEXTURE2D __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10MAPPED_TEXTURE2D(native.ToPointer(), skipVTables);
        }

        internal static D3D10MAPPED_TEXTURE2D __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10MAPPED_TEXTURE2D)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10MAPPED_TEXTURE2D __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10MAPPED_TEXTURE2D(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10MAPPED_TEXTURE2D(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10MAPPED_TEXTURE2D(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_MAPPED_TEXTURE2D
        public D3D10MAPPED_TEXTURE2D()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10MAPPED_TEXTURE2D.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_MAPPED_TEXTURE2D
        public D3D10MAPPED_TEXTURE2D(global::SpoutDX.D3D10MAPPED_TEXTURE2D _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10MAPPED_TEXTURE2D.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10MAPPED_TEXTURE2D.__Internal*) __Instance) = *((global::SpoutDX.D3D10MAPPED_TEXTURE2D.__Internal*) _0.__Instance);
        }

        ~D3D10MAPPED_TEXTURE2D()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public __IntPtr PData
        {
            get
            {
                return ((__Internal*)__Instance)->pData;
            }

            set
            {
                ((__Internal*)__Instance)->pData = (__IntPtr) value;
            }
        }

        public uint RowPitch
        {
            get
            {
                return ((__Internal*)__Instance)->RowPitch;
            }

            set
            {
                ((__Internal*)__Instance)->RowPitch = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEXTURE3D_DESC
    // DEBUG:     {
    // DEBUG:     UINT Width;
    // DEBUG:     UINT Height;
    // DEBUG:     UINT Depth;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_USAGE Usage;
    // DEBUG:     UINT BindFlags;
    // DEBUG:     UINT CPUAccessFlags;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D10TEXTURE3D_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 36)]
        public partial struct __Internal
        {
            internal uint Width;
            internal uint Height;
            internal uint Depth;
            internal uint MipLevels;
            internal global::DXGI_FORMAT Format;
            internal global::SpoutDX.D3D10USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEXTURE3D_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXTURE3D_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXTURE3D_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEXTURE3D_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEXTURE3D_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEXTURE3D_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEXTURE3D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEXTURE3D_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEXTURE3D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEXTURE3D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEXTURE3D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEXTURE3D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEXTURE3D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEXTURE3D_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEXTURE3D_DESC
        public D3D10TEXTURE3D_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXTURE3D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEXTURE3D_DESC
        public D3D10TEXTURE3D_DESC(global::SpoutDX.D3D10TEXTURE3D_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXTURE3D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEXTURE3D_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEXTURE3D_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10TEXTURE3D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        public uint Depth
        {
            get
            {
                return ((__Internal*)__Instance)->Depth;
            }

            set
            {
                ((__Internal*)__Instance)->Depth = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public global::SpoutDX.D3D10USAGE Usage
        {
            get
            {
                return ((__Internal*)__Instance)->Usage;
            }

            set
            {
                ((__Internal*)__Instance)->Usage = value;
            }
        }

        public uint BindFlags
        {
            get
            {
                return ((__Internal*)__Instance)->BindFlags;
            }

            set
            {
                ((__Internal*)__Instance)->BindFlags = value;
            }
        }

        public uint CPUAccessFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CPUAccessFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CPUAccessFlags = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct CD3D10_TEXTURE3D_DESC : public D3D10_TEXTURE3D_DESC
    // DEBUG: {
    // DEBUG:     CD3D10_TEXTURE3D_DESC() = default;
    // DEBUG:     explicit CD3D10_TEXTURE3D_DESC( const D3D10_TEXTURE3D_DESC& o ) :
    // DEBUG:         D3D10_TEXTURE3D_DESC( o )
    // DEBUG:     {}
    // DEBUG:     explicit CD3D10_TEXTURE3D_DESC(
    // DEBUG:         DXGI_FORMAT format,
    // DEBUG:         UINT width,
    // DEBUG:         UINT height,
    // DEBUG:         UINT depth,
    // DEBUG:         UINT mipLevels = 0,
    // DEBUG:         UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,
    // DEBUG:         D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
    // DEBUG:         UINT cpuaccessFlags = 0,
    // DEBUG:         UINT miscFlags = 0 )
    // DEBUG:     {
    // DEBUG:         Width = width;
    // DEBUG:         Height = height;
    // DEBUG:         Depth = depth;
    // DEBUG:         MipLevels = mipLevels;
    // DEBUG:         Format = format;
    // DEBUG:         Usage = usage;
    // DEBUG:         BindFlags = bindFlags;
    // DEBUG:         CPUAccessFlags = cpuaccessFlags;
    // DEBUG:         MiscFlags = miscFlags;
    // DEBUG:     }
    // DEBUG:     ~CD3D10_TEXTURE3D_DESC() {}
    // DEBUG: }
    public unsafe partial class CD3D10TEXTURE3D_DESC : global::SpoutDX.D3D10TEXTURE3D_DESC, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 36)]
        public new partial struct __Internal
        {
            internal uint Width;
            internal uint Height;
            internal uint Depth;
            internal uint MipLevels;
            internal global::DXGI_FORMAT Format;
            internal global::SpoutDX.D3D10USAGE Usage;
            internal uint BindFlags;
            internal uint CPUAccessFlags;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D10_TEXTURE3D_DESC@@QEAA@AEBUD3D10_TEXTURE3D_DESC@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance, __IntPtr o);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0CD3D10_TEXTURE3D_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor_1(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??1CD3D10_TEXTURE3D_DESC@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        internal static new CD3D10TEXTURE3D_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new CD3D10TEXTURE3D_DESC(native.ToPointer(), skipVTables);
        }

        internal static new CD3D10TEXTURE3D_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (CD3D10TEXTURE3D_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static CD3D10TEXTURE3D_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CD3D10TEXTURE3D_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CD3D10TEXTURE3D_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected CD3D10TEXTURE3D_DESC(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        // DEBUG: CD3D10_TEXTURE3D_DESC() = default
        public CD3D10TEXTURE3D_DESC()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10TEXTURE3D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: explicit CD3D10_TEXTURE3D_DESC( const D3D10_TEXTURE3D_DESC& o ) :
        // DEBUG:         D3D10_TEXTURE3D_DESC( o )
        // DEBUG:     {}
        public CD3D10TEXTURE3D_DESC(global::SpoutDX.D3D10TEXTURE3D_DESC o)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10TEXTURE3D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        // DEBUG: CD3D10_TEXTURE3D_DESC
        public CD3D10TEXTURE3D_DESC(global::SpoutDX.CD3D10TEXTURE3D_DESC _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.CD3D10TEXTURE3D_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.CD3D10TEXTURE3D_DESC.__Internal*) __Instance) = *((global::SpoutDX.CD3D10TEXTURE3D_DESC.__Internal*) _0.__Instance);
        }

        ~CD3D10TEXTURE3D_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    // DEBUG: struct D3D10_MAPPED_TEXTURE3D
    // DEBUG:     {
    // DEBUG:     void *pData;
    // DEBUG:     UINT RowPitch;
    // DEBUG:     UINT DepthPitch;
    // DEBUG:     }
    public unsafe partial class D3D10MAPPED_TEXTURE3D : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr pData;
            internal uint RowPitch;
            internal uint DepthPitch;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_MAPPED_TEXTURE3D@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10MAPPED_TEXTURE3D>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10MAPPED_TEXTURE3D>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10MAPPED_TEXTURE3D managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10MAPPED_TEXTURE3D>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10MAPPED_TEXTURE3D managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10MAPPED_TEXTURE3D __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10MAPPED_TEXTURE3D(native.ToPointer(), skipVTables);
        }

        internal static D3D10MAPPED_TEXTURE3D __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10MAPPED_TEXTURE3D)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10MAPPED_TEXTURE3D __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10MAPPED_TEXTURE3D(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10MAPPED_TEXTURE3D(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10MAPPED_TEXTURE3D(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_MAPPED_TEXTURE3D
        public D3D10MAPPED_TEXTURE3D()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10MAPPED_TEXTURE3D.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_MAPPED_TEXTURE3D
        public D3D10MAPPED_TEXTURE3D(global::SpoutDX.D3D10MAPPED_TEXTURE3D _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10MAPPED_TEXTURE3D.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10MAPPED_TEXTURE3D.__Internal*) __Instance) = *((global::SpoutDX.D3D10MAPPED_TEXTURE3D.__Internal*) _0.__Instance);
        }

        ~D3D10MAPPED_TEXTURE3D()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public __IntPtr PData
        {
            get
            {
                return ((__Internal*)__Instance)->pData;
            }

            set
            {
                ((__Internal*)__Instance)->pData = (__IntPtr) value;
            }
        }

        public uint RowPitch
        {
            get
            {
                return ((__Internal*)__Instance)->RowPitch;
            }

            set
            {
                ((__Internal*)__Instance)->RowPitch = value;
            }
        }

        public uint DepthPitch
        {
            get
            {
                return ((__Internal*)__Instance)->DepthPitch;
            }

            set
            {
                ((__Internal*)__Instance)->DepthPitch = value;
            }
        }
    }

    // DEBUG: struct D3D10_BUFFER_SRV
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT FirstElement;
    // DEBUG:         UINT ElementOffset;
    // DEBUG:         } 	;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT NumElements;
    // DEBUG:         UINT ElementWidth;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D10BUFFER_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint FirstElement;

            [FieldOffset(0)]
            internal uint ElementOffset;

            [FieldOffset(4)]
            internal uint FirstElement1;

            [FieldOffset(4)]
            internal uint ElementOffset1;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_BUFFER_SRV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BUFFER_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BUFFER_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10BUFFER_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10BUFFER_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10BUFFER_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10BUFFER_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10BUFFER_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D10BUFFER_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10BUFFER_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10BUFFER_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10BUFFER_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10BUFFER_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10BUFFER_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_BUFFER_SRV
        public D3D10BUFFER_SRV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BUFFER_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_BUFFER_SRV
        public D3D10BUFFER_SRV(global::SpoutDX.D3D10BUFFER_SRV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BUFFER_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10BUFFER_SRV.__Internal*) __Instance) = *((global::SpoutDX.D3D10BUFFER_SRV.__Internal*) _0.__Instance);
        }

        ~D3D10BUFFER_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstElement
        {
            get
            {
                return ((__Internal*)__Instance)->FirstElement;
            }

            set
            {
                ((__Internal*)__Instance)->FirstElement = value;
            }
        }

        public uint ElementOffset
        {
            get
            {
                return ((__Internal*)__Instance)->ElementOffset;
            }

            set
            {
                ((__Internal*)__Instance)->ElementOffset = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX1D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     }
    public unsafe partial class D3D10TEX1D_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX1D_SRV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX1D_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX1D_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX1D_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX1D_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX1D_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX1D_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX1D_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX1D_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX1D_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX1D_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX1D_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX1D_SRV
        public D3D10TEX1D_SRV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX1D_SRV
        public D3D10TEX1D_SRV(global::SpoutDX.D3D10TEX1D_SRV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX1D_SRV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX1D_SRV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX1D_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX1D_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX1D_ARRAY_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX1D_ARRAY_SRV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_ARRAY_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_ARRAY_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX1D_ARRAY_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX1D_ARRAY_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX1D_ARRAY_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX1D_ARRAY_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX1D_ARRAY_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX1D_ARRAY_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX1D_ARRAY_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX1D_ARRAY_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX1D_ARRAY_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX1D_ARRAY_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX1D_ARRAY_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX1D_ARRAY_SRV
        public D3D10TEX1D_ARRAY_SRV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX1D_ARRAY_SRV
        public D3D10TEX1D_ARRAY_SRV(global::SpoutDX.D3D10TEX1D_ARRAY_SRV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX1D_ARRAY_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2D_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2D_SRV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2D_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2D_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2D_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2D_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2D_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2D_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2D_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2D_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2D_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2D_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2D_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2D_SRV
        public D3D10TEX2D_SRV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2D_SRV
        public D3D10TEX2D_SRV(global::SpoutDX.D3D10TEX2D_SRV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2D_SRV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2D_SRV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2D_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2D_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2D_ARRAY_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2D_ARRAY_SRV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_ARRAY_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_ARRAY_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2D_ARRAY_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2D_ARRAY_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2D_ARRAY_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2D_ARRAY_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2D_ARRAY_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2D_ARRAY_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2D_ARRAY_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2D_ARRAY_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2D_ARRAY_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2D_ARRAY_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2D_ARRAY_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2D_ARRAY_SRV
        public D3D10TEX2D_ARRAY_SRV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2D_ARRAY_SRV
        public D3D10TEX2D_ARRAY_SRV(global::SpoutDX.D3D10TEX2D_ARRAY_SRV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2D_ARRAY_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX3D_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     }
    public unsafe partial class D3D10TEX3D_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX3D_SRV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX3D_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX3D_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX3D_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX3D_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX3D_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX3D_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX3D_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX3D_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX3D_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX3D_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX3D_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX3D_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX3D_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX3D_SRV
        public D3D10TEX3D_SRV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX3D_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX3D_SRV
        public D3D10TEX3D_SRV(global::SpoutDX.D3D10TEX3D_SRV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX3D_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX3D_SRV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX3D_SRV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX3D_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEXCUBE_SRV
    // DEBUG:     {
    // DEBUG:     UINT MostDetailedMip;
    // DEBUG:     UINT MipLevels;
    // DEBUG:     }
    public unsafe partial class D3D10TEXCUBE_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint MostDetailedMip;
            internal uint MipLevels;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEXCUBE_SRV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXCUBE_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEXCUBE_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEXCUBE_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEXCUBE_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEXCUBE_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEXCUBE_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEXCUBE_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEXCUBE_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEXCUBE_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEXCUBE_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEXCUBE_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEXCUBE_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEXCUBE_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEXCUBE_SRV
        public D3D10TEXCUBE_SRV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXCUBE_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEXCUBE_SRV
        public D3D10TEXCUBE_SRV(global::SpoutDX.D3D10TEXCUBE_SRV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEXCUBE_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEXCUBE_SRV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEXCUBE_SRV.__Internal*) _0.__Instance);
        }

        ~D3D10TEXCUBE_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MostDetailedMip
        {
            get
            {
                return ((__Internal*)__Instance)->MostDetailedMip;
            }

            set
            {
                ((__Internal*)__Instance)->MostDetailedMip = value;
            }
        }

        public uint MipLevels
        {
            get
            {
                return ((__Internal*)__Instance)->MipLevels;
            }

            set
            {
                ((__Internal*)__Instance)->MipLevels = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2DMS_SRV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2DMS_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint UnusedField_NothingToDefine;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2DMS_SRV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2DMS_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2DMS_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2DMS_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2DMS_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2DMS_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2DMS_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2DMS_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2DMS_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2DMS_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2DMS_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2DMS_SRV
        public D3D10TEX2DMS_SRV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2DMS_SRV
        public D3D10TEX2DMS_SRV(global::SpoutDX.D3D10TEX2DMS_SRV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2DMS_SRV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2DMS_SRV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2DMS_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint UnusedFieldNothingToDefine
        {
            get
            {
                return ((__Internal*)__Instance)->UnusedField_NothingToDefine;
            }

            set
            {
                ((__Internal*)__Instance)->UnusedField_NothingToDefine = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2DMS_ARRAY_SRV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2DMS_ARRAY_SRV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2DMS_ARRAY_SRV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2DMS_ARRAY_SRV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2DMS_ARRAY_SRV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2DMS_ARRAY_SRV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2DMS_ARRAY_SRV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2DMS_ARRAY_SRV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2DMS_ARRAY_SRV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2DMS_ARRAY_SRV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2DMS_ARRAY_SRV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2DMS_ARRAY_SRV
        public D3D10TEX2DMS_ARRAY_SRV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2DMS_ARRAY_SRV
        public D3D10TEX2DMS_ARRAY_SRV(global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2DMS_ARRAY_SRV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D10_SHADER_RESOURCE_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_SRV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D10_BUFFER_SRV Buffer;
    // DEBUG:         D3D10_TEX1D_SRV Texture1D;
    // DEBUG:         D3D10_TEX1D_ARRAY_SRV Texture1DArray;
    // DEBUG:         D3D10_TEX2D_SRV Texture2D;
    // DEBUG:         D3D10_TEX2D_ARRAY_SRV Texture2DArray;
    // DEBUG:         D3D10_TEX2DMS_SRV Texture2DMS;
    // DEBUG:         D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    // DEBUG:         D3D10_TEX3D_SRV Texture3D;
    // DEBUG:         D3D10_TEXCUBE_SRV TextureCube;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D10SHADER_RESOURCE_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D_SRV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10BUFFER_SRV.__Internal Buffer;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX1D_SRV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2D_SRV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2DMS_SRV.__Internal Texture2DMS;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__Internal Texture2DMSArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX3D_SRV.__Internal Texture3D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEXCUBE_SRV.__Internal TextureCube;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_SHADER_RESOURCE_VIEW_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10SHADER_RESOURCE_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10SHADER_RESOURCE_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10SHADER_RESOURCE_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10SHADER_RESOURCE_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10SHADER_RESOURCE_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10SHADER_RESOURCE_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10SHADER_RESOURCE_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10SHADER_RESOURCE_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_SHADER_RESOURCE_VIEW_DESC
        public D3D10SHADER_RESOURCE_VIEW_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_SHADER_RESOURCE_VIEW_DESC
        public D3D10SHADER_RESOURCE_VIEW_DESC(global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10SHADER_RESOURCE_VIEW_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10SHADER_RESOURCE_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D_SRV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D10BUFFER_SRV Buffer
        {
            get
            {
                return global::SpoutDX.D3D10BUFFER_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Buffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Buffer = *(global::SpoutDX.D3D10BUFFER_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX1D_SRV Texture1D
        {
            get
            {
                return global::SpoutDX.D3D10TEX1D_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1D = *(global::SpoutDX.D3D10TEX1D_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX1D_ARRAY_SRV Texture1DArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1DArray = *(global::SpoutDX.D3D10TEX1D_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2D_SRV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D10TEX2D_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D10TEX2D_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2D_ARRAY_SRV Texture2DArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DArray = *(global::SpoutDX.D3D10TEX2D_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2DMS_SRV Texture2DMS
        {
            get
            {
                return global::SpoutDX.D3D10TEX2DMS_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMS));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMS = *(global::SpoutDX.D3D10TEX2DMS_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV Texture2DMSArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMSArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMSArray = *(global::SpoutDX.D3D10TEX2DMS_ARRAY_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX3D_SRV Texture3D
        {
            get
            {
                return global::SpoutDX.D3D10TEX3D_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture3D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture3D = *(global::SpoutDX.D3D10TEX3D_SRV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEXCUBE_SRV TextureCube
        {
            get
            {
                return global::SpoutDX.D3D10TEXCUBE_SRV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->TextureCube));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->TextureCube = *(global::SpoutDX.D3D10TEXCUBE_SRV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D10_BUFFER_RTV
    // DEBUG:     {
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT FirstElement;
    // DEBUG:         UINT ElementOffset;
    // DEBUG:         } 	;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         UINT NumElements;
    // DEBUG:         UINT ElementWidth;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D10BUFFER_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint FirstElement;

            [FieldOffset(0)]
            internal uint ElementOffset;

            [FieldOffset(4)]
            internal uint FirstElement1;

            [FieldOffset(4)]
            internal uint ElementOffset1;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_BUFFER_RTV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BUFFER_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10BUFFER_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10BUFFER_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10BUFFER_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10BUFFER_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10BUFFER_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10BUFFER_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D10BUFFER_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10BUFFER_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10BUFFER_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10BUFFER_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10BUFFER_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10BUFFER_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_BUFFER_RTV
        public D3D10BUFFER_RTV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BUFFER_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_BUFFER_RTV
        public D3D10BUFFER_RTV(global::SpoutDX.D3D10BUFFER_RTV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10BUFFER_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10BUFFER_RTV.__Internal*) __Instance) = *((global::SpoutDX.D3D10BUFFER_RTV.__Internal*) _0.__Instance);
        }

        ~D3D10BUFFER_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstElement
        {
            get
            {
                return ((__Internal*)__Instance)->FirstElement;
            }

            set
            {
                ((__Internal*)__Instance)->FirstElement = value;
            }
        }

        public uint ElementOffset
        {
            get
            {
                return ((__Internal*)__Instance)->ElementOffset;
            }

            set
            {
                ((__Internal*)__Instance)->ElementOffset = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX1D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D10TEX1D_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX1D_RTV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX1D_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX1D_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX1D_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX1D_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX1D_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX1D_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX1D_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX1D_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX1D_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX1D_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX1D_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX1D_RTV
        public D3D10TEX1D_RTV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX1D_RTV
        public D3D10TEX1D_RTV(global::SpoutDX.D3D10TEX1D_RTV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX1D_RTV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX1D_RTV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX1D_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX1D_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX1D_ARRAY_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX1D_ARRAY_RTV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_ARRAY_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_ARRAY_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX1D_ARRAY_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX1D_ARRAY_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX1D_ARRAY_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX1D_ARRAY_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX1D_ARRAY_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX1D_ARRAY_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX1D_ARRAY_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX1D_ARRAY_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX1D_ARRAY_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX1D_ARRAY_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX1D_ARRAY_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX1D_ARRAY_RTV
        public D3D10TEX1D_ARRAY_RTV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_ARRAY_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX1D_ARRAY_RTV
        public D3D10TEX1D_ARRAY_RTV(global::SpoutDX.D3D10TEX1D_ARRAY_RTV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_ARRAY_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX1D_ARRAY_RTV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX1D_ARRAY_RTV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX1D_ARRAY_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2D_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2D_RTV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2D_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2D_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2D_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2D_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2D_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2D_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2D_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2D_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2D_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2D_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2D_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2D_RTV
        public D3D10TEX2D_RTV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2D_RTV
        public D3D10TEX2D_RTV(global::SpoutDX.D3D10TEX2D_RTV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2D_RTV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2D_RTV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2D_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2DMS_RTV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2DMS_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint UnusedField_NothingToDefine;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2DMS_RTV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2DMS_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2DMS_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2DMS_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2DMS_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2DMS_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2DMS_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2DMS_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2DMS_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2DMS_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2DMS_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2DMS_RTV
        public D3D10TEX2DMS_RTV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2DMS_RTV
        public D3D10TEX2DMS_RTV(global::SpoutDX.D3D10TEX2DMS_RTV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2DMS_RTV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2DMS_RTV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2DMS_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint UnusedFieldNothingToDefine
        {
            get
            {
                return ((__Internal*)__Instance)->UnusedField_NothingToDefine;
            }

            set
            {
                ((__Internal*)__Instance)->UnusedField_NothingToDefine = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2D_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2D_ARRAY_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2D_ARRAY_RTV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_ARRAY_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_ARRAY_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2D_ARRAY_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2D_ARRAY_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2D_ARRAY_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2D_ARRAY_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2D_ARRAY_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2D_ARRAY_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2D_ARRAY_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2D_ARRAY_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2D_ARRAY_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2D_ARRAY_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2D_ARRAY_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2D_ARRAY_RTV
        public D3D10TEX2D_ARRAY_RTV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_ARRAY_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2D_ARRAY_RTV
        public D3D10TEX2D_ARRAY_RTV(global::SpoutDX.D3D10TEX2D_ARRAY_RTV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_ARRAY_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2D_ARRAY_RTV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2D_ARRAY_RTV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2D_ARRAY_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2DMS_ARRAY_RTV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2DMS_ARRAY_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2DMS_ARRAY_RTV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2DMS_ARRAY_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2DMS_ARRAY_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2DMS_ARRAY_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2DMS_ARRAY_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2DMS_ARRAY_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2DMS_ARRAY_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2DMS_ARRAY_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2DMS_ARRAY_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2DMS_ARRAY_RTV
        public D3D10TEX2DMS_ARRAY_RTV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2DMS_ARRAY_RTV
        public D3D10TEX2DMS_ARRAY_RTV(global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2DMS_ARRAY_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX3D_RTV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstWSlice;
    // DEBUG:     UINT WSize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX3D_RTV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstWSlice;
            internal uint WSize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX3D_RTV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX3D_RTV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX3D_RTV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX3D_RTV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX3D_RTV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX3D_RTV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX3D_RTV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX3D_RTV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX3D_RTV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX3D_RTV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX3D_RTV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX3D_RTV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX3D_RTV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX3D_RTV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX3D_RTV
        public D3D10TEX3D_RTV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX3D_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX3D_RTV
        public D3D10TEX3D_RTV(global::SpoutDX.D3D10TEX3D_RTV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX3D_RTV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX3D_RTV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX3D_RTV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX3D_RTV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstWSlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstWSlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstWSlice = value;
            }
        }

        public uint WSize
        {
            get
            {
                return ((__Internal*)__Instance)->WSize;
            }

            set
            {
                ((__Internal*)__Instance)->WSize = value;
            }
        }
    }

    // DEBUG: struct D3D10_RENDER_TARGET_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_RTV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D10_BUFFER_RTV Buffer;
    // DEBUG:         D3D10_TEX1D_RTV Texture1D;
    // DEBUG:         D3D10_TEX1D_ARRAY_RTV Texture1DArray;
    // DEBUG:         D3D10_TEX2D_RTV Texture2D;
    // DEBUG:         D3D10_TEX2D_ARRAY_RTV Texture2DArray;
    // DEBUG:         D3D10_TEX2DMS_RTV Texture2DMS;
    // DEBUG:         D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
    // DEBUG:         D3D10_TEX3D_RTV Texture3D;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D10RENDER_TARGET_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D10RTV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10BUFFER_RTV.__Internal Buffer;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX1D_RTV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX1D_ARRAY_RTV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2D_RTV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2D_ARRAY_RTV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2DMS_RTV.__Internal Texture2DMS;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV.__Internal Texture2DMSArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX3D_RTV.__Internal Texture3D;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_RENDER_TARGET_VIEW_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10RENDER_TARGET_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10RENDER_TARGET_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10RENDER_TARGET_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10RENDER_TARGET_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10RENDER_TARGET_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10RENDER_TARGET_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10RENDER_TARGET_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10RENDER_TARGET_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_RENDER_TARGET_VIEW_DESC
        public D3D10RENDER_TARGET_VIEW_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_RENDER_TARGET_VIEW_DESC
        public D3D10RENDER_TARGET_VIEW_DESC(global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10RENDER_TARGET_VIEW_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10RENDER_TARGET_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10RTV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D10BUFFER_RTV Buffer
        {
            get
            {
                return global::SpoutDX.D3D10BUFFER_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Buffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Buffer = *(global::SpoutDX.D3D10BUFFER_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX1D_RTV Texture1D
        {
            get
            {
                return global::SpoutDX.D3D10TEX1D_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1D = *(global::SpoutDX.D3D10TEX1D_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX1D_ARRAY_RTV Texture1DArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX1D_ARRAY_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1DArray = *(global::SpoutDX.D3D10TEX1D_ARRAY_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2D_RTV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D10TEX2D_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D10TEX2D_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2D_ARRAY_RTV Texture2DArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX2D_ARRAY_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DArray = *(global::SpoutDX.D3D10TEX2D_ARRAY_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2DMS_RTV Texture2DMS
        {
            get
            {
                return global::SpoutDX.D3D10TEX2DMS_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMS));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMS = *(global::SpoutDX.D3D10TEX2DMS_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV Texture2DMSArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMSArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMSArray = *(global::SpoutDX.D3D10TEX2DMS_ARRAY_RTV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX3D_RTV Texture3D
        {
            get
            {
                return global::SpoutDX.D3D10TEX3D_RTV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture3D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture3D = *(global::SpoutDX.D3D10TEX3D_RTV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D10_TEX1D_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D10TEX1D_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX1D_DSV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX1D_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX1D_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX1D_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX1D_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX1D_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX1D_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX1D_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX1D_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX1D_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX1D_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX1D_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX1D_DSV
        public D3D10TEX1D_DSV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX1D_DSV
        public D3D10TEX1D_DSV(global::SpoutDX.D3D10TEX1D_DSV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX1D_DSV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX1D_DSV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX1D_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX1D_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX1D_ARRAY_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX1D_ARRAY_DSV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_ARRAY_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX1D_ARRAY_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX1D_ARRAY_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX1D_ARRAY_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX1D_ARRAY_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX1D_ARRAY_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX1D_ARRAY_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX1D_ARRAY_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX1D_ARRAY_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX1D_ARRAY_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX1D_ARRAY_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX1D_ARRAY_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX1D_ARRAY_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX1D_ARRAY_DSV
        public D3D10TEX1D_ARRAY_DSV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_ARRAY_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX1D_ARRAY_DSV
        public D3D10TEX1D_ARRAY_DSV(global::SpoutDX.D3D10TEX1D_ARRAY_DSV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX1D_ARRAY_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX1D_ARRAY_DSV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX1D_ARRAY_DSV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX1D_ARRAY_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2D_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2D_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint MipSlice;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2D_DSV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2D_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2D_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2D_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2D_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2D_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2D_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2D_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2D_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2D_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2D_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2D_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2D_DSV
        public D3D10TEX2D_DSV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2D_DSV
        public D3D10TEX2D_DSV(global::SpoutDX.D3D10TEX2D_DSV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2D_DSV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2D_DSV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2D_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2D_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT MipSlice;
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2D_ARRAY_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal uint MipSlice;
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2D_ARRAY_DSV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_ARRAY_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2D_ARRAY_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2D_ARRAY_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2D_ARRAY_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2D_ARRAY_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2D_ARRAY_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2D_ARRAY_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2D_ARRAY_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2D_ARRAY_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2D_ARRAY_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2D_ARRAY_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2D_ARRAY_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2D_ARRAY_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2D_ARRAY_DSV
        public D3D10TEX2D_ARRAY_DSV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_ARRAY_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2D_ARRAY_DSV
        public D3D10TEX2D_ARRAY_DSV(global::SpoutDX.D3D10TEX2D_ARRAY_DSV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2D_ARRAY_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2D_ARRAY_DSV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2D_ARRAY_DSV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2D_ARRAY_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MipSlice
        {
            get
            {
                return ((__Internal*)__Instance)->MipSlice;
            }

            set
            {
                ((__Internal*)__Instance)->MipSlice = value;
            }
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2DMS_DSV
    // DEBUG:     {
    // DEBUG:     UINT UnusedField_NothingToDefine;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2DMS_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal uint UnusedField_NothingToDefine;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2DMS_DSV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2DMS_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2DMS_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2DMS_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2DMS_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2DMS_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2DMS_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2DMS_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2DMS_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2DMS_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2DMS_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2DMS_DSV
        public D3D10TEX2DMS_DSV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2DMS_DSV
        public D3D10TEX2DMS_DSV(global::SpoutDX.D3D10TEX2DMS_DSV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2DMS_DSV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2DMS_DSV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2DMS_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint UnusedFieldNothingToDefine
        {
            get
            {
                return ((__Internal*)__Instance)->UnusedField_NothingToDefine;
            }

            set
            {
                ((__Internal*)__Instance)->UnusedField_NothingToDefine = value;
            }
        }
    }

    // DEBUG: struct D3D10_TEX2DMS_ARRAY_DSV
    // DEBUG:     {
    // DEBUG:     UINT FirstArraySlice;
    // DEBUG:     UINT ArraySize;
    // DEBUG:     }
    public unsafe partial class D3D10TEX2DMS_ARRAY_DSV : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint FirstArraySlice;
            internal uint ArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_TEX2DMS_ARRAY_DSV@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10TEX2DMS_ARRAY_DSV __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10TEX2DMS_ARRAY_DSV(native.ToPointer(), skipVTables);
        }

        internal static D3D10TEX2DMS_ARRAY_DSV __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10TEX2DMS_ARRAY_DSV)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10TEX2DMS_ARRAY_DSV __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10TEX2DMS_ARRAY_DSV(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10TEX2DMS_ARRAY_DSV(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10TEX2DMS_ARRAY_DSV(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_TEX2DMS_ARRAY_DSV
        public D3D10TEX2DMS_ARRAY_DSV()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_TEX2DMS_ARRAY_DSV
        public D3D10TEX2DMS_ARRAY_DSV(global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV.__Internal*) __Instance) = *((global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV.__Internal*) _0.__Instance);
        }

        ~D3D10TEX2DMS_ARRAY_DSV()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FirstArraySlice
        {
            get
            {
                return ((__Internal*)__Instance)->FirstArraySlice;
            }

            set
            {
                ((__Internal*)__Instance)->FirstArraySlice = value;
            }
        }

        public uint ArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->ArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->ArraySize = value;
            }
        }
    }

    // DEBUG: struct D3D10_DEPTH_STENCIL_VIEW_DESC
    // DEBUG:     {
    // DEBUG:     DXGI_FORMAT Format;
    // DEBUG:     D3D10_DSV_DIMENSION ViewDimension;
    // DEBUG:     union 
    // DEBUG:         {
    // DEBUG:         D3D10_TEX1D_DSV Texture1D;
    // DEBUG:         D3D10_TEX1D_ARRAY_DSV Texture1DArray;
    // DEBUG:         D3D10_TEX2D_DSV Texture2D;
    // DEBUG:         D3D10_TEX2D_ARRAY_DSV Texture2DArray;
    // DEBUG:         D3D10_TEX2DMS_DSV Texture2DMS;
    // DEBUG:         D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    // DEBUG:         } 	;
    // DEBUG:     }
    public unsafe partial class D3D10DEPTH_STENCIL_VIEW_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::DXGI_FORMAT Format;

            [FieldOffset(4)]
            internal global::SpoutDX.D3D10DSV_DIMENSION ViewDimension;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX1D_DSV.__Internal Texture1D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX1D_ARRAY_DSV.__Internal Texture1DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2D_DSV.__Internal Texture2D;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2D_ARRAY_DSV.__Internal Texture2DArray;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2DMS_DSV.__Internal Texture2DMS;

            [FieldOffset(8)]
            internal global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV.__Internal Texture2DMSArray;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_DEPTH_STENCIL_VIEW_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10DEPTH_STENCIL_VIEW_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10DEPTH_STENCIL_VIEW_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10DEPTH_STENCIL_VIEW_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10DEPTH_STENCIL_VIEW_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10DEPTH_STENCIL_VIEW_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10DEPTH_STENCIL_VIEW_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10DEPTH_STENCIL_VIEW_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10DEPTH_STENCIL_VIEW_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_DEPTH_STENCIL_VIEW_DESC
        public D3D10DEPTH_STENCIL_VIEW_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_DEPTH_STENCIL_VIEW_DESC
        public D3D10DEPTH_STENCIL_VIEW_DESC(global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10DEPTH_STENCIL_VIEW_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10DEPTH_STENCIL_VIEW_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10DSV_DIMENSION ViewDimension
        {
            get
            {
                return ((__Internal*)__Instance)->ViewDimension;
            }

            set
            {
                ((__Internal*)__Instance)->ViewDimension = value;
            }
        }

        public global::SpoutDX.D3D10TEX1D_DSV Texture1D
        {
            get
            {
                return global::SpoutDX.D3D10TEX1D_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1D = *(global::SpoutDX.D3D10TEX1D_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX1D_ARRAY_DSV Texture1DArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX1D_ARRAY_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture1DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture1DArray = *(global::SpoutDX.D3D10TEX1D_ARRAY_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2D_DSV Texture2D
        {
            get
            {
                return global::SpoutDX.D3D10TEX2D_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2D));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2D = *(global::SpoutDX.D3D10TEX2D_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2D_ARRAY_DSV Texture2DArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX2D_ARRAY_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DArray = *(global::SpoutDX.D3D10TEX2D_ARRAY_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2DMS_DSV Texture2DMS
        {
            get
            {
                return global::SpoutDX.D3D10TEX2DMS_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMS));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMS = *(global::SpoutDX.D3D10TEX2DMS_DSV.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV Texture2DMSArray
        {
            get
            {
                return global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Texture2DMSArray));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Texture2DMSArray = *(global::SpoutDX.D3D10TEX2DMS_ARRAY_DSV.__Internal*) value.__Instance;
            }
        }
    }

    // DEBUG: struct D3D10_SAMPLER_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_FILTER Filter;
    // DEBUG:     D3D10_TEXTURE_ADDRESS_MODE AddressU;
    // DEBUG:     D3D10_TEXTURE_ADDRESS_MODE AddressV;
    // DEBUG:     D3D10_TEXTURE_ADDRESS_MODE AddressW;
    // DEBUG:     FLOAT MipLODBias;
    // DEBUG:     UINT MaxAnisotropy;
    // DEBUG:     D3D10_COMPARISON_FUNC ComparisonFunc;
    // DEBUG:     FLOAT BorderColor[ 4 ];
    // DEBUG:     FLOAT MinLOD;
    // DEBUG:     FLOAT MaxLOD;
    // DEBUG:     }
    public unsafe partial class D3D10SAMPLER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 52)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D10FILTER Filter;
            internal global::SpoutDX.D3D10TEXTURE_ADDRESS_MODE AddressU;
            internal global::SpoutDX.D3D10TEXTURE_ADDRESS_MODE AddressV;
            internal global::SpoutDX.D3D10TEXTURE_ADDRESS_MODE AddressW;
            internal float MipLODBias;
            internal uint MaxAnisotropy;
            internal global::SpoutDX.D3D10COMPARISON_FUNC ComparisonFunc;
            internal fixed float BorderColor[4];
            internal float MinLOD;
            internal float MaxLOD;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_SAMPLER_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SAMPLER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10SAMPLER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10SAMPLER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10SAMPLER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10SAMPLER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10SAMPLER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10SAMPLER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10SAMPLER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10SAMPLER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10SAMPLER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10SAMPLER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10SAMPLER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10SAMPLER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_SAMPLER_DESC
        public D3D10SAMPLER_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SAMPLER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_SAMPLER_DESC
        public D3D10SAMPLER_DESC(global::SpoutDX.D3D10SAMPLER_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10SAMPLER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10SAMPLER_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10SAMPLER_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10SAMPLER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10FILTER Filter
        {
            get
            {
                return ((__Internal*)__Instance)->Filter;
            }

            set
            {
                ((__Internal*)__Instance)->Filter = value;
            }
        }

        public global::SpoutDX.D3D10TEXTURE_ADDRESS_MODE AddressU
        {
            get
            {
                return ((__Internal*)__Instance)->AddressU;
            }

            set
            {
                ((__Internal*)__Instance)->AddressU = value;
            }
        }

        public global::SpoutDX.D3D10TEXTURE_ADDRESS_MODE AddressV
        {
            get
            {
                return ((__Internal*)__Instance)->AddressV;
            }

            set
            {
                ((__Internal*)__Instance)->AddressV = value;
            }
        }

        public global::SpoutDX.D3D10TEXTURE_ADDRESS_MODE AddressW
        {
            get
            {
                return ((__Internal*)__Instance)->AddressW;
            }

            set
            {
                ((__Internal*)__Instance)->AddressW = value;
            }
        }

        public float MipLODBias
        {
            get
            {
                return ((__Internal*)__Instance)->MipLODBias;
            }

            set
            {
                ((__Internal*)__Instance)->MipLODBias = value;
            }
        }

        public uint MaxAnisotropy
        {
            get
            {
                return ((__Internal*)__Instance)->MaxAnisotropy;
            }

            set
            {
                ((__Internal*)__Instance)->MaxAnisotropy = value;
            }
        }

        public global::SpoutDX.D3D10COMPARISON_FUNC ComparisonFunc
        {
            get
            {
                return ((__Internal*)__Instance)->ComparisonFunc;
            }

            set
            {
                ((__Internal*)__Instance)->ComparisonFunc = value;
            }
        }

        public float[] BorderColor
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<float>(((__Internal*)__Instance)->BorderColor, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->BorderColor[i] = value[i];
                }
            }
        }

        public float MinLOD
        {
            get
            {
                return ((__Internal*)__Instance)->MinLOD;
            }

            set
            {
                ((__Internal*)__Instance)->MinLOD = value;
            }
        }

        public float MaxLOD
        {
            get
            {
                return ((__Internal*)__Instance)->MaxLOD;
            }

            set
            {
                ((__Internal*)__Instance)->MaxLOD = value;
            }
        }
    }

    // DEBUG: struct D3D10_QUERY_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_QUERY Query;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D10QUERY_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D10QUERY Query;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_QUERY_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10QUERY_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10QUERY_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10QUERY_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10QUERY_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10QUERY_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10QUERY_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10QUERY_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10QUERY_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10QUERY_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10QUERY_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10QUERY_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10QUERY_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10QUERY_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_QUERY_DESC
        public D3D10QUERY_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10QUERY_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_QUERY_DESC
        public D3D10QUERY_DESC(global::SpoutDX.D3D10QUERY_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10QUERY_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10QUERY_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10QUERY_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10QUERY_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10QUERY Query
        {
            get
            {
                return ((__Internal*)__Instance)->Query;
            }

            set
            {
                ((__Internal*)__Instance)->Query = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
    // DEBUG:     {
    // DEBUG:     UINT64 Frequency;
    // DEBUG:     BOOL Disjoint;
    // DEBUG:     }
    public unsafe partial class D3D10QUERY_DATA_TIMESTAMP_DISJOINT : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ulong Frequency;
            internal int Disjoint;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_QUERY_DATA_TIMESTAMP_DISJOINT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10QUERY_DATA_TIMESTAMP_DISJOINT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10QUERY_DATA_TIMESTAMP_DISJOINT(native.ToPointer(), skipVTables);
        }

        internal static D3D10QUERY_DATA_TIMESTAMP_DISJOINT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10QUERY_DATA_TIMESTAMP_DISJOINT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10QUERY_DATA_TIMESTAMP_DISJOINT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10QUERY_DATA_TIMESTAMP_DISJOINT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10QUERY_DATA_TIMESTAMP_DISJOINT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10QUERY_DATA_TIMESTAMP_DISJOINT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
        public D3D10QUERY_DATA_TIMESTAMP_DISJOINT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
        public D3D10QUERY_DATA_TIMESTAMP_DISJOINT(global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT.__Internal*) __Instance) = *((global::SpoutDX.D3D10QUERY_DATA_TIMESTAMP_DISJOINT.__Internal*) _0.__Instance);
        }

        ~D3D10QUERY_DATA_TIMESTAMP_DISJOINT()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Frequency
        {
            get
            {
                return ((__Internal*)__Instance)->Frequency;
            }

            set
            {
                ((__Internal*)__Instance)->Frequency = value;
            }
        }

        public int Disjoint
        {
            get
            {
                return ((__Internal*)__Instance)->Disjoint;
            }

            set
            {
                ((__Internal*)__Instance)->Disjoint = value;
            }
        }
    }

    // DEBUG: struct D3D10_QUERY_DATA_PIPELINE_STATISTICS
    // DEBUG:     {
    // DEBUG:     UINT64 IAVertices;
    // DEBUG:     UINT64 IAPrimitives;
    // DEBUG:     UINT64 VSInvocations;
    // DEBUG:     UINT64 GSInvocations;
    // DEBUG:     UINT64 GSPrimitives;
    // DEBUG:     UINT64 CInvocations;
    // DEBUG:     UINT64 CPrimitives;
    // DEBUG:     UINT64 PSInvocations;
    // DEBUG:     }
    public unsafe partial class D3D10QUERY_DATA_PIPELINE_STATISTICS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 64)]
        public partial struct __Internal
        {
            internal ulong IAVertices;
            internal ulong IAPrimitives;
            internal ulong VSInvocations;
            internal ulong GSInvocations;
            internal ulong GSPrimitives;
            internal ulong CInvocations;
            internal ulong CPrimitives;
            internal ulong PSInvocations;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_QUERY_DATA_PIPELINE_STATISTICS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10QUERY_DATA_PIPELINE_STATISTICS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10QUERY_DATA_PIPELINE_STATISTICS(native.ToPointer(), skipVTables);
        }

        internal static D3D10QUERY_DATA_PIPELINE_STATISTICS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10QUERY_DATA_PIPELINE_STATISTICS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10QUERY_DATA_PIPELINE_STATISTICS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10QUERY_DATA_PIPELINE_STATISTICS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10QUERY_DATA_PIPELINE_STATISTICS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10QUERY_DATA_PIPELINE_STATISTICS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_QUERY_DATA_PIPELINE_STATISTICS
        public D3D10QUERY_DATA_PIPELINE_STATISTICS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_QUERY_DATA_PIPELINE_STATISTICS
        public D3D10QUERY_DATA_PIPELINE_STATISTICS(global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS.__Internal*) __Instance) = *((global::SpoutDX.D3D10QUERY_DATA_PIPELINE_STATISTICS.__Internal*) _0.__Instance);
        }

        ~D3D10QUERY_DATA_PIPELINE_STATISTICS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong IAVertices
        {
            get
            {
                return ((__Internal*)__Instance)->IAVertices;
            }

            set
            {
                ((__Internal*)__Instance)->IAVertices = value;
            }
        }

        public ulong IAPrimitives
        {
            get
            {
                return ((__Internal*)__Instance)->IAPrimitives;
            }

            set
            {
                ((__Internal*)__Instance)->IAPrimitives = value;
            }
        }

        public ulong VSInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->VSInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->VSInvocations = value;
            }
        }

        public ulong GSInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->GSInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->GSInvocations = value;
            }
        }

        public ulong GSPrimitives
        {
            get
            {
                return ((__Internal*)__Instance)->GSPrimitives;
            }

            set
            {
                ((__Internal*)__Instance)->GSPrimitives = value;
            }
        }

        public ulong CInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->CInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->CInvocations = value;
            }
        }

        public ulong CPrimitives
        {
            get
            {
                return ((__Internal*)__Instance)->CPrimitives;
            }

            set
            {
                ((__Internal*)__Instance)->CPrimitives = value;
            }
        }

        public ulong PSInvocations
        {
            get
            {
                return ((__Internal*)__Instance)->PSInvocations;
            }

            set
            {
                ((__Internal*)__Instance)->PSInvocations = value;
            }
        }
    }

    // DEBUG: struct D3D10_QUERY_DATA_SO_STATISTICS
    // DEBUG:     {
    // DEBUG:     UINT64 NumPrimitivesWritten;
    // DEBUG:     UINT64 PrimitivesStorageNeeded;
    // DEBUG:     }
    public unsafe partial class D3D10QUERY_DATA_SO_STATISTICS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ulong NumPrimitivesWritten;
            internal ulong PrimitivesStorageNeeded;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_QUERY_DATA_SO_STATISTICS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10QUERY_DATA_SO_STATISTICS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10QUERY_DATA_SO_STATISTICS(native.ToPointer(), skipVTables);
        }

        internal static D3D10QUERY_DATA_SO_STATISTICS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10QUERY_DATA_SO_STATISTICS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10QUERY_DATA_SO_STATISTICS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10QUERY_DATA_SO_STATISTICS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10QUERY_DATA_SO_STATISTICS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10QUERY_DATA_SO_STATISTICS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_QUERY_DATA_SO_STATISTICS
        public D3D10QUERY_DATA_SO_STATISTICS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_QUERY_DATA_SO_STATISTICS
        public D3D10QUERY_DATA_SO_STATISTICS(global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS.__Internal*) __Instance) = *((global::SpoutDX.D3D10QUERY_DATA_SO_STATISTICS.__Internal*) _0.__Instance);
        }

        ~D3D10QUERY_DATA_SO_STATISTICS()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong NumPrimitivesWritten
        {
            get
            {
                return ((__Internal*)__Instance)->NumPrimitivesWritten;
            }

            set
            {
                ((__Internal*)__Instance)->NumPrimitivesWritten = value;
            }
        }

        public ulong PrimitivesStorageNeeded
        {
            get
            {
                return ((__Internal*)__Instance)->PrimitivesStorageNeeded;
            }

            set
            {
                ((__Internal*)__Instance)->PrimitivesStorageNeeded = value;
            }
        }
    }

    // DEBUG: struct D3D10_COUNTER_DESC
    // DEBUG:     {
    // DEBUG:     D3D10_COUNTER Counter;
    // DEBUG:     UINT MiscFlags;
    // DEBUG:     }
    public unsafe partial class D3D10COUNTER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D10COUNTER Counter;
            internal uint MiscFlags;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_COUNTER_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10COUNTER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10COUNTER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10COUNTER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10COUNTER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10COUNTER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10COUNTER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10COUNTER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10COUNTER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10COUNTER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10COUNTER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10COUNTER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10COUNTER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10COUNTER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_COUNTER_DESC
        public D3D10COUNTER_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10COUNTER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_COUNTER_DESC
        public D3D10COUNTER_DESC(global::SpoutDX.D3D10COUNTER_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10COUNTER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10COUNTER_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10COUNTER_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10COUNTER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10COUNTER Counter
        {
            get
            {
                return ((__Internal*)__Instance)->Counter;
            }

            set
            {
                ((__Internal*)__Instance)->Counter = value;
            }
        }

        public uint MiscFlags
        {
            get
            {
                return ((__Internal*)__Instance)->MiscFlags;
            }

            set
            {
                ((__Internal*)__Instance)->MiscFlags = value;
            }
        }
    }

    // DEBUG: struct D3D10_COUNTER_INFO
    // DEBUG:     {
    // DEBUG:     D3D10_COUNTER LastDeviceDependentCounter;
    // DEBUG:     UINT NumSimultaneousCounters;
    // DEBUG:     UINT8 NumDetectableParallelUnits;
    // DEBUG:     }
    public unsafe partial class D3D10COUNTER_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 12)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D10COUNTER LastDeviceDependentCounter;
            internal uint NumSimultaneousCounters;
            internal byte NumDetectableParallelUnits;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_COUNTER_INFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10COUNTER_INFO>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10COUNTER_INFO>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10COUNTER_INFO managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10COUNTER_INFO>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10COUNTER_INFO managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10COUNTER_INFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10COUNTER_INFO(native.ToPointer(), skipVTables);
        }

        internal static D3D10COUNTER_INFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10COUNTER_INFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10COUNTER_INFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10COUNTER_INFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10COUNTER_INFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10COUNTER_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_COUNTER_INFO
        public D3D10COUNTER_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10COUNTER_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_COUNTER_INFO
        public D3D10COUNTER_INFO(global::SpoutDX.D3D10COUNTER_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10COUNTER_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10COUNTER_INFO.__Internal*) __Instance) = *((global::SpoutDX.D3D10COUNTER_INFO.__Internal*) _0.__Instance);
        }

        ~D3D10COUNTER_INFO()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10COUNTER LastDeviceDependentCounter
        {
            get
            {
                return ((__Internal*)__Instance)->LastDeviceDependentCounter;
            }

            set
            {
                ((__Internal*)__Instance)->LastDeviceDependentCounter = value;
            }
        }

        public uint NumSimultaneousCounters
        {
            get
            {
                return ((__Internal*)__Instance)->NumSimultaneousCounters;
            }

            set
            {
                ((__Internal*)__Instance)->NumSimultaneousCounters = value;
            }
        }

        public byte NumDetectableParallelUnits
        {
            get
            {
                return ((__Internal*)__Instance)->NumDetectableParallelUnits;
            }

            set
            {
                ((__Internal*)__Instance)->NumDetectableParallelUnits = value;
            }
        }
    }

    public unsafe partial class d3d10
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "D3D10CalcSubresource", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint D3D10CalcSubresource(uint MipSlice, uint ArraySlice, uint MipLevels);
        }

        // DEBUG: inline UINT D3D10CalcSubresource( UINT MipSlice, UINT ArraySlice, UINT MipLevels )
        // DEBUG: { return MipSlice + ArraySlice * MipLevels; }
        public static uint D3D10CalcSubresource(uint MipSlice, uint ArraySlice, uint MipLevels)
        {
            var ___ret = __Internal.D3D10CalcSubresource(MipSlice, ArraySlice, MipLevels);
            return ___ret;
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0000_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0000V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0000_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0000_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0000_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0000V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0000_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0000_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0001_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0001V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0001_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0001_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0001_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0001V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0001_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0001_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0002_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0002V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0002_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0002_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0002_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0002V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0002_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0002_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0003_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0003V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0003_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0003_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0003_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0003V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0003_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0003_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0004_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0004V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0004_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0004_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0004_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0004V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0004_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0004_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0005_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0005V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0005_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0005_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0005_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0005V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0005_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0005_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0006_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0006V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0006_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0006_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0006_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0006V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0006_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0006_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0007_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0007V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0007_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0007_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0007_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0007V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0007_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0007_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0008_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0008V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0008_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0008_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0008_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0008V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0008_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0008_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0009_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0009V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0009_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0009_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0009_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0009V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0009_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0009_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0010_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0010V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0010_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0010_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0010_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0010V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0010_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0010_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0011_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0011V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0011_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0011_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0011_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0011V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0011_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0011_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0012_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0012V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0012_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0012_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0012_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0012V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0012_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0012_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0017_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0017V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0017_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0017_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0017_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0017V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0017_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0017_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0018_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0018V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0018_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0018_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0018_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0018V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0018_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0018_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0019_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0019V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0019_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0019_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0019_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0019V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0019_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0019_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0021_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0021V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0021_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0021_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0021_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0021V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0021_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0021_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0023_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0023V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0023_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0023_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0023_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0023V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0023_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0023_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0024_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0024V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0024_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0024_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0024_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10_0000_0024V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0024_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10_0000_0024_v0_0_s_ifspec;
                *__ptr = value;
            }
        }
    }

    // DEBUG: enum D3D10_MESSAGE_CATEGORY
    // DEBUG:     {
    // DEBUG:         D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED	= 0,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_MISCELLANEOUS	= ( D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_INITIALIZATION	= ( D3D10_MESSAGE_CATEGORY_MISCELLANEOUS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_CLEANUP	= ( D3D10_MESSAGE_CATEGORY_INITIALIZATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_COMPILATION	= ( D3D10_MESSAGE_CATEGORY_CLEANUP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_STATE_CREATION	= ( D3D10_MESSAGE_CATEGORY_COMPILATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_STATE_SETTING	= ( D3D10_MESSAGE_CATEGORY_STATE_CREATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_STATE_GETTING	= ( D3D10_MESSAGE_CATEGORY_STATE_SETTING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION	= ( D3D10_MESSAGE_CATEGORY_STATE_GETTING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_EXECUTION	= ( D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_SHADER	= ( D3D10_MESSAGE_CATEGORY_EXECUTION + 1 ) 
    // DEBUG:     }
    public enum D3D10MESSAGE_CATEGORY
    {
        D3D10MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
        D3D10MESSAGE_CATEGORY_MISCELLANEOUS = 1,
        D3D10MESSAGE_CATEGORY_INITIALIZATION = 2,
        D3D10MESSAGE_CATEGORY_CLEANUP = 3,
        D3D10MESSAGE_CATEGORY_COMPILATION = 4,
        D3D10MESSAGE_CATEGORY_STATE_CREATION = 5,
        D3D10MESSAGE_CATEGORY_STATE_SETTING = 6,
        D3D10MESSAGE_CATEGORY_STATE_GETTING = 7,
        D3D10MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8,
        D3D10MESSAGE_CATEGORY_EXECUTION = 9,
        D3D10MESSAGE_CATEGORY_SHADER = 10
    }

    // DEBUG: enum D3D10_MESSAGE_SEVERITY
    // DEBUG:     {
    // DEBUG:         D3D10_MESSAGE_SEVERITY_CORRUPTION	= 0,
    // DEBUG:         D3D10_MESSAGE_SEVERITY_ERROR	= ( D3D10_MESSAGE_SEVERITY_CORRUPTION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_SEVERITY_WARNING	= ( D3D10_MESSAGE_SEVERITY_ERROR + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_SEVERITY_INFO	= ( D3D10_MESSAGE_SEVERITY_WARNING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_SEVERITY_MESSAGE	= ( D3D10_MESSAGE_SEVERITY_INFO + 1 ) 
    // DEBUG:     }
    public enum D3D10MESSAGE_SEVERITY
    {
        D3D10MESSAGE_SEVERITY_CORRUPTION = 0,
        D3D10MESSAGE_SEVERITY_ERROR = 1,
        D3D10MESSAGE_SEVERITY_WARNING = 2,
        D3D10MESSAGE_SEVERITY_INFO = 3,
        D3D10MESSAGE_SEVERITY_MESSAGE = 4
    }

    // DEBUG: enum D3D10_MESSAGE_ID
    // DEBUG:     {
    // DEBUG:         D3D10_MESSAGE_ID_UNKNOWN	= 0,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD	= ( D3D10_MESSAGE_ID_UNKNOWN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_STRING_FROM_APPLICATION	= ( D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_THIS	= ( D3D10_MESSAGE_ID_STRING_FROM_APPLICATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1	= ( D3D10_MESSAGE_ID_CORRUPTED_THIS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA	= ( D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA	= ( D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE	= ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE	= ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE	= ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE	= ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE	= ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG	= ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED	= ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED	= ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE	= ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID	= ( D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE	= ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT	= ( D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR	= ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH	= ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH	= ( D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID	= ( D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE	= ( D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE	= ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE	= ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE	= ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX	= ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE	= ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID	= ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED	= ( D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED	= ( D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE	= ( D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE	= ( D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE	= ( D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED	= ( D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED	= ( D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS	= ( D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE	= ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_THREADING_MODE	= ( D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION	= ( D3D10_MESSAGE_ID_REF_THREADING_MODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION	= ( D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION	= ( D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE	= ( D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER	= ( D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY	= ( D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_INFO	= ( D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_REF_INFO + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT	= ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT	= ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN	= ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW	= ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY	= ( D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER	= ( D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED	= ( D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER	= ( D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN	= ( D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC	= ( D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER	= ( D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER	= ( D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE	= ( D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED	= ( D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION	= ( D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE	= ( D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS	= ( D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION	= ( D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS	= ( D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN	= ( D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE	= ( D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS	= ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL	= ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH	= ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_BUFFER	= ( D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_TEXTURE1D	= ( D3D10_MESSAGE_ID_LIVE_BUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_TEXTURE2D	= ( D3D10_MESSAGE_ID_LIVE_TEXTURE1D + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_TEXTURE3D	= ( D3D10_MESSAGE_ID_LIVE_TEXTURE2D + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW	= ( D3D10_MESSAGE_ID_LIVE_TEXTURE3D + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW	= ( D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW	= ( D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_VERTEXSHADER	= ( D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER	= ( D3D10_MESSAGE_ID_LIVE_VERTEXSHADER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_PIXELSHADER	= ( D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT	= ( D3D10_MESSAGE_ID_LIVE_PIXELSHADER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_SAMPLER	= ( D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_BLENDSTATE	= ( D3D10_MESSAGE_ID_LIVE_SAMPLER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE	= ( D3D10_MESSAGE_ID_LIVE_BLENDSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE	= ( D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_QUERY	= ( D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_PREDICATE	= ( D3D10_MESSAGE_ID_LIVE_QUERY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_COUNTER	= ( D3D10_MESSAGE_ID_LIVE_PREDICATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_DEVICE	= ( D3D10_MESSAGE_ID_LIVE_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_SWAPCHAIN	= ( D3D10_MESSAGE_ID_LIVE_DEVICE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_D3D10_MESSAGES_END	= ( D3D10_MESSAGE_ID_LIVE_SWAPCHAIN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START	= 0x100000,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED	= ( D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS	= ( D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS	= ( D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS	= ( D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS	= ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS	= ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY	= ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK	= ( D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK	= ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT	= ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD	= ( D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES	= ( D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND	= ( D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3	= ( D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO	= ( D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION	= ( D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR	= ( D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA	= ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP	= ( D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END	= ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES + 1 ) 
    // DEBUG:     }
    public enum D3D10MESSAGE_ID
    {
        D3D10MESSAGE_ID_UNKNOWN = 0,
        D3D10MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1,
        D3D10MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2,
        D3D10MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3,
        D3D10MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4,
        D3D10MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5,
        D3D10MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6,
        D3D10MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7,
        D3D10MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8,
        D3D10MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9,
        D3D10MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10,
        D3D10MESSAGE_ID_STRING_FROM_APPLICATION = 11,
        D3D10MESSAGE_ID_CORRUPTED_THIS = 12,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER1 = 13,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER2 = 14,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER3 = 15,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER4 = 16,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER5 = 17,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER6 = 18,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER7 = 19,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER8 = 20,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER9 = 21,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER10 = 22,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER11 = 23,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER12 = 24,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER13 = 25,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER14 = 26,
        D3D10MESSAGE_ID_CORRUPTED_PARAMETER15 = 27,
        D3D10MESSAGE_ID_CORRUPTED_MULTITHREADING = 28,
        D3D10MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29,
        D3D10MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30,
        D3D10MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31,
        D3D10MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32,
        D3D10MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33,
        D3D10MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34,
        D3D10MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35,
        D3D10MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36,
        D3D10MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37,
        D3D10MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38,
        D3D10MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39,
        D3D10MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40,
        D3D10MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41,
        D3D10MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42,
        D3D10MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43,
        D3D10MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44,
        D3D10MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45,
        D3D10MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46,
        D3D10MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47,
        D3D10MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48,
        D3D10MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49,
        D3D10MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50,
        D3D10MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51,
        D3D10MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52,
        D3D10MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53,
        D3D10MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54,
        D3D10MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55,
        D3D10MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56,
        D3D10MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57,
        D3D10MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58,
        D3D10MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59,
        D3D10MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60,
        D3D10MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61,
        D3D10MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62,
        D3D10MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63,
        D3D10MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64,
        D3D10MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65,
        D3D10MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66,
        D3D10MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67,
        D3D10MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68,
        D3D10MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69,
        D3D10MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70,
        D3D10MESSAGE_ID_CREATEBUFFER_NULLDESC = 71,
        D3D10MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72,
        D3D10MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73,
        D3D10MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74,
        D3D10MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75,
        D3D10MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76,
        D3D10MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77,
        D3D10MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78,
        D3D10MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79,
        D3D10MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80,
        D3D10MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81,
        D3D10MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82,
        D3D10MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83,
        D3D10MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84,
        D3D10MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85,
        D3D10MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86,
        D3D10MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87,
        D3D10MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88,
        D3D10MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89,
        D3D10MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90,
        D3D10MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91,
        D3D10MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92,
        D3D10MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93,
        D3D10MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94,
        D3D10MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95,
        D3D10MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96,
        D3D10MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97,
        D3D10MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98,
        D3D10MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99,
        D3D10MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100,
        D3D10MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101,
        D3D10MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102,
        D3D10MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103,
        D3D10MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104,
        D3D10MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105,
        D3D10MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106,
        D3D10MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107,
        D3D10MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108,
        D3D10MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109,
        D3D10MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110,
        D3D10MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111,
        D3D10MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112,
        D3D10MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113,
        D3D10MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114,
        D3D10MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115,
        D3D10MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116,
        D3D10MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117,
        D3D10MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118,
        D3D10MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119,
        D3D10MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120,
        D3D10MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121,
        D3D10MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122,
        D3D10MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123,
        D3D10MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132,
        D3D10MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133,
        D3D10MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134,
        D3D10MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135,
        D3D10MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136,
        D3D10MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137,
        D3D10MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138,
        D3D10MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139,
        D3D10MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140,
        D3D10MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164,
        D3D10MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165,
        D3D10MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166,
        D3D10MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190,
        D3D10MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191,
        D3D10MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192,
        D3D10MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193,
        D3D10MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194,
        D3D10MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195,
        D3D10MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196,
        D3D10MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197,
        D3D10MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198,
        D3D10MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231,
        D3D10MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232,
        D3D10MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233,
        D3D10MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234,
        D3D10MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235,
        D3D10MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236,
        D3D10MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237,
        D3D10MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238,
        D3D10MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239,
        D3D10MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240,
        D3D10MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241,
        D3D10MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242,
        D3D10MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243,
        D3D10MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244,
        D3D10MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245,
        D3D10MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246,
        D3D10MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247,
        D3D10MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248,
        D3D10MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249,
        D3D10MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250,
        D3D10MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251,
        D3D10MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252,
        D3D10MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253,
        D3D10MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254,
        D3D10MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255,
        D3D10MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256,
        D3D10MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257,
        D3D10MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258,
        D3D10MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259,
        D3D10MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260,
        D3D10MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261,
        D3D10MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262,
        D3D10MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263,
        D3D10MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264,
        D3D10MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265,
        D3D10MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266,
        D3D10MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267,
        D3D10MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268,
        D3D10MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269,
        D3D10MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270,
        D3D10MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271,
        D3D10MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272,
        D3D10MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273,
        D3D10MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274,
        D3D10MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275,
        D3D10MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276,
        D3D10MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277,
        D3D10MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278,
        D3D10MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279,
        D3D10MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280,
        D3D10MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281,
        D3D10MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282,
        D3D10MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283,
        D3D10MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284,
        D3D10MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285,
        D3D10MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286,
        D3D10MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287,
        D3D10MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288,
        D3D10MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289,
        D3D10MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290,
        D3D10MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291,
        D3D10MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292,
        D3D10MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293,
        D3D10MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294,
        D3D10MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295,
        D3D10MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296,
        D3D10MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297,
        D3D10MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298,
        D3D10MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299,
        D3D10MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300,
        D3D10MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301,
        D3D10MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302,
        D3D10MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303,
        D3D10MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304,
        D3D10MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305,
        D3D10MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306,
        D3D10MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307,
        D3D10MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308,
        D3D10MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309,
        D3D10MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310,
        D3D10MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311,
        D3D10MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312,
        D3D10MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313,
        D3D10MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314,
        D3D10MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315,
        D3D10MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316,
        D3D10MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317,
        D3D10MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318,
        D3D10MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319,
        D3D10MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320,
        D3D10MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321,
        D3D10MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322,
        D3D10MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323,
        D3D10MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324,
        D3D10MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325,
        D3D10MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326,
        D3D10MESSAGE_ID_REF_THREADING_MODE = 327,
        D3D10MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328,
        D3D10MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329,
        D3D10MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330,
        D3D10MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331,
        D3D10MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332,
        D3D10MESSAGE_ID_REF_OUT_OF_MEMORY = 333,
        D3D10MESSAGE_ID_REF_INFO = 334,
        D3D10MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335,
        D3D10MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336,
        D3D10MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337,
        D3D10MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338,
        D3D10MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339,
        D3D10MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340,
        D3D10MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341,
        D3D10MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342,
        D3D10MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343,
        D3D10MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344,
        D3D10MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345,
        D3D10MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346,
        D3D10MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347,
        D3D10MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348,
        D3D10MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349,
        D3D10MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350,
        D3D10MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351,
        D3D10MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352,
        D3D10MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353,
        D3D10MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354,
        D3D10MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355,
        D3D10MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356,
        D3D10MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357,
        D3D10MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358,
        D3D10MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359,
        D3D10MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360,
        D3D10MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361,
        D3D10MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362,
        D3D10MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363,
        D3D10MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364,
        D3D10MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365,
        D3D10MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366,
        D3D10MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367,
        D3D10MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368,
        D3D10MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369,
        D3D10MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370,
        D3D10MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371,
        D3D10MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372,
        D3D10MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373,
        D3D10MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374,
        D3D10MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375,
        D3D10MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376,
        D3D10MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377,
        D3D10MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378,
        D3D10MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379,
        D3D10MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380,
        D3D10MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381,
        D3D10MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382,
        D3D10MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383,
        D3D10MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385,
        D3D10MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386,
        D3D10MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387,
        D3D10MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388,
        D3D10MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389,
        D3D10MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391,
        D3D10MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392,
        D3D10MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393,
        D3D10MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394,
        D3D10MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395,
        D3D10MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396,
        D3D10MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397,
        D3D10MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398,
        D3D10MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399,
        D3D10MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400,
        D3D10MESSAGE_ID_CREATECOUNTER_NULLDESC = 401,
        D3D10MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402,
        D3D10MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403,
        D3D10MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404,
        D3D10MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405,
        D3D10MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406,
        D3D10MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407,
        D3D10MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408,
        D3D10MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409,
        D3D10MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410,
        D3D10MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411,
        D3D10MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412,
        D3D10MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413,
        D3D10MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414,
        D3D10MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415,
        D3D10MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416,
        D3D10MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417,
        D3D10MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418,
        D3D10MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420,
        D3D10MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421,
        D3D10MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422,
        D3D10MESSAGE_ID_LIVE_BUFFER = 423,
        D3D10MESSAGE_ID_LIVE_TEXTURE1D = 424,
        D3D10MESSAGE_ID_LIVE_TEXTURE2D = 425,
        D3D10MESSAGE_ID_LIVE_TEXTURE3D = 426,
        D3D10MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427,
        D3D10MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428,
        D3D10MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429,
        D3D10MESSAGE_ID_LIVE_VERTEXSHADER = 430,
        D3D10MESSAGE_ID_LIVE_GEOMETRYSHADER = 431,
        D3D10MESSAGE_ID_LIVE_PIXELSHADER = 432,
        D3D10MESSAGE_ID_LIVE_INPUTLAYOUT = 433,
        D3D10MESSAGE_ID_LIVE_SAMPLER = 434,
        D3D10MESSAGE_ID_LIVE_BLENDSTATE = 435,
        D3D10MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436,
        D3D10MESSAGE_ID_LIVE_RASTERIZERSTATE = 437,
        D3D10MESSAGE_ID_LIVE_QUERY = 438,
        D3D10MESSAGE_ID_LIVE_PREDICATE = 439,
        D3D10MESSAGE_ID_LIVE_COUNTER = 440,
        D3D10MESSAGE_ID_LIVE_DEVICE = 441,
        D3D10MESSAGE_ID_LIVE_SWAPCHAIN = 442,
        D3D10MESSAGE_ID_D3D10MESSAGES_END = 443,
        D3D10MESSAGE_ID_D3D10L9MESSAGES_START = 1048576,
        D3D10MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577,
        D3D10MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClampNOT_SUPPORTED = 1048578,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581,
        D3D10MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582,
        D3D10MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583,
        D3D10MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584,
        D3D10MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585,
        D3D10MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586,
        D3D10MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587,
        D3D10MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588,
        D3D10MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589,
        D3D10MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590,
        D3D10MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591,
        D3D10MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592,
        D3D10MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593,
        D3D10MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594,
        D3D10MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595,
        D3D10MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596,
        D3D10MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597,
        D3D10MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598,
        D3D10MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600,
        D3D10MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnableMUST_BE_TRUE = 1048601,
        D3D10MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606,
        D3D10MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6SIDES = 1048607,
        D3D10MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608,
        D3D10MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609,
        D3D10MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610,
        D3D10MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613,
        D3D10MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614,
        D3D10MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615,
        D3D10MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616,
        D3D10MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8CANNOT_BE_SHARED = 1048617,
        D3D10MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618,
        D3D10MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619,
        D3D10MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620,
        D3D10MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623,
        D3D10MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625,
        D3D10MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626,
        D3D10MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627,
        D3D10MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628,
        D3D10MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629,
        D3D10MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630,
        D3D10MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631,
        D3D10MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632,
        D3D10MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10INPUT_PER_VERTEX_DATA = 1048633,
        D3D10MESSAGE_ID_CREATERESOURCE_NON_POW_2MIPMAP = 1048634,
        D3D10MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635,
        D3D10MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636,
        D3D10MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637,
        D3D10MESSAGE_ID_D3D10L9MESSAGES_END = 1048638
    }

    // DEBUG: typedef 
    // DEBUG: enum D3D10_MESSAGE_CATEGORY
    // DEBUG:     {
    // DEBUG:         D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED	= 0,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_MISCELLANEOUS	= ( D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_INITIALIZATION	= ( D3D10_MESSAGE_CATEGORY_MISCELLANEOUS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_CLEANUP	= ( D3D10_MESSAGE_CATEGORY_INITIALIZATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_COMPILATION	= ( D3D10_MESSAGE_CATEGORY_CLEANUP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_STATE_CREATION	= ( D3D10_MESSAGE_CATEGORY_COMPILATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_STATE_SETTING	= ( D3D10_MESSAGE_CATEGORY_STATE_CREATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_STATE_GETTING	= ( D3D10_MESSAGE_CATEGORY_STATE_SETTING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION	= ( D3D10_MESSAGE_CATEGORY_STATE_GETTING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_EXECUTION	= ( D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_CATEGORY_SHADER	= ( D3D10_MESSAGE_CATEGORY_EXECUTION + 1 ) 
    // DEBUG:     } 	D3D10_MESSAGE_CATEGORY
    // DEBUG: typedef 
    // DEBUG: enum D3D10_MESSAGE_SEVERITY
    // DEBUG:     {
    // DEBUG:         D3D10_MESSAGE_SEVERITY_CORRUPTION	= 0,
    // DEBUG:         D3D10_MESSAGE_SEVERITY_ERROR	= ( D3D10_MESSAGE_SEVERITY_CORRUPTION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_SEVERITY_WARNING	= ( D3D10_MESSAGE_SEVERITY_ERROR + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_SEVERITY_INFO	= ( D3D10_MESSAGE_SEVERITY_WARNING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_SEVERITY_MESSAGE	= ( D3D10_MESSAGE_SEVERITY_INFO + 1 ) 
    // DEBUG:     } 	D3D10_MESSAGE_SEVERITY
    // DEBUG: typedef 
    // DEBUG: enum D3D10_MESSAGE_ID
    // DEBUG:     {
    // DEBUG:         D3D10_MESSAGE_ID_UNKNOWN	= 0,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD	= ( D3D10_MESSAGE_ID_UNKNOWN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD	= ( D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_STRING_FROM_APPLICATION	= ( D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_THIS	= ( D3D10_MESSAGE_ID_STRING_FROM_APPLICATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1	= ( D3D10_MESSAGE_ID_CORRUPTED_THIS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING	= ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA	= ( D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA	= ( D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS	= ( D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION	= ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT	= ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE	= ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE	= ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE	= ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE	= ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE	= ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS	= ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG	= ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC	= ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED	= ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED	= ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE	= ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID	= ( D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE	= ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER	= ( D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT	= ( D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR	= ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH	= ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH	= ( D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID	= ( D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY	= ( D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE	= ( D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE	= ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE	= ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE	= ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE	= ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX	= ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE	= ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID	= ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE	= ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED	= ( D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED	= ( D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE	= ( D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE	= ( D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE	= ( D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE	= ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED	= ( D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED	= ( D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED	= ( D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS	= ( D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN	= ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE	= ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_THREADING_MODE	= ( D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION	= ( D3D10_MESSAGE_ID_REF_THREADING_MODE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION	= ( D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION	= ( D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE	= ( D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER	= ( D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY	= ( D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_REF_INFO	= ( D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_REF_INFO + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT	= ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT	= ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN	= ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN	= ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET	= ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH	= ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW	= ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY	= ( D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER	= ( D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED	= ( D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER	= ( D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN	= ( D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN	= ( D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC	= ( D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER	= ( D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER	= ( D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE	= ( D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED	= ( D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION	= ( D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE	= ( D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS	= ( D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION	= ( D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS	= ( D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN	= ( D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE	= ( D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS	= ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL	= ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH	= ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT	= ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY	= ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_BUFFER	= ( D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_TEXTURE1D	= ( D3D10_MESSAGE_ID_LIVE_BUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_TEXTURE2D	= ( D3D10_MESSAGE_ID_LIVE_TEXTURE1D + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_TEXTURE3D	= ( D3D10_MESSAGE_ID_LIVE_TEXTURE2D + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW	= ( D3D10_MESSAGE_ID_LIVE_TEXTURE3D + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW	= ( D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW	= ( D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_VERTEXSHADER	= ( D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER	= ( D3D10_MESSAGE_ID_LIVE_VERTEXSHADER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_PIXELSHADER	= ( D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT	= ( D3D10_MESSAGE_ID_LIVE_PIXELSHADER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_SAMPLER	= ( D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_BLENDSTATE	= ( D3D10_MESSAGE_ID_LIVE_SAMPLER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE	= ( D3D10_MESSAGE_ID_LIVE_BLENDSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE	= ( D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_QUERY	= ( D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_PREDICATE	= ( D3D10_MESSAGE_ID_LIVE_QUERY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_COUNTER	= ( D3D10_MESSAGE_ID_LIVE_PREDICATE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_DEVICE	= ( D3D10_MESSAGE_ID_LIVE_COUNTER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_LIVE_SWAPCHAIN	= ( D3D10_MESSAGE_ID_LIVE_DEVICE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_D3D10_MESSAGES_END	= ( D3D10_MESSAGE_ID_LIVE_SWAPCHAIN + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START	= 0x100000,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED	= ( D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS	= ( D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS	= ( D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS	= ( D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS	= ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS	= ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY	= ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK	= ( D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK	= ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT	= ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE	= ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE	= ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD	= ( D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET	= ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE	= ( D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES	= ( D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND	= ( D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE	= ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3	= ( D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED	= ( D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO	= ( D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION	= ( D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR	= ( D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA	= ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP	= ( D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED	= ( D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT	= ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES	= ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT + 1 ) ,
    // DEBUG:         D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END	= ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES + 1 ) 
    // DEBUG:     } 	D3D10_MESSAGE_ID
    // DEBUG: typedef struct D3D10_MESSAGE
    // DEBUG:     {
    // DEBUG:     D3D10_MESSAGE_CATEGORY Category;
    // DEBUG:     D3D10_MESSAGE_SEVERITY Severity;
    // DEBUG:     D3D10_MESSAGE_ID ID;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(DescriptionByteLength)  const char *pDescription;
    // DEBUG:     SIZE_T DescriptionByteLength;
    // DEBUG:     } 	D3D10_MESSAGE
    // DEBUG: typedef struct D3D10_INFO_QUEUE_FILTER_DESC
    // DEBUG:     {
    // DEBUG:     UINT NumCategories;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumCategories)  D3D10_MESSAGE_CATEGORY *pCategoryList;
    // DEBUG:     UINT NumSeverities;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumSeverities)  D3D10_MESSAGE_SEVERITY *pSeverityList;
    // DEBUG:     UINT NumIDs;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumIDs)  D3D10_MESSAGE_ID *pIDList;
    // DEBUG:     } 	D3D10_INFO_QUEUE_FILTER_DESC
    // DEBUG: typedef struct D3D10_INFO_QUEUE_FILTER
    // DEBUG:     {
    // DEBUG:     D3D10_INFO_QUEUE_FILTER_DESC AllowList;
    // DEBUG:     D3D10_INFO_QUEUE_FILTER_DESC DenyList;
    // DEBUG:     } 	D3D10_INFO_QUEUE_FILTER
    // DEBUG: struct D3D10_MESSAGE
    // DEBUG:     {
    // DEBUG:     D3D10_MESSAGE_CATEGORY Category;
    // DEBUG:     D3D10_MESSAGE_SEVERITY Severity;
    // DEBUG:     D3D10_MESSAGE_ID ID;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(DescriptionByteLength)  const char *pDescription;
    // DEBUG:     SIZE_T DescriptionByteLength;
    // DEBUG:     }
    public unsafe partial class D3D10MESSAGE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D10MESSAGE_CATEGORY Category;
            internal global::SpoutDX.D3D10MESSAGE_SEVERITY Severity;
            internal global::SpoutDX.D3D10MESSAGE_ID ID;
            internal __IntPtr pDescription;
            internal ulong DescriptionByteLength;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_MESSAGE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10MESSAGE>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10MESSAGE>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10MESSAGE managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10MESSAGE>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10MESSAGE managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        private bool __pDescription_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static D3D10MESSAGE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10MESSAGE(native.ToPointer(), skipVTables);
        }

        internal static D3D10MESSAGE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10MESSAGE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10MESSAGE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10MESSAGE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10MESSAGE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10MESSAGE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_MESSAGE
        public D3D10MESSAGE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10MESSAGE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_MESSAGE
        public D3D10MESSAGE(global::SpoutDX.D3D10MESSAGE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10MESSAGE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10MESSAGE.__Internal*) __Instance) = *((global::SpoutDX.D3D10MESSAGE.__Internal*) _0.__Instance);
            if (_0.__pDescription_OwnsNativeMemory)
                this.PDescription = _0.PDescription;
        }

        ~D3D10MESSAGE()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__pDescription_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->pDescription);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10MESSAGE_CATEGORY Category
        {
            get
            {
                return ((__Internal*)__Instance)->Category;
            }

            set
            {
                ((__Internal*)__Instance)->Category = value;
            }
        }

        public global::SpoutDX.D3D10MESSAGE_SEVERITY Severity
        {
            get
            {
                return ((__Internal*)__Instance)->Severity;
            }

            set
            {
                ((__Internal*)__Instance)->Severity = value;
            }
        }

        public global::SpoutDX.D3D10MESSAGE_ID ID
        {
            get
            {
                return ((__Internal*)__Instance)->ID;
            }

            set
            {
                ((__Internal*)__Instance)->ID = value;
            }
        }

        public string PDescription
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->pDescription);
            }

            set
            {
                if (__pDescription_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->pDescription);
                __pDescription_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->pDescription = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->pDescription = (__IntPtr) __bytePtr0;
            }
        }

        public ulong DescriptionByteLength
        {
            get
            {
                return ((__Internal*)__Instance)->DescriptionByteLength;
            }

            set
            {
                ((__Internal*)__Instance)->DescriptionByteLength = value;
            }
        }
    }

    // DEBUG: struct D3D10_INFO_QUEUE_FILTER_DESC
    // DEBUG:     {
    // DEBUG:     UINT NumCategories;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumCategories)  D3D10_MESSAGE_CATEGORY *pCategoryList;
    // DEBUG:     UINT NumSeverities;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumSeverities)  D3D10_MESSAGE_SEVERITY *pSeverityList;
    // DEBUG:     UINT NumIDs;
    // DEBUG:     /* [annotation] */ 
    // DEBUG:     _Field_size_(NumIDs)  D3D10_MESSAGE_ID *pIDList;
    // DEBUG:     }
    public unsafe partial class D3D10INFO_QUEUE_FILTER_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal uint NumCategories;
            internal global::SpoutDX.D3D10MESSAGE_CATEGORY* pCategoryList;
            internal uint NumSeverities;
            internal global::SpoutDX.D3D10MESSAGE_SEVERITY* pSeverityList;
            internal uint NumIDs;
            internal global::SpoutDX.D3D10MESSAGE_ID* pIDList;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_INFO_QUEUE_FILTER_DESC@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10INFO_QUEUE_FILTER_DESC __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10INFO_QUEUE_FILTER_DESC(native.ToPointer(), skipVTables);
        }

        internal static D3D10INFO_QUEUE_FILTER_DESC __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10INFO_QUEUE_FILTER_DESC)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10INFO_QUEUE_FILTER_DESC __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10INFO_QUEUE_FILTER_DESC(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10INFO_QUEUE_FILTER_DESC(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10INFO_QUEUE_FILTER_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_INFO_QUEUE_FILTER_DESC
        public D3D10INFO_QUEUE_FILTER_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_INFO_QUEUE_FILTER_DESC
        public D3D10INFO_QUEUE_FILTER_DESC(global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__Internal*) __Instance) = *((global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__Internal*) _0.__Instance);
        }

        ~D3D10INFO_QUEUE_FILTER_DESC()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint NumCategories
        {
            get
            {
                return ((__Internal*)__Instance)->NumCategories;
            }

            set
            {
                ((__Internal*)__Instance)->NumCategories = value;
            }
        }

        public global::SpoutDX.D3D10MESSAGE_CATEGORY* PCategoryList
        {
            get
            {
                return ((__Internal*)__Instance)->pCategoryList;
            }

            set
            {
                ((__Internal*)__Instance)->pCategoryList = value;
            }
        }

        public uint NumSeverities
        {
            get
            {
                return ((__Internal*)__Instance)->NumSeverities;
            }

            set
            {
                ((__Internal*)__Instance)->NumSeverities = value;
            }
        }

        public global::SpoutDX.D3D10MESSAGE_SEVERITY* PSeverityList
        {
            get
            {
                return ((__Internal*)__Instance)->pSeverityList;
            }

            set
            {
                ((__Internal*)__Instance)->pSeverityList = value;
            }
        }

        public uint NumIDs
        {
            get
            {
                return ((__Internal*)__Instance)->NumIDs;
            }

            set
            {
                ((__Internal*)__Instance)->NumIDs = value;
            }
        }

        public global::SpoutDX.D3D10MESSAGE_ID* PIDList
        {
            get
            {
                return ((__Internal*)__Instance)->pIDList;
            }

            set
            {
                ((__Internal*)__Instance)->pIDList = value;
            }
        }
    }

    // DEBUG: struct D3D10_INFO_QUEUE_FILTER
    // DEBUG:     {
    // DEBUG:     D3D10_INFO_QUEUE_FILTER_DESC AllowList;
    // DEBUG:     D3D10_INFO_QUEUE_FILTER_DESC DenyList;
    // DEBUG:     }
    public unsafe partial class D3D10INFO_QUEUE_FILTER : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 96)]
        public partial struct __Internal
        {
            internal global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__Internal AllowList;
            internal global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__Internal DenyList;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0D3D10_INFO_QUEUE_FILTER@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10INFO_QUEUE_FILTER>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.D3D10INFO_QUEUE_FILTER>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.D3D10INFO_QUEUE_FILTER managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.D3D10INFO_QUEUE_FILTER>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.D3D10INFO_QUEUE_FILTER managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static D3D10INFO_QUEUE_FILTER __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new D3D10INFO_QUEUE_FILTER(native.ToPointer(), skipVTables);
        }

        internal static D3D10INFO_QUEUE_FILTER __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (D3D10INFO_QUEUE_FILTER)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static D3D10INFO_QUEUE_FILTER __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new D3D10INFO_QUEUE_FILTER(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private D3D10INFO_QUEUE_FILTER(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected D3D10INFO_QUEUE_FILTER(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: D3D10_INFO_QUEUE_FILTER
        public D3D10INFO_QUEUE_FILTER()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10INFO_QUEUE_FILTER.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        // DEBUG: D3D10_INFO_QUEUE_FILTER
        public D3D10INFO_QUEUE_FILTER(global::SpoutDX.D3D10INFO_QUEUE_FILTER _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.D3D10INFO_QUEUE_FILTER.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.D3D10INFO_QUEUE_FILTER.__Internal*) __Instance) = *((global::SpoutDX.D3D10INFO_QUEUE_FILTER.__Internal*) _0.__Instance);
        }

        ~D3D10INFO_QUEUE_FILTER()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC AllowList
        {
            get
            {
                return global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->AllowList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->AllowList = *(global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC DenyList
        {
            get
            {
                return global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->DenyList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->DenyList = *(global::SpoutDX.D3D10INFO_QUEUE_FILTER_DESC.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class d3d10sdklayers
    {
        public partial struct __Internal
        {
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10sdklayers0000_0000V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0000_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0000_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10sdklayers0000_0000V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0000_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0000_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10sdklayers0000_0002V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0002_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0002_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10sdklayers0000_0002V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0002_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0002_v0_0_s_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_c_ifspec
        public static __IntPtr MIDL_itfD3d10sdklayers0000_0003V0_0CIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0003_v0_0_c_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0003_v0_0_c_ifspec;
                *__ptr = value;
            }
        }

        // DEBUG: extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_s_ifspec
        public static __IntPtr MIDL_itfD3d10sdklayers0000_0003V0_0SIfspec
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0003_v0_0_s_ifspec;
                return *(__IntPtr*)(*__ptr);
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX.__MIDL_itf_d3d10sdklayers_0000_0003_v0_0_s_ifspec;
                *__ptr = value;
            }
        }
    }

    /// <summary>////////////////////////////////////////////////////////////////////////</summary>
    // DEBUG: enum D3D10_DRIVER_TYPE
    // DEBUG: {
    // DEBUG:     D3D10_DRIVER_TYPE_HARDWARE  = 0,
    // DEBUG:     D3D10_DRIVER_TYPE_REFERENCE = 1,
    // DEBUG:     D3D10_DRIVER_TYPE_NULL      = 2,
    // DEBUG:     D3D10_DRIVER_TYPE_SOFTWARE  = 3,
    // DEBUG:     D3D10_DRIVER_TYPE_WARP      = 5,
    // DEBUG: }
    public enum D3D10DRIVER_TYPE
    {
        D3D10DRIVER_TYPE_HARDWARE = 0,
        D3D10DRIVER_TYPE_REFERENCE = 1,
        D3D10DRIVER_TYPE_NULL = 2,
        D3D10DRIVER_TYPE_SOFTWARE = 3,
        D3D10DRIVER_TYPE_WARP = 5
    }

    /// <summary>////////////////////////////////////////////////////////////////////////</summary>
    // DEBUG: typedef enum D3D10_DRIVER_TYPE
    // DEBUG: {
    // DEBUG:     D3D10_DRIVER_TYPE_HARDWARE  = 0,
    // DEBUG:     D3D10_DRIVER_TYPE_REFERENCE = 1,
    // DEBUG:     D3D10_DRIVER_TYPE_NULL      = 2,
    // DEBUG:     D3D10_DRIVER_TYPE_SOFTWARE  = 3,
    // DEBUG:     D3D10_DRIVER_TYPE_WARP      = 5,
    // DEBUG: } D3D10_DRIVER_TYPE
    // DEBUG: class SPOUT_DLLEXP spoutDirectX {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 		spoutDirectX();
    // DEBUG: 		~spoutDirectX();
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// DirectX11 device
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Initialize and prepare DirectX 11
    // DEBUG: 		bool OpenDirectX11(ID3D11Device* pDevice = nullptr);
    // DEBUG: 		// Release DirectX 11 device and context
    // DEBUG: 		void CloseDirectX11();
    // DEBUG: 		// Set the DirectX11 device
    // DEBUG: 		bool SetDX11Device(ID3D11Device* pDevice);
    // DEBUG: 		// Create a DirectX11 device
    // DEBUG: 		ID3D11Device* CreateDX11device();
    // DEBUG: 		// Return the class device
    // DEBUG: 		ID3D11Device* GetDX11Device();
    // DEBUG: 		// Return the device immediate context
    // DEBUG: 		ID3D11DeviceContext* GetDX11Context();
    // DEBUG: 		// Return the device feature level
    // DEBUG: 		D3D_FEATURE_LEVEL GetDX11FeatureLevel();
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// DirectX11 texture
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Create a DirectX11 shared texture
    // DEBUG: 		bool CreateSharedDX11Texture(ID3D11Device* pDevice, unsigned int width, unsigned int height, DXGI_FORMAT format, ID3D11Texture2D** ppSharedTexture, HANDLE &dxShareHandle, bool bKeyed = false, bool bNThandle = false);
    // DEBUG: 		// Create a DirectX texture which is not shared
    // DEBUG: 		bool CreateDX11Texture(ID3D11Device* pDevice, unsigned int width, unsigned int height, DXGI_FORMAT format, ID3D11Texture2D** ppTexture);
    // DEBUG: 		// Create a DirectX 11 staging texture for read and write
    // DEBUG: 		bool CreateDX11StagingTexture(ID3D11Device* pDevice, unsigned int width, unsigned int height, DXGI_FORMAT format, ID3D11Texture2D** pStagingTexture);
    // DEBUG: 		// Retrieve the pointer of a DirectX11 shared texture
    // DEBUG: 		bool OpenDX11shareHandle(ID3D11Device* pDevice, ID3D11Texture2D** ppSharedTexture, HANDLE dxShareHandle);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// DirectX11 utilities
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Release a texture resource created with a class device
    // DEBUG: 		unsigned long ReleaseDX11Texture(ID3D11Texture2D* pTexture);
    // DEBUG: 		// Release a texture resource
    // DEBUG: 		unsigned long ReleaseDX11Texture(ID3D11Device* pd3dDevice, ID3D11Texture2D* pTexture);
    // DEBUG: 		// Release a device
    // DEBUG: 		unsigned long ReleaseDX11Device(ID3D11Device* pd3dDevice);
    // DEBUG: 		// Flush immediate context command queue
    // DEBUG: 		void Flush();
    // DEBUG: 		// Flush immediate context command queue and wait for completion
    // DEBUG: 		void FlushWait(ID3D11Device* pd3dDevice, ID3D11DeviceContext* pImmediateContext);
    // DEBUG: 		// Wait for completion after flush
    // DEBUG: 		void Wait(ID3D11Device* pd3dDevice, ID3D11DeviceContext* pImmediateContext);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Graphics adapter
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Get the number of graphics adapters in the system
    // DEBUG: 		int GetNumAdapters();
    // DEBUG: 		// Get the name of an adapter index
    // DEBUG: 		bool GetAdapterName(int index, char *adaptername, int maxchars);
    // DEBUG: 		// Get the index of an adapter name
    // DEBUG: 		int GetAdapterIndex(const char* adaptername);
    // DEBUG: 		// Get the current adapter index
    // DEBUG: 		int GetAdapter();
    // DEBUG: 		// Set graphics adapter for CreateDX11device from an index
    // DEBUG: 		bool SetAdapter(int index = -1); 
    // DEBUG: 		// Get the description and output display name of the current adapter
    // DEBUG: 		bool GetAdapterInfo(char* adaptername, char* output, int maxchars);
    // DEBUG: 		// Get the description and output display name for a given adapter
    // DEBUG: 		bool GetAdapterInfo(int index, char* adaptername, char* output, int maxchars);
    // DEBUG: 		// Get adapter pointer for a given adapter (-1 means current)
    // DEBUG: 		IDXGIAdapter* GetAdapterPointer(int index = -1);
    // DEBUG: 		// Set required graphics adapter for CreateDX11device
    // DEBUG: 		void SetAdapterPointer(IDXGIAdapter* pAdapter);
    // DEBUG: 		// Find the index of the NVIDIA adapter in a multi-adapter system
    // DEBUG: 		bool FindNVIDIA(int &nAdapter);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Graphics preference
    // DEBUG: 		// Windows 10 Vers 1803, build 17134 or later
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Get the Windows graphics preference for an application
    // DEBUG: 		int GetPerformancePreference(const char* path = nullptr);
    // DEBUG: 		// Set the Windows graphics preference for an application
    // DEBUG: 		bool SetPerformancePreference(int preference, const char* path = nullptr);
    // DEBUG: 		// Get the graphics adapter name for a Windows preference
    // DEBUG: 		bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars);
    // DEBUG: 		// Set graphics adapter index for a Windows preference
    // DEBUG: 		bool SetPreferredAdapter(int preference);
    // DEBUG: 		// Windows graphics preference availability
    // DEBUG: 		bool IsPreferenceAvailable();
    // DEBUG: 		// Is the path a valid application
    // DEBUG: 		bool IsApplicationPath(const char* path);
    // DEBUG: 
    // DEBUG: 	protected:
    // DEBUG: 
    // DEBUG: 		void DebugLog(ID3D11Device* pd3dDevice, const char* format, ...);
    // DEBUG: 		int						m_AdapterIndex; // Adapter index
    // DEBUG: 		IDXGIAdapter*			m_pAdapterDX11; // Adapter pointer
    // DEBUG: 		ID3D11Device*           m_pd3dDevice;   // DX11 device
    // DEBUG: 		ID3D11DeviceContext*	m_pImmediateContext;
    // DEBUG: 		bool					m_bClassDevice;
    // DEBUG: 		D3D_DRIVER_TYPE			m_driverType;
    // DEBUG: 		D3D_FEATURE_LEVEL		m_featureLevel;
    // DEBUG: 		ID3D11Device1*          m_pd3dDevice1;
    // DEBUG: 		ID3D11DeviceContext1*   m_pImmediateContext1;
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutDirectX : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 64)]
        public partial struct __Internal
        {
            internal int m_AdapterIndex;
            internal __IntPtr m_pAdapterDX11;
            internal __IntPtr m_pd3dDevice;
            internal __IntPtr m_pImmediateContext;
            internal byte m_bClassDevice;
            internal global::SpoutDX.D3D_DRIVER_TYPE m_driverType;
            internal global::SpoutDX.D3D_FEATURE_LEVEL m_featureLevel;
            internal __IntPtr m_pd3dDevice1;
            internal __IntPtr m_pImmediateContext1;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutDirectX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0spoutDirectX@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutDirectX@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenDirectX11@spoutDirectX@@QEAA_NPEAUID3D11Device@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDirectX11(__IntPtr __instance, __IntPtr pDevice);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseDirectX11@spoutDirectX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseDirectX11(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX11Device@spoutDirectX@@QEAA_NPEAUID3D11Device@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX11Device(__IntPtr __instance, __IntPtr pDevice);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateDX11device@spoutDirectX@@QEAAPEAUID3D11Device@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr CreateDX11device(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenDX11shareHandle@spoutDirectX@@QEAA_NPEAUID3D11Device@@PEAPEAUID3D11Texture2D@@PEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDX11shareHandle(__IntPtr __instance, __IntPtr pDevice, __IntPtr ppSharedTexture, __IntPtr dxShareHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseDX11Texture@spoutDirectX@@QEAAKPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ReleaseDX11Texture(__IntPtr __instance, __IntPtr pTexture);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseDX11Texture@spoutDirectX@@QEAAKPEAUID3D11Device@@PEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ReleaseDX11Texture(__IntPtr __instance, __IntPtr pd3dDevice, __IntPtr pTexture);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseDX11Device@spoutDirectX@@QEAAKPEAUID3D11Device@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ReleaseDX11Device(__IntPtr __instance, __IntPtr pd3dDevice);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Flush@spoutDirectX@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Flush(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FlushWait@spoutDirectX@@QEAAXPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FlushWait(__IntPtr __instance, __IntPtr pd3dDevice, __IntPtr pImmediateContext);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Wait@spoutDirectX@@QEAAXPEAUID3D11Device@@PEAUID3D11DeviceContext@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Wait(__IntPtr __instance, __IntPtr pd3dDevice, __IntPtr pImmediateContext);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@spoutDirectX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterIndex@spoutDirectX@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapterIndex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string adaptername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAdapter@spoutDirectX@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetAdapter(__IntPtr __instance, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@spoutDirectX@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* adaptername, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@spoutDirectX@@QEAA_NHPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, int index, sbyte* adaptername, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindNVIDIA@spoutDirectX@@QEAA_NAEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindNVIDIA(__IntPtr __instance, int* nAdapter);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPerformancePreference@spoutDirectX@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPerformancePreference(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPerformancePreference@spoutDirectX@@QEAA_NHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPerformancePreference(__IntPtr __instance, int preference, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPreferredAdapterName@spoutDirectX@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPreferredAdapterName(__IntPtr __instance, int preference, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPreferredAdapter@spoutDirectX@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPreferredAdapter(__IntPtr __instance, int preference);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsApplicationPath@spoutDirectX@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsApplicationPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DebugLog@spoutDirectX@@IEAAXPEAUID3D11Device@@PEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DebugLog(__IntPtr __instance, __IntPtr pd3dDevice, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX11Device@spoutDirectX@@QEAAPEAUID3D11Device@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDX11Device(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX11Context@spoutDirectX@@QEAAPEAUID3D11DeviceContext@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDX11Context(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX11FeatureLevel@spoutDirectX@@QEAA?AW4D3D_FEATURE_LEVEL@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SpoutDX.D3D_FEATURE_LEVEL GetDX11FeatureLevel(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@spoutDirectX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@spoutDirectX@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPreferenceAvailable@spoutDirectX@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreferenceAvailable(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutDirectX>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutDirectX>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SpoutDirectX managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SpoutDirectX>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SpoutDirectX managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutDirectX __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutDirectX(native.ToPointer(), skipVTables);
        }

        internal static SpoutDirectX __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutDirectX)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutDirectX __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutDirectX(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutDirectX(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutDirectX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutDirectX()
        public SpoutDirectX()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutDirectX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutDirectX
        public SpoutDirectX(global::SpoutDX.SpoutDirectX _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutDirectX.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.SpoutDirectX.__Internal*) __Instance) = *((global::SpoutDX.SpoutDirectX.__Internal*) _0.__Instance);
        }

        ~SpoutDirectX()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: bool OpenDirectX11(ID3D11Device* pDevice = nullptr)
        public bool OpenDirectX11(global::SpoutDX.ID3D11Device pDevice)
        {
            var __arg0 = pDevice is null ? __IntPtr.Zero : pDevice.__Instance;
            var ___ret = __Internal.OpenDirectX11(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: void CloseDirectX11()
        public void CloseDirectX11()
        {
            __Internal.CloseDirectX11(__Instance);
        }

        // DEBUG: bool SetDX11Device(ID3D11Device* pDevice)
        public bool SetDX11Device(global::SpoutDX.ID3D11Device pDevice)
        {
            var __arg0 = pDevice is null ? __IntPtr.Zero : pDevice.__Instance;
            var ___ret = __Internal.SetDX11Device(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: ID3D11Device* CreateDX11device()
        public global::SpoutDX.ID3D11Device CreateDX11device()
        {
            var ___ret = __Internal.CreateDX11device(__Instance);
            var __result0 = global::SpoutDX.ID3D11Device.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        // DEBUG: bool OpenDX11shareHandle(ID3D11Device* pDevice, ID3D11Texture2D** ppSharedTexture, HANDLE dxShareHandle)
        public bool OpenDX11shareHandle(global::SpoutDX.ID3D11Device pDevice, global::SpoutDX.ID3D11Texture2D ppSharedTexture, __IntPtr dxShareHandle)
        {
            var __arg0 = pDevice is null ? __IntPtr.Zero : pDevice.__Instance;
            var ____arg1 = ppSharedTexture is null ? __IntPtr.Zero : ppSharedTexture.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var ___ret = __Internal.OpenDX11shareHandle(__Instance, __arg0, __arg1, dxShareHandle);
            return ___ret;
        }

        // DEBUG: unsigned long ReleaseDX11Texture(ID3D11Texture2D* pTexture)
        public uint ReleaseDX11Texture(global::SpoutDX.ID3D11Texture2D pTexture)
        {
            var __arg0 = pTexture is null ? __IntPtr.Zero : pTexture.__Instance;
            var ___ret = __Internal.ReleaseDX11Texture(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: unsigned long ReleaseDX11Texture(ID3D11Device* pd3dDevice, ID3D11Texture2D* pTexture)
        public uint ReleaseDX11Texture(global::SpoutDX.ID3D11Device pd3dDevice, global::SpoutDX.ID3D11Texture2D pTexture)
        {
            var __arg0 = pd3dDevice is null ? __IntPtr.Zero : pd3dDevice.__Instance;
            var __arg1 = pTexture is null ? __IntPtr.Zero : pTexture.__Instance;
            var ___ret = __Internal.ReleaseDX11Texture(__Instance, __arg0, __arg1);
            return ___ret;
        }

        // DEBUG: unsigned long ReleaseDX11Device(ID3D11Device* pd3dDevice)
        public uint ReleaseDX11Device(global::SpoutDX.ID3D11Device pd3dDevice)
        {
            var __arg0 = pd3dDevice is null ? __IntPtr.Zero : pd3dDevice.__Instance;
            var ___ret = __Internal.ReleaseDX11Device(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: void Flush()
        public void Flush()
        {
            __Internal.Flush(__Instance);
        }

        // DEBUG: void FlushWait(ID3D11Device* pd3dDevice, ID3D11DeviceContext* pImmediateContext)
        public void FlushWait(global::SpoutDX.ID3D11Device pd3dDevice, global::SpoutDX.ID3D11DeviceContext pImmediateContext)
        {
            var __arg0 = pd3dDevice is null ? __IntPtr.Zero : pd3dDevice.__Instance;
            var __arg1 = pImmediateContext is null ? __IntPtr.Zero : pImmediateContext.__Instance;
            __Internal.FlushWait(__Instance, __arg0, __arg1);
        }

        // DEBUG: void Wait(ID3D11Device* pd3dDevice, ID3D11DeviceContext* pImmediateContext)
        public void Wait(global::SpoutDX.ID3D11Device pd3dDevice, global::SpoutDX.ID3D11DeviceContext pImmediateContext)
        {
            var __arg0 = pd3dDevice is null ? __IntPtr.Zero : pd3dDevice.__Instance;
            var __arg1 = pImmediateContext is null ? __IntPtr.Zero : pImmediateContext.__Instance;
            __Internal.Wait(__Instance, __arg0, __arg1);
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: int GetAdapterIndex(const char* adaptername)
        public int GetAdapterIndex(string adaptername)
        {
            var ___ret = __Internal.GetAdapterIndex(__Instance, adaptername);
            return ___ret;
        }

        // DEBUG: bool SetAdapter(int index = -1)
        public bool SetAdapter(int index)
        {
            var ___ret = __Internal.SetAdapter(__Instance, index);
            return ___ret;
        }

        // DEBUG: bool GetAdapterInfo(char* adaptername, char* output, int maxchars)
        public bool GetAdapterInfo(sbyte* adaptername, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, adaptername, output, maxchars);
            return ___ret;
        }

        // DEBUG: bool GetAdapterInfo(int index, char* adaptername, char* output, int maxchars)
        public bool GetAdapterInfo(int index, sbyte* adaptername, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, index, adaptername, output, maxchars);
            return ___ret;
        }

        // DEBUG: bool FindNVIDIA(int &nAdapter)
        public bool FindNVIDIA(ref int nAdapter)
        {
            fixed (int* __nAdapter0 = &nAdapter)
            {
                var __arg0 = __nAdapter0;
                var ___ret = __Internal.FindNVIDIA(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: int GetPerformancePreference(const char* path = nullptr)
        public int GetPerformancePreference(string path)
        {
            var ___ret = __Internal.GetPerformancePreference(__Instance, path);
            return ___ret;
        }

        // DEBUG: bool SetPerformancePreference(int preference, const char* path = nullptr)
        public bool SetPerformancePreference(int preference, string path)
        {
            var ___ret = __Internal.SetPerformancePreference(__Instance, preference, path);
            return ___ret;
        }

        // DEBUG: bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars)
        public bool GetPreferredAdapterName(int preference, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetPreferredAdapterName(__Instance, preference, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: bool SetPreferredAdapter(int preference)
        public bool SetPreferredAdapter(int preference)
        {
            var ___ret = __Internal.SetPreferredAdapter(__Instance, preference);
            return ___ret;
        }

        // DEBUG: bool IsApplicationPath(const char* path)
        public bool IsApplicationPath(string path)
        {
            var ___ret = __Internal.IsApplicationPath(__Instance, path);
            return ___ret;
        }

        // DEBUG: void DebugLog(ID3D11Device* pd3dDevice, const char* format, ...)
        protected void DebugLog(global::SpoutDX.ID3D11Device pd3dDevice, string format)
        {
            var __arg0 = pd3dDevice is null ? __IntPtr.Zero : pd3dDevice.__Instance;
            __Internal.DebugLog(__Instance, __arg0, format);
        }

        protected int MAdapterIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_AdapterIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_AdapterIndex = value;
            }
        }

        protected global::SpoutDX.ID3D11Device MPd3dDevice
        {
            get
            {
                var __result0 = global::SpoutDX.ID3D11Device.__GetOrCreateInstance(((__Internal*)__Instance)->m_pd3dDevice, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pd3dDevice = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        protected global::SpoutDX.ID3D11DeviceContext MPImmediateContext
        {
            get
            {
                var __result0 = global::SpoutDX.ID3D11DeviceContext.__GetOrCreateInstance(((__Internal*)__Instance)->m_pImmediateContext, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pImmediateContext = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        protected bool MBClassDevice
        {
            get
            {
                return ((__Internal*)__Instance)->m_bClassDevice != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bClassDevice = (byte) (value ? 1 : 0);
            }
        }

        protected global::SpoutDX.D3D_DRIVER_TYPE MDriverType
        {
            get
            {
                return ((__Internal*)__Instance)->m_driverType;
            }

            set
            {
                ((__Internal*)__Instance)->m_driverType = value;
            }
        }

        protected global::SpoutDX.D3D_FEATURE_LEVEL MFeatureLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_featureLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_featureLevel = value;
            }
        }

        public global::SpoutDX.ID3D11Device DX11Device
        {
            get
            {
                var ___ret = __Internal.GetDX11Device(__Instance);
                var __result0 = global::SpoutDX.ID3D11Device.__GetOrCreateInstance(___ret, false);
                return __result0;
            }

            set
            {
                var __arg0 = value is null ? __IntPtr.Zero : value.__Instance;
                __Internal.SetDX11Device(__Instance, __arg0);
            }
        }

        public global::SpoutDX.ID3D11DeviceContext DX11Context
        {
            get
            {
                var ___ret = __Internal.GetDX11Context(__Instance);
                var __result0 = global::SpoutDX.ID3D11DeviceContext.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        public global::SpoutDX.D3D_FEATURE_LEVEL DX11FeatureLevel
        {
            get
            {
                var ___ret = __Internal.GetDX11FeatureLevel(__Instance);
                return ___ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var ___ret = __Internal.GetNumAdapters(__Instance);
                return ___ret;
            }
        }

        public int Adapter
        {
            get
            {
                var ___ret = __Internal.GetAdapter(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAdapter(__Instance, value);
            }
        }

        public bool IsPreferenceAvailable
        {
            get
            {
                var ___ret = __Internal.IsPreferenceAvailable(__Instance);
                return ___ret;
            }
        }
    }

    // DEBUG: enum SpoutCreateResult {
    // DEBUG: 	SPOUT_CREATE_FAILED = 0,
    // DEBUG: 	SPOUT_CREATE_SUCCESS,
    // DEBUG: 	SPOUT_ALREADY_EXISTS,
    // DEBUG: 	SPOUT_ALREADY_CREATED,
    // DEBUG: }
    public enum SpoutCreateResult
    {
        SPOUT_CREATE_FAILED = 0,
        SPOUT_CREATE_SUCCESS = 1,
        SPOUT_ALREADY_EXISTS = 2,
        SPOUT_ALREADY_CREATED = 3
    }

    // DEBUG: class SPOUT_DLLEXP SpoutSharedMemory {
    // DEBUG: 
    // DEBUG: public:
    // DEBUG: 
    // DEBUG: 	SpoutSharedMemory();
    // DEBUG: 	~SpoutSharedMemory();
    // DEBUG: 
    // DEBUG: 	// Create a new memory segment, or attach to an existing one
    // DEBUG: 	SpoutCreateResult Create(const char* name, int size);
    // DEBUG: 
    // DEBUG: 	// Open an existing memory map
    // DEBUG: 	bool Open(const char* name);
    // DEBUG: 
    // DEBUG: 	// Close a map
    // DEBUG: 	void Close();
    // DEBUG: 
    // DEBUG: 	// Lock an open map and return the buffer
    // DEBUG: 	char* Lock();
    // DEBUG: 
    // DEBUG: 	// Unlock a map
    // DEBUG: 	void Unlock();
    // DEBUG: 
    // DEBUG: 	// Name of an existing map
    // DEBUG: 	const char* Name();
    // DEBUG: 	
    // DEBUG: 	// Size of an existing map
    // DEBUG: 	int Size();
    // DEBUG: 
    // DEBUG: 	// Print map information for debugging
    // DEBUG: 	void Debug();
    // DEBUG: 
    // DEBUG: private:
    // DEBUG: 
    // DEBUG: 	char*  m_pBuffer; // Buffer pointer
    // DEBUG: 	HANDLE m_hMap; // Map handle
    // DEBUG: 	HANDLE m_hMutex; // Mutex for map access
    // DEBUG: 	int m_lockCount; // Map access lock count
    // DEBUG: 	char* m_pName; // Map name
    // DEBUG: 	int m_size; // Map size
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutSharedMemory : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal __IntPtr m_pBuffer;
            internal __IntPtr m_hMap;
            internal __IntPtr m_hMutex;
            internal int m_lockCount;
            internal __IntPtr m_pName;
            internal int m_size;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSharedMemory@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0SpoutSharedMemory@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1SpoutSharedMemory@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Create@SpoutSharedMemory@@QEAA?AW4SpoutCreateResult@@PEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::SpoutDX.SpoutCreateResult Create(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int size);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Open@SpoutSharedMemory@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Open(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Close@SpoutSharedMemory@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Close(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Unlock@SpoutSharedMemory@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Unlock(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Debug@SpoutSharedMemory@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Debug(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Lock@SpoutSharedMemory@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Lock(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Name@SpoutSharedMemory@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Name(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?Size@SpoutSharedMemory@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Size(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutSharedMemory>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutSharedMemory>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SpoutSharedMemory managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SpoutSharedMemory>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SpoutSharedMemory managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutSharedMemory __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutSharedMemory(native.ToPointer(), skipVTables);
        }

        internal static SpoutSharedMemory __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutSharedMemory)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutSharedMemory __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutSharedMemory(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutSharedMemory(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutSharedMemory(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: SpoutSharedMemory()
        public SpoutSharedMemory()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutSharedMemory.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        // DEBUG: SpoutSharedMemory
        public SpoutSharedMemory(global::SpoutDX.SpoutSharedMemory _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutSharedMemory.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.SpoutSharedMemory.__Internal*) __Instance) = *((global::SpoutDX.SpoutSharedMemory.__Internal*) _0.__Instance);
        }

        ~SpoutSharedMemory()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: SpoutCreateResult Create(const char* name, int size)
        public global::SpoutDX.SpoutCreateResult Create(string name, int size)
        {
            var ___ret = __Internal.Create(__Instance, name, size);
            return ___ret;
        }

        // DEBUG: bool Open(const char* name)
        public bool Open(string name)
        {
            var ___ret = __Internal.Open(__Instance, name);
            return ___ret;
        }

        // DEBUG: void Close()
        public void Close()
        {
            __Internal.Close(__Instance);
        }

        // DEBUG: void Unlock()
        public void Unlock()
        {
            __Internal.Unlock(__Instance);
        }

        // DEBUG: void Debug()
        public void Debug()
        {
            __Internal.Debug(__Instance);
        }

        public sbyte* Lock
        {
            get
            {
                var ___ret = __Internal.Lock(__Instance);
                return ___ret;
            }
        }

        public string Name
        {
            get
            {
                var ___ret = __Internal.Name(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public int Size
        {
            get
            {
                var ___ret = __Internal.Size(__Instance);
                return ___ret;
            }
        }
    }

    // DEBUG: struct SharedTextureInfo {		// 280 bytes total
    // DEBUG: 	uint32_t shareHandle;		// 4 bytes : texture handle
    // DEBUG: 	uint32_t width;				// 4 bytes : texture width
    // DEBUG: 	uint32_t height;			// 4 bytes : texture height
    // DEBUG: 	uint32_t format;			// 4 bytes : texture pixel format
    // DEBUG: 	uint32_t usage;				// 4 bytes : texture usage
    // DEBUG: 	uint8_t  description[256];	// 256 bytes : description
    // DEBUG: 	uint32_t partnerId;			// 4 bytes : ID
    // DEBUG: }
    public unsafe partial class SharedTextureInfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 280)]
        public partial struct __Internal
        {
            internal uint shareHandle;
            internal uint width;
            internal uint height;
            internal uint format;
            internal uint usage;
            internal fixed byte description[256];
            internal uint partnerId;

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0SharedTextureInfo@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SharedTextureInfo>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SharedTextureInfo>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SharedTextureInfo managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SharedTextureInfo>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SharedTextureInfo managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SharedTextureInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SharedTextureInfo(native.ToPointer(), skipVTables);
        }

        internal static SharedTextureInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SharedTextureInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SharedTextureInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SharedTextureInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SharedTextureInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SharedTextureInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: SharedTextureInfo
        public SharedTextureInfo(global::SpoutDX.SharedTextureInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SharedTextureInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.SharedTextureInfo.__Internal*) __Instance) = *((global::SpoutDX.SharedTextureInfo.__Internal*) _0.__Instance);
        }

        // DEBUG: SharedTextureInfo
        public SharedTextureInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SharedTextureInfo.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        ~SharedTextureInfo()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ShareHandle
        {
            get
            {
                return ((__Internal*)__Instance)->shareHandle;
            }

            set
            {
                ((__Internal*)__Instance)->shareHandle = value;
            }
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->width;
            }

            set
            {
                ((__Internal*)__Instance)->width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->height;
            }

            set
            {
                ((__Internal*)__Instance)->height = value;
            }
        }

        public uint Format
        {
            get
            {
                return ((__Internal*)__Instance)->format;
            }

            set
            {
                ((__Internal*)__Instance)->format = value;
            }
        }

        public uint Usage
        {
            get
            {
                return ((__Internal*)__Instance)->usage;
            }

            set
            {
                ((__Internal*)__Instance)->usage = value;
            }
        }

        public byte[] Description
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->description, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->description[i] = value[i];
                }
            }
        }

        public uint PartnerId
        {
            get
            {
                return ((__Internal*)__Instance)->partnerId;
            }

            set
            {
                ((__Internal*)__Instance)->partnerId = value;
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP spoutSenderNames {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 		spoutSenderNames();
    // DEBUG: 		~spoutSenderNames();
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// public functions
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Sender name registration
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Register a sender name in the list of senders
    // DEBUG: 		bool RegisterSenderName(char* sendername, bool bNewname = false);
    // DEBUG: 		// Remove a name from the list
    // DEBUG: 		bool ReleaseSenderName(const char* sendername);
    // DEBUG: 		// Find a name in the list
    // DEBUG: 		bool FindSenderName(const char* sendername);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Functions to retrieve info about the sender set map and the senders in it
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Retrieve the sender name list as a set of names
    // DEBUG: 		bool GetSenderNames(std::set<std::string> *sendernames);
    // DEBUG: 		// Number of senders in the list
    // DEBUG: 		int  GetSenderCount();
    // DEBUG: 		// Sender item name
    // DEBUG: 		bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 		// Sender index into the set of names
    // DEBUG: 		int GetSenderIndex(const char* sendername);
    // DEBUG: 		// Information about a sender from an index into the list
    // DEBUG: 		bool GetSenderNameInfo(int index, char* sendername, int sendernameMaxSize, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Maximum number of senders allowed in the list
    // DEBUG: 		// Applies for versions 2.005 and after
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Get the maximum number from the registry
    // DEBUG: 		int GetMaxSenders();
    // DEBUG: 		// Set the maximum number of senders in a new sender map
    // DEBUG: 		void SetMaxSenders(int maxSenders);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Functions to read and write info to a sender memory map
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Get sender information
    // DEBUG: 		bool GetSenderInfo (const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 		// Set sender information
    // DEBUG: 		bool SetSenderInfo (const char* sendername, unsigned int width, unsigned int height, HANDLE dxShareHandle, DWORD dwFormat);
    // DEBUG: 		// Set sender PartnerID field with "CPU" sharing method and GL/DX compatibility
    // DEBUG: 		bool SetSenderID(const char *sendername, bool bCPU, bool bGLDX);
    // DEBUG: 		// Generic sender map info read (returned in a shared texture information structure)
    // DEBUG: 		bool getSharedInfo (const char* sendername, SharedTextureInfo* info);
    // DEBUG: 		// Generic sender map info write
    // DEBUG: 		bool setSharedInfo (const char* sendername, const SharedTextureInfo* info);
    // DEBUG: 		// Test for shared info memory map existence
    // DEBUG: 		bool hasSharedInfo(const char* sendername);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Functions to maintain the active sender
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Set the active sender - the first retrieved by a receiver
    // DEBUG: 		bool SetActiveSender (const char* sendername);
    // DEBUG: 		// Get the current active sender
    // DEBUG: 		bool GetActiveSender (char *sendername, const int maxlength = SpoutMaxSenderNameLen);
    // DEBUG: 		// Get active sender information
    // DEBUG: 		bool GetActiveSenderInfo (SharedTextureInfo* info);
    // DEBUG: 		// Return details of the current active sender
    // DEBUG: 		bool FindActiveSender (char *activename, unsigned int& width, unsigned int& height, HANDLE& hSharehandle, DWORD& dwFormat, const int maxlength = SpoutMaxSenderNameLen);
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Functions to Create, Find or Update a sender
    // DEBUG: 		// without initializing DirectX or the GL/DX interop functions
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Create a sender and register the name in the sender list
    // DEBUG: 		bool CreateSender(char* sendername, unsigned int width, unsigned int height, HANDLE hSharehandle, DWORD dwFormat = 0);
    // DEBUG: 		// Update an existing sender
    // DEBUG: 		bool UpdateSender (const char* sendername, unsigned int width, unsigned int height, HANDLE hSharehandle, DWORD dwFormat = 0);
    // DEBUG: 		// Check details of a sender
    // DEBUG: 		bool CheckSender  (const char* sendername, unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat);
    // DEBUG: 		// Find a sender and return details
    // DEBUG: 		bool FindSender   (char* sendername, unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat);
    // DEBUG: 		// Find a sender in the class names set
    // DEBUG: 		bool FindSender   (const char* sendername);
    // DEBUG: 		// Release orphaned senders
    // DEBUG: 		void CleanSenders();
    // DEBUG: 
    // DEBUG: protected:
    // DEBUG: 
    // DEBUG: 		// Sender name set management
    // DEBUG: 		bool CreateSenderSet();
    // DEBUG: 		bool GetSenderSet (std::set<std::string>& SenderNames);
    // DEBUG: 
    // DEBUG: 		// Active sender management
    // DEBUG: 		bool setActiveSenderName (const char* SenderName);
    // DEBUG: 		// bool getActiveSenderName (char SenderName[SpoutMaxSenderNameLen]);
    // DEBUG: 		bool getActiveSenderName (char *SenderName, const int maxlength = SpoutMaxSenderNameLen);
    // DEBUG: 
    // DEBUG: 		// Goes through the full list of sender names and cleans up
    // DEBUG: 		// any that shouldn't still be around
    // DEBUG: 		void cleanSenderSet();
    // DEBUG: 
    // DEBUG: 		// Functions to manage shared memory map access
    // DEBUG: 		static void readSenderSetFromBuffer(const char* buffer, std::set<std::string>& SenderNames, int maxSenders);
    // DEBUG: 		static void	writeBufferFromSenderSet(const std::set<std::string>& SenderNames, char *buffer, int maxSenders);
    // DEBUG: 
    // DEBUG: 		SpoutSharedMemory m_senderNames;
    // DEBUG: 		SpoutSharedMemory m_activeSender;
    // DEBUG: 
    // DEBUG: 		// This should be a unordered_map of sender names ->SharedMemory
    // DEBUG: 		// to handle multiple inputs and outputs all going through the
    // DEBUG: 		// same spoutSenderNames class
    // DEBUG: 		// Make this a pointer to avoid size differences between compilers
    // DEBUG: 		// if the .dll is compiled with something different
    // DEBUG: 		std::unordered_map<std::string, SpoutSharedMemory*>* m_senders;
    // DEBUG: 		int m_MaxSenders; // maximum number of senders via registry
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutSenderNames : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 112)]
        public partial struct __Internal
        {
            internal global::SpoutDX.SpoutSharedMemory.__Internal m_senderNames;
            internal global::SpoutDX.SpoutSharedMemory.__Internal m_activeSender;
            internal __IntPtr m_senders;
            internal int m_MaxSenders;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutSenderNames@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0spoutSenderNames@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutSenderNames@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RegisterSenderName@spoutSenderNames@@QEAA_NPEAD_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RegisterSenderName(__IntPtr __instance, sbyte* sendername, bool bNewname);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseSenderName@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReleaseSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindSenderName@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@spoutSenderNames@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderIndex@spoutSenderNames@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderIndex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderNameInfo@spoutSenderNames@@QEAA_NHPEADHAEAI1AEAPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderNameInfo(__IntPtr __instance, int index, sbyte* sendername, int sendernameMaxSize, uint* width, uint* height, __IntPtr* dxShareHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@spoutSenderNames@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderInfo@spoutSenderNames@@QEAA_NPEBDIIPEAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, __IntPtr dxShareHandle, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderID@spoutSenderNames@@QEAA_NPEBD_N1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderID(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, bool bCPU, bool bGLDX);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?getSharedInfo@spoutSenderNames@@QEAA_NPEBDPEAUSharedTextureInfo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSharedInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, __IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?setSharedInfo@spoutSenderNames@@QEAA_NPEBDPEBUSharedTextureInfo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSharedInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, __IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?hasSharedInfo@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasSharedInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@spoutSenderNames@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSenderInfo@spoutSenderNames@@QEAA_NPEAUSharedTextureInfo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSenderInfo(__IntPtr __instance, __IntPtr info);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindActiveSender@spoutSenderNames@@QEAA_NPEADAEAI1AEAPEAXAEAKH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindActiveSender(__IntPtr __instance, sbyte* activename, uint* width, uint* height, __IntPtr* hSharehandle, uint* dwFormat, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSender@spoutSenderNames@@QEAA_NPEADIIPEAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSender(__IntPtr __instance, sbyte* sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSender@spoutSenderNames@@QEAA_NPEBDIIPEAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSender@spoutSenderNames@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* hSharehandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindSender@spoutSenderNames@@QEAA_NPEADAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindSender(__IntPtr __instance, sbyte* sendername, uint* width, uint* height, __IntPtr* hSharehandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindSender@spoutSenderNames@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanSenders@spoutSenderNames@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSenderSet@spoutSenderNames@@IEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSenderSet(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?setActiveSenderName@spoutSenderNames@@IEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?getActiveSenderName@spoutSenderNames@@IEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSenderName(__IntPtr __instance, sbyte* SenderName, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?cleanSenderSet@spoutSenderNames@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanSenderSet(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@spoutSenderNames@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@spoutSenderNames@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@spoutSenderNames@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutSenderNames>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutSenderNames>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SpoutSenderNames managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SpoutSenderNames>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SpoutSenderNames managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutSenderNames __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutSenderNames(native.ToPointer(), skipVTables);
        }

        internal static SpoutSenderNames __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutSenderNames)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutSenderNames __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutSenderNames(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutSenderNames(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutSenderNames(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutSenderNames()
        public SpoutSenderNames()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutSenderNames.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutSenderNames
        public SpoutSenderNames(global::SpoutDX.SpoutSenderNames _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutSenderNames.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.SpoutSenderNames.__Internal*) __Instance) = *((global::SpoutDX.SpoutSenderNames.__Internal*) _0.__Instance);
        }

        ~SpoutSenderNames()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: bool RegisterSenderName(char* sendername, bool bNewname = false)
        public bool RegisterSenderName(sbyte* sendername, bool bNewname)
        {
            var ___ret = __Internal.RegisterSenderName(__Instance, sendername, bNewname);
            return ___ret;
        }

        // DEBUG: bool ReleaseSenderName(const char* sendername)
        public bool ReleaseSenderName(string sendername)
        {
            var ___ret = __Internal.ReleaseSenderName(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool FindSenderName(const char* sendername)
        public bool FindSenderName(string sendername)
        {
            var ___ret = __Internal.FindSenderName(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var ___ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return ___ret;
        }

        // DEBUG: int GetSenderIndex(const char* sendername)
        public int GetSenderIndex(string sendername)
        {
            var ___ret = __Internal.GetSenderIndex(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool GetSenderNameInfo(int index, char* sendername, int sendernameMaxSize, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle)
        public bool GetSenderNameInfo(int index, sbyte* sendername, int sendernameMaxSize, ref uint width, ref uint height, __IntPtr* dxShareHandle)
        {
            fixed (uint* __width3 = &width)
            {
                var __arg3 = __width3;
                fixed (uint* __height4 = &height)
                {
                    var __arg4 = __height4;
                    var ___ret = __Internal.GetSenderNameInfo(__Instance, index, sendername, sendernameMaxSize, __arg3, __arg4, dxShareHandle);
                    return ___ret;
                }
            }
        }

        // DEBUG: bool GetSenderInfo (const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool SetSenderInfo (const char* sendername, unsigned int width, unsigned int height, HANDLE dxShareHandle, DWORD dwFormat)
        public bool SetSenderInfo(string sendername, uint width, uint height, __IntPtr dxShareHandle, uint dwFormat)
        {
            var ___ret = __Internal.SetSenderInfo(__Instance, sendername, width, height, dxShareHandle, dwFormat);
            return ___ret;
        }

        // DEBUG: bool SetSenderID(const char *sendername, bool bCPU, bool bGLDX)
        public bool SetSenderID(string sendername, bool bCPU, bool bGLDX)
        {
            var ___ret = __Internal.SetSenderID(__Instance, sendername, bCPU, bGLDX);
            return ___ret;
        }

        // DEBUG: bool getSharedInfo (const char* sendername, SharedTextureInfo* info)
        public bool GetSharedInfo(string sendername, global::SpoutDX.SharedTextureInfo info)
        {
            var __arg1 = info is null ? __IntPtr.Zero : info.__Instance;
            var ___ret = __Internal.GetSharedInfo(__Instance, sendername, __arg1);
            return ___ret;
        }

        // DEBUG: bool setSharedInfo (const char* sendername, const SharedTextureInfo* info)
        public bool SetSharedInfo(string sendername, global::SpoutDX.SharedTextureInfo info)
        {
            var __arg1 = info is null ? __IntPtr.Zero : info.__Instance;
            var ___ret = __Internal.SetSharedInfo(__Instance, sendername, __arg1);
            return ___ret;
        }

        // DEBUG: bool hasSharedInfo(const char* sendername)
        public bool HasSharedInfo(string sendername)
        {
            var ___ret = __Internal.HasSharedInfo(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool SetActiveSender (const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var ___ret = __Internal.SetActiveSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool GetActiveSender (char *sendername, const int maxlength = SpoutMaxSenderNameLen)
        public bool GetActiveSender(sbyte* sendername, int maxlength)
        {
            var ___ret = __Internal.GetActiveSender(__Instance, sendername, maxlength);
            return ___ret;
        }

        // DEBUG: bool GetActiveSenderInfo (SharedTextureInfo* info)
        public bool GetActiveSenderInfo(global::SpoutDX.SharedTextureInfo info)
        {
            var __arg0 = info is null ? __IntPtr.Zero : info.__Instance;
            var ___ret = __Internal.GetActiveSenderInfo(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: bool FindActiveSender (char *activename, unsigned int& width, unsigned int& height, HANDLE& hSharehandle, DWORD& dwFormat, const int maxlength = SpoutMaxSenderNameLen)
        public bool FindActiveSender(sbyte* activename, ref uint width, ref uint height, __IntPtr* hSharehandle, ref uint dwFormat, int maxlength)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.FindActiveSender(__Instance, activename, __arg1, __arg2, hSharehandle, __arg4, maxlength);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool CreateSender(char* sendername, unsigned int width, unsigned int height, HANDLE hSharehandle, DWORD dwFormat = 0)
        public bool CreateSender(sbyte* sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat)
        {
            var ___ret = __Internal.CreateSender(__Instance, sendername, width, height, hSharehandle, dwFormat);
            return ___ret;
        }

        // DEBUG: bool UpdateSender (const char* sendername, unsigned int width, unsigned int height, HANDLE hSharehandle, DWORD dwFormat = 0)
        public bool UpdateSender(string sendername, uint width, uint height, __IntPtr hSharehandle, uint dwFormat)
        {
            var ___ret = __Internal.UpdateSender(__Instance, sendername, width, height, hSharehandle, dwFormat);
            return ___ret;
        }

        // DEBUG: bool CheckSender  (const char* sendername, unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat)
        public bool CheckSender(string sendername, ref uint width, ref uint height, __IntPtr* hSharehandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.CheckSender(__Instance, sendername, __arg1, __arg2, hSharehandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool FindSender   (char* sendername, unsigned int &width, unsigned int &height, HANDLE &hSharehandle, DWORD &dwFormat)
        public bool FindSender(sbyte* sendername, ref uint width, ref uint height, __IntPtr* hSharehandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.FindSender(__Instance, sendername, __arg1, __arg2, hSharehandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool FindSender   (const char* sendername)
        public bool FindSender(string sendername)
        {
            var ___ret = __Internal.FindSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: void CleanSenders()
        public void CleanSenders()
        {
            __Internal.CleanSenders(__Instance);
        }

        // DEBUG: bool CreateSenderSet()
        protected bool CreateSenderSet()
        {
            var ___ret = __Internal.CreateSenderSet(__Instance);
            return ___ret;
        }

        // DEBUG: bool setActiveSenderName (const char* SenderName)
        protected bool SetActiveSenderName(string SenderName)
        {
            var ___ret = __Internal.SetActiveSenderName(__Instance, SenderName);
            return ___ret;
        }

        // DEBUG: bool getActiveSenderName (char *SenderName, const int maxlength = SpoutMaxSenderNameLen)
        protected bool GetActiveSenderName(sbyte* SenderName, int maxlength)
        {
            var ___ret = __Internal.GetActiveSenderName(__Instance, SenderName, maxlength);
            return ___ret;
        }

        // DEBUG: void cleanSenderSet()
        protected void CleanSenderSet()
        {
            __Internal.CleanSenderSet(__Instance);
        }

        protected global::SpoutDX.SpoutSharedMemory MSenderNames
        {
            get
            {
                return global::SpoutDX.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_senderNames));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_senderNames = *(global::SpoutDX.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        protected global::SpoutDX.SpoutSharedMemory MActiveSender
        {
            get
            {
                return global::SpoutDX.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_activeSender));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_activeSender = *(global::SpoutDX.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        protected int MMaxSenders
        {
            get
            {
                return ((__Internal*)__Instance)->m_MaxSenders;
            }

            set
            {
                ((__Internal*)__Instance)->m_MaxSenders = value;
            }
        }

        public int SenderCount
        {
            get
            {
                var ___ret = __Internal.GetSenderCount(__Instance);
                return ___ret;
            }
        }

        public int MaxSenders
        {
            get
            {
                var ___ret = __Internal.GetMaxSenders(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }
    }

    public unsafe partial class SpoutSenderNames
    {
        public partial struct __Internal
        {
        }

        // DEBUG: static const char* GUID_queue = "AB5C33D6-3654-43F9-85F6-F54872B0460B"
        public static string GUID_queue { get; } = "AB5C33D6-3654-43F9-85F6-F54872B0460B";
    }

    // DEBUG: class SPOUT_DLLEXP spoutFrameCount {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	spoutFrameCount();
    // DEBUG:     ~spoutFrameCount();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Frame counting
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Enable or disable frame counting globally by registry setting
    // DEBUG: 	void SetFrameCount(bool bEnable);
    // DEBUG: 	// Enable frame counting for this sender
    // DEBUG: 	void EnableFrameCount(const char* SenderName);
    // DEBUG: 	// Disable frame counting
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Pause frame counting
    // DEBUG: 	void PauseFrameCount(bool bPaused = true);
    // DEBUG: 	// Check status of frame counting
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Is the received frame new
    // DEBUG: 	bool IsFrameNew();
    // DEBUG: 	// Received frame rate
    // DEBUG: 	double GetSenderFps();
    // DEBUG: 	// Received frame count
    // DEBUG: 	long GetSenderFrame();
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Used by other classes
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Sender increment the semaphore count
    // DEBUG: 	void SetNewFrame();
    // DEBUG: 	// Receiver read the semaphore count
    // DEBUG: 	bool GetNewFrame();
    // DEBUG: 	// For class cleanup functions
    // DEBUG: 	void CleanupFrameCount();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Mutex locks including DirectX 11 keyed mutex
    // DEBUG: 	// DX11 texture keyed mutex functions are private
    // DEBUG: 	// and called by the follwoing functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Test for texture access using a named sender mutex or keyed texture mutex 
    // DEBUG: 	bool CheckTextureAccess(ID3D11Texture2D* D3D11texture = nullptr);
    // DEBUG: 	// Release mutex and allow texture access
    // DEBUG: 	bool AllowTextureAccess(ID3D11Texture2D* D3D11texture = nullptr);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Named mutex for shared texture access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create named mutex for a sender
    // DEBUG: 	bool CreateAccessMutex(const char * SenderName);
    // DEBUG: 	// Close the texture access mutex.
    // DEBUG: 	void CloseAccessMutex();
    // DEBUG: 	// Test access using a named mutex
    // DEBUG: 	bool CheckAccess();
    // DEBUG: 	// Allow access after gaining ownership
    // DEBUG: 	void AllowAccess();
    // DEBUG: 	// Test for keyed mutex
    // DEBUG: 	bool IsKeyedMutex(ID3D11Texture2D* D3D11texture);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Sync events
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Set sync event 
    // DEBUG: 	void SetFrameSync(const char* name);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *name, DWORD dwTimeout = 0);
    // DEBUG: 	// Close sync event
    // DEBUG: 	void CloseFrameSync();
    // DEBUG: 	// Enable / disable frame sync
    // DEBUG: 	void EnableFrameSync(bool bSync = true);
    // DEBUG: 	// Check for frame sync option
    // DEBUG: 	bool IsFrameSyncEnabled();
    // DEBUG: 
    // DEBUG: protected:
    // DEBUG: 
    // DEBUG: 	// Texture access named mutex
    // DEBUG: 	HANDLE m_hAccessMutex;
    // DEBUG: 
    // DEBUG: 	// DX11 texture keyed mutex checks
    // DEBUG: 	bool CheckKeyedAccess(ID3D11Texture2D* D3D11texture);
    // DEBUG: 	bool AllowKeyedAccess(ID3D11Texture2D* D3D11texture);
    // DEBUG: 
    // DEBUG: 	// Frame count semaphore
    // DEBUG: 	bool m_bFrameCount; // Registry setting of frame count
    // DEBUG: 	bool m_bCountDisabled; // application disable
    // DEBUG: 	bool m_bIsNewFrame; // received frame is new
    // DEBUG: 
    // DEBUG: 	HANDLE m_hCountSemaphore; // semaphore handle
    // DEBUG: 	char m_CountSemaphoreName[256]; // semaphore name
    // DEBUG: 	char m_SenderName[256]; // sender currently connected to a receiver
    // DEBUG: 	long m_FrameCount; // sender frame count
    // DEBUG: 	long m_LastFrameCount; // receiver frame comparator
    // DEBUG: 	double m_FrameTime;
    // DEBUG: 	double m_FrameTimeTotal;
    // DEBUG: 	double m_FrameTimeNumber;
    // DEBUG: 	double m_lastFrame;
    // DEBUG: 
    // DEBUG: 	// Sender frame timing
    // DEBUG: 	double m_SystemFps;
    // DEBUG: 	double m_SenderFps;
    // DEBUG: 	void UpdateSenderFps(long framecount = 0);
    // DEBUG: 
    // DEBUG: 	// Windows minimum time period
    // DEBUG: 	UINT m_PeriodMin;
    // DEBUG: 	void StartTimePeriod();
    // DEBUG: 	void EndTimePeriod();
    // DEBUG: 
    // DEBUG: 	// Sync event
    // DEBUG: 	bool m_bFrameSync;
    // DEBUG: 	HANDLE m_hSyncEvent;
    // DEBUG: 	void OpenFrameSync(const char* SenderName);
    // DEBUG: 
    // DEBUG: #ifdef USE_CHRONO
    // DEBUG: 
    // DEBUG: 	// Avoid C4251 warnings in SpoutLibrary by using pointers
    // DEBUG: 	// USE_CHRONO is defined in SpoutUtils.h
    // DEBUG: 	// Use of std::unique_ptr to avoid warning C26409 using new/delete
    // DEBUG: 	// results in warning C4251 needs to have dll-interface
    // DEBUG: 	std::chrono::steady_clock::time_point* m_FpsStartPtr;
    // DEBUG: 	std::chrono::steady_clock::time_point* m_FpsEndPtr;
    // DEBUG: 	std::chrono::steady_clock::time_point* m_FrameStartPtr;
    // DEBUG: 	std::chrono::steady_clock::time_point* m_FrameEndPtr;
    // DEBUG: 
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutFrameCount : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 640)]
        public partial struct __Internal
        {
            internal __IntPtr m_hAccessMutex;
            internal byte m_bFrameCount;
            internal byte m_bCountDisabled;
            internal byte m_bIsNewFrame;
            internal __IntPtr m_hCountSemaphore;
            internal fixed sbyte m_CountSemaphoreName[256];
            internal fixed sbyte m_SenderName[256];
            internal int m_FrameCount;
            internal int m_LastFrameCount;
            internal double m_FrameTime;
            internal double m_FrameTimeTotal;
            internal double m_FrameTimeNumber;
            internal double m_lastFrame;
            internal double m_SystemFps;
            internal double m_SenderFps;
            internal uint m_PeriodMin;
            internal byte m_bFrameSync;
            internal __IntPtr m_hSyncEvent;
            internal __IntPtr m_FpsStartPtr;
            internal __IntPtr m_FpsEndPtr;
            internal __IntPtr m_FrameStartPtr;
            internal __IntPtr m_FrameEndPtr;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutFrameCount@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0spoutFrameCount@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutFrameCount@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@spoutFrameCount@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameCount@spoutFrameCount@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameCount(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?PauseFrameCount@spoutFrameCount@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PauseFrameCount(__IntPtr __instance, bool bPaused);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@spoutFrameCount@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetNewFrame@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetNewFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupFrameCount@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckTextureAccess@spoutFrameCount@@QEAA_NPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckTextureAccess(__IntPtr __instance, __IntPtr D3D11texture);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AllowTextureAccess@spoutFrameCount@@QEAA_NPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool AllowTextureAccess(__IntPtr __instance, __IntPtr D3D11texture);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateAccessMutex@spoutFrameCount@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateAccessMutex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseAccessMutex@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseAccessMutex(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckAccess@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckAccess(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AllowAccess@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AllowAccess(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsKeyedMutex@spoutFrameCount@@QEAA_NPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyedMutex(__IntPtr __instance, __IntPtr D3D11texture);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@spoutFrameCount@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@spoutFrameCount@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseFrameSync@spoutFrameCount@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseFrameSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameSync@spoutFrameCount@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckKeyedAccess@spoutFrameCount@@IEAA_NPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckKeyedAccess(__IntPtr __instance, __IntPtr D3D11texture);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AllowKeyedAccess@spoutFrameCount@@IEAA_NPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool AllowKeyedAccess(__IntPtr __instance, __IntPtr D3D11texture);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSenderFps@spoutFrameCount@@IEAAXJ@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateSenderFps(__IntPtr __instance, int framecount);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?StartTimePeriod@spoutFrameCount@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartTimePeriod(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EndTimePeriod@spoutFrameCount@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EndTimePeriod(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenFrameSync@spoutFrameCount@@IEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OpenFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameNew@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFps@spoutFrameCount@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFrame@spoutFrameCount@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNewFrame@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetNewFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameSyncEnabled@spoutFrameCount@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameSyncEnabled(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutFrameCount>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutFrameCount>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SpoutFrameCount managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SpoutFrameCount>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SpoutFrameCount managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutFrameCount __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutFrameCount(native.ToPointer(), skipVTables);
        }

        internal static SpoutFrameCount __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutFrameCount)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutFrameCount __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutFrameCount(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutFrameCount(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutFrameCount(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutFrameCount()
        public SpoutFrameCount()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutFrameCount.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutFrameCount
        public SpoutFrameCount(global::SpoutDX.SpoutFrameCount _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutFrameCount.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.SpoutFrameCount.__Internal*) __Instance) = *((global::SpoutDX.SpoutFrameCount.__Internal*) _0.__Instance);
        }

        ~SpoutFrameCount()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void SetFrameCount(bool bEnable)
        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        // DEBUG: void EnableFrameCount(const char* SenderName)
        public void EnableFrameCount(string SenderName)
        {
            __Internal.EnableFrameCount(__Instance, SenderName);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void PauseFrameCount(bool bPaused = true)
        public void PauseFrameCount(bool bPaused)
        {
            __Internal.PauseFrameCount(__Instance, bPaused);
        }

        // DEBUG: void HoldFps(int fps)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void SetNewFrame()
        public void SetNewFrame()
        {
            __Internal.SetNewFrame(__Instance);
        }

        // DEBUG: void CleanupFrameCount()
        public void CleanupFrameCount()
        {
            __Internal.CleanupFrameCount(__Instance);
        }

        // DEBUG: bool CheckTextureAccess(ID3D11Texture2D* D3D11texture = nullptr)
        public bool CheckTextureAccess(global::SpoutDX.ID3D11Texture2D D3D11texture)
        {
            var __arg0 = D3D11texture is null ? __IntPtr.Zero : D3D11texture.__Instance;
            var ___ret = __Internal.CheckTextureAccess(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: bool AllowTextureAccess(ID3D11Texture2D* D3D11texture = nullptr)
        public bool AllowTextureAccess(global::SpoutDX.ID3D11Texture2D D3D11texture)
        {
            var __arg0 = D3D11texture is null ? __IntPtr.Zero : D3D11texture.__Instance;
            var ___ret = __Internal.AllowTextureAccess(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: bool CreateAccessMutex(const char * SenderName)
        public bool CreateAccessMutex(string SenderName)
        {
            var ___ret = __Internal.CreateAccessMutex(__Instance, SenderName);
            return ___ret;
        }

        // DEBUG: void CloseAccessMutex()
        public void CloseAccessMutex()
        {
            __Internal.CloseAccessMutex(__Instance);
        }

        // DEBUG: bool CheckAccess()
        public bool CheckAccess()
        {
            var ___ret = __Internal.CheckAccess(__Instance);
            return ___ret;
        }

        // DEBUG: void AllowAccess()
        public void AllowAccess()
        {
            __Internal.AllowAccess(__Instance);
        }

        // DEBUG: bool IsKeyedMutex(ID3D11Texture2D* D3D11texture)
        public bool IsKeyedMutex(global::SpoutDX.ID3D11Texture2D D3D11texture)
        {
            var __arg0 = D3D11texture is null ? __IntPtr.Zero : D3D11texture.__Instance;
            var ___ret = __Internal.IsKeyedMutex(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: void SetFrameSync(const char* name)
        public void SetFrameSync(string name)
        {
            __Internal.SetFrameSync(__Instance, name);
        }

        // DEBUG: bool WaitFrameSync(const char *name, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string name, uint dwTimeout)
        {
            var ___ret = __Internal.WaitFrameSync(__Instance, name, dwTimeout);
            return ___ret;
        }

        // DEBUG: void CloseFrameSync()
        public void CloseFrameSync()
        {
            __Internal.CloseFrameSync(__Instance);
        }

        // DEBUG: void EnableFrameSync(bool bSync = true)
        public void EnableFrameSync(bool bSync)
        {
            __Internal.EnableFrameSync(__Instance, bSync);
        }

        // DEBUG: bool CheckKeyedAccess(ID3D11Texture2D* D3D11texture)
        protected bool CheckKeyedAccess(global::SpoutDX.ID3D11Texture2D D3D11texture)
        {
            var __arg0 = D3D11texture is null ? __IntPtr.Zero : D3D11texture.__Instance;
            var ___ret = __Internal.CheckKeyedAccess(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: bool AllowKeyedAccess(ID3D11Texture2D* D3D11texture)
        protected bool AllowKeyedAccess(global::SpoutDX.ID3D11Texture2D D3D11texture)
        {
            var __arg0 = D3D11texture is null ? __IntPtr.Zero : D3D11texture.__Instance;
            var ___ret = __Internal.AllowKeyedAccess(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: void UpdateSenderFps(long framecount = 0)
        protected void UpdateSenderFps(int framecount)
        {
            __Internal.UpdateSenderFps(__Instance, framecount);
        }

        // DEBUG: void StartTimePeriod()
        protected void StartTimePeriod()
        {
            __Internal.StartTimePeriod(__Instance);
        }

        // DEBUG: void EndTimePeriod()
        protected void EndTimePeriod()
        {
            __Internal.EndTimePeriod(__Instance);
        }

        // DEBUG: void OpenFrameSync(const char* SenderName)
        protected void OpenFrameSync(string SenderName)
        {
            __Internal.OpenFrameSync(__Instance, SenderName);
        }

        protected __IntPtr MHAccessMutex
        {
            get
            {
                return ((__Internal*)__Instance)->m_hAccessMutex;
            }

            set
            {
                ((__Internal*)__Instance)->m_hAccessMutex = (__IntPtr) value;
            }
        }

        protected bool MBFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFrameCount != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFrameCount = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCountDisabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCountDisabled != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCountDisabled = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBIsNewFrame
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsNewFrame != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsNewFrame = (byte) (value ? 1 : 0);
            }
        }

        protected __IntPtr MHCountSemaphore
        {
            get
            {
                return ((__Internal*)__Instance)->m_hCountSemaphore;
            }

            set
            {
                ((__Internal*)__Instance)->m_hCountSemaphore = (__IntPtr) value;
            }
        }

        protected sbyte[] MCountSemaphoreName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_CountSemaphoreName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_CountSemaphoreName[i] = value[i];
                }
            }
        }

        protected sbyte[] MSenderName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderName[i] = value[i];
                }
            }
        }

        protected int MFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameCount = value;
            }
        }

        protected int MLastFrameCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_LastFrameCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_LastFrameCount = value;
            }
        }

        protected double MFrameTime
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameTime;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameTime = value;
            }
        }

        protected double MFrameTimeTotal
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameTimeTotal;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameTimeTotal = value;
            }
        }

        protected double MFrameTimeNumber
        {
            get
            {
                return ((__Internal*)__Instance)->m_FrameTimeNumber;
            }

            set
            {
                ((__Internal*)__Instance)->m_FrameTimeNumber = value;
            }
        }

        protected double MLastFrame
        {
            get
            {
                return ((__Internal*)__Instance)->m_lastFrame;
            }

            set
            {
                ((__Internal*)__Instance)->m_lastFrame = value;
            }
        }

        protected double MSystemFps
        {
            get
            {
                return ((__Internal*)__Instance)->m_SystemFps;
            }

            set
            {
                ((__Internal*)__Instance)->m_SystemFps = value;
            }
        }

        protected double MSenderFps
        {
            get
            {
                return ((__Internal*)__Instance)->m_SenderFps;
            }

            set
            {
                ((__Internal*)__Instance)->m_SenderFps = value;
            }
        }

        protected uint MPeriodMin
        {
            get
            {
                return ((__Internal*)__Instance)->m_PeriodMin;
            }

            set
            {
                ((__Internal*)__Instance)->m_PeriodMin = value;
            }
        }

        protected bool MBFrameSync
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFrameSync != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFrameSync = (byte) (value ? 1 : 0);
            }
        }

        protected __IntPtr MHSyncEvent
        {
            get
            {
                return ((__Internal*)__Instance)->m_hSyncEvent;
            }

            set
            {
                ((__Internal*)__Instance)->m_hSyncEvent = (__IntPtr) value;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameCountEnabled(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var ___ret = __Internal.IsFrameNew(__Instance);
                return ___ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var ___ret = __Internal.GetSenderFps(__Instance);
                return ___ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var ___ret = __Internal.GetSenderFrame(__Instance);
                return ___ret;
            }
        }

        public bool NewFrame
        {
            get
            {
                var ___ret = __Internal.GetNewFrame(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameSyncEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameSyncEnabled(__Instance);
                return ___ret;
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP spoutCopy {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 		spoutCopy();
    // DEBUG: 		~spoutCopy();
    // DEBUG: 
    // DEBUG: 		// Copy image pixels and select fastest method based on image width
    // DEBUG: 		void CopyPixels(const unsigned char *src, unsigned char *dst,
    // DEBUG: 						unsigned int width, unsigned int height, 
    // DEBUG: 						GLenum glFormat = GL_RGBA, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Flip a pixel buffer in place
    // DEBUG: 		void FlipBuffer(const unsigned char *src, unsigned char *dst,
    // DEBUG: 						unsigned int width, unsigned int height,
    // DEBUG: 						GLenum glFormat = GL_RGBA) const;
    // DEBUG: 
    // DEBUG: 		// Correct for image stride
    // DEBUG: 		void RemovePadding(const unsigned char* source, unsigned char* dest,
    // DEBUG: 			unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int source_stride, GLenum glFormat) const;
    // DEBUG: 
    // DEBUG: 		// Clear alpha of rgba image pixels to the required value
    // DEBUG: 		void ClearAlpha(unsigned char* src,	unsigned int width,
    // DEBUG: 			unsigned int height, unsigned char alpha) const;
    // DEBUG: 
    // DEBUG: 		// SSE2 version of memcpy
    // DEBUG: 		void memcpy_sse2(void* dst, const void* src, size_t size) const;
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// RGBA <> RGBA
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Copy rgba buffers line by line allowing for source pitch using the fastest method
    // DEBUG: 		void rgba2rgba(const void* source, void* dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Copy rgba buffers line by line allowing for source and destination line pitch
    // DEBUG: 		void rgba2rgba(const void* source, void* dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, unsigned int destPitch, bool bInvert) const;
    // DEBUG: 
    // DEBUG: 		// Copy rgba buffers of differing size
    // DEBUG: 		void rgba2rgbaResample(const void* source, void* dest,
    // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
    // DEBUG: 			unsigned int destWidth, unsigned int destHeight, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// RGBA <> BGRA
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Copy rgba to bgra using the fastest method
    // DEBUG: 		void rgba2bgra(const void* rgba_source, void* bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Copy rgba to bgra line by line allowing for source pitch using the fastest method
    // DEBUG: 		void rgba2bgra(const void* rgba_source, void* bgra_dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Copy rgba to bgra line allowing for source and destination line pitch
    // DEBUG: 		void rgba2bgra(const void* source, void* dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, unsigned int destPitch, bool bInvert) const;
    // DEBUG: 		
    // DEBUG: 		// Copy bgra to rgba
    // DEBUG: 		void bgra2rgba(const void* bgra_source, void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		//
    // DEBUG: 		// RGBA <> RGB, RGBA <> BGR
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// TODO : add RGBA pitch to all functions
    // DEBUG: 		// TODO : avoid redundancy
    // DEBUG: 
    // DEBUG: 		// Copy RGBA to RGB or BGR allowing for source line pitch using the fastest method
    // DEBUG: 		void rgba2rgb (const void* rgba_source, void* rgb_dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch,    // byte line pitch
    // DEBUG: 			bool bInvert = false,        // Flip vertically
    // DEBUG: 			bool bMirror = false,        // Mirror horizontally
    // DEBUG: 			bool bSwapRB = false) const; // swap red and blue (rgb > bgr) const;
    // DEBUG: 
    // DEBUG: 		// Copy RGBA to BGR allowing for source line pitch
    // DEBUG: 		void rgba2bgr(const void* rgba_source, void* rgb_dest, unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// Copy RGBA to RGB allowing for source and destination pitch
    // DEBUG: 		void rgba2rgbResample(const void* source, void* dest,
    // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
    // DEBUG: 			unsigned int destWidth, unsigned int destHeight,
    // DEBUG: 			bool bInvert = false, bool bMirror = false, bool bSwapRB = false) const;
    // DEBUG: 
    // DEBUG: 		// Copy RGBA to BGR allowing for source and destination pitch
    // DEBUG: 		void rgba2bgrResample(const void* source, void* dest,
    // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
    // DEBUG: 			unsigned int destWidth, unsigned int destHeight, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// SSE3 function
    // DEBUG: 		//
    // DEBUG: 		// RGBA to RGB/BGR with source line pitch 
    // DEBUG: 		//
    // DEBUG: 		void rgba_to_rgb_sse3(const void* rgba_source, void* rgb_dest,
    // DEBUG: 			unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int rgba_pitch, // line byte pitch
    // DEBUG: 			bool bInvert = false, // Flip image
    // DEBUG: 			bool bSwapRB = false) const; // Swap RG (BGR)
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// Byte functions
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Copy RGB to RGBA 
    // DEBUG: 		void rgb2rgba (const void* rgb_source,  void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		// Copy RGB to RGBA allowing for destination pitch
    // DEBUG: 		void rgb2rgba(const void *rgb_source, void *rgba_dest,
    // DEBUG: 			unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int dest_pitch, bool bInvert) const;
    // DEBUG: 
    // DEBUG: 		// Copy BGR to RGBA
    // DEBUG: 		void bgr2rgba (const void* bgr_source,  void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		// Copy BGR to RGBA allowing for destination pitch
    // DEBUG: 		void bgr2rgba(const void *rgb_source, void *rgba_dest,
    // DEBUG: 			unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int dest_pitch, bool bInvert) const;
    // DEBUG: 
    // DEBUG: 		//
    // DEBUG: 		// RGB > BGRA
    // DEBUG: 		//
    // DEBUG: 
    // DEBUG: 		// Copy RGB to BGRA
    // DEBUG: 		void rgb2bgra (const void* rgb_source,  void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		// Copy RGB to BGRA allowing for destination pitch
    // DEBUG: 		void rgb2bgra(const void *rgb_source, void *bgra_dest,
    // DEBUG: 			unsigned int width, unsigned int height,
    // DEBUG: 			unsigned int dest_pitch, bool bInvert) const;
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 		// Experimental SSE RGB to BGRA
    // DEBUG: 		// Single line
    // DEBUG: 		void rgb_to_bgrx_sse(unsigned int npixels, const void* rgb_source, void* bgrx_out) const;
    // DEBUG: 		// Full height
    // DEBUG: 		void rgb_to_bgra_sse3(void* rgb_source, void* rgba_dest, unsigned int width, unsigned int height) const;
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 		// Copy BGR to BGRA
    // DEBUG: 		void bgr2bgra (const void* bgr_source,  void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 	
    // DEBUG: 		// Copy RGBA to BGR
    // DEBUG: 		void rgba2bgr (const void* rgba_source, void *bgr_dest,  unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		// Copy BGRA to RGB
    // DEBUG: 		void bgra2rgb (const void* bgra_source, void *rgb_dest,  unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		
    // DEBUG: 		// Copy BGRA to BGR
    // DEBUG: 		void bgra2bgr (const void* bgra_source, void *bgr_dest,  unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: 		// SSE capability
    // DEBUG: 
    // DEBUG: 		void GetSSE(bool &bSSE2, bool &bSSE3, bool &bSSSE3);
    // DEBUG: 
    // DEBUG: 	protected :
    // DEBUG: 
    // DEBUG: 		void CheckSSE();
    // DEBUG: 		bool m_bSSE2;
    // DEBUG: 		bool m_bSSE3;
    // DEBUG: 		bool m_bSSSE3;
    // DEBUG: 
    // DEBUG: 		void rgba_bgra(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		void rgba_bgra_sse2(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 		void rgba_bgra_sse3(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const;
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutCopy : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 3)]
        public partial struct __Internal
        {
            internal byte m_bSSE2;
            internal byte m_bSSE3;
            internal byte m_bSSSE3;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutCopy@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "??0spoutCopy@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1spoutCopy@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyPixels@spoutCopy@@QEBAXPEBEPEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CopyPixels(__IntPtr __instance, byte* src, byte* dst, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FlipBuffer@spoutCopy@@QEBAXPEBEPEAEIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FlipBuffer(__IntPtr __instance, byte* src, byte* dst, uint width, uint height, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemovePadding@spoutCopy@@QEBAXPEBEPEAEIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePadding(__IntPtr __instance, byte* source, byte* dest, uint width, uint height, uint source_stride, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ClearAlpha@spoutCopy@@QEBAXPEAEIIE@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearAlpha(__IntPtr __instance, byte* src, uint width, uint height, byte alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?memcpy_sse2@spoutCopy@@QEBAXPEAXPEBX_K@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MemcpySse2(__IntPtr __instance, __IntPtr dst, __IntPtr src, ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgba@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgba(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgba@spoutCopy@@QEBAXPEBXPEAXIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgba(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgbaResample@spoutCopy@@QEBAXPEBXPEAXIIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgbaResample(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgra@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgra(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgra@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgra(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, uint sourcePitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgra@spoutCopy@@QEBAXPEBXPEAXIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgra(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgra2rgba@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgra2rgba(__IntPtr __instance, __IntPtr bgra_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgb@spoutCopy@@QEBAXPEBXPEAXIII_N22@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgb(__IntPtr __instance, __IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert, bool bMirror, bool bSwapRB);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgr@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgr(__IntPtr __instance, __IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2rgbResample@spoutCopy@@QEBAXPEBXPEAXIIIII_N22@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2rgbResample(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert, bool bMirror, bool bSwapRB);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgrResample@spoutCopy@@QEBAXPEBXPEAXIIIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgrResample(__IntPtr __instance, __IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_to_rgb_sse3@spoutCopy@@QEBAXPEBXPEAXIII_N2@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaToRgbSse3(__IntPtr __instance, __IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint rgba_pitch, bool bInvert, bool bSwapRB);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2rgba@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2rgba(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2rgba@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2rgba(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgr2rgba@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgr2rgba(__IntPtr __instance, __IntPtr bgr_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgr2rgba@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgr2rgba(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2bgra@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2bgra(__IntPtr __instance, __IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb2bgra@spoutCopy@@QEBAXPEBXPEAXIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgb2bgra(__IntPtr __instance, __IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, uint dest_pitch, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb_to_bgrx_sse@spoutCopy@@QEBAXIPEBXPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbToBgrxSse(__IntPtr __instance, uint npixels, __IntPtr rgb_source, __IntPtr bgrx_out);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgb_to_bgra_sse3@spoutCopy@@QEBAXPEAX0II@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbToBgraSse3(__IntPtr __instance, __IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgr2bgra@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgr2bgra(__IntPtr __instance, __IntPtr bgr_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba2bgr@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rgba2bgr(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgra2rgb@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgra2rgb(__IntPtr __instance, __IntPtr bgra_source, __IntPtr rgb_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?bgra2bgr@spoutCopy@@QEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Bgra2bgr(__IntPtr __instance, __IntPtr bgra_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSSE@spoutCopy@@QEAAXAEA_N00@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetSSE(__IntPtr __instance, bool* bSSE2, bool* bSSE3, bool* bSSSE3);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSSE@spoutCopy@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckSSE(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_bgra@spoutCopy@@IEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaBgra(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_bgra_sse2@spoutCopy@@IEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaBgraSse2(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?rgba_bgra_sse3@spoutCopy@@IEBAXPEBXPEAXII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RgbaBgraSse3(__IntPtr __instance, __IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutCopy>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutCopy>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SpoutCopy managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SpoutCopy>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SpoutCopy managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutCopy __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutCopy(native.ToPointer(), skipVTables);
        }

        internal static SpoutCopy __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutCopy)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutCopy __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutCopy(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpoutCopy(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutCopy(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: spoutCopy()
        public SpoutCopy()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutCopy.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        // DEBUG: spoutCopy
        public SpoutCopy(global::SpoutDX.SpoutCopy _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutCopy.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::SpoutDX.SpoutCopy.__Internal*) __Instance) = *((global::SpoutDX.SpoutCopy.__Internal*) _0.__Instance);
        }

        ~SpoutCopy()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void CopyPixels(const unsigned char *src, unsigned char *dst,
        // DEBUG: 						unsigned int width, unsigned int height, 
        // DEBUG: 						GLenum glFormat = GL_RGBA, bool bInvert = false) const
        public void CopyPixels(byte* src, byte* dst, uint width, uint height, uint glFormat, bool bInvert)
        {
            __Internal.CopyPixels(__Instance, src, dst, width, height, glFormat, bInvert);
        }

        // DEBUG: void FlipBuffer(const unsigned char *src, unsigned char *dst,
        // DEBUG: 						unsigned int width, unsigned int height,
        // DEBUG: 						GLenum glFormat = GL_RGBA) const
        public void FlipBuffer(byte* src, byte* dst, uint width, uint height, uint glFormat)
        {
            __Internal.FlipBuffer(__Instance, src, dst, width, height, glFormat);
        }

        // DEBUG: void RemovePadding(const unsigned char* source, unsigned char* dest,
        // DEBUG: 			unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int source_stride, GLenum glFormat) const
        public void RemovePadding(byte* source, byte* dest, uint width, uint height, uint source_stride, uint glFormat)
        {
            __Internal.RemovePadding(__Instance, source, dest, width, height, source_stride, glFormat);
        }

        // DEBUG: void ClearAlpha(unsigned char* src,	unsigned int width,
        // DEBUG: 			unsigned int height, unsigned char alpha) const
        public void ClearAlpha(byte* src, uint width, uint height, byte alpha)
        {
            __Internal.ClearAlpha(__Instance, src, width, height, alpha);
        }

        // DEBUG: void memcpy_sse2(void* dst, const void* src, size_t size) const
        public void MemcpySse2(__IntPtr dst, __IntPtr src, ulong size)
        {
            __Internal.MemcpySse2(__Instance, dst, src, size);
        }

        // DEBUG: void rgba2rgba(const void* source, void* dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const
        public void Rgba2rgba(__IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, bool bInvert)
        {
            __Internal.Rgba2rgba(__Instance, source, dest, width, height, sourcePitch, bInvert);
        }

        // DEBUG: void rgba2rgba(const void* source, void* dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, unsigned int destPitch, bool bInvert) const
        public void Rgba2rgba(__IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert)
        {
            __Internal.Rgba2rgba(__Instance, source, dest, width, height, sourcePitch, destPitch, bInvert);
        }

        // DEBUG: void rgba2rgbaResample(const void* source, void* dest,
        // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
        // DEBUG: 			unsigned int destWidth, unsigned int destHeight, bool bInvert = false) const
        public void Rgba2rgbaResample(__IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert)
        {
            __Internal.Rgba2rgbaResample(__Instance, source, dest, sourceWidth, sourceHeight, sourcePitch, destWidth, destHeight, bInvert);
        }

        // DEBUG: void rgba2bgra(const void* rgba_source, void* bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Rgba2bgra(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgba2bgra(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgba2bgra(const void* rgba_source, void* bgra_dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const
        public void Rgba2bgra(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, uint sourcePitch, bool bInvert)
        {
            __Internal.Rgba2bgra(__Instance, rgba_source, bgra_dest, width, height, sourcePitch, bInvert);
        }

        // DEBUG: void rgba2bgra(const void* source, void* dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, unsigned int destPitch, bool bInvert) const
        public void Rgba2bgra(__IntPtr source, __IntPtr dest, uint width, uint height, uint sourcePitch, uint destPitch, bool bInvert)
        {
            __Internal.Rgba2bgra(__Instance, source, dest, width, height, sourcePitch, destPitch, bInvert);
        }

        // DEBUG: void bgra2rgba(const void* bgra_source, void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgra2rgba(__IntPtr bgra_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgra2rgba(__Instance, bgra_source, rgba_dest, width, height, bInvert);
        }

        // DEBUG: void rgba2rgb (const void* rgba_source, void* rgb_dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch,    // byte line pitch
        // DEBUG: 			bool bInvert = false,        // Flip vertically
        // DEBUG: 			bool bMirror = false,        // Mirror horizontally
        // DEBUG: 			bool bSwapRB = false) const
        public void Rgba2rgb(__IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert, bool bMirror, bool bSwapRB)
        {
            __Internal.Rgba2rgb(__Instance, rgba_source, rgb_dest, width, height, sourcePitch, bInvert, bMirror, bSwapRB);
        }

        // DEBUG: void rgba2bgr(const void* rgba_source, void* rgb_dest, unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int sourcePitch, bool bInvert = false) const
        public void Rgba2bgr(__IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint sourcePitch, bool bInvert)
        {
            __Internal.Rgba2bgr(__Instance, rgba_source, rgb_dest, width, height, sourcePitch, bInvert);
        }

        // DEBUG: void rgba2rgbResample(const void* source, void* dest,
        // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
        // DEBUG: 			unsigned int destWidth, unsigned int destHeight,
        // DEBUG: 			bool bInvert = false, bool bMirror = false, bool bSwapRB = false) const
        public void Rgba2rgbResample(__IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert, bool bMirror, bool bSwapRB)
        {
            __Internal.Rgba2rgbResample(__Instance, source, dest, sourceWidth, sourceHeight, sourcePitch, destWidth, destHeight, bInvert, bMirror, bSwapRB);
        }

        // DEBUG: void rgba2bgrResample(const void* source, void* dest,
        // DEBUG: 			unsigned int sourceWidth, unsigned int sourceHeight, unsigned int sourcePitch,
        // DEBUG: 			unsigned int destWidth, unsigned int destHeight, bool bInvert = false) const
        public void Rgba2bgrResample(__IntPtr source, __IntPtr dest, uint sourceWidth, uint sourceHeight, uint sourcePitch, uint destWidth, uint destHeight, bool bInvert)
        {
            __Internal.Rgba2bgrResample(__Instance, source, dest, sourceWidth, sourceHeight, sourcePitch, destWidth, destHeight, bInvert);
        }

        // DEBUG: void rgba_to_rgb_sse3(const void* rgba_source, void* rgb_dest,
        // DEBUG: 			unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int rgba_pitch, // line byte pitch
        // DEBUG: 			bool bInvert = false, // Flip image
        // DEBUG: 			bool bSwapRB = false) const
        public void RgbaToRgbSse3(__IntPtr rgba_source, __IntPtr rgb_dest, uint width, uint height, uint rgba_pitch, bool bInvert, bool bSwapRB)
        {
            __Internal.RgbaToRgbSse3(__Instance, rgba_source, rgb_dest, width, height, rgba_pitch, bInvert, bSwapRB);
        }

        // DEBUG: void rgb2rgba (const void* rgb_source,  void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Rgb2rgba(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgb2rgba(__Instance, rgb_source, rgba_dest, width, height, bInvert);
        }

        // DEBUG: void rgb2rgba(const void *rgb_source, void *rgba_dest,
        // DEBUG: 			unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int dest_pitch, bool bInvert) const
        public void Rgb2rgba(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert)
        {
            __Internal.Rgb2rgba(__Instance, rgb_source, rgba_dest, width, height, dest_pitch, bInvert);
        }

        // DEBUG: void bgr2rgba (const void* bgr_source,  void *rgba_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgr2rgba(__IntPtr bgr_source, __IntPtr rgba_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgr2rgba(__Instance, bgr_source, rgba_dest, width, height, bInvert);
        }

        // DEBUG: void bgr2rgba(const void *rgb_source, void *rgba_dest,
        // DEBUG: 			unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int dest_pitch, bool bInvert) const
        public void Bgr2rgba(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height, uint dest_pitch, bool bInvert)
        {
            __Internal.Bgr2rgba(__Instance, rgb_source, rgba_dest, width, height, dest_pitch, bInvert);
        }

        // DEBUG: void rgb2bgra (const void* rgb_source,  void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Rgb2bgra(__IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgb2bgra(__Instance, rgb_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgb2bgra(const void *rgb_source, void *bgra_dest,
        // DEBUG: 			unsigned int width, unsigned int height,
        // DEBUG: 			unsigned int dest_pitch, bool bInvert) const
        public void Rgb2bgra(__IntPtr rgb_source, __IntPtr bgra_dest, uint width, uint height, uint dest_pitch, bool bInvert)
        {
            __Internal.Rgb2bgra(__Instance, rgb_source, bgra_dest, width, height, dest_pitch, bInvert);
        }

        // DEBUG: void rgb_to_bgrx_sse(unsigned int npixels, const void* rgb_source, void* bgrx_out) const
        public void RgbToBgrxSse(uint npixels, __IntPtr rgb_source, __IntPtr bgrx_out)
        {
            __Internal.RgbToBgrxSse(__Instance, npixels, rgb_source, bgrx_out);
        }

        // DEBUG: void rgb_to_bgra_sse3(void* rgb_source, void* rgba_dest, unsigned int width, unsigned int height) const
        public void RgbToBgraSse3(__IntPtr rgb_source, __IntPtr rgba_dest, uint width, uint height)
        {
            __Internal.RgbToBgraSse3(__Instance, rgb_source, rgba_dest, width, height);
        }

        // DEBUG: void bgr2bgra (const void* bgr_source,  void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgr2bgra(__IntPtr bgr_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgr2bgra(__Instance, bgr_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgba2bgr (const void* rgba_source, void *bgr_dest,  unsigned int width, unsigned int height, bool bInvert = false) const
        public void Rgba2bgr(__IntPtr rgba_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Rgba2bgr(__Instance, rgba_source, bgr_dest, width, height, bInvert);
        }

        // DEBUG: void bgra2rgb (const void* bgra_source, void *rgb_dest,  unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgra2rgb(__IntPtr bgra_source, __IntPtr rgb_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgra2rgb(__Instance, bgra_source, rgb_dest, width, height, bInvert);
        }

        // DEBUG: void bgra2bgr (const void* bgra_source, void *bgr_dest,  unsigned int width, unsigned int height, bool bInvert = false) const
        public void Bgra2bgr(__IntPtr bgra_source, __IntPtr bgr_dest, uint width, uint height, bool bInvert)
        {
            __Internal.Bgra2bgr(__Instance, bgra_source, bgr_dest, width, height, bInvert);
        }

        // DEBUG: void GetSSE(bool &bSSE2, bool &bSSE3, bool &bSSSE3)
        public void GetSSE(ref bool bSSE2, ref bool bSSE3, ref bool bSSSE3)
        {
            fixed (bool* __bSSE20 = &bSSE2)
            {
                var __arg0 = __bSSE20;
                fixed (bool* __bSSE31 = &bSSE3)
                {
                    var __arg1 = __bSSE31;
                    fixed (bool* __bSSSE32 = &bSSSE3)
                    {
                        var __arg2 = __bSSSE32;
                        __Internal.GetSSE(__Instance, __arg0, __arg1, __arg2);
                    }
                }
            }
        }

        // DEBUG: void CheckSSE()
        protected void CheckSSE()
        {
            __Internal.CheckSSE(__Instance);
        }

        // DEBUG: void rgba_bgra(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        protected void RgbaBgra(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.RgbaBgra(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgba_bgra_sse2(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        protected void RgbaBgraSse2(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.RgbaBgraSse2(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        // DEBUG: void rgba_bgra_sse3(const void *rgba_source, void *bgra_dest, unsigned int width, unsigned int height, bool bInvert = false) const
        protected void RgbaBgraSse3(__IntPtr rgba_source, __IntPtr bgra_dest, uint width, uint height, bool bInvert)
        {
            __Internal.RgbaBgraSse3(__Instance, rgba_source, bgra_dest, width, height, bInvert);
        }

        protected bool MBSSE2
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSSE2 != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSSE2 = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSSE3
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSSE3 != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSSE3 = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSSSE3
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSSSE3 != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSSSE3 = (byte) (value ? 1 : 0);
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP Spout : public spoutGL {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	Spout();
    // DEBUG: 	~Spout();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// ===================== SENDER =========================
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Set name for sender creation
    // DEBUG: 	//   If no name is specified, the executable name is used  
    // DEBUG: 	void SetSenderName(const char* sendername = nullptr);
    // DEBUG: 	// Set sender DX11 shared texture format
    // DEBUG: 	void SetSenderFormat(DWORD dwFormat);
    // DEBUG: 	// Release sender and resources
    // DEBUG: 	void ReleaseSender();
    // DEBUG: 	// Send OpenGL framebuffer
    // DEBUG: 	//   The fbo must be bound for read.
    // DEBUG: 	//   The sending texture can be larger than the size that the sender is set up for
    // DEBUG: 	//   For example, if the application is using only a portion of the allocated texture space,  
    // DEBUG: 	//   such as for Freeframe plugins. (The 2.006 equivalent is DrawToSharedTexture)
    // DEBUG: 	//   To send the default OpenGL framebuffer, specify FboID = 0.
    // DEBUG: 	//   If width and height are also 0, the function determines the viewport size.
    // DEBUG: 	bool SendFbo(GLuint FboID, unsigned int width, unsigned int height, bool bInvert = true);
    // DEBUG: 	// Send OpenGL texture
    // DEBUG: 	bool SendTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: 	// Send image pixels
    // DEBUG: 	bool SendImage(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Sender status
    // DEBUG: 	bool IsInitialized();
    // DEBUG: 	// Sender name
    // DEBUG: 	const char * GetName();
    // DEBUG: 	// Sender width
    // DEBUG: 	unsigned int GetWidth();
    // DEBUG: 	// Sender height
    // DEBUG: 	unsigned int GetHeight();
    // DEBUG: 	// Sender frame rate
    // DEBUG: 	double GetFps();
    // DEBUG: 	// Sender frame number
    // DEBUG: 	long GetFrame();
    // DEBUG: 	// Sender share handle
    // DEBUG: 	HANDLE GetHandle();
    // DEBUG: 	// Sender sharing method
    // DEBUG: 	bool GetCPU();
    // DEBUG: 	// Sender GL/DX hardware compatibility
    // DEBUG: 	bool GetGLDX();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// ====================== RECEIVER ===========================
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Specify sender for connection
    // DEBUG: 	//   If a name is specified, the receiver will not connect to any other unless the user selects one
    // DEBUG: 	//   If that sender closes, the receiver will wait for the nominated sender to open 
    // DEBUG: 	//   If no name is specified, the receiver will connect to the active sender
    // DEBUG: 	void SetReceiverName(const char * sendername = nullptr);
    // DEBUG: 	// Get sender for connection
    // DEBUG: 	bool GetReceiverName(char* sendername, int maxchars = 256);
    // DEBUG: 	// Close receiver and release resources ready to connect to another sender
    // DEBUG: 	void ReleaseReceiver();
    // DEBUG: 	// Receive shared texture
    // DEBUG: 	//   Connect to a sender and retrieve texture details ready for access
    // DEBUG: 	//	 (see BindSharedTexture and UnBindSharedTexture)
    // DEBUG: 	bool ReceiveTexture();
    // DEBUG: 	// Receive OpenGL texture
    // DEBUG: 	// 	 Connect to a sender and inform the application to update
    // DEBUG: 	//   the receiving texture if it has changed dimensions
    // DEBUG: 	//   For no change, copy the sender shared texture to the application texture
    // DEBUG: 	//   The texture must be RGBA of dimension (width * height) 
    // DEBUG: 	bool ReceiveTexture(GLuint TextureID, GLuint TextureTarget, bool bInvert = false, GLuint HostFbo = 0);
    // DEBUG: 	// Receive image pixels
    // DEBUG: 	//   Connect to a sender and inform the application to update
    // DEBUG: 	//   the receiving buffer if it has changed dimensions
    // DEBUG: 	//   For no change, copy the sender shared texture to the pixel buffer
    // DEBUG: 	//   The receiving image can be RGBA, BGRA, RGB or BGR formats of dimension (width * height) 
    // DEBUG: 	bool ReceiveImage(unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFbo = 0);
    // DEBUG: 	// Query whether the sender has changed
    // DEBUG: 	//   Checked at every cycle before receiving data
    // DEBUG: 	bool IsUpdated();
    // DEBUG: 	// Query sender connection
    // DEBUG: 	//   If the sender closes, receiving functions return false  
    // DEBUG: 	bool IsConnected();
    // DEBUG: 	// Query received frame status
    // DEBUG: 	//   The receiving texture or pixel buffer is only refreshed if the sender has produced a new frame  
    // DEBUG: 	//   This can be queried to process texture data only for new frames
    // DEBUG: 	bool IsFrameNew();
    // DEBUG: 	// Received sender name
    // DEBUG: 	const char * GetSenderName();
    // DEBUG: 	// Received sender width
    // DEBUG: 	unsigned int GetSenderWidth();
    // DEBUG: 	// Received sender height
    // DEBUG: 	unsigned int GetSenderHeight();
    // DEBUG: 	// Received sender DX11 texture format
    // DEBUG: 	DWORD GetSenderFormat();
    // DEBUG: 	// Received sender frame rate
    // DEBUG: 	double GetSenderFps();
    // DEBUG: 	// Received sender frame number
    // DEBUG: 	long GetSenderFrame();
    // DEBUG: 	// Received sender share handle
    // DEBUG: 	HANDLE GetSenderHandle();
    // DEBUG: 	// Received sender texture
    // DEBUG: 	ID3D11Texture2D* GetSenderTexture();
    // DEBUG: 	// Received sender sharing method
    // DEBUG: 	bool GetSenderCPU();
    // DEBUG: 	// Received sender GL/DX hardware compatibility
    // DEBUG: 	bool GetSenderGLDX();
    // DEBUG: 	// Return a list of current senders
    // DEBUG: 	std::vector<std::string> GetSenderList();
    // DEBUG: 	// Sender index into the set of names
    // DEBUG: 	int GetSenderIndex(const char* sendername);
    // DEBUG: 	// Open sender selection dialog
    // DEBUG: 	bool SelectSender(HWND hwnd = NULL);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Frame count
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Enable or disable frame counting globally
    // DEBUG: 	void SetFrameCount(bool bEnable);
    // DEBUG: 	// Disable frame counting specifically for this application
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Return frame count status
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps);
    // DEBUG: 	// Signal sync event 
    // DEBUG: 	void SetFrameSync(const char* SenderName);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0);
    // DEBUG: 	// Enable / disable frame sync
    // DEBUG: 	void EnableFrameSync(bool bSync = true);
    // DEBUG: 	// Check for frame sync option
    // DEBUG: 	bool IsFrameSyncEnabled();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Sender names
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Number of senders
    // DEBUG: 	int GetSenderCount();
    // DEBUG: 	// Sender item name
    // DEBUG: 	bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 	// Sender information
    // DEBUG: 	bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 	// Current active sender
    // DEBUG: 	bool GetActiveSender(char* sendername);
    // DEBUG: 	// Set sender as active
    // DEBUG: 	bool SetActiveSender(const char* sendername);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Adapter functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The number of graphics adapters in the system
    // DEBUG: 	int GetNumAdapters();
    // DEBUG: 	// Get adapter item name
    // DEBUG: 	bool GetAdapterName(int index, char *adaptername, int maxchars = 256);
    // DEBUG: 	// Return current adapter name
    // DEBUG: 	char * AdapterName();
    // DEBUG: 	// Get current adapter index
    // DEBUG: 	int GetAdapter();
    // DEBUG: 	// Get sender adapter index and name for a given sender
    // DEBUG: 	int GetSenderAdapter(const char* sendername, char* adaptername = nullptr, int maxchars = 256);
    // DEBUG: 	// Get the description and output display name of the current adapter
    // DEBUG: 	bool GetAdapterInfo(char* description, char* output, int maxchars);
    // DEBUG: 	// Get the description and output display name for a given adapter
    // DEBUG: 	bool GetAdapterInfo(int index, char* description, char* output, int maxchars);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Graphics preference
    // DEBUG: 	// Windows 10 Vers 1803, build 17134 or later
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get the Windows graphics preference for an application
    // DEBUG: 	int GetPerformancePreference(const char* path = nullptr);
    // DEBUG: 	// Set the Windows graphics preference for an application
    // DEBUG: 	bool SetPerformancePreference(int preference, const char* path = nullptr);
    // DEBUG: 	// Get the graphics adapter name for a Windows preference
    // DEBUG: 	bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars);
    // DEBUG: 	// Set graphics adapter index for a Windows preference
    // DEBUG: 	bool SetPreferredAdapter(int preference);
    // DEBUG: 	// Availability of Windows graphics preference
    // DEBUG: 	bool IsPreferenceAvailable();
    // DEBUG: 	// Is the path a valid application
    // DEBUG: 	bool IsApplicationPath(const char* path);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Find the index of the NVIDIA adapter in a multi-adapter system
    // DEBUG: 	bool FindNVIDIA(int &nAdapter);
    // DEBUG: 	// Graphics adapter details
    // DEBUG: 	bool GetAdapterInfo(char* renderadapter,
    // DEBUG: 		char* renderdescription, char* renderversion,
    // DEBUG: 		char* displaydescription, char* displayversion,
    // DEBUG: 		int maxsize);
    // DEBUG: 
    // DEBUG: 	// Create a sender
    // DEBUG: 	bool CreateSender(const char *Sendername, unsigned int width = 0, unsigned int height = 0, DWORD dwFormat = 0);
    // DEBUG: 	// Update a sender
    // DEBUG: 	bool UpdateSender(const char* Sendername, unsigned int width, unsigned int height);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create receiver connection
    // DEBUG: 	bool CreateReceiver(char* Sendername, unsigned int &width, unsigned int &height);
    // DEBUG: 	// Check receiver connection
    // DEBUG: 	bool CheckReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool &bConnected);
    // DEBUG: 	// Receive OpenGL texture
    // DEBUG: 	bool ReceiveTexture(char* Sendername, unsigned int &width, unsigned int &height, GLuint TextureID = 0, GLuint TextureTarget = 0, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Receive image pixels
    // DEBUG: 	bool ReceiveImage(char* Sendername, unsigned int &width, unsigned int &height, unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Open dialog for the user to select a sender
    // DEBUG: 	//   Optional message argument
    // DEBUG: 	bool SelectSenderPanel(const char* message = nullptr);
    // DEBUG: 	// Receiver detect sender selection
    // DEBUG: 	bool CheckSpoutPanel(char *sendername, int maxchars = 256);
    // DEBUG: 
    // DEBUG: 	// Legacy OpenGL Draw functions
    // DEBUG: 	// See _SpoutCommon.h_ #define legacyOpenGL
    // DEBUG: #ifdef legacyOpenGL
    // DEBUG: 	// Render the shared texture
    // DEBUG: 	bool DrawSharedTexture(float max_x = 1.0, float max_y = 1.0, float aspect = 1.0, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: 	// Render a texture to the shared texture. 
    // DEBUG: 	bool DrawToSharedTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, float max_x = 1.0, float max_y = 1.0, float aspect = 1.0, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: #endif // #endif legacyOpenGL
    // DEBUG: 
    // DEBUG: 
    // DEBUG: protected:
    // DEBUG: 
    // DEBUG: 	// Sender creation and change
    // DEBUG: 	bool CheckSender(unsigned int width, unsigned int height);
    // DEBUG: 	// Create receiver connection
    // DEBUG: 	void InitReceiver(const char * sendername, unsigned int width, unsigned int height, DWORD dwFormat);
    // DEBUG: 	// Receiver find sender and retrieve information
    // DEBUG: 	bool ReceiveSenderData();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Class globals
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Graphics adapter name
    // DEBUG: 	char m_AdapterName[256];
    // DEBUG: 	bool m_bAdapt; // Receiver adapt to the sender adapter
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class Spout : global::SpoutDX.SpoutGL, IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 2000)]
        public new partial struct __Internal
        {
            internal __IntPtr vfptr_spoutGL;
            internal global::SpoutDX.SpoutDirectX.__Internal spoutdx;
            internal global::SpoutDX.SpoutCopy.__Internal spoutcopy;
            internal global::SpoutDX.SpoutSenderNames.__Internal sendernames;
            internal global::SpoutDX.SpoutFrameCount.__Internal frame;
            internal global::SpoutDX.SpoutSharedMemory.__Internal memoryshare;
            internal int m_nBuffers;
            internal fixed uint m_pbo[4];
            internal int PboIndex;
            internal int NextPboIndex;
            internal fixed uint m_loadpbo[4];
            internal int PboLoadIndex;
            internal int NextPboLoadIndex;
            internal fixed long m_pStaging[2];
            internal int m_Index;
            internal int m_NextIndex;
            internal fixed sbyte m_SenderName[256];
            internal fixed sbyte m_SenderNameSetup[256];
            internal uint m_Width;
            internal uint m_Height;
            internal uint m_fbo;
            internal uint m_TexID;
            internal uint m_TexWidth;
            internal uint m_TexHeight;
            internal uint m_TexFormat;
            internal uint m_glTexture;
            internal __IntPtr m_pSharedTexture;
            internal __IntPtr m_dxShareHandle;
            internal global::DXGI_FORMAT m_DX11format;
            internal uint m_dwFormat;
            internal __IntPtr m_hInteropDevice;
            internal __IntPtr m_hInteropObject;
            internal byte m_bInteropFailed;
            internal __IntPtr m_hWnd;
            internal int m_SpoutVersion;
            internal __IntPtr m_hdc;
            internal __IntPtr m_hwndButton;
            internal __IntPtr m_hRc;
            internal byte m_bConnected;
            internal byte m_bUpdated;
            internal byte m_bInitialized;
            internal byte m_bGLDXdone;
            internal byte m_bAuto;
            internal byte m_bCPU;
            internal byte m_bUseGLDX;
            internal byte m_bTextureShare;
            internal byte m_bCPUshare;
            internal byte m_bMemoryShare;
            internal byte m_bSenderCPU;
            internal byte m_bSenderGLDX;
            internal byte m_bSpoutPanelOpened;
            internal byte m_bSpoutPanelActive;
            internal global::SHELLEXECUTEINFOA.__Internal m_ShExecInfo;
            internal uint m_caps;
            internal byte m_bGLDXavailable;
            internal byte m_bFBOavailable;
            internal byte m_bBLITavailable;
            internal byte m_bPBOavailable;
            internal byte m_bSWAPavailable;
            internal byte m_bBGRAavailable;
            internal byte m_bCOPYavailable;
            internal byte m_bCONTEXTavailable;
            internal byte m_bExtensionsLoaded;
            internal fixed byte m_AdapterNamePadding[3];
            internal fixed sbyte m_AdapterName[256];
            internal byte m_bAdapt;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0Spout@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0Spout@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseSender@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendFbo@Spout@@QEAA_NIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendFbo(__IntPtr __instance, uint FboID, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendTexture@Spout@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendImage@Spout@@QEAA_NPEBEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendImage(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetReceiverName@Spout@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReceiverName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetReceiverName@Spout@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetReceiverName(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseReceiver@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseReceiver(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@Spout@@QEAA_NII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@Spout@@QEAA_NPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, byte* pixels, uint glFormat, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderIndex@Spout@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderIndex(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@Spout@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@Spout@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@Spout@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@Spout@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@Spout@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameSync@Spout@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@Spout@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@Spout@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@Spout@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@Spout@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@Spout@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderAdapter@Spout@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderAdapter(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@Spout@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@Spout@@QEAA_NHPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, int index, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPerformancePreference@Spout@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPerformancePreference(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPerformancePreference@Spout@@QEAA_NHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPerformancePreference(__IntPtr __instance, int preference, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPreferredAdapterName@Spout@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPreferredAdapterName(__IntPtr __instance, int preference, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPreferredAdapter@Spout@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPreferredAdapter(__IntPtr __instance, int preference);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsApplicationPath@Spout@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsApplicationPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?FindNVIDIA@Spout@@QEAA_NAEAH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FindNVIDIA(__IntPtr __instance, int* nAdapter);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@Spout@@QEAA_NPEAD0000H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* renderadapter, sbyte* renderdescription, sbyte* renderversion, sbyte* displaydescription, sbyte* displayversion, int maxsize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSender@Spout@@QEAA_NPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSender@Spout@@QEAA_NPEBDII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateReceiver@Spout@@QEAA_NPEADAEAI1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckReceiver@Spout@@QEAA_NPEADAEAI1AEA_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, bool* bConnected);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@Spout@@QEAA_NPEADAEAI1II_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@Spout@@QEAA_NPEADAEAI1PEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SelectSenderPanel@Spout@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SelectSenderPanel(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSpoutPanel@Spout@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSpoutPanel(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSender@Spout@@IEAA_NII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSender(__IntPtr __instance, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?InitReceiver@Spout@@IEAAXPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitReceiver(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveSenderData@Spout@@IEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveSenderData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderName@Spout@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderName@Spout@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFormat@Spout@@QEAAKXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderFormat(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderFormat@Spout@@QEAAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderFormat(__IntPtr __instance, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsInitialized@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetName@Spout@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetWidth@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHeight@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFps@Spout@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFrame@Spout@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHandle@Spout@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPU@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetGLDX@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsUpdated@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUpdated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsConnected@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameNew@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderWidth@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHeight@Spout@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFps@Spout@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFrame@Spout@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHandle@Spout@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderTexture@Spout@@QEAAPEAUID3D11Texture2D@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCPU@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderGLDX@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameSyncEnabled@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameSyncEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@Spout@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@Spout@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AdapterName@Spout@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* AdapterName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@Spout@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPreferenceAvailable@Spout@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreferenceAvailable(__IntPtr __instance);
        }

        internal static new Spout __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Spout(native.ToPointer(), skipVTables);
        }

        internal static new Spout __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Spout)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static new Spout __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (Spout)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static Spout __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Spout(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::SpoutDX.Spout.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private Spout(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Spout(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        // DEBUG: Spout()
        public Spout()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.Spout.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.Spout");
        }

        // DEBUG: Spout
        public Spout(global::SpoutDX.Spout _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.Spout.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "SpoutDX.Spout");
        }

        ~Spout()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected override void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (callNativeDtor)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_int>(0, 0);
                ___dtorDelegate(__Instance, 0);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void ReleaseSender()
        public void ReleaseSender()
        {
            __Internal.ReleaseSender(__Instance);
        }

        // DEBUG: bool SendFbo(GLuint FboID, unsigned int width, unsigned int height, bool bInvert = true)
        public bool SendFbo(uint FboID, uint width, uint height, bool bInvert)
        {
            var ___ret = __Internal.SendFbo(__Instance, FboID, width, height, bInvert);
            return ___ret;
        }

        // DEBUG: bool SendTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0)
        public bool SendTexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SendTexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool SendImage(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        public bool SendImage(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SendImage(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: void SetReceiverName(const char * sendername = nullptr)
        public void SetReceiverName(string sendername)
        {
            __Internal.SetReceiverName(__Instance, sendername);
        }

        // DEBUG: bool GetReceiverName(char* sendername, int maxchars = 256)
        public bool GetReceiverName(sbyte* sendername, int maxchars)
        {
            var ___ret = __Internal.GetReceiverName(__Instance, sendername, maxchars);
            return ___ret;
        }

        // DEBUG: void ReleaseReceiver()
        public void ReleaseReceiver()
        {
            __Internal.ReleaseReceiver(__Instance);
        }

        // DEBUG: bool ReceiveTexture()
        public bool ReceiveTexture()
        {
            var ___ret = __Internal.ReceiveTexture(__Instance);
            return ___ret;
        }

        // DEBUG: bool ReceiveTexture(GLuint TextureID, GLuint TextureTarget, bool bInvert = false, GLuint HostFbo = 0)
        public bool ReceiveTexture(uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo)
        {
            var ___ret = __Internal.ReceiveTexture(__Instance, TextureID, TextureTarget, bInvert, HostFbo);
            return ___ret;
        }

        // DEBUG: bool ReceiveImage(unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFbo = 0)
        public bool ReceiveImage(byte* pixels, uint glFormat, bool bInvert, uint HostFbo)
        {
            var ___ret = __Internal.ReceiveImage(__Instance, pixels, glFormat, bInvert, HostFbo);
            return ___ret;
        }

        // DEBUG: int GetSenderIndex(const char* sendername)
        public int GetSenderIndex(string sendername)
        {
            var ___ret = __Internal.GetSenderIndex(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: void SetFrameCount(bool bEnable)
        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void HoldFps(int fps)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void SetFrameSync(const char* SenderName)
        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        // DEBUG: bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var ___ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return ___ret;
        }

        // DEBUG: void EnableFrameSync(bool bSync = true)
        public void EnableFrameSync(bool bSync)
        {
            __Internal.EnableFrameSync(__Instance, bSync);
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var ___ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return ___ret;
        }

        // DEBUG: bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool GetActiveSender(char* sendername)
        public bool GetActiveSender(sbyte* sendername)
        {
            var ___ret = __Internal.GetActiveSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool SetActiveSender(const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var ___ret = __Internal.SetActiveSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars = 256)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: int GetSenderAdapter(const char* sendername, char* adaptername = nullptr, int maxchars = 256)
        public int GetSenderAdapter(string sendername, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetSenderAdapter(__Instance, sendername, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: bool GetAdapterInfo(char* description, char* output, int maxchars)
        public bool GetAdapterInfo(sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, description, output, maxchars);
            return ___ret;
        }

        // DEBUG: bool GetAdapterInfo(int index, char* description, char* output, int maxchars)
        public bool GetAdapterInfo(int index, sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, index, description, output, maxchars);
            return ___ret;
        }

        // DEBUG: int GetPerformancePreference(const char* path = nullptr)
        public int GetPerformancePreference(string path)
        {
            var ___ret = __Internal.GetPerformancePreference(__Instance, path);
            return ___ret;
        }

        // DEBUG: bool SetPerformancePreference(int preference, const char* path = nullptr)
        public bool SetPerformancePreference(int preference, string path)
        {
            var ___ret = __Internal.SetPerformancePreference(__Instance, preference, path);
            return ___ret;
        }

        // DEBUG: bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars)
        public bool GetPreferredAdapterName(int preference, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetPreferredAdapterName(__Instance, preference, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: bool SetPreferredAdapter(int preference)
        public bool SetPreferredAdapter(int preference)
        {
            var ___ret = __Internal.SetPreferredAdapter(__Instance, preference);
            return ___ret;
        }

        // DEBUG: bool IsApplicationPath(const char* path)
        public bool IsApplicationPath(string path)
        {
            var ___ret = __Internal.IsApplicationPath(__Instance, path);
            return ___ret;
        }

        // DEBUG: bool FindNVIDIA(int &nAdapter)
        public bool FindNVIDIA(ref int nAdapter)
        {
            fixed (int* __nAdapter0 = &nAdapter)
            {
                var __arg0 = __nAdapter0;
                var ___ret = __Internal.FindNVIDIA(__Instance, __arg0);
                return ___ret;
            }
        }

        // DEBUG: bool GetAdapterInfo(char* renderadapter,
        // DEBUG: 		char* renderdescription, char* renderversion,
        // DEBUG: 		char* displaydescription, char* displayversion,
        // DEBUG: 		int maxsize)
        public bool GetAdapterInfo(sbyte* renderadapter, sbyte* renderdescription, sbyte* renderversion, sbyte* displaydescription, sbyte* displayversion, int maxsize)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, renderadapter, renderdescription, renderversion, displaydescription, displayversion, maxsize);
            return ___ret;
        }

        // DEBUG: bool CreateSender(const char *Sendername, unsigned int width = 0, unsigned int height = 0, DWORD dwFormat = 0)
        public bool CreateSender(string Sendername, uint width, uint height, uint dwFormat)
        {
            var ___ret = __Internal.CreateSender(__Instance, Sendername, width, height, dwFormat);
            return ___ret;
        }

        // DEBUG: bool UpdateSender(const char* Sendername, unsigned int width, unsigned int height)
        public bool UpdateSender(string Sendername, uint width, uint height)
        {
            var ___ret = __Internal.UpdateSender(__Instance, Sendername, width, height);
            return ___ret;
        }

        // DEBUG: bool CreateReceiver(char* Sendername, unsigned int &width, unsigned int &height)
        public bool CreateReceiver(sbyte* Sendername, ref uint width, ref uint height)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.CreateReceiver(__Instance, Sendername, __arg1, __arg2);
                    return ___ret;
                }
            }
        }

        // DEBUG: bool CheckReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool &bConnected)
        public bool CheckReceiver(sbyte* Sendername, ref uint width, ref uint height, ref bool bConnected)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (bool* __bConnected3 = &bConnected)
                    {
                        var __arg3 = __bConnected3;
                        var ___ret = __Internal.CheckReceiver(__Instance, Sendername, __arg1, __arg2, __arg3);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool ReceiveTexture(char* Sendername, unsigned int &width, unsigned int &height, GLuint TextureID = 0, GLuint TextureTarget = 0, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReceiveTexture(sbyte* Sendername, ref uint width, ref uint height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.ReceiveTexture(__Instance, Sendername, __arg1, __arg2, TextureID, TextureTarget, bInvert, HostFBO);
                    return ___ret;
                }
            }
        }

        // DEBUG: bool ReceiveImage(char* Sendername, unsigned int &width, unsigned int &height, unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReceiveImage(sbyte* Sendername, ref uint width, ref uint height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.ReceiveImage(__Instance, Sendername, __arg1, __arg2, pixels, glFormat, bInvert, HostFBO);
                    return ___ret;
                }
            }
        }

        // DEBUG: bool SelectSenderPanel(const char* message = nullptr)
        public bool SelectSenderPanel(string message)
        {
            var ___ret = __Internal.SelectSenderPanel(__Instance, message);
            return ___ret;
        }

        // DEBUG: bool CheckSpoutPanel(char *sendername, int maxchars = 256)
        public bool CheckSpoutPanel(sbyte* sendername, int maxchars)
        {
            var ___ret = __Internal.CheckSpoutPanel(__Instance, sendername, maxchars);
            return ___ret;
        }

        // DEBUG: bool CheckSender(unsigned int width, unsigned int height)
        protected bool CheckSender(uint width, uint height)
        {
            var ___ret = __Internal.CheckSender(__Instance, width, height);
            return ___ret;
        }

        // DEBUG: void InitReceiver(const char * sendername, unsigned int width, unsigned int height, DWORD dwFormat)
        protected void InitReceiver(string sendername, uint width, uint height, uint dwFormat)
        {
            __Internal.InitReceiver(__Instance, sendername, width, height, dwFormat);
        }

        // DEBUG: bool ReceiveSenderData()
        protected bool ReceiveSenderData()
        {
            var ___ret = __Internal.ReceiveSenderData(__Instance);
            return ___ret;
        }

        protected sbyte[] MAdapterName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_AdapterName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_AdapterName[i] = value[i];
                }
            }
        }

        protected bool MBAdapt
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAdapt != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAdapt = (byte) (value ? 1 : 0);
            }
        }

        public string SenderName
        {
            get
            {
                var ___ret = __Internal.GetSenderName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }

            set
            {
                __Internal.SetSenderName(__Instance, value);
            }
        }

        public uint SenderFormat
        {
            get
            {
                var ___ret = __Internal.GetSenderFormat(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetSenderFormat(__Instance, value);
            }
        }

        public bool IsInitialized
        {
            get
            {
                var ___ret = __Internal.IsInitialized(__Instance);
                return ___ret;
            }
        }

        public string Name
        {
            get
            {
                var ___ret = __Internal.GetName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public uint Width
        {
            get
            {
                var ___ret = __Internal.GetWidth(__Instance);
                return ___ret;
            }
        }

        public uint Height
        {
            get
            {
                var ___ret = __Internal.GetHeight(__Instance);
                return ___ret;
            }
        }

        public double Fps
        {
            get
            {
                var ___ret = __Internal.GetFps(__Instance);
                return ___ret;
            }
        }

        public int Frame
        {
            get
            {
                var ___ret = __Internal.GetFrame(__Instance);
                return ___ret;
            }
        }

        public __IntPtr Handle
        {
            get
            {
                var ___ret = __Internal.GetHandle(__Instance);
                return ___ret;
            }
        }

        public bool CPU
        {
            get
            {
                var ___ret = __Internal.GetCPU(__Instance);
                return ___ret;
            }
        }

        public bool GLDX
        {
            get
            {
                var ___ret = __Internal.GetGLDX(__Instance);
                return ___ret;
            }
        }

        public bool IsUpdated
        {
            get
            {
                var ___ret = __Internal.IsUpdated(__Instance);
                return ___ret;
            }
        }

        public bool IsConnected
        {
            get
            {
                var ___ret = __Internal.IsConnected(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var ___ret = __Internal.IsFrameNew(__Instance);
                return ___ret;
            }
        }

        public uint SenderWidth
        {
            get
            {
                var ___ret = __Internal.GetSenderWidth(__Instance);
                return ___ret;
            }
        }

        public uint SenderHeight
        {
            get
            {
                var ___ret = __Internal.GetSenderHeight(__Instance);
                return ___ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var ___ret = __Internal.GetSenderFps(__Instance);
                return ___ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var ___ret = __Internal.GetSenderFrame(__Instance);
                return ___ret;
            }
        }

        public __IntPtr SenderHandle
        {
            get
            {
                var ___ret = __Internal.GetSenderHandle(__Instance);
                return ___ret;
            }
        }

        public global::SpoutDX.ID3D11Texture2D SenderTexture
        {
            get
            {
                var ___ret = __Internal.GetSenderTexture(__Instance);
                var __result0 = global::SpoutDX.ID3D11Texture2D.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        public bool SenderCPU
        {
            get
            {
                var ___ret = __Internal.GetSenderCPU(__Instance);
                return ___ret;
            }
        }

        public bool SenderGLDX
        {
            get
            {
                var ___ret = __Internal.GetSenderGLDX(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameCountEnabled(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameSyncEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameSyncEnabled(__Instance);
                return ___ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var ___ret = __Internal.GetSenderCount(__Instance);
                return ___ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var ___ret = __Internal.GetNumAdapters(__Instance);
                return ___ret;
            }
        }

        public sbyte* AdapterName
        {
            get
            {
                var ___ret = __Internal.AdapterName(__Instance);
                return ___ret;
            }
        }

        public int Adapter
        {
            get
            {
                var ___ret = __Internal.GetAdapter(__Instance);
                return ___ret;
            }
        }

        public bool IsPreferenceAvailable
        {
            get
            {
                var ___ret = __Internal.IsPreferenceAvailable(__Instance);
                return ___ret;
            }
        }

        #region Virtual table interop

        // ~Spout()
        private static global::SpoutDX.Delegates.Action___IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance, int delete)
        {
            var __target = global::SpoutDX.Spout.__GetInstance(__instance);
            __target.Dispose(disposing: true, callNativeDtor: true);
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTablesDtorOnly[0][0] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTables[0][0] = Thunks[0];
                            VTables.Methods[0] = new Delegate[1];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: enum ExtLogLevel {
    // DEBUG: 	SPOUT_EXT_LOG_SILENT,
    // DEBUG: 	SPOUT_EXT_LOG_VERBOSE,
    // DEBUG: 	SPOUT_EXT_LOG_NOTICE,
    // DEBUG: 	SPOUT_EXT_LOG_WARNING,
    // DEBUG: 	SPOUT_EXT_LOG_ERROR,
    // DEBUG: 	SPOUT_EXT_LOG_FATAL,
    // DEBUG: 	SPOUT_EXT_LOG_NONE
    // DEBUG: }
    public enum ExtLogLevel
    {
        SPOUT_EXT_LOG_SILENT = 0,
        SPOUT_EXT_LOG_VERBOSE = 1,
        SPOUT_EXT_LOG_NOTICE = 2,
        SPOUT_EXT_LOG_WARNING = 3,
        SPOUT_EXT_LOG_ERROR = 4,
        SPOUT_EXT_LOG_FATAL = 5,
        SPOUT_EXT_LOG_NONE = 6
    }

    // DEBUG: typedef HANDLE	(WINAPI * PFNWGLDXOPENDEVICENVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr PFNWGLDXOPENDEVICENVPROC(__IntPtr dxDevice);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXCLOSEDEVICENVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXCLOSEDEVICENVPROC(__IntPtr hDevice);

    // DEBUG: typedef HANDLE	(WINAPI * PFNWGLDXREGISTEROBJECTNVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr PFNWGLDXREGISTEROBJECTNVPROC(__IntPtr hDevice, __IntPtr dxObject, uint name, uint type, uint access);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXUNREGISTEROBJECTNVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXUNREGISTEROBJECTNVPROC(__IntPtr hDevice, __IntPtr hObject);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXSETRESOURCESHAREHANDLENVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXSETRESOURCESHAREHANDLENVPROC(__IntPtr dxResource, __IntPtr shareHandle);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXLOCKOBJECTSNVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXLOCKOBJECTSNVPROC(__IntPtr hDevice, int count, __IntPtr* hObjects);

    // DEBUG: typedef BOOL	(WINAPI * PFNWGLDXUNLOCKOBJECTSNVPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLDXUNLOCKOBJECTSNVPROC(__IntPtr hDevice, int count, __IntPtr* hObjects);

    // DEBUG: typedef void   (APIENTRY *glBindFramebufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindFramebufferEXTPROC(uint target, uint framebuffer);

    // DEBUG: typedef void   (APIENTRY *glBindRenderbufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindRenderbufferEXTPROC(uint target, uint renderbuffer);

    // DEBUG: typedef GLenum (APIENTRY *glCheckFramebufferStatusEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlCheckFramebufferStatusEXTPROC(uint target);

    // DEBUG: typedef GLenum (APIENTRY* glCheckNamedFramebufferStatusEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlCheckNamedFramebufferStatusEXTPROC(uint framebuffer, uint target);

    // DEBUG: typedef void   (APIENTRY *glDeleteFramebuffersEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteFramebuffersEXTPROC(int n, uint* framebuffers);

    // DEBUG: typedef void   (APIENTRY *glDeleteRenderBuffersEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteRenderBuffersEXTPROC(int n, uint* renderbuffers);

    // DEBUG: typedef void   (APIENTRY *glFramebufferRenderbufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferRenderbufferEXTPROC(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);

    // DEBUG: typedef void   (APIENTRY *glFramebufferTexture1DEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferTexture1DEXTPROC(uint target, uint attachment, uint textarget, uint texture, int level);

    // DEBUG: typedef void   (APIENTRY *glFramebufferTexture2DEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferTexture2DEXTPROC(uint target, uint attachment, uint textarget, uint texture, int level);

    // DEBUG: typedef void   (APIENTRY *glFramebufferTexture3DEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlFramebufferTexture3DEXTPROC(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);

    // DEBUG: typedef void   (APIENTRY *glGenFramebuffersEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenFramebuffersEXTPROC(int n, uint* framebuffers);

    // DEBUG: typedef void   (APIENTRY *glGenRenderbuffersEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenRenderbuffersEXTPROC(int n, uint* renderbuffers);

    // DEBUG: typedef void   (APIENTRY *glGenerateMipmapEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenerateMipmapEXTPROC(uint target);

    // DEBUG: typedef void   (APIENTRY *glGetFramebufferAttachmentParameterivEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetFramebufferAttachmentParameterivEXTPROC(uint target, uint attachment, uint pname, int* _params);

    // DEBUG: typedef void   (APIENTRY *glGetRenderbufferParameterivEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetRenderbufferParameterivEXTPROC(uint target, uint pname, int* _params);

    // DEBUG: typedef GLboolean (APIENTRY *glIsFramebufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlIsFramebufferEXTPROC(uint framebuffer);

    // DEBUG: typedef GLboolean (APIENTRY *glIsRenderbufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlIsRenderbufferEXTPROC(uint renderbuffer);

    // DEBUG: typedef void (APIENTRY *glRenderbufferStorageEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlRenderbufferStorageEXTPROC(uint target, uint internalformat, int width, int height);

    // DEBUG: typedef void   (APIENTRY *glBlitFramebufferEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBlitFramebufferEXTPROC(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);

    // DEBUG: typedef BOOL (WINAPI * PFNWGLSWAPINTERVALEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLSWAPINTERVALEXTPROC(int interval);

    // DEBUG: typedef int (WINAPI * PFNWGLGETSWAPINTERVALEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int PFNWGLGETSWAPINTERVALEXTPROC();

    // DEBUG: typedef ptrdiff_t GLsizeiptr
    // DEBUG: typedef ptrdiff_t GLintptr
    // DEBUG: typedef void   (APIENTRY *glGenBuffersPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGenBuffersPROC(int n, uint* buffers);

    // DEBUG: typedef void   (APIENTRY *glDeleteBuffersPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteBuffersPROC(int n, uint* buffers);

    // DEBUG: typedef void   (APIENTRY *glBindBufferPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindBufferPROC(uint target, uint buffer);

    // DEBUG: typedef void   (APIENTRY *glBufferDataPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBufferDataPROC(uint target, long size, __IntPtr data, uint usage);

    // DEBUG: typedef void   (APIENTRY *glBufferStoragePROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBufferStoragePROC(uint target, long size, __IntPtr data, uint flags);

    // DEBUG: typedef void * (APIENTRY *glMapBufferPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr GlMapBufferPROC(uint target, uint access);

    // DEBUG: typedef void * (APIENTRY *glMapBufferRangePROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr GlMapBufferRangePROC(uint target, long offset, long length, uint access);

    // DEBUG: typedef GLboolean (APIENTRY *glUnmapBufferPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlUnmapBufferPROC(uint target);

    // DEBUG: typedef void   (APIENTRY *glGetBufferParameterivPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetBufferParameterivPROC(uint target, uint value, int* data);

    // DEBUG: typedef void   (APIENTRY* glGetTextureParameterivPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetTextureParameterivPROC(uint texture, uint value, int* data);

    // DEBUG: typedef struct __GLsync *GLsync
    // DEBUG: typedef uint64_t GLuint64
    // DEBUG: typedef GLenum(APIENTRY *glClientWaitSyncPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlClientWaitSyncPROC(__IntPtr sync, uint flags, ulong timeout);

    // DEBUG: typedef void   (APIENTRY *glDeleteSyncPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteSyncPROC(__IntPtr sync);

    // DEBUG: typedef GLsync(APIENTRY *glFenceSyncPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr GlFenceSyncPROC(uint condition, uint flags);

    // DEBUG: typedef void (APIENTRY * PFNGLCOPYIMAGESUBDATAPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void PFNGLCOPYIMAGESUBDATAPROC(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);

    // DEBUG: typedef void(APIENTRY * glGetInternalFormativPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetInternalFormativPROC(uint target, uint internalfrmat, uint pname, int buffSize, int* _params);

    // DEBUG: typedef GLuint (APIENTRY* glCreateProgramPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlCreateProgramPROC();

    // DEBUG: typedef GLuint (APIENTRY* glCreateShaderPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint GlCreateShaderPROC(uint type);

    // DEBUG: typedef void   (APIENTRY* glShaderSourcePROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlShaderSourcePROC(uint shader, int count, sbyte** _string, int* length);

    // DEBUG: typedef void   (APIENTRY* glCompileShaderPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlCompileShaderPROC(uint shader);

    // DEBUG: typedef void   (APIENTRY* glAttachShaderPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlAttachShaderPROC(uint program, uint shader);

    // DEBUG: typedef void   (APIENTRY* glLinkProgramPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlLinkProgramPROC(uint program);

    // DEBUG: typedef void   (APIENTRY* glGetProgramivPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetProgramivPROC(uint program, uint pname, int* param);

    // DEBUG: typedef void   (APIENTRY* glGetProgramInfoLogPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetProgramInfoLogPROC(uint program, int maxLength, int* length, sbyte* infoLog);

    // DEBUG: typedef void   (APIENTRY* glGetShaderInfoLogPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetShaderInfoLogPROC(uint shader, int maxLength, int* length, sbyte* infoLog);

    // DEBUG: typedef void   (APIENTRY* glGetIntegeri_vPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetIntegeriVPROC(uint target, uint index, int* data);

    // DEBUG: typedef void   (APIENTRY* glDetachShaderPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDetachShaderPROC(uint program, uint shader);

    // DEBUG: typedef void   (APIENTRY* glUseProgramPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlUseProgramPROC(uint program);

    // DEBUG: typedef void   (APIENTRY* glBindImageTexturePROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindImageTexturePROC(uint unit, uint texture, int level, byte layered, int layer, uint access, uint format);

    // DEBUG: typedef void   (APIENTRY* glDispatchComputePROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDispatchComputePROC(uint num_groups_x, uint num_groups_y, uint num_groups_z);

    // DEBUG: typedef void   (APIENTRY* glDeleteProgramPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteProgramPROC(uint program);

    // DEBUG: typedef void   (APIENTRY* glDeleteShaderPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteShaderPROC(uint shader);

    // DEBUG: typedef void   (APIENTRY* glMemoryBarrierPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlMemoryBarrierPROC(uint barriers);

    // DEBUG: typedef void (APIENTRY* glActiveTexturePROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlActiveTexturePROC(uint texture);

    // DEBUG: typedef void (APIENTRY* glUniform1iPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlUniform1iPROC(int location, int v0);

    // DEBUG: typedef void (APIENTRY* glUniform1fPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlUniform1fPROC(int location, float v0);

    // DEBUG: typedef GLint (APIENTRY* glGetUniformLocationPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int GlGetUniformLocationPROC(uint program, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

    // DEBUG: typedef void (APIENTRY* glTextureStorage2DPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlTextureStorage2DPROC(uint texture, int levels, uint internalformat, int width, int height);

    // DEBUG: typedef void (APIENTRY * glCreateTexturesPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlCreateTexturesPROC(uint target, int n, uint* textures);

    // DEBUG: typedef void (APIENTRY* glCreateMemoryObjectsEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlCreateMemoryObjectsEXTPROC(int n, uint* memoryObjects);

    // DEBUG: typedef void (APIENTRY* glDeleteMemoryObjectsEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlDeleteMemoryObjectsEXTPROC(int n, uint* memoryObjects);

    // DEBUG: typedef void (APIENTRY* glTexStorageMem2DEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlTexStorageMem2DEXTPROC(uint target, int levels, uint internalFormat, int width, int height, uint memory, ulong offset);

    // DEBUG: typedef void (APIENTRY* glTextureStorageMem2DEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlTextureStorageMem2DEXTPROC(uint texture, int levels, uint internalFormat, int width, int height, uint memory, ulong offset);

    // DEBUG: typedef void (APIENTRY* glImportMemoryWin32HandleEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlImportMemoryWin32HandleEXTPROC(uint memory, ulong size, uint handleType, __IntPtr handle);

    // DEBUG: typedef void (APIENTRY* glBufferStorageMemEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBufferStorageMemEXTPROC(uint target, long size, uint memory, ulong offset);

    // DEBUG: typedef void (APIENTRY* glMemoryObjectParameterivEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlMemoryObjectParameterivEXTPROC(uint memoryObject, uint pname, int* _params);

    // DEBUG: typedef void (APIENTRY* glGetMemoryObjectParameterivEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlGetMemoryObjectParameterivEXTPROC(uint memoryObject, uint pname, int* _params);

    // DEBUG: typedef GLboolean(APIENTRY* glIsMemoryObjectEXTPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte GlIsMemoryObjectEXTPROC(uint memoryObject);

    // DEBUG: typedef void (APIENTRY* glCreateBuffersPROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlCreateBuffersPROC(int n, uint* buffers);

    // DEBUG: typedef void (APIENTRY* glBindBufferBasePROC
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void GlBindBufferBasePROC(uint target, uint index, uint buffer);

    // DEBUG: struct __GLsync
    public unsafe partial class GLsync
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.GLsync>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.GLsync>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.GLsync managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.GLsync>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.GLsync managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static GLsync __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new GLsync(native.ToPointer(), skipVTables);
        }

        internal static GLsync __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (GLsync)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static GLsync __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new GLsync(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GLsync(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected GLsync(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class SpoutGLextensions
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?InitializeGlew@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InitializeGlew();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?loadGLextensions@@YAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint LoadGLextensions();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?loadInteropExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadInteropExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?loadFBOextensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadFBOextensions();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?loadBLITextension@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadBLITextension();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?loadSwapExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadSwapExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?loadPBOextensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadPBOextensions();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?loadCopyExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadCopyExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?loadComputeShaderExtensions@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadComputeShaderExtensions();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?loadContextExtension@@YA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadContextExtension();

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?isExtensionSupported@@YA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsExtensionSupported([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string extension);

            [SuppressUnmanagedCodeSecurity, DllImport("SpoutDX", EntryPoint = "?ExtLog@@YAXW4ExtLogLevel@@PEBDZZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ExtLog(global::SpoutDX.ExtLogLevel level, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string format);
        }

        // DEBUG: bool InitializeGlew()
        public static bool InitializeGlew()
        {
            var ___ret = __Internal.InitializeGlew();
            return ___ret;
        }

        // DEBUG: unsigned int loadGLextensions()
        public static uint LoadGLextensions()
        {
            var ___ret = __Internal.LoadGLextensions();
            return ___ret;
        }

        // DEBUG: bool loadInteropExtensions()
        public static bool LoadInteropExtensions()
        {
            var ___ret = __Internal.LoadInteropExtensions();
            return ___ret;
        }

        // DEBUG: bool loadFBOextensions()
        public static bool LoadFBOextensions()
        {
            var ___ret = __Internal.LoadFBOextensions();
            return ___ret;
        }

        // DEBUG: bool loadBLITextension()
        public static bool LoadBLITextension()
        {
            var ___ret = __Internal.LoadBLITextension();
            return ___ret;
        }

        // DEBUG: bool loadSwapExtensions()
        public static bool LoadSwapExtensions()
        {
            var ___ret = __Internal.LoadSwapExtensions();
            return ___ret;
        }

        // DEBUG: bool loadPBOextensions()
        public static bool LoadPBOextensions()
        {
            var ___ret = __Internal.LoadPBOextensions();
            return ___ret;
        }

        // DEBUG: bool loadCopyExtensions()
        public static bool LoadCopyExtensions()
        {
            var ___ret = __Internal.LoadCopyExtensions();
            return ___ret;
        }

        // DEBUG: bool loadComputeShaderExtensions()
        public static bool LoadComputeShaderExtensions()
        {
            var ___ret = __Internal.LoadComputeShaderExtensions();
            return ___ret;
        }

        // DEBUG: bool loadContextExtension()
        public static bool LoadContextExtension()
        {
            var ___ret = __Internal.LoadContextExtension();
            return ___ret;
        }

        // DEBUG: bool isExtensionSupported(const char *extension)
        public static bool IsExtensionSupported(string extension)
        {
            var ___ret = __Internal.IsExtensionSupported(extension);
            return ___ret;
        }

        // DEBUG: void ExtLog(ExtLogLevel level, const char* format, ...)
        public static void ExtLog(global::SpoutDX.ExtLogLevel level, string format)
        {
            __Internal.ExtLog(level, format);
        }

        // DEBUG: extern PFNWGLDXOPENDEVICENVPROC				wglDXOpenDeviceNV
        public static global::SpoutDX.PFNWGLDXOPENDEVICENVPROC WglDXOpenDeviceNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNWGLDXOPENDEVICENVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNWGLDXOPENDEVICENVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXCLOSEDEVICENVPROC			wglDXCloseDeviceNV
        public static global::SpoutDX.PFNWGLDXCLOSEDEVICENVPROC WglDXCloseDeviceNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXCloseDeviceNV__3P6AHPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNWGLDXCLOSEDEVICENVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNWGLDXCLOSEDEVICENVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXCloseDeviceNV__3P6AHPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXREGISTEROBJECTNVPROC			wglDXRegisterObjectNV
        public static global::SpoutDX.PFNWGLDXREGISTEROBJECTNVPROC WglDXRegisterObjectNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNWGLDXREGISTEROBJECTNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNWGLDXREGISTEROBJECTNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXUNREGISTEROBJECTNVPROC		wglDXUnregisterObjectNV
        public static global::SpoutDX.PFNWGLDXUNREGISTEROBJECTNVPROC WglDXUnregisterObjectNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNWGLDXUNREGISTEROBJECTNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNWGLDXUNREGISTEROBJECTNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXSETRESOURCESHAREHANDLENVPROC wglDXSetResourceShareHandleNV
        public static global::SpoutDX.PFNWGLDXSETRESOURCESHAREHANDLENVPROC WglDXSetResourceShareHandleNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNWGLDXSETRESOURCESHAREHANDLENVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNWGLDXSETRESOURCESHAREHANDLENVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXLOCKOBJECTSNVPROC			wglDXLockObjectsNV
        public static global::SpoutDX.PFNWGLDXLOCKOBJECTSNVPROC WglDXLockObjectsNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNWGLDXLOCKOBJECTSNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNWGLDXLOCKOBJECTSNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLDXUNLOCKOBJECTSNVPROC			wglDXUnlockObjectsNV
        public static global::SpoutDX.PFNWGLDXUNLOCKOBJECTSNVPROC WglDXUnlockObjectsNV
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNWGLDXUNLOCKOBJECTSNVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNWGLDXUNLOCKOBJECTSNVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBindFramebufferEXTPROC						glBindFramebufferEXT
        public static global::SpoutDX.GlBindFramebufferEXTPROC GlBindFramebufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindFramebufferEXT__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlBindFramebufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlBindFramebufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindFramebufferEXT__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBindRenderbufferEXTPROC					glBindRenderbufferEXT
        public static global::SpoutDX.GlBindRenderbufferEXTPROC GlBindRenderbufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindRenderbufferEXT__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlBindRenderbufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlBindRenderbufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindRenderbufferEXT__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glCheckFramebufferStatusEXTPROC				glCheckFramebufferStatusEXT
        public static global::SpoutDX.GlCheckFramebufferStatusEXTPROC GlCheckFramebufferStatusEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCheckFramebufferStatusEXT__3P6AII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlCheckFramebufferStatusEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlCheckFramebufferStatusEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCheckFramebufferStatusEXT__3P6AII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glCheckNamedFramebufferStatusEXTPROC			glCheckNamedFramebufferStatusEXT
        public static global::SpoutDX.GlCheckNamedFramebufferStatusEXTPROC GlCheckNamedFramebufferStatusEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCheckNamedFramebufferStatusEXT__3P6AIII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlCheckNamedFramebufferStatusEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlCheckNamedFramebufferStatusEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCheckNamedFramebufferStatusEXT__3P6AIII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteFramebuffersEXTPROC					glDeleteFramebuffersEXT
        public static global::SpoutDX.GlDeleteFramebuffersEXTPROC GlDeleteFramebuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlDeleteFramebuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlDeleteFramebuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteRenderBuffersEXTPROC					glDeleteRenderBuffersEXT
        public static global::SpoutDX.GlDeleteRenderBuffersEXTPROC GlDeleteRenderBuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlDeleteRenderBuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlDeleteRenderBuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFramebufferRenderbufferEXTPROC				glFramebufferRenderbufferEXT
        public static global::SpoutDX.GlFramebufferRenderbufferEXTPROC GlFramebufferRenderbufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFramebufferRenderbufferEXT__3P6AXIIII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlFramebufferRenderbufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlFramebufferRenderbufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFramebufferRenderbufferEXT__3P6AXIIII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFramebufferTexture1DEXTPROC				glFramebufferTexture1DEXT
        public static global::SpoutDX.GlFramebufferTexture1DEXTPROC GlFramebufferTexture1DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlFramebufferTexture1DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlFramebufferTexture1DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFramebufferTexture2DEXTPROC				glFramebufferTexture2DEXT
        public static global::SpoutDX.GlFramebufferTexture2DEXTPROC GlFramebufferTexture2DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlFramebufferTexture2DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlFramebufferTexture2DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFramebufferTexture3DEXTPROC				glFramebufferTexture3DEXT
        public static global::SpoutDX.GlFramebufferTexture3DEXTPROC GlFramebufferTexture3DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlFramebufferTexture3DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlFramebufferTexture3DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGenFramebuffersEXTPROC						glGenFramebuffersEXT
        public static global::SpoutDX.GlGenFramebuffersEXTPROC GlGenFramebuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGenFramebuffersEXT__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGenFramebuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGenFramebuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGenFramebuffersEXT__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGenRenderbuffersEXTPROC					glGenRenderbuffersEXT
        public static global::SpoutDX.GlGenRenderbuffersEXTPROC GlGenRenderbuffersEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGenRenderbuffersEXT__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGenRenderbuffersEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGenRenderbuffersEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGenRenderbuffersEXT__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGenerateMipmapEXTPROC						glGenerateMipmapEXT
        public static global::SpoutDX.GlGenerateMipmapEXTPROC GlGenerateMipmapEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGenerateMipmapEXT__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGenerateMipmapEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGenerateMipmapEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGenerateMipmapEXT__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetFramebufferAttachmentParameterivEXTPROC	glGetFramebufferAttachmentParameterivEXT
        public static global::SpoutDX.GlGetFramebufferAttachmentParameterivEXTPROC GlGetFramebufferAttachmentParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetFramebufferAttachmentParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetFramebufferAttachmentParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetRenderbufferParameterivEXTPROC			glGetRenderbufferParameterivEXT
        public static global::SpoutDX.GlGetRenderbufferParameterivEXTPROC GlGetRenderbufferParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetRenderbufferParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetRenderbufferParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glIsFramebufferEXTPROC						glIsFramebufferEXT
        public static global::SpoutDX.GlIsFramebufferEXTPROC GlIsFramebufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glIsFramebufferEXT__3P6AEI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlIsFramebufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlIsFramebufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glIsFramebufferEXT__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glIsRenderbufferEXTPROC						glIsRenderbufferEXT
        public static global::SpoutDX.GlIsRenderbufferEXTPROC GlIsRenderbufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glIsRenderbufferEXT__3P6AEI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlIsRenderbufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlIsRenderbufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glIsRenderbufferEXT__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glRenderbufferStorageEXTPROC					glRenderbufferStorageEXT
        public static global::SpoutDX.GlRenderbufferStorageEXTPROC GlRenderbufferStorageEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glRenderbufferStorageEXT__3P6AXIIHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlRenderbufferStorageEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlRenderbufferStorageEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glRenderbufferStorageEXT__3P6AXIIHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBlitFramebufferEXTPROC glBlitFramebufferEXT
        public static global::SpoutDX.GlBlitFramebufferEXTPROC GlBlitFramebufferEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlBlitFramebufferEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlBlitFramebufferEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLSWAPINTERVALEXTPROC       wglSwapIntervalEXT
        public static global::SpoutDX.PFNWGLSWAPINTERVALEXTPROC WglSwapIntervalEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglSwapIntervalEXT__3P6AHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNWGLSWAPINTERVALEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNWGLSWAPINTERVALEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglSwapIntervalEXT__3P6AHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNWGLGETSWAPINTERVALEXTPROC    wglGetSwapIntervalEXT
        public static global::SpoutDX.PFNWGLGETSWAPINTERVALEXTPROC WglGetSwapIntervalEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglGetSwapIntervalEXT__3P6AHXZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNWGLGETSWAPINTERVALEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNWGLGETSWAPINTERVALEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._wglGetSwapIntervalEXT__3P6AHXZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGenBuffersPROC		glGenBuffers
        public static global::SpoutDX.GlGenBuffersPROC GlGenBuffers
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGenBuffers__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGenBuffersPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGenBuffersPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGenBuffers__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteBuffersPROC	glDeleteBuffers
        public static global::SpoutDX.GlDeleteBuffersPROC GlDeleteBuffers
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteBuffers__3P6AXHPEBI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlDeleteBuffersPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlDeleteBuffersPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteBuffers__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBindBufferPROC		glBindBuffer
        public static global::SpoutDX.GlBindBufferPROC GlBindBuffer
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindBuffer__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlBindBufferPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlBindBufferPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindBuffer__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBufferDataPROC		glBufferData
        public static global::SpoutDX.GlBufferDataPROC GlBufferData
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBufferData__3P6AXI_JPEBXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlBufferDataPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlBufferDataPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBufferData__3P6AXI_JPEBXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBufferStoragePROC	glBufferStorage
        public static global::SpoutDX.GlBufferStoragePROC GlBufferStorage
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBufferStorage__3P6AXI_JPEBXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlBufferStoragePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlBufferStoragePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBufferStorage__3P6AXI_JPEBXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glMapBufferPROC		glMapBuffer
        public static global::SpoutDX.GlMapBufferPROC GlMapBuffer
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glMapBuffer__3P6APEAXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlMapBufferPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlMapBufferPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glMapBuffer__3P6APEAXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glMapBufferRangePROC	glMapBufferRange
        public static global::SpoutDX.GlMapBufferRangePROC GlMapBufferRange
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glMapBufferRange__3P6APEAXI_J0I_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlMapBufferRangePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlMapBufferRangePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glMapBufferRange__3P6APEAXI_J0I_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glUnmapBufferPROC	glUnmapBuffer
        public static global::SpoutDX.GlUnmapBufferPROC GlUnmapBuffer
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glUnmapBuffer__3P6AEI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlUnmapBufferPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlUnmapBufferPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glUnmapBuffer__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetBufferParameterivPROC glGetBufferParameteriv
        public static global::SpoutDX.GlGetBufferParameterivPROC GlGetBufferParameteriv
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetBufferParameteriv__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetBufferParameterivPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetBufferParameterivPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetBufferParameteriv__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetTextureParameterivPROC glGetTextureParameteriv
        public static global::SpoutDX.GlGetTextureParameterivPROC GlGetTextureParameteriv
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetTextureParameteriv__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetTextureParameterivPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetTextureParameterivPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetTextureParameteriv__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glClientWaitSyncPROC glClientWaitSyncEXT
        public static global::SpoutDX.GlClientWaitSyncPROC GlClientWaitSyncEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlClientWaitSyncPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlClientWaitSyncPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteSyncPROC     glDeleteSyncEXT
        public static global::SpoutDX.GlDeleteSyncPROC GlDeleteSyncEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlDeleteSyncPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlDeleteSyncPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glFenceSyncPROC      glFenceSyncEXT
        public static global::SpoutDX.GlFenceSyncPROC GlFenceSyncEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlFenceSyncPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlFenceSyncPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData
        public static global::SpoutDX.PFNGLCOPYIMAGESUBDATAPROC GlCopyImageSubData
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.PFNGLCOPYIMAGESUBDATAPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.PFNGLCOPYIMAGESUBDATAPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetInternalFormativPROC glGetInternalFormativ
        public static global::SpoutDX.GlGetInternalFormativPROC GlGetInternalFormativ
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetInternalFormativ__3P6AXIIIHPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetInternalFormativPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetInternalFormativPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetInternalFormativ__3P6AXIIIHPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glCreateProgramPROC		glCreateProgram
        public static global::SpoutDX.GlCreateProgramPROC GlCreateProgram
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateProgram__3P6AIXZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlCreateProgramPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlCreateProgramPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateProgram__3P6AIXZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glCreateShaderPROC       glCreateShader
        public static global::SpoutDX.GlCreateShaderPROC GlCreateShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateShader__3P6AII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlCreateShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlCreateShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateShader__3P6AII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glShaderSourcePROC       glShaderSource
        public static global::SpoutDX.GlShaderSourcePROC GlShaderSource
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glShaderSource__3P6AXIHPEBQEBDPEBH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlShaderSourcePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlShaderSourcePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glShaderSource__3P6AXIHPEBQEBDPEBH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glCompileShaderPROC      glCompileShader
        public static global::SpoutDX.GlCompileShaderPROC GlCompileShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCompileShader__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlCompileShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlCompileShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCompileShader__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glAttachShaderPROC       glAttachShader
        public static global::SpoutDX.GlAttachShaderPROC GlAttachShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glAttachShader__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlAttachShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlAttachShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glAttachShader__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glLinkProgramPROC        glLinkProgram
        public static global::SpoutDX.GlLinkProgramPROC GlLinkProgram
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glLinkProgram__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlLinkProgramPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlLinkProgramPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glLinkProgram__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetProgramivPROC       glGetProgramiv
        public static global::SpoutDX.GlGetProgramivPROC GlGetProgramiv
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetProgramiv__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetProgramivPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetProgramivPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetProgramiv__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetProgramInfoLogPROC  glGetProgramInfoLog
        public static global::SpoutDX.GlGetProgramInfoLogPROC GlGetProgramInfoLog
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetProgramInfoLog__3P6AXIHPEAHPEAD_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetProgramInfoLogPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetProgramInfoLogPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetProgramInfoLog__3P6AXIHPEAHPEAD_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetShaderInfoLogPROC   glGetShaderInfoLog
        public static global::SpoutDX.GlGetShaderInfoLogPROC GlGetShaderInfoLog
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetShaderInfoLog__3P6AXIHPEAHPEAD_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetShaderInfoLogPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetShaderInfoLogPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetShaderInfoLog__3P6AXIHPEAHPEAD_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetIntegeri_vPROC      glGetIntegeri_v
        public static global::SpoutDX.GlGetIntegeriVPROC GlGetIntegeriV
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetIntegeri_v__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetIntegeriVPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetIntegeriVPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetIntegeri_v__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDetachShaderPROC       glDetachShader
        public static global::SpoutDX.GlDetachShaderPROC GlDetachShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDetachShader__3P6AXII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlDetachShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlDetachShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDetachShader__3P6AXII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glUseProgramPROC         glUseProgram
        public static global::SpoutDX.GlUseProgramPROC GlUseProgram
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glUseProgram__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlUseProgramPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlUseProgramPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glUseProgram__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBindImageTexturePROC   glBindImageTexture
        public static global::SpoutDX.GlBindImageTexturePROC GlBindImageTexture
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindImageTexture__3P6AXIIHEHII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlBindImageTexturePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlBindImageTexturePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindImageTexture__3P6AXIIHEHII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDispatchComputePROC    glDispatchCompute
        public static global::SpoutDX.GlDispatchComputePROC GlDispatchCompute
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDispatchCompute__3P6AXIII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlDispatchComputePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlDispatchComputePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDispatchCompute__3P6AXIII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteProgramPROC      glDeleteProgram
        public static global::SpoutDX.GlDeleteProgramPROC GlDeleteProgram
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteProgram__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlDeleteProgramPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlDeleteProgramPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteProgram__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteShaderPROC       glDeleteShader
        public static global::SpoutDX.GlDeleteShaderPROC GlDeleteShader
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteShader__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlDeleteShaderPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlDeleteShaderPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteShader__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glMemoryBarrierPROC      glMemoryBarrier
        public static global::SpoutDX.GlMemoryBarrierPROC GlMemoryBarrier
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glMemoryBarrier__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlMemoryBarrierPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlMemoryBarrierPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glMemoryBarrier__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glActiveTexturePROC      glActiveTexture
        public static global::SpoutDX.GlActiveTexturePROC GlActiveTexture
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glActiveTexture__3P6AXI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlActiveTexturePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlActiveTexturePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glActiveTexture__3P6AXI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glUniform1iPROC          glUniform1i
        public static global::SpoutDX.GlUniform1iPROC GlUniform1i
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glUniform1i__3P6AXHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlUniform1iPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlUniform1iPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glUniform1i__3P6AXHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glUniform1fPROC          glUniform1f
        public static global::SpoutDX.GlUniform1fPROC GlUniform1f
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glUniform1f__3P6AXHM_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlUniform1fPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlUniform1fPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glUniform1f__3P6AXHM_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetUniformLocationPROC glGetUniformLocation
        public static global::SpoutDX.GlGetUniformLocationPROC GlGetUniformLocation
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetUniformLocation__3P6AHIPEBD_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetUniformLocationPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetUniformLocationPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetUniformLocation__3P6AHIPEBD_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glTextureStorage2DPROC glTextureStorage2D
        public static global::SpoutDX.GlTextureStorage2DPROC GlTextureStorage2D
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glTextureStorage2D__3P6AXIHIHH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlTextureStorage2DPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlTextureStorage2DPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glTextureStorage2D__3P6AXIHIHH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glCreateTexturesPROC glCreateTextures
        public static global::SpoutDX.GlCreateTexturesPROC GlCreateTextures
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateTextures__3P6AXIHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlCreateTexturesPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlCreateTexturesPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateTextures__3P6AXIHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glCreateMemoryObjectsEXTPROC glCreateMemoryObjectsEXT
        public static global::SpoutDX.GlCreateMemoryObjectsEXTPROC GlCreateMemoryObjectsEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateMemoryObjectsEXT__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlCreateMemoryObjectsEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlCreateMemoryObjectsEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateMemoryObjectsEXT__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glDeleteMemoryObjectsEXTPROC glDeleteMemoryObjectsEXT
        public static global::SpoutDX.GlDeleteMemoryObjectsEXTPROC GlDeleteMemoryObjectsEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteMemoryObjectsEXT__3P6AXHPEBI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlDeleteMemoryObjectsEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlDeleteMemoryObjectsEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glDeleteMemoryObjectsEXT__3P6AXHPEBI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glTexStorageMem2DEXTPROC glTexStorageMem2DEXT
        public static global::SpoutDX.GlTexStorageMem2DEXTPROC GlTexStorageMem2DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glTexStorageMem2DEXT__3P6AXIHIHHI_K_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlTexStorageMem2DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlTexStorageMem2DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glTexStorageMem2DEXT__3P6AXIHIHHI_K_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glTextureStorageMem2DEXTPROC glTextureStorageMem2DEXT
        public static global::SpoutDX.GlTextureStorageMem2DEXTPROC GlTextureStorageMem2DEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glTextureStorageMem2DEXT__3P6AXIHIHHI_K_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlTextureStorageMem2DEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlTextureStorageMem2DEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glTextureStorageMem2DEXT__3P6AXIHIHHI_K_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glImportMemoryWin32HandleEXTPROC glImportMemoryWin32HandleEXT
        public static global::SpoutDX.GlImportMemoryWin32HandleEXTPROC GlImportMemoryWin32HandleEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glImportMemoryWin32HandleEXT__3P6AXI_KIPEAX_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlImportMemoryWin32HandleEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlImportMemoryWin32HandleEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glImportMemoryWin32HandleEXT__3P6AXI_KIPEAX_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBufferStorageMemEXTPROC glBufferStorageMemEXT
        public static global::SpoutDX.GlBufferStorageMemEXTPROC GlBufferStorageMemEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBufferStorageMemEXT__3P6AXI_JI_K_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlBufferStorageMemEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlBufferStorageMemEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBufferStorageMemEXT__3P6AXI_JI_K_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glMemoryObjectParameterivEXTPROC glMemoryObjectParameterivEXT
        public static global::SpoutDX.GlMemoryObjectParameterivEXTPROC GlMemoryObjectParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glMemoryObjectParameterivEXT__3P6AXIIPEBH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlMemoryObjectParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlMemoryObjectParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glMemoryObjectParameterivEXT__3P6AXIIPEBH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glGetMemoryObjectParameterivEXTPROC glGetMemoryObjectParameterivEXT
        public static global::SpoutDX.GlGetMemoryObjectParameterivEXTPROC GlGetMemoryObjectParameterivEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetMemoryObjectParameterivEXT__3P6AXIIPEAH_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlGetMemoryObjectParameterivEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlGetMemoryObjectParameterivEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glGetMemoryObjectParameterivEXT__3P6AXIIPEAH_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glIsMemoryObjectEXTPROC glIsMemoryObjectEXT
        public static global::SpoutDX.GlIsMemoryObjectEXTPROC GlIsMemoryObjectEXT
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glIsMemoryObjectEXT__3P6AEI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlIsMemoryObjectEXTPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlIsMemoryObjectEXTPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glIsMemoryObjectEXT__3P6AEI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glCreateBuffersPROC glCreateBuffers
        public static global::SpoutDX.GlCreateBuffersPROC GlCreateBuffers
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateBuffers__3P6AXHPEAI_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlCreateBuffersPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlCreateBuffersPROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glCreateBuffers__3P6AXHPEAI_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        // DEBUG: extern glBindBufferBasePROC glBindBufferBase
        public static global::SpoutDX.GlBindBufferBasePROC GlBindBufferBase
        {
            get
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindBufferBase__3P6AXIII_ZEA;
                var __ptr0 = *(__IntPtr*)(*__ptr);
                return __ptr0 == IntPtr.Zero? null : (global::SpoutDX.GlBindBufferBasePROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::SpoutDX.GlBindBufferBasePROC));
            }

            set
            {
                var __ptr = (__IntPtr*)global::SpoutDX.__Symbols.SpoutDX._glBindBufferBase__3P6AXIII_ZEA;
                *__ptr = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP spoutGL {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	spoutGL();
    // DEBUG:     virtual ~spoutGL();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL shared texture access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Bind OpenGL shared texture
    // DEBUG: 	bool BindSharedTexture();
    // DEBUG: 	// Un-bind OpenGL shared texture
    // DEBUG: 	bool UnBindSharedTexture();
    // DEBUG: 	// OpenGL shared texture ID
    // DEBUG: 	GLuint GetSharedTextureID();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Graphics compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user auto GPU/CPU share
    // DEBUG: 	bool GetAutoShare();
    // DEBUG: 	// Set application auto GPU/CPU share
    // DEBUG: 	void SetAutoShare(bool bAuto = true);
    // DEBUG: 	// Get user CPU share
    // DEBUG: 	bool GetCPUshare();
    // DEBUG: 	// Set application CPU share
    // DEBUG: 	// (re-test GL/DX compatibility if set to false)
    // DEBUG: 	void SetCPUshare(bool bCPU = true);
    // DEBUG: 	// OpenGL texture share compatibility
    // DEBUG: 	bool IsGLDXready();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// User settings recorded in the registry by "SpoutSettings"
    // DEBUG: 	//
    // DEBUG: 	
    // DEBUG: 	// Get user buffering mode
    // DEBUG: 	bool GetBufferMode();
    // DEBUG: 	// Set application buffering mode
    // DEBUG: 	void SetBufferMode(bool bActive = true);
    // DEBUG: 	// Get user number of pixel buffers
    // DEBUG: 	int GetBuffers();
    // DEBUG: 	// Set application number of pixel buffers
    // DEBUG: 	void SetBuffers(int nBuffers);
    // DEBUG: 	// Get user Maximum senders allowed
    // DEBUG: 	int GetMaxSenders();
    // DEBUG: 	// Set user Maximum senders allowed
    // DEBUG: 	void SetMaxSenders(int maxSenders);
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user DX9 mode
    // DEBUG: 	bool GetDX9();
    // DEBUG: 	// Set user DX9 mode
    // DEBUG: 	bool SetDX9(bool bDX9 = true);
    // DEBUG: 	// Get user memory share mode
    // DEBUG: 	bool GetMemoryShareMode();
    // DEBUG: 	// Set user memory share mode
    // DEBUG: 	bool SetMemoryShareMode(bool bMem = true);
    // DEBUG: 	// Get user CPU mode
    // DEBUG: 	bool GetCPUmode();
    // DEBUG: 	// Set user CPU mode
    // DEBUG: 	bool SetCPUmode(bool bCPU);
    // DEBUG: 	// Get user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	int GetShareMode();
    // DEBUG: 	// Set user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	void SetShareMode(int mode);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Information
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The path of the host that produced the sender
    // DEBUG: 	bool GetHostPath(const char *sendername, char *hostpath, int maxchars);
    // DEBUG: 	// Vertical sync status
    // DEBUG: 	int GetVerticalSync();
    // DEBUG: 	// Lock to monitor vertical sync
    // DEBUG: 	bool SetVerticalSync(int interval = 1);
    // DEBUG: 	// Get Spout version
    // DEBUG: 	int GetSpoutVersion();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Utility
    // DEBUG: 	//
    // DEBUG: 	
    // DEBUG: 	// Copy OpenGL texture with optional invert
    // DEBUG: 	bool CopyTexture(GLuint SourceID, GLuint SourceTarget, GLuint DestID, GLuint DestTarget,
    // DEBUG: 		unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Copy OpenGL texture data to a pixel buffer
    // DEBUG: 	bool ReadTextureData(GLuint SourceID, GLuint SourceTarget,
    // DEBUG: 		void* data, unsigned int width, unsigned int height, unsigned int rowpitch,
    // DEBUG: 		GLenum dataformat, GLenum datatype, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Correct for image stride
    // DEBUG: 	void RemovePadding(const unsigned char *source, unsigned char *dest,
    // DEBUG: 		unsigned int width, unsigned int height, unsigned int stride, GLenum glFormat = GL_RGBA);
    // DEBUG: 
    // DEBUG: 	// OpenGL error reporting
    // DEBUG: 	bool GLerror();
    // DEBUG: 
    // DEBUG: 	// DX11 texture read
    // DEBUG: 	//  o Copy from the shared DX11 texture to a DX11 texture
    // DEBUG: 	bool ReadTexture(ID3D11Texture2D** texture);
    // DEBUG: 	// DX11 texture write
    // DEBUG: 	//  o Copy a DX11 texture to the shared DX11 texture
    // DEBUG: 	bool WriteTexture(ID3D11Texture2D** texture);
    // DEBUG: 	// DX11 texture write with readback to OpenGL texture
    // DEBUG: 	//   o Copy a DX11 texture to the DX11 shared texture
    // DEBUG: 	//   o Copy the linked OpenGL texture back to an OpenGL texture
    // DEBUG: 	bool WriteTextureReadback(ID3D11Texture2D** texture, GLuint TextureID, GLuint TextureTarget,
    // DEBUG: 		unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO = 0);
    // DEBUG: 
    // DEBUG: 	// Initialize OpenGL and DX11
    // DEBUG: 	//     o Load extensions and check for availability and function
    // DEBUG: 	//     o Open DirectX and check for availability
    // DEBUG: 	//     o Compatibility test for use or GL/DX interop
    // DEBUG: 	//     o Optionally re-test compatibility even if already initialized
    // DEBUG: 	bool OpenSpout(bool bRetest = false);
    // DEBUG: 	// Initialize DirectX
    // DEBUG: 	bool OpenDirectX();
    // DEBUG: 	// Close DirectX and free resources
    // DEBUG: 	void CloseDirectX();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Formats
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get sender DX11 shared texture format
    // DEBUG: 	DXGI_FORMAT GetDX11format();
    // DEBUG: 	// Set sender DX11 shared texture format
    // DEBUG: 	void SetDX11format(DXGI_FORMAT textureformat);
    // DEBUG: 	// Return OpenGL compatible DX11 format
    // DEBUG: 	DXGI_FORMAT DX11format(GLint glformat);
    // DEBUG: 	// Return DX11 compatible OpenGL format
    // DEBUG: 	GLint GLDXformat(DXGI_FORMAT textureformat = DXGI_FORMAT_UNKNOWN);
    // DEBUG: 	// Return OpenGL texture internal format
    // DEBUG: 	GLint GLformat(GLuint TextureID, GLuint TextureTarget);
    // DEBUG: 	// Return OpenGL texture format description
    // DEBUG: 	std::string GLformatName(GLint glformat = 0);
    // DEBUG: 	// Create an OpenGL window and context for situations where there is none.
    // DEBUG: 	//   Not used if applications already have an OpenGL context.
    // DEBUG: 	//   Always call CloseOpenGL afterwards.
    // DEBUG: 	bool CreateOpenGL(HWND hwnd = nullptr);
    // DEBUG: 	// Close OpenGL window
    // DEBUG: 	bool CloseOpenGL();
    // DEBUG: 	// Class initialization status
    // DEBUG: 	bool IsSpoutInitialized();
    // DEBUG: 	// Perform tests for GL/DX interop availability and compatibility
    // DEBUG: 	bool GLDXready();
    // DEBUG: 	// Set host path to sender shared memory
    // DEBUG: 	bool SetHostPath(const char *sendername);
    // DEBUG: 	// Set sender PartnerID field with CPU sharing method and GL/DX compatibility
    // DEBUG: 	bool SetSenderID(const char *sendername, bool bCPU, bool bGLDX);
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	bool OpenDirectX11(ID3D11Device* pDevice = nullptr);
    // DEBUG: 	ID3D11Device* GetDX11Device();
    // DEBUG: 	ID3D11DeviceContext* GetDX11Context();
    // DEBUG: 	void CleanupDirectX();
    // DEBUG: 	void CleanupDX11();
    // DEBUG: 	bool CleanupInterop();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL extensions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	bool LoadGLextensions();
    // DEBUG: 	bool IsGLDXavailable(); // GL/DX interop extensions supported
    // DEBUG: 	bool IsBLITavailable(); // fbo blit extensions available
    // DEBUG: 	bool IsSWAPavailable(); // swap extensions available
    // DEBUG: 	bool IsBGRAavailable(); // bgra extensions available
    // DEBUG: 	bool IsCOPYavailable(); // copy extensions available
    // DEBUG: 	bool IsPBOavailable();  // pbo extensions supported
    // DEBUG: 	bool IsCONTEXTavailable(); // Context extension supported
    // DEBUG: 	float GetGLversion(); // OpenGL version - 3.0, 4.0, 4.6 etc
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Legacy OpenGL functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// See _SpoutCommon.h_ #define legacyOpenGL
    // DEBUG: #ifdef legacyOpenGL
    // DEBUG: 	void SaveOpenGLstate(unsigned int width, unsigned int height, bool bFitWindow = true);
    // DEBUG: 	void RestoreOpenGLstate();
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Public for special use
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Link a shared DirectX texture to an OpenGL texture
    // DEBUG: 	HANDLE LinkGLDXtextures(void* pDXdevice, void* pSharedTexture, GLuint glTextureID);
    // DEBUG: 	// Return a handle to the the DX/GL interop device
    // DEBUG: 	HANDLE GetInteropDevice();
    // DEBUG: 	// Return a handle to the the DX/GL interop ojject
    // DEBUG: 	HANDLE GetInteropObject();
    // DEBUG: 	// Pointer to the shared DirectX texture
    // DEBUG: 	ID3D11Texture2D* GetDXsharedTexture();
    // DEBUG: 	// Create OpenGL texture
    // DEBUG: 	void InitTexture(GLuint& texID, GLenum GLformat, unsigned int width, unsigned int height);
    // DEBUG: 	// Copy OpenGL to shared DirectX 11 texture via CPU
    // DEBUG: 	bool WriteDX11texture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO);
    // DEBUG: 	// Copy from shared DX11 texture to OpenGL via CPU
    // DEBUG: 	bool ReadDX11texture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO);
    // DEBUG: 	// Read from an OpenGL texture to and RGBA buffer using pbo
    // DEBUG: 	bool UnloadTexturePixels(GLuint TextureID, GLuint TextureTarget,
    // DEBUG: 		unsigned int width, unsigned int height, unsigned int pitch,
    // DEBUG: 		unsigned char* data, GLenum glFormat = GL_RGBA,
    // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Load pixels to an OpenGL texture using pbo
    // DEBUG: 	bool LoadTexturePixels(GLuint TextureID, GLuint TextureTarget,
    // DEBUG: 		unsigned int width, unsigned int height, 
    // DEBUG: 		const unsigned char* data, int GLformat = GL_RGBA,
    // DEBUG: 		bool bInvert = false);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Data sharing
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Write data to shared memory
    // DEBUG: 	bool WriteMemoryBuffer(const char *name, const char* data, int length);
    // DEBUG: 	// Read data from shared memory
    // DEBUG: 	int ReadMemoryBuffer(const char* name, char* data, int maxlength);
    // DEBUG: 	// Create a shared memory buffer
    // DEBUG: 	bool CreateMemoryBuffer(const char *name, int length);
    // DEBUG: 	// Delete a shared memory buffer
    // DEBUG: 	bool DeleteMemoryBuffer();
    // DEBUG: 	// Get the number of bytes available for data transfer
    // DEBUG: 	int GetMemoryBufferSize(const char *name);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// For external access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// DirectX 11 texture sharing
    // DEBUG: 	spoutDirectX spoutdx;
    // DEBUG: 	// Pixel buffer copying
    // DEBUG: 	spoutCopy spoutcopy;
    // DEBUG: 	// Spout sender management
    // DEBUG: 	spoutSenderNames sendernames;
    // DEBUG: 	// Frame counting management
    // DEBUG: 	spoutFrameCount frame;
    // DEBUG: 
    // DEBUG: protected :
    // DEBUG: 	
    // DEBUG: 	// For 2.006(receive only) / WriteMemoryBuffer / ReadMemoryBuffer
    // DEBUG: 	SpoutSharedMemory memoryshare;
    // DEBUG: 
    // DEBUG: 	// GL/DX functions
    // DEBUG: 	bool CreateInterop(unsigned int width, unsigned int height, DWORD dwFormat, bool bReceive);
    // DEBUG: 	HRESULT LockInteropObject(HANDLE hDevice, HANDLE *hObject);
    // DEBUG: 	HRESULT UnlockInteropObject(HANDLE hDevice, HANDLE *hObject);
    // DEBUG: 	void CleanupGL(); // Free OpenGL resources
    // DEBUG: 
    // DEBUG: 	// OpenGL texture create
    // DEBUG: 	void CheckOpenGLTexture(GLuint &texID, GLenum GLformat, unsigned int width, unsigned int height);
    // DEBUG: 
    // DEBUG: 	// OpenGL texture copy to/from the shared texture
    // DEBUG: 	bool WriteGLDXtexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: 	bool ReadGLDXtexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	bool SetSharedTextureData(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO);
    // DEBUG: 	
    // DEBUG: 	// OpenGL pixel copy
    // DEBUG: 	bool WriteGLDXpixels(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	bool ReadGLDXpixels(unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	
    // DEBUG: 	// PBOs for OpenGL pixel copy
    // DEBUG: 	int m_nBuffers;
    // DEBUG: 
    // DEBUG: 	// UnloadTexturePixels
    // DEBUG: 	GLuint m_pbo[4];
    // DEBUG: 	int PboIndex;
    // DEBUG: 	int NextPboIndex;
    // DEBUG: 
    // DEBUG: 	// LoadTexturePixels
    // DEBUG: 	GLuint m_loadpbo[4];
    // DEBUG: 	int PboLoadIndex;
    // DEBUG: 	int NextPboLoadIndex;
    // DEBUG: 	
    // DEBUG: 	// OpenGL <-> DX11
    // DEBUG: 	// WriteDX11texture - public
    // DEBUG: 	// ReadDX11texture  - public
    // DEBUG: 	
    // DEBUG: 	// Pixels <-> DX11
    // DEBUG: 	bool WriteDX11pixels(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false);
    // DEBUG: 	bool ReadDX11pixels(unsigned char * pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false);
    // DEBUG: 	bool WritePixelData(const unsigned char* pixels, ID3D11Texture2D* pStagingTexture, unsigned int width, unsigned int height, GLenum glFormat, bool bInvert);
    // DEBUG: 	bool ReadPixelData(ID3D11Texture2D* pStagingTexture, unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat, bool bInvert);
    // DEBUG: 
    // DEBUG: 	// Staging textures for DX11 CPU copy
    // DEBUG: 	ID3D11Texture2D* m_pStaging[2];
    // DEBUG: 	int m_Index;
    // DEBUG: 	int m_NextIndex;
    // DEBUG: 	bool CheckStagingTextures(unsigned int width, unsigned int height, int nTextures);
    // DEBUG: 
    // DEBUG: 	// 2.006 shared memory
    // DEBUG: 	bool ReadMemoryTexture(const char* sendername, GLuint TexID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	bool ReadMemoryPixels(const char* sendername, unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false);
    // DEBUG: 	bool WriteMemoryPixels(const char *sendername, const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false);
    // DEBUG: 
    // DEBUG: 	// Utility
    // DEBUG: 	bool OpenDeviceKey(const char* key, int maxsize, char* description, char* version);
    // DEBUG: 	void trim(char* s);
    // DEBUG: 
    // DEBUG: 	// Errors
    // DEBUG: 	void DoDiagnostics(const char *error);
    // DEBUG: 	void PrintFBOstatus(GLenum status);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Class globals
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Sender/Receiver
    // DEBUG: 	char m_SenderName[256];
    // DEBUG: 	char m_SenderNameSetup[256];
    // DEBUG: 	unsigned int m_Width;
    // DEBUG: 	unsigned int m_Height;
    // DEBUG: 
    // DEBUG: 	// Utility
    // DEBUG: 	GLuint m_fbo; // Fbo used for OpenGL functions
    // DEBUG: 	GLuint m_TexID; // Class texture used for invert copy
    // DEBUG: 	unsigned int m_TexWidth;
    // DEBUG: 	unsigned int m_TexHeight;
    // DEBUG: 	DWORD m_TexFormat;
    // DEBUG: 
    // DEBUG: 	// Shared texture
    // DEBUG: 	GLuint m_glTexture; // OpenGL shared texture
    // DEBUG: 	ID3D11Texture2D* m_pSharedTexture; // DirectX shared texture
    // DEBUG: 	HANDLE m_dxShareHandle; // DirectX shared texture handle
    // DEBUG: 	DXGI_FORMAT m_DX11format; // DirectX 11 shared texture format
    // DEBUG: 	DWORD m_dwFormat; // DWORD texture format used throughout
    // DEBUG: 
    // DEBUG: 	// GL/DX interop
    // DEBUG: 	HANDLE m_hInteropDevice; // Handle to the DX/GL interop device
    // DEBUG: 	HANDLE m_hInteropObject; // Handle to the DX/GL interop object (the shared texture)
    // DEBUG: 	bool m_bInteropFailed = false; // Interop failure flag to avoid repeats
    // DEBUG: 
    // DEBUG: 	// General
    // DEBUG: 	HWND m_hWnd; // OpenGL window
    // DEBUG: 	int m_SpoutVersion; // Spout version
    // DEBUG: 
    // DEBUG: 	// For CreateOpenGL and CloseOpenGL
    // DEBUG: 	HDC m_hdc;
    // DEBUG: 	HWND m_hwndButton;
    // DEBUG: 	HGLRC m_hRc;
    // DEBUG: 
    // DEBUG: 	// Status flags
    // DEBUG: 	bool m_bConnected;
    // DEBUG: 	bool m_bUpdated;
    // DEBUG: 	bool m_bInitialized;
    // DEBUG: 	bool m_bGLDXdone; // Compatibility test done
    // DEBUG: 
    // DEBUG: 	// Sharing modes
    // DEBUG: 	bool m_bAuto;         // Auto share mode - user set
    // DEBUG: 	bool m_bCPU;          // Global CPU mode - user set
    // DEBUG: 	bool m_bUseGLDX;      // Hardware GL/DX interop compatibility
    // DEBUG: 	bool m_bTextureShare; // Using texture sharing methods
    // DEBUG: 	bool m_bCPUshare;     // Using CPU sharing methods
    // DEBUG: 	bool m_bMemoryShare;  // Using 2.006 memoryshare methods
    // DEBUG: 	
    // DEBUG: 	// Sender sharing modes
    // DEBUG: 	bool m_bSenderCPU;    // Sender using CPU sharing methods
    // DEBUG: 	bool m_bSenderGLDX;   // Sender hardware GL/DX compatibility
    // DEBUG: 
    // DEBUG: 	// For SpoutPanel sender selection
    // DEBUG: 	bool m_bSpoutPanelOpened;
    // DEBUG: 	bool m_bSpoutPanelActive;
    // DEBUG: 	SHELLEXECUTEINFOA m_ShExecInfo;
    // DEBUG: 
    // DEBUG: 	// OpenGL extensions
    // DEBUG: 	unsigned int m_caps;
    // DEBUG: 	bool m_bGLDXavailable;
    // DEBUG: 	bool m_bFBOavailable;
    // DEBUG: 	bool m_bBLITavailable;
    // DEBUG: 	bool m_bPBOavailable;
    // DEBUG: 	bool m_bSWAPavailable;
    // DEBUG: 	bool m_bBGRAavailable;
    // DEBUG: 	bool m_bCOPYavailable;
    // DEBUG: 	bool m_bCONTEXTavailable;
    // DEBUG: 	bool m_bExtensionsLoaded;
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutGL : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1736)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_spoutGL;
            internal global::SpoutDX.SpoutDirectX.__Internal spoutdx;
            internal global::SpoutDX.SpoutCopy.__Internal spoutcopy;
            internal global::SpoutDX.SpoutSenderNames.__Internal sendernames;
            internal global::SpoutDX.SpoutFrameCount.__Internal frame;
            internal global::SpoutDX.SpoutSharedMemory.__Internal memoryshare;
            internal int m_nBuffers;
            internal fixed uint m_pbo[4];
            internal int PboIndex;
            internal int NextPboIndex;
            internal fixed uint m_loadpbo[4];
            internal int PboLoadIndex;
            internal int NextPboLoadIndex;
            internal fixed long m_pStaging[2];
            internal int m_Index;
            internal int m_NextIndex;
            internal fixed sbyte m_SenderName[256];
            internal fixed sbyte m_SenderNameSetup[256];
            internal uint m_Width;
            internal uint m_Height;
            internal uint m_fbo;
            internal uint m_TexID;
            internal uint m_TexWidth;
            internal uint m_TexHeight;
            internal uint m_TexFormat;
            internal uint m_glTexture;
            internal __IntPtr m_pSharedTexture;
            internal __IntPtr m_dxShareHandle;
            internal global::DXGI_FORMAT m_DX11format;
            internal uint m_dwFormat;
            internal __IntPtr m_hInteropDevice;
            internal __IntPtr m_hInteropObject;
            internal byte m_bInteropFailed;
            internal __IntPtr m_hWnd;
            internal int m_SpoutVersion;
            internal __IntPtr m_hdc;
            internal __IntPtr m_hwndButton;
            internal __IntPtr m_hRc;
            internal byte m_bConnected;
            internal byte m_bUpdated;
            internal byte m_bInitialized;
            internal byte m_bGLDXdone;
            internal byte m_bAuto;
            internal byte m_bCPU;
            internal byte m_bUseGLDX;
            internal byte m_bTextureShare;
            internal byte m_bCPUshare;
            internal byte m_bMemoryShare;
            internal byte m_bSenderCPU;
            internal byte m_bSenderGLDX;
            internal byte m_bSpoutPanelOpened;
            internal byte m_bSpoutPanelActive;
            internal global::SHELLEXECUTEINFOA.__Internal m_ShExecInfo;
            internal uint m_caps;
            internal byte m_bGLDXavailable;
            internal byte m_bFBOavailable;
            internal byte m_bBLITavailable;
            internal byte m_bPBOavailable;
            internal byte m_bSWAPavailable;
            internal byte m_bBGRAavailable;
            internal byte m_bCOPYavailable;
            internal byte m_bCONTEXTavailable;
            internal byte m_bExtensionsLoaded;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutGL@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0spoutGL@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?BindSharedTexture@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX9@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX9(__IntPtr __instance, bool bDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMemoryShareMode@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetMemoryShareMode(__IntPtr __instance, bool bMem);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUmode@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetCPUmode(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHostPath@spoutGL@@QEAA_NPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* hostpath, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetVerticalSync@spoutGL@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetVerticalSync(__IntPtr __instance, int interval);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyTexture@spoutGL@@QEAA_NIIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyTexture(__IntPtr __instance, uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadTextureData@spoutGL@@QEAA_NIIPEAXIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTextureData(__IntPtr __instance, uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?RemovePadding@spoutGL@@QEAAXPEBEPEAEIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePadding(__IntPtr __instance, byte* source, byte* dest, uint width, uint height, uint stride, uint glFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadTexture@spoutGL@@QEAA_NPEAPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTexture(__IntPtr __instance, __IntPtr texture);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteTexture@spoutGL@@QEAA_NPEAPEAUID3D11Texture2D@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteTexture(__IntPtr __instance, __IntPtr texture);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteTextureReadback@spoutGL@@QEAA_NPEAPEAUID3D11Texture2D@@IIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteTextureReadback(__IntPtr __instance, __IntPtr texture, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenSpout@spoutGL@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenSpout(__IntPtr __instance, bool bRetest);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenDirectX@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDirectX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseDirectX@spoutGL@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseDirectX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformat@spoutGL@@QEAAHII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GLformat(__IntPtr __instance, uint TextureID, uint TextureTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformatName@spoutGL@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GLformatName(__IntPtr __instance, __IntPtr @return, int glformat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseOpenGL@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetHostPath@spoutGL@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderID@spoutGL@@QEAA_NPEBD_N1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSenderID(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, bool bCPU, bool bGLDX);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenDirectX11@spoutGL@@QEAA_NPEAUID3D11Device@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDirectX11(__IntPtr __instance, __IntPtr pDevice);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupDirectX@spoutGL@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupDirectX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupDX11@spoutGL@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupDX11(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LoadGLextensions@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadGLextensions(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LinkGLDXtextures@spoutGL@@QEAAPEAXPEAX0I@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr LinkGLDXtextures(__IntPtr __instance, __IntPtr pDXdevice, __IntPtr pSharedTexture, uint glTextureID);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?InitTexture@spoutGL@@QEAAXAEAIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitTexture(__IntPtr __instance, uint* texID, uint GLformat, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteDX11texture@spoutGL@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteDX11texture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadDX11texture@spoutGL@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadDX11texture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnloadTexturePixels@spoutGL@@QEAA_NIIIIIPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnloadTexturePixels(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, uint pitch, byte* data, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LoadTexturePixels@spoutGL@@QEAA_NIIIIPEBEH_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LoadTexturePixels(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, byte* data, int GLformat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteMemoryBuffer@spoutGL@@QEAA_NPEBD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string data, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryBuffer@spoutGL@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, sbyte* data, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateMemoryBuffer@spoutGL@@QEAA_NPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DeleteMemoryBuffer@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteMemoryBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryBufferSize@spoutGL@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateInterop@spoutGL@@IEAA_NIIK_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateInterop(__IntPtr __instance, uint width, uint height, uint dwFormat, bool bReceive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?LockInteropObject@spoutGL@@IEAAJPEAXPEAPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LockInteropObject(__IntPtr __instance, __IntPtr hDevice, __IntPtr* hObject);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnlockInteropObject@spoutGL@@IEAAJPEAXPEAPEAX@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UnlockInteropObject(__IntPtr __instance, __IntPtr hDevice, __IntPtr* hObject);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupGL@spoutGL@@IEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanupGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckOpenGLTexture@spoutGL@@IEAAXAEAIIII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckOpenGLTexture(__IntPtr __instance, uint* texID, uint GLformat, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteGLDXtexture@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteGLDXtexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadGLDXtexture@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadGLDXtexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSharedTextureData@spoutGL@@IEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSharedTextureData(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteGLDXpixels@spoutGL@@IEAA_NPEBEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteGLDXpixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadGLDXpixels@spoutGL@@IEAA_NPEAEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadGLDXpixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteDX11pixels@spoutGL@@IEAA_NPEBEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteDX11pixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadDX11pixels@spoutGL@@IEAA_NPEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadDX11pixels(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WritePixelData@spoutGL@@IEAA_NPEBEPEAUID3D11Texture2D@@III_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WritePixelData(__IntPtr __instance, byte* pixels, __IntPtr pStagingTexture, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadPixelData@spoutGL@@IEAA_NPEAUID3D11Texture2D@@PEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadPixelData(__IntPtr __instance, __IntPtr pStagingTexture, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckStagingTextures@spoutGL@@IEAA_NIIH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckStagingTextures(__IntPtr __instance, uint width, uint height, int nTextures);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryTexture@spoutGL@@IEAA_NPEBDIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadMemoryTexture(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint TexID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryPixels@spoutGL@@IEAA_NPEBDPEAEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadMemoryPixels(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteMemoryPixels@spoutGL@@IEAA_NPEBDPEBEIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryPixels(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?OpenDeviceKey@spoutGL@@IEAA_NPEBDHPEAD1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenDeviceKey(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, int maxsize, sbyte* description, sbyte* version);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?trim@spoutGL@@IEAAXPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Trim(__IntPtr __instance, sbyte* s);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DoDiagnostics@spoutGL@@IEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DoDiagnostics(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string error);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?PrintFBOstatus@spoutGL@@IEAAXI@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PrintFBOstatus(__IntPtr __instance, uint status);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnBindSharedTexture@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnBindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureID@spoutGL@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSharedTextureID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAutoShare@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoShare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAutoShare@spoutGL@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoShare(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUshare@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUshare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUshare@spoutGL@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCPUshare(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXready@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBufferMode@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBufferMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBufferMode@spoutGL@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBufferMode(__IntPtr __instance, bool bActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBuffers@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBuffers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBuffers@spoutGL@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBuffers(__IntPtr __instance, int nBuffers);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@spoutGL@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX9@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryShareMode@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUmode@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUmode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetShareMode@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetShareMode@spoutGL@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetShareMode(__IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetVerticalSync@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetVerticalSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutVersion@spoutGL@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpoutVersion(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLerror@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GLerror(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsSpoutInitialized@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSpoutInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLDXready@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX11Device@spoutGL@@QEAAPEAUID3D11Device@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDX11Device(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX11Context@spoutGL@@QEAAPEAUID3D11DeviceContext@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDX11Context(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CleanupInterop@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CleanupInterop(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsBLITavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBLITavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsSWAPavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSWAPavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsBGRAavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBGRAavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsCOPYavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsCOPYavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPBOavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPBOavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsCONTEXTavailable@spoutGL@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsCONTEXTavailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetGLversion@spoutGL@@QEAAMXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetGLversion(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetInteropDevice@spoutGL@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetInteropDevice(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetInteropObject@spoutGL@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetInteropObject(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDXsharedTexture@spoutGL@@QEAAPEAUID3D11Texture2D@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDXsharedTexture(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutGL>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutGL>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SpoutGL managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SpoutGL>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SpoutGL managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutGL __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutGL(native.ToPointer(), skipVTables);
        }

        internal static SpoutGL __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutGL)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutGL __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (SpoutGL)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static SpoutGL __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutGL(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::SpoutDX.SpoutGL.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private SpoutGL(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutGL(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        // DEBUG: spoutGL()
        public SpoutGL()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutGL.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "SpoutDX.SpoutGL");
        }

        // DEBUG: spoutGL
        public SpoutGL(global::SpoutDX.SpoutGL _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutGL.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "SpoutDX.SpoutGL");
        }

        ~SpoutGL()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (callNativeDtor)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::SpoutDX.Delegates.Action___IntPtr_int>(0, 0);
                ___dtorDelegate(__Instance, 0);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: bool BindSharedTexture()
        public bool BindSharedTexture()
        {
            var ___ret = __Internal.BindSharedTexture(__Instance);
            return ___ret;
        }

        // DEBUG: bool SetDX9(bool bDX9 = true)
        public bool SetDX9(bool bDX9)
        {
            var ___ret = __Internal.SetDX9(__Instance, bDX9);
            return ___ret;
        }

        // DEBUG: bool SetMemoryShareMode(bool bMem = true)
        public bool SetMemoryShareMode(bool bMem)
        {
            var ___ret = __Internal.SetMemoryShareMode(__Instance, bMem);
            return ___ret;
        }

        // DEBUG: bool SetCPUmode(bool bCPU)
        public bool SetCPUmode(bool bCPU)
        {
            var ___ret = __Internal.SetCPUmode(__Instance, bCPU);
            return ___ret;
        }

        // DEBUG: bool GetHostPath(const char *sendername, char *hostpath, int maxchars)
        public bool GetHostPath(string sendername, sbyte* hostpath, int maxchars)
        {
            var ___ret = __Internal.GetHostPath(__Instance, sendername, hostpath, maxchars);
            return ___ret;
        }

        // DEBUG: bool SetVerticalSync(int interval = 1)
        public bool SetVerticalSync(int interval)
        {
            var ___ret = __Internal.SetVerticalSync(__Instance, interval);
            return ___ret;
        }

        // DEBUG: bool CopyTexture(GLuint SourceID, GLuint SourceTarget, GLuint DestID, GLuint DestTarget,
        // DEBUG: 		unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0)
        public bool CopyTexture(uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.CopyTexture(__Instance, SourceID, SourceTarget, DestID, DestTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool ReadTextureData(GLuint SourceID, GLuint SourceTarget,
        // DEBUG: 		void* data, unsigned int width, unsigned int height, unsigned int rowpitch,
        // DEBUG: 		GLenum dataformat, GLenum datatype, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReadTextureData(uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadTextureData(__Instance, SourceID, SourceTarget, data, width, height, rowpitch, dataformat, datatype, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: void RemovePadding(const unsigned char *source, unsigned char *dest,
        // DEBUG: 		unsigned int width, unsigned int height, unsigned int stride, GLenum glFormat = GL_RGBA)
        public void RemovePadding(byte* source, byte* dest, uint width, uint height, uint stride, uint glFormat)
        {
            __Internal.RemovePadding(__Instance, source, dest, width, height, stride, glFormat);
        }

        // DEBUG: bool ReadTexture(ID3D11Texture2D** texture)
        public bool ReadTexture(global::SpoutDX.ID3D11Texture2D texture)
        {
            var ____arg0 = texture is null ? __IntPtr.Zero : texture.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = __Internal.ReadTexture(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: bool WriteTexture(ID3D11Texture2D** texture)
        public bool WriteTexture(global::SpoutDX.ID3D11Texture2D texture)
        {
            var ____arg0 = texture is null ? __IntPtr.Zero : texture.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = __Internal.WriteTexture(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: bool WriteTextureReadback(ID3D11Texture2D** texture, GLuint TextureID, GLuint TextureTarget,
        // DEBUG: 		unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO = 0)
        public bool WriteTextureReadback(global::SpoutDX.ID3D11Texture2D texture, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ____arg0 = texture is null ? __IntPtr.Zero : texture.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = __Internal.WriteTextureReadback(__Instance, __arg0, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool OpenSpout(bool bRetest = false)
        public bool OpenSpout(bool bRetest)
        {
            var ___ret = __Internal.OpenSpout(__Instance, bRetest);
            return ___ret;
        }

        // DEBUG: bool OpenDirectX()
        public bool OpenDirectX()
        {
            var ___ret = __Internal.OpenDirectX(__Instance);
            return ___ret;
        }

        // DEBUG: void CloseDirectX()
        public void CloseDirectX()
        {
            __Internal.CloseDirectX(__Instance);
        }

        // DEBUG: GLint GLformat(GLuint TextureID, GLuint TextureTarget)
        public int GLformat(uint TextureID, uint TextureTarget)
        {
            var ___ret = __Internal.GLformat(__Instance, TextureID, TextureTarget);
            return ___ret;
        }

        // DEBUG: std::string GLformatName(GLint glformat = 0)
        public string GLformatName(int glformat)
        {
            var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.GLformatName(__Instance, new IntPtr(&___ret), glformat);
            var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
            var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
            __basicStringRet0.Dispose();
            return __retString0;
        }

        // DEBUG: bool CloseOpenGL()
        public bool CloseOpenGL()
        {
            var ___ret = __Internal.CloseOpenGL(__Instance);
            return ___ret;
        }

        // DEBUG: bool SetHostPath(const char *sendername)
        public bool SetHostPath(string sendername)
        {
            var ___ret = __Internal.SetHostPath(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool SetSenderID(const char *sendername, bool bCPU, bool bGLDX)
        public bool SetSenderID(string sendername, bool bCPU, bool bGLDX)
        {
            var ___ret = __Internal.SetSenderID(__Instance, sendername, bCPU, bGLDX);
            return ___ret;
        }

        // DEBUG: bool OpenDirectX11(ID3D11Device* pDevice = nullptr)
        public bool OpenDirectX11(global::SpoutDX.ID3D11Device pDevice)
        {
            var __arg0 = pDevice is null ? __IntPtr.Zero : pDevice.__Instance;
            var ___ret = __Internal.OpenDirectX11(__Instance, __arg0);
            return ___ret;
        }

        // DEBUG: void CleanupDirectX()
        public void CleanupDirectX()
        {
            __Internal.CleanupDirectX(__Instance);
        }

        // DEBUG: void CleanupDX11()
        public void CleanupDX11()
        {
            __Internal.CleanupDX11(__Instance);
        }

        // DEBUG: bool LoadGLextensions()
        public bool LoadGLextensions()
        {
            var ___ret = __Internal.LoadGLextensions(__Instance);
            return ___ret;
        }

        // DEBUG: HANDLE LinkGLDXtextures(void* pDXdevice, void* pSharedTexture, GLuint glTextureID)
        public __IntPtr LinkGLDXtextures(__IntPtr pDXdevice, __IntPtr pSharedTexture, uint glTextureID)
        {
            var ___ret = __Internal.LinkGLDXtextures(__Instance, pDXdevice, pSharedTexture, glTextureID);
            return ___ret;
        }

        // DEBUG: void InitTexture(GLuint& texID, GLenum GLformat, unsigned int width, unsigned int height)
        public void InitTexture(ref uint texID, uint GLformat, uint width, uint height)
        {
            fixed (uint* __texID0 = &texID)
            {
                var __arg0 = __texID0;
                __Internal.InitTexture(__Instance, __arg0, GLformat, width, height);
            }
        }

        // DEBUG: bool WriteDX11texture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO)
        public bool WriteDX11texture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.WriteDX11texture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool ReadDX11texture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO)
        public bool ReadDX11texture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadDX11texture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool UnloadTexturePixels(GLuint TextureID, GLuint TextureTarget,
        // DEBUG: 		unsigned int width, unsigned int height, unsigned int pitch,
        // DEBUG: 		unsigned char* data, GLenum glFormat = GL_RGBA,
        // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0)
        public bool UnloadTexturePixels(uint TextureID, uint TextureTarget, uint width, uint height, uint pitch, byte* data, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.UnloadTexturePixels(__Instance, TextureID, TextureTarget, width, height, pitch, data, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool LoadTexturePixels(GLuint TextureID, GLuint TextureTarget,
        // DEBUG: 		unsigned int width, unsigned int height, 
        // DEBUG: 		const unsigned char* data, int GLformat = GL_RGBA,
        // DEBUG: 		bool bInvert = false)
        public bool LoadTexturePixels(uint TextureID, uint TextureTarget, uint width, uint height, byte* data, int GLformat, bool bInvert)
        {
            var ___ret = __Internal.LoadTexturePixels(__Instance, TextureID, TextureTarget, width, height, data, GLformat, bInvert);
            return ___ret;
        }

        // DEBUG: bool WriteMemoryBuffer(const char *name, const char* data, int length)
        public bool WriteMemoryBuffer(string name, string data, int length)
        {
            var ___ret = __Internal.WriteMemoryBuffer(__Instance, name, data, length);
            return ___ret;
        }

        // DEBUG: int ReadMemoryBuffer(const char* name, char* data, int maxlength)
        public int ReadMemoryBuffer(string name, sbyte* data, int maxlength)
        {
            var ___ret = __Internal.ReadMemoryBuffer(__Instance, name, data, maxlength);
            return ___ret;
        }

        // DEBUG: bool CreateMemoryBuffer(const char *name, int length)
        public bool CreateMemoryBuffer(string name, int length)
        {
            var ___ret = __Internal.CreateMemoryBuffer(__Instance, name, length);
            return ___ret;
        }

        // DEBUG: bool DeleteMemoryBuffer()
        public bool DeleteMemoryBuffer()
        {
            var ___ret = __Internal.DeleteMemoryBuffer(__Instance);
            return ___ret;
        }

        // DEBUG: int GetMemoryBufferSize(const char *name)
        public int GetMemoryBufferSize(string name)
        {
            var ___ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return ___ret;
        }

        // DEBUG: bool CreateInterop(unsigned int width, unsigned int height, DWORD dwFormat, bool bReceive)
        protected bool CreateInterop(uint width, uint height, uint dwFormat, bool bReceive)
        {
            var ___ret = __Internal.CreateInterop(__Instance, width, height, dwFormat, bReceive);
            return ___ret;
        }

        // DEBUG: HRESULT LockInteropObject(HANDLE hDevice, HANDLE *hObject)
        protected int LockInteropObject(__IntPtr hDevice, __IntPtr* hObject)
        {
            var ___ret = __Internal.LockInteropObject(__Instance, hDevice, hObject);
            return ___ret;
        }

        // DEBUG: HRESULT UnlockInteropObject(HANDLE hDevice, HANDLE *hObject)
        protected int UnlockInteropObject(__IntPtr hDevice, __IntPtr* hObject)
        {
            var ___ret = __Internal.UnlockInteropObject(__Instance, hDevice, hObject);
            return ___ret;
        }

        // DEBUG: void CleanupGL()
        protected void CleanupGL()
        {
            __Internal.CleanupGL(__Instance);
        }

        // DEBUG: void CheckOpenGLTexture(GLuint &texID, GLenum GLformat, unsigned int width, unsigned int height)
        protected void CheckOpenGLTexture(ref uint texID, uint GLformat, uint width, uint height)
        {
            fixed (uint* __texID0 = &texID)
            {
                var __arg0 = __texID0;
                __Internal.CheckOpenGLTexture(__Instance, __arg0, GLformat, width, height);
            }
        }

        // DEBUG: bool WriteGLDXtexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0)
        protected bool WriteGLDXtexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.WriteGLDXtexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool ReadGLDXtexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0)
        protected bool ReadGLDXtexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadGLDXtexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool SetSharedTextureData(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert, GLuint HostFBO)
        protected bool SetSharedTextureData(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SetSharedTextureData(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool WriteGLDXpixels(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        protected bool WriteGLDXpixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.WriteGLDXpixels(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool ReadGLDXpixels(unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        protected bool ReadGLDXpixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadGLDXpixels(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool WriteDX11pixels(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false)
        protected bool WriteDX11pixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var ___ret = __Internal.WriteDX11pixels(__Instance, pixels, width, height, glFormat, bInvert);
            return ___ret;
        }

        // DEBUG: bool ReadDX11pixels(unsigned char * pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false)
        protected bool ReadDX11pixels(byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var ___ret = __Internal.ReadDX11pixels(__Instance, pixels, width, height, glFormat, bInvert);
            return ___ret;
        }

        // DEBUG: bool WritePixelData(const unsigned char* pixels, ID3D11Texture2D* pStagingTexture, unsigned int width, unsigned int height, GLenum glFormat, bool bInvert)
        protected bool WritePixelData(byte* pixels, global::SpoutDX.ID3D11Texture2D pStagingTexture, uint width, uint height, uint glFormat, bool bInvert)
        {
            var __arg1 = pStagingTexture is null ? __IntPtr.Zero : pStagingTexture.__Instance;
            var ___ret = __Internal.WritePixelData(__Instance, pixels, __arg1, width, height, glFormat, bInvert);
            return ___ret;
        }

        // DEBUG: bool ReadPixelData(ID3D11Texture2D* pStagingTexture, unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat, bool bInvert)
        protected bool ReadPixelData(global::SpoutDX.ID3D11Texture2D pStagingTexture, byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var __arg0 = pStagingTexture is null ? __IntPtr.Zero : pStagingTexture.__Instance;
            var ___ret = __Internal.ReadPixelData(__Instance, __arg0, pixels, width, height, glFormat, bInvert);
            return ___ret;
        }

        // DEBUG: bool CheckStagingTextures(unsigned int width, unsigned int height, int nTextures)
        protected bool CheckStagingTextures(uint width, uint height, int nTextures)
        {
            var ___ret = __Internal.CheckStagingTextures(__Instance, width, height, nTextures);
            return ___ret;
        }

        // DEBUG: bool ReadMemoryTexture(const char* sendername, GLuint TexID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = false, GLuint HostFBO = 0)
        protected bool ReadMemoryTexture(string sendername, uint TexID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadMemoryTexture(__Instance, sendername, TexID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool ReadMemoryPixels(const char* sendername, unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false)
        protected bool ReadMemoryPixels(string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var ___ret = __Internal.ReadMemoryPixels(__Instance, sendername, pixels, width, height, glFormat, bInvert);
            return ___ret;
        }

        // DEBUG: bool WriteMemoryPixels(const char *sendername, const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false)
        protected bool WriteMemoryPixels(string sendername, byte* pixels, uint width, uint height, uint glFormat, bool bInvert)
        {
            var ___ret = __Internal.WriteMemoryPixels(__Instance, sendername, pixels, width, height, glFormat, bInvert);
            return ___ret;
        }

        // DEBUG: bool OpenDeviceKey(const char* key, int maxsize, char* description, char* version)
        protected bool OpenDeviceKey(string key, int maxsize, sbyte* description, sbyte* version)
        {
            var ___ret = __Internal.OpenDeviceKey(__Instance, key, maxsize, description, version);
            return ___ret;
        }

        // DEBUG: void trim(char* s)
        protected void Trim(sbyte* s)
        {
            __Internal.Trim(__Instance, s);
        }

        // DEBUG: void DoDiagnostics(const char *error)
        protected void DoDiagnostics(string error)
        {
            __Internal.DoDiagnostics(__Instance, error);
        }

        // DEBUG: void PrintFBOstatus(GLenum status)
        protected void PrintFBOstatus(uint status)
        {
            __Internal.PrintFBOstatus(__Instance, status);
        }

        public global::SpoutDX.SpoutDirectX Spoutdx
        {
            get
            {
                return global::SpoutDX.SpoutDirectX.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutdx));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutdx = *(global::SpoutDX.SpoutDirectX.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.SpoutCopy Spoutcopy
        {
            get
            {
                return global::SpoutDX.SpoutCopy.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spoutcopy));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spoutcopy = *(global::SpoutDX.SpoutCopy.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.SpoutSenderNames Sendernames
        {
            get
            {
                return global::SpoutDX.SpoutSenderNames.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->sendernames));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->sendernames = *(global::SpoutDX.SpoutSenderNames.__Internal*) value.__Instance;
            }
        }

        public global::SpoutDX.SpoutFrameCount Frame
        {
            get
            {
                return global::SpoutDX.SpoutFrameCount.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->frame));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->frame = *(global::SpoutDX.SpoutFrameCount.__Internal*) value.__Instance;
            }
        }

        protected global::SpoutDX.SpoutSharedMemory Memoryshare
        {
            get
            {
                return global::SpoutDX.SpoutSharedMemory.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->memoryshare));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->memoryshare = *(global::SpoutDX.SpoutSharedMemory.__Internal*) value.__Instance;
            }
        }

        protected int MNBuffers
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBuffers;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBuffers = value;
            }
        }

        protected uint[] MPbo
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_pbo, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_pbo[i] = value[i];
                }
            }
        }

        protected int PboIndex
        {
            get
            {
                return ((__Internal*)__Instance)->PboIndex;
            }

            set
            {
                ((__Internal*)__Instance)->PboIndex = value;
            }
        }

        protected int NextPboIndex
        {
            get
            {
                return ((__Internal*)__Instance)->NextPboIndex;
            }

            set
            {
                ((__Internal*)__Instance)->NextPboIndex = value;
            }
        }

        protected uint[] MLoadpbo
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_loadpbo, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_loadpbo[i] = value[i];
                }
            }
        }

        protected int PboLoadIndex
        {
            get
            {
                return ((__Internal*)__Instance)->PboLoadIndex;
            }

            set
            {
                ((__Internal*)__Instance)->PboLoadIndex = value;
            }
        }

        protected int NextPboLoadIndex
        {
            get
            {
                return ((__Internal*)__Instance)->NextPboLoadIndex;
            }

            set
            {
                ((__Internal*)__Instance)->NextPboLoadIndex = value;
            }
        }

        protected global::SpoutDX.ID3D11Texture2D[] MPStaging
        {
            get
            {
                global::SpoutDX.ID3D11Texture2D[] __value = null;
                if (((__Internal*)__Instance)->m_pStaging != null)
                {
                    __value = new global::SpoutDX.ID3D11Texture2D[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::SpoutDX.ID3D11Texture2D.__CreateInstance((__IntPtr) ((__Internal*)__Instance)->m_pStaging[i]);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_pStaging[i] = (long) value[i].__Instance;
                }
            }
        }

        protected int MIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_Index;
            }

            set
            {
                ((__Internal*)__Instance)->m_Index = value;
            }
        }

        protected int MNextIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_NextIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_NextIndex = value;
            }
        }

        protected sbyte[] MSenderName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderName, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderName[i] = value[i];
                }
            }
        }

        protected sbyte[] MSenderNameSetup
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_SenderNameSetup, 256);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((__Internal*)__Instance)->m_SenderNameSetup[i] = value[i];
                }
            }
        }

        protected uint MWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_Width;
            }

            set
            {
                ((__Internal*)__Instance)->m_Width = value;
            }
        }

        protected uint MHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_Height;
            }

            set
            {
                ((__Internal*)__Instance)->m_Height = value;
            }
        }

        protected uint MFbo
        {
            get
            {
                return ((__Internal*)__Instance)->m_fbo;
            }

            set
            {
                ((__Internal*)__Instance)->m_fbo = value;
            }
        }

        protected uint MTexID
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexID;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexID = value;
            }
        }

        protected uint MTexWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexWidth;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexWidth = value;
            }
        }

        protected uint MTexHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexHeight;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexHeight = value;
            }
        }

        protected uint MTexFormat
        {
            get
            {
                return ((__Internal*)__Instance)->m_TexFormat;
            }

            set
            {
                ((__Internal*)__Instance)->m_TexFormat = value;
            }
        }

        protected uint MGlTexture
        {
            get
            {
                return ((__Internal*)__Instance)->m_glTexture;
            }

            set
            {
                ((__Internal*)__Instance)->m_glTexture = value;
            }
        }

        protected global::SpoutDX.ID3D11Texture2D MPSharedTexture
        {
            get
            {
                var __result0 = global::SpoutDX.ID3D11Texture2D.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSharedTexture, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSharedTexture = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        protected __IntPtr MDxShareHandle
        {
            get
            {
                return ((__Internal*)__Instance)->m_dxShareHandle;
            }

            set
            {
                ((__Internal*)__Instance)->m_dxShareHandle = (__IntPtr) value;
            }
        }

        protected uint MDwFormat
        {
            get
            {
                return ((__Internal*)__Instance)->m_dwFormat;
            }

            set
            {
                ((__Internal*)__Instance)->m_dwFormat = value;
            }
        }

        protected __IntPtr MHInteropDevice
        {
            get
            {
                return ((__Internal*)__Instance)->m_hInteropDevice;
            }

            set
            {
                ((__Internal*)__Instance)->m_hInteropDevice = (__IntPtr) value;
            }
        }

        protected __IntPtr MHInteropObject
        {
            get
            {
                return ((__Internal*)__Instance)->m_hInteropObject;
            }

            set
            {
                ((__Internal*)__Instance)->m_hInteropObject = (__IntPtr) value;
            }
        }

        protected bool MBInteropFailed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInteropFailed != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInteropFailed = (byte) (value ? 1 : 0);
            }
        }

        protected int MSpoutVersion
        {
            get
            {
                return ((__Internal*)__Instance)->m_SpoutVersion;
            }

            set
            {
                ((__Internal*)__Instance)->m_SpoutVersion = value;
            }
        }

        protected bool MBConnected
        {
            get
            {
                return ((__Internal*)__Instance)->m_bConnected != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bConnected = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBUpdated
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUpdated != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUpdated = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBInitialized
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInitialized != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInitialized = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBGLDXdone
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGLDXdone != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGLDXdone = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBAuto
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAuto != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAuto = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCPU
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCPU != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCPU = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBUseGLDX
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUseGLDX != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUseGLDX = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBTextureShare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTextureShare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTextureShare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCPUshare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCPUshare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCPUshare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBMemoryShare
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMemoryShare != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMemoryShare = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSenderCPU
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSenderCPU != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSenderCPU = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSenderGLDX
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSenderGLDX != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSenderGLDX = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelOpened
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelOpened != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelOpened = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSpoutPanelActive
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpoutPanelActive != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpoutPanelActive = (byte) (value ? 1 : 0);
            }
        }

        protected uint MCaps
        {
            get
            {
                return ((__Internal*)__Instance)->m_caps;
            }

            set
            {
                ((__Internal*)__Instance)->m_caps = value;
            }
        }

        protected bool MBGLDXavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGLDXavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGLDXavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBFBOavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFBOavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFBOavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBBLITavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bBLITavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bBLITavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBPBOavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPBOavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPBOavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBSWAPavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSWAPavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSWAPavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBBGRAavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bBGRAavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bBGRAavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCOPYavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCOPYavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCOPYavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBCONTEXTavailable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCONTEXTavailable != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCONTEXTavailable = (byte) (value ? 1 : 0);
            }
        }

        protected bool MBExtensionsLoaded
        {
            get
            {
                return ((__Internal*)__Instance)->m_bExtensionsLoaded != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bExtensionsLoaded = (byte) (value ? 1 : 0);
            }
        }

        public bool UnBindSharedTexture
        {
            get
            {
                var ___ret = __Internal.UnBindSharedTexture(__Instance);
                return ___ret;
            }
        }

        public uint SharedTextureID
        {
            get
            {
                var ___ret = __Internal.GetSharedTextureID(__Instance);
                return ___ret;
            }
        }

        public bool AutoShare
        {
            get
            {
                var ___ret = __Internal.GetAutoShare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAutoShare(__Instance, value);
            }
        }

        public bool CPUshare
        {
            get
            {
                var ___ret = __Internal.GetCPUshare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUshare(__Instance, value);
            }
        }

        public bool IsGLDXready
        {
            get
            {
                var ___ret = __Internal.IsGLDXready(__Instance);
                return ___ret;
            }
        }

        public bool BufferMode
        {
            get
            {
                var ___ret = __Internal.GetBufferMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBufferMode(__Instance, value);
            }
        }

        public int Buffers
        {
            get
            {
                var ___ret = __Internal.GetBuffers(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBuffers(__Instance, value);
            }
        }

        public int MaxSenders
        {
            get
            {
                var ___ret = __Internal.GetMaxSenders(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var ___ret = __Internal.GetDX9(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetDX9(__Instance, value);
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var ___ret = __Internal.GetMemoryShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMemoryShareMode(__Instance, value);
            }
        }

        public bool CPUmode
        {
            get
            {
                var ___ret = __Internal.GetCPUmode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUmode(__Instance, value);
            }
        }

        public int ShareMode
        {
            get
            {
                var ___ret = __Internal.GetShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetShareMode(__Instance, value);
            }
        }

        public int VerticalSync
        {
            get
            {
                var ___ret = __Internal.GetVerticalSync(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetVerticalSync(__Instance, value);
            }
        }

        public int SpoutVersion
        {
            get
            {
                var ___ret = __Internal.GetSpoutVersion(__Instance);
                return ___ret;
            }
        }

        public bool GLerror
        {
            get
            {
                var ___ret = __Internal.GLerror(__Instance);
                return ___ret;
            }
        }

        public bool IsSpoutInitialized
        {
            get
            {
                var ___ret = __Internal.IsSpoutInitialized(__Instance);
                return ___ret;
            }
        }

        public bool GLDXready
        {
            get
            {
                var ___ret = __Internal.GLDXready(__Instance);
                return ___ret;
            }
        }

        public global::SpoutDX.ID3D11Device DX11Device
        {
            get
            {
                var ___ret = __Internal.GetDX11Device(__Instance);
                var __result0 = global::SpoutDX.ID3D11Device.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        public global::SpoutDX.ID3D11DeviceContext DX11Context
        {
            get
            {
                var ___ret = __Internal.GetDX11Context(__Instance);
                var __result0 = global::SpoutDX.ID3D11DeviceContext.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        public bool CleanupInterop
        {
            get
            {
                var ___ret = __Internal.CleanupInterop(__Instance);
                return ___ret;
            }
        }

        public bool IsGLDXavailable
        {
            get
            {
                var ___ret = __Internal.IsGLDXavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsBLITavailable
        {
            get
            {
                var ___ret = __Internal.IsBLITavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsSWAPavailable
        {
            get
            {
                var ___ret = __Internal.IsSWAPavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsBGRAavailable
        {
            get
            {
                var ___ret = __Internal.IsBGRAavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsCOPYavailable
        {
            get
            {
                var ___ret = __Internal.IsCOPYavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsPBOavailable
        {
            get
            {
                var ___ret = __Internal.IsPBOavailable(__Instance);
                return ___ret;
            }
        }

        public bool IsCONTEXTavailable
        {
            get
            {
                var ___ret = __Internal.IsCONTEXTavailable(__Instance);
                return ___ret;
            }
        }

        public float GLversion
        {
            get
            {
                var ___ret = __Internal.GetGLversion(__Instance);
                return ___ret;
            }
        }

        public __IntPtr InteropDevice
        {
            get
            {
                var ___ret = __Internal.GetInteropDevice(__Instance);
                return ___ret;
            }
        }

        public __IntPtr InteropObject
        {
            get
            {
                var ___ret = __Internal.GetInteropObject(__Instance);
                return ___ret;
            }
        }

        public global::SpoutDX.ID3D11Texture2D DXsharedTexture
        {
            get
            {
                var ___ret = __Internal.GetDXsharedTexture(__Instance);
                var __result0 = global::SpoutDX.ID3D11Texture2D.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        #region Virtual table interop

        // virtual ~spoutGL()
        private static global::SpoutDX.Delegates.Action___IntPtr_int _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance, int delete)
        {
            var __target = global::SpoutDX.SpoutGL.__GetInstance(__instance);
            __target.Dispose(disposing: true, callNativeDtor: true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTablesDtorOnly[0][0] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 1, 0);
                            ManagedVTables[0][0] = Thunks[0];
                            VTables.Methods[0] = new Delegate[1];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    // DEBUG: class SPOUT_DLLEXP SpoutReceiver {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	SpoutReceiver();
    // DEBUG:     ~SpoutReceiver();
    // DEBUG: 
    // DEBUG: 	// Specify sender for connection
    // DEBUG: 	//   The application will not connect to any other  unless the user selects one
    // DEBUG: 	//   If that sender closes, the application will wait for the nominated sender to open 
    // DEBUG: 	//   If no name is specified, the receiver will connect to the active sender
    // DEBUG: 	void SetReceiverName(const char * sendername = nullptr);
    // DEBUG: 	// Get sender for connection
    // DEBUG: 	bool GetReceiverName(char* SenderName, int maxchars = 256);
    // DEBUG: 	// Close receiver and release resources ready to connect to another sender
    // DEBUG: 	void ReleaseReceiver();
    // DEBUG: 	// Receive shared texture
    // DEBUG: 	//   Connect to a sender and retrieve texture details ready for access
    // DEBUG: 	//	 (see BindSharedTexture and UnBindSharedTexture)
    // DEBUG: 	bool ReceiveTexture();
    // DEBUG: 	// Receive OpenGL texture
    // DEBUG: 	// 	 Connect to a sender and inform the application to update
    // DEBUG: 	//   the receiving texture if it has changed dimensions
    // DEBUG: 	//   For no change, copy the sender shared texture to the application texture
    // DEBUG: 	bool ReceiveTexture(GLuint TextureID, GLuint TextureTarget, bool bInvert = false, GLuint HostFbo = 0);
    // DEBUG: 	// Receive image pixels
    // DEBUG: 	//   Connect to a sender and inform the application to update
    // DEBUG: 	//   the receiving buffer if it has changed dimensions
    // DEBUG: 	//   For no change, copy the sender shared texture to the pixel buffer
    // DEBUG: 	bool ReceiveImage(unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFbo = 0);
    // DEBUG: 	// Query whether the sender has changed
    // DEBUG: 	//   Checked at every cycle before receiving data
    // DEBUG: 	bool IsUpdated();
    // DEBUG: 	// Query sender connection
    // DEBUG: 	//   If the sender closes, receiving functions return false,  
    // DEBUG: 	bool IsConnected();
    // DEBUG: 	// Query received frame status
    // DEBUG: 	//   The receiving texture or pixel buffer is only refreshed if the sender has produced a new frame  
    // DEBUG: 	//   This can be queried to process texture data only for new frames
    // DEBUG: 	bool IsFrameNew();
    // DEBUG: 	// Received sender name
    // DEBUG: 	const char * GetSenderName();
    // DEBUG: 	// Received sender width
    // DEBUG: 	unsigned int GetSenderWidth();
    // DEBUG: 	// Received sender height
    // DEBUG: 	unsigned int GetSenderHeight();
    // DEBUG: 	// Received sender DX11 texture format
    // DEBUG: 	DWORD GetSenderFormat();
    // DEBUG: 	// Received sender frame rate
    // DEBUG: 	double GetSenderFps();
    // DEBUG: 	// Received sender frame number
    // DEBUG: 	long GetSenderFrame();
    // DEBUG: 	// Received sender share handle
    // DEBUG: 	HANDLE GetSenderHandle();
    // DEBUG: 	// Received sender sharing method
    // DEBUG: 	bool GetSenderCPU();
    // DEBUG: 	// Received sender GL/DX hardware compatibility
    // DEBUG: 	bool GetSenderGLDX();
    // DEBUG: 	// Return a list of current senders
    // DEBUG: 	std::vector<std::string> GetSenderList();
    // DEBUG: 	// Open sender selection dialog
    // DEBUG: 	bool SelectSender(HWND hwnd = NULL);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Frame count
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Enable or disable frame counting globally
    // DEBUG: 	void SetFrameCount(bool bEnable);
    // DEBUG: 	// Disable frame counting specifically for this application
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Return frame count status
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps);
    // DEBUG: 	// Signal sync event 
    // DEBUG: 	void SetFrameSync(const char* SenderName);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0);
    // DEBUG: 	// Enable / disable frame sync
    // DEBUG: 	void EnableFrameSync(bool bSync = true);
    // DEBUG: 	// Check for frame sync option
    // DEBUG: 	bool IsFrameSyncEnabled();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Data sharing
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Read data
    // DEBUG: 	int ReadMemoryBuffer(const char* name, char* data, int maxlength);
    // DEBUG: 	// Get the size of a shared memory buffer
    // DEBUG: 	int GetMemoryBufferSize(const char* name);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL shared texture access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Bind OpenGL shared texture
    // DEBUG: 	bool BindSharedTexture();
    // DEBUG: 	// Un-bind OpenGL shared texture
    // DEBUG: 	bool UnBindSharedTexture();
    // DEBUG: 	// OpenGL shared texture ID
    // DEBUG: 	GLuint GetSharedTextureID();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Graphics compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user auto GPU/CPU share
    // DEBUG: 	bool GetAutoShare();
    // DEBUG: 	// Set application auto GPU/CPU share
    // DEBUG: 	void SetAutoShare(bool bAuto = true);
    // DEBUG: 	// Get user CPU share
    // DEBUG: 	bool GetCPUshare();
    // DEBUG: 	// Set application CPU share
    // DEBUG: 	// (re-test GL/DX compatibility if set to false)
    // DEBUG: 	void SetCPUshare(bool bCPU = true);
    // DEBUG: 	// OpenGL texture share compatibility
    // DEBUG: 	bool IsGLDXready();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Sender names
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Number of senders
    // DEBUG: 	int GetSenderCount();
    // DEBUG: 	// Sender item name
    // DEBUG: 	bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 	// Sender information
    // DEBUG: 	bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 	// Current active sender
    // DEBUG: 	bool GetActiveSender(char* sendername);
    // DEBUG: 	// Set sender as active
    // DEBUG: 	bool SetActiveSender(const char* sendername);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Adapter functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The number of graphics adapters in the system
    // DEBUG: 	int GetNumAdapters();
    // DEBUG: 	// Get adapter item name
    // DEBUG: 	bool GetAdapterName(int index, char *adaptername, int maxchars = 256);
    // DEBUG: 	// Current adapter name
    // DEBUG: 	char * AdapterName();
    // DEBUG: 	// Get current adapter index
    // DEBUG: 	int GetAdapter();
    // DEBUG: 	// Get the description and output display name of the current adapter
    // DEBUG: 	bool GetAdapterInfo(char* description, char* output, int maxchars);
    // DEBUG: 	// Get the description and output display name for a given adapter
    // DEBUG: 	bool GetAdapterInfo(int index, char* description, char* output, int maxchars);
    // DEBUG: 	// Windows 10 Vers 1803, build 17134 or later
    // DEBUG: #ifdef NTDDI_WIN10_RS4
    // DEBUG: 	// Get the Windows graphics preference for an application
    // DEBUG: 	int GetPerformancePreference(const char* path = nullptr);
    // DEBUG: 	// Set the Windows graphics preference for an application
    // DEBUG: 	bool SetPerformancePreference(int preference, const char* path = nullptr);
    // DEBUG: 	// Get the graphics adapter name for a Windows preference
    // DEBUG: 	bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars);
    // DEBUG: 	// Set graphics adapter index for a Windows preference
    // DEBUG: 	bool SetPreferredAdapter(int preference);
    // DEBUG: 	// Availability of Windows graphics preference
    // DEBUG: 	bool IsPreferenceAvailable();
    // DEBUG: 	// Is the path a valid application
    // DEBUG: 	bool IsApplicationPath(const char* path);
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// User settings recorded by "SpoutSettings"
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user buffering mode
    // DEBUG: 	bool GetBufferMode();
    // DEBUG: 	// Set application buffering mode
    // DEBUG: 	void SetBufferMode(bool bActive = true);
    // DEBUG: 	// Get user number of pixel buffers
    // DEBUG: 	int GetBuffers();
    // DEBUG: 	// Set application number of pixel buffers
    // DEBUG: 	void SetBuffers(int nBuffers);
    // DEBUG: 	// Get user Maximum senders allowed
    // DEBUG: 	int GetMaxSenders();
    // DEBUG: 	// Set user Maximum senders allowed
    // DEBUG: 	void SetMaxSenders(int maxSenders);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user DX9 mode
    // DEBUG: 	bool GetDX9();
    // DEBUG: 	// Set user DX9 mode
    // DEBUG: 	bool SetDX9(bool bDX9 = true);
    // DEBUG: 	// Get user memory share mode
    // DEBUG: 	bool GetMemoryShareMode();
    // DEBUG: 	// Set user memory share mode
    // DEBUG: 	bool SetMemoryShareMode(bool bMem = true);
    // DEBUG: 	// Get user CPU mode
    // DEBUG: 	bool GetCPUmode();
    // DEBUG: 	// Set user CPU mode
    // DEBUG: 	bool SetCPUmode(bool bCPU);
    // DEBUG: 	// Get user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	int GetShareMode();
    // DEBUG: 	// Set user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	void SetShareMode(int mode);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Information
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The path of the host that produced the sender
    // DEBUG: 	bool GetHostPath(const char *sendername, char *hostpath, int maxchars);
    // DEBUG: 	// Vertical sync status
    // DEBUG: 	int GetVerticalSync();
    // DEBUG: 	// Lock to monitor vertical sync
    // DEBUG: 	bool SetVerticalSync(bool bSync = true);
    // DEBUG: 	// Get Spout version
    // DEBUG: 	int GetSpoutVersion();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL utilities
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create an OpenGL window and context for situations where there is none.
    // DEBUG: 	//   Not used if applications already have an OpenGL context.
    // DEBUG: 	//   Always call CloseOpenGL afterwards.
    // DEBUG: 	bool CreateOpenGL();
    // DEBUG: 	// Close OpenGL window
    // DEBUG: 	bool CloseOpenGL();
    // DEBUG: 	// Copy OpenGL texture with optional invert
    // DEBUG: 	//   Textures must be the same size
    // DEBUG: 	bool CopyTexture(GLuint SourceID, GLuint SourceTarget,
    // DEBUG: 		GLuint DestID, GLuint DestTarget,
    // DEBUG: 		unsigned int width, unsigned int height,
    // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Copy OpenGL texture data to a pixel buffer
    // DEBUG: 	bool ReadTextureData(GLuint SourceID, GLuint SourceTarget,
    // DEBUG: 		void* data, unsigned int width, unsigned int height, unsigned int rowpitch,
    // DEBUG: 		GLenum dataformat, GLenum datatype, bool bInvert = false, GLuint HostFBO = false);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Formats
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get sender DX11 shared texture format
    // DEBUG: 	DXGI_FORMAT GetDX11format();
    // DEBUG: 	// Set sender DX11 shared texture format
    // DEBUG: 	void SetDX11format(DXGI_FORMAT textureformat);
    // DEBUG: 	// Return OpenGL compatible DX11 format
    // DEBUG: 	DXGI_FORMAT DX11format(GLint glformat);
    // DEBUG: 	// Return DX11 compatible OpenGL format
    // DEBUG: 	GLint GLDXformat(DXGI_FORMAT textureformat = DXGI_FORMAT_UNKNOWN);
    // DEBUG: 	// Return OpenGL texture internal format
    // DEBUG: 	GLint GLformat(GLuint TextureID, GLuint TextureTarget);
    // DEBUG: 	// Return OpenGL texture format description
    // DEBUG: 	std::string GLformatName(GLint glformat = 0);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create receiver connection
    // DEBUG: 	bool CreateReceiver(char* Sendername, unsigned int &width, unsigned int &height);
    // DEBUG: 	// Check receiver connection
    // DEBUG: 	bool CheckReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool &bConnected);
    // DEBUG: 	// Receive OpenGL texture
    // DEBUG: 	bool ReceiveTexture(char* Sendername, unsigned int &width, unsigned int &height, GLuint TextureID = 0, GLuint TextureTarget = 0, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Receive image pixels
    // DEBUG: 	bool ReceiveImage(char* Sendername, unsigned int &width, unsigned int &height, unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Open dialog for the user to select a sender
    // DEBUG: 	//   Optional message argument
    // DEBUG: 	bool SelectSenderPanel(const char* message = nullptr);
    // DEBUG: 	// Receiver detect sender selection
    // DEBUG: 	bool CheckSenderPanel(char *sendername, int maxchars = 256);
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 	// Legacy OpenGL Draw function
    // DEBUG: 	// See _SpoutCommon.h_ #define legacyOpenGL
    // DEBUG: #ifdef legacyOpenGL
    // DEBUG: 	// Render the shared texture
    // DEBUG: 	bool DrawSharedTexture(float max_x = 1.0, float max_y = 1.0, float aspect = 1.0, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	// For access to all functions
    // DEBUG: 	Spout spout;
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutReceiver : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 2000)]
        public partial struct __Internal
        {
            internal global::SpoutDX.Spout.__Internal spout;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutReceiver@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutReceiver@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1SpoutReceiver@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetReceiverName@SpoutReceiver@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReceiverName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetReceiverName@SpoutReceiver@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetReceiverName(__IntPtr __instance, sbyte* SenderName, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseReceiver@SpoutReceiver@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseReceiver(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@SpoutReceiver@@QEAA_NII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@SpoutReceiver@@QEAA_NPEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, byte* pixels, uint glFormat, bool bInvert, uint HostFbo);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@SpoutReceiver@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@SpoutReceiver@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@SpoutReceiver@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameSync@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadMemoryBuffer@SpoutReceiver@@QEAAHPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, sbyte* data, int maxlength);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryBufferSize@SpoutReceiver@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?BindSharedTexture@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@SpoutReceiver@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@SpoutReceiver@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@SpoutReceiver@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@SpoutReceiver@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@SpoutReceiver@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutReceiver@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutReceiver@@QEAA_NHPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, int index, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPerformancePreference@SpoutReceiver@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPerformancePreference(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPerformancePreference@SpoutReceiver@@QEAA_NHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPerformancePreference(__IntPtr __instance, int preference, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPreferredAdapterName@SpoutReceiver@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPreferredAdapterName(__IntPtr __instance, int preference, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPreferredAdapter@SpoutReceiver@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPreferredAdapter(__IntPtr __instance, int preference);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsApplicationPath@SpoutReceiver@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsApplicationPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX9@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX9(__IntPtr __instance, bool bDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMemoryShareMode@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetMemoryShareMode(__IntPtr __instance, bool bMem);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUmode@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetCPUmode(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHostPath@SpoutReceiver@@QEAA_NPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* hostpath, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetVerticalSync@SpoutReceiver@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetVerticalSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateOpenGL@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseOpenGL@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyTexture@SpoutReceiver@@QEAA_NIIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyTexture(__IntPtr __instance, uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadTextureData@SpoutReceiver@@QEAA_NIIPEAXIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTextureData(__IntPtr __instance, uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformat@SpoutReceiver@@QEAAHII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GLformat(__IntPtr __instance, uint TextureID, uint TextureTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformatName@SpoutReceiver@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GLformatName(__IntPtr __instance, __IntPtr @return, int glformat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateReceiver@SpoutReceiver@@QEAA_NPEADAEAI1@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckReceiver@SpoutReceiver@@QEAA_NPEADAEAI1AEA_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckReceiver(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, bool* bConnected);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveTexture@SpoutReceiver@@QEAA_NPEADAEAI1II_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveTexture(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReceiveImage@SpoutReceiver@@QEAA_NPEADAEAI1PEAEI_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReceiveImage(__IntPtr __instance, sbyte* Sendername, uint* width, uint* height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SelectSenderPanel@SpoutReceiver@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SelectSenderPanel(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string message);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CheckSenderPanel@SpoutReceiver@@QEAA_NPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckSenderPanel(__IntPtr __instance, sbyte* sendername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsUpdated@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUpdated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsConnected@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameNew@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameNew(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderName@SpoutReceiver@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderWidth@SpoutReceiver@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHeight@SpoutReceiver@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFormat@SpoutReceiver@@QEAAKXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSenderFormat(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFps@SpoutReceiver@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetSenderFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderFrame@SpoutReceiver@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderHandle@SpoutReceiver@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSenderHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCPU@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderGLDX@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameSyncEnabled@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameSyncEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnBindSharedTexture@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnBindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureID@SpoutReceiver@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSharedTextureID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAutoShare@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoShare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAutoShare@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoShare(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUshare@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUshare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUshare@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCPUshare(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXready@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AdapterName@SpoutReceiver@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* AdapterName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPreferenceAvailable@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreferenceAvailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBufferMode@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBufferMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBufferMode@SpoutReceiver@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBufferMode(__IntPtr __instance, bool bActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBuffers@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBuffers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBuffers@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBuffers(__IntPtr __instance, int nBuffers);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX9@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryShareMode@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUmode@SpoutReceiver@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUmode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetShareMode@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetShareMode@SpoutReceiver@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetShareMode(__IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetVerticalSync@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetVerticalSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutVersion@SpoutReceiver@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpoutVersion(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutReceiver>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutReceiver>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SpoutReceiver managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SpoutReceiver>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SpoutReceiver managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutReceiver __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutReceiver(native.ToPointer(), skipVTables);
        }

        internal static SpoutReceiver __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutReceiver)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutReceiver __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutReceiver(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::SpoutDX.SpoutReceiver.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private SpoutReceiver(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutReceiver(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: SpoutReceiver()
        public SpoutReceiver()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutReceiver.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        // DEBUG: SpoutReceiver
        public SpoutReceiver(global::SpoutDX.SpoutReceiver _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutReceiver.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        ~SpoutReceiver()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void SetReceiverName(const char * sendername = nullptr)
        public void SetReceiverName(string sendername)
        {
            __Internal.SetReceiverName(__Instance, sendername);
        }

        // DEBUG: bool GetReceiverName(char* SenderName, int maxchars = 256)
        public bool GetReceiverName(sbyte* SenderName, int maxchars)
        {
            var ___ret = __Internal.GetReceiverName(__Instance, SenderName, maxchars);
            return ___ret;
        }

        // DEBUG: void ReleaseReceiver()
        public void ReleaseReceiver()
        {
            __Internal.ReleaseReceiver(__Instance);
        }

        // DEBUG: bool ReceiveTexture()
        public bool ReceiveTexture()
        {
            var ___ret = __Internal.ReceiveTexture(__Instance);
            return ___ret;
        }

        // DEBUG: bool ReceiveTexture(GLuint TextureID, GLuint TextureTarget, bool bInvert = false, GLuint HostFbo = 0)
        public bool ReceiveTexture(uint TextureID, uint TextureTarget, bool bInvert, uint HostFbo)
        {
            var ___ret = __Internal.ReceiveTexture(__Instance, TextureID, TextureTarget, bInvert, HostFbo);
            return ___ret;
        }

        // DEBUG: bool ReceiveImage(unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFbo = 0)
        public bool ReceiveImage(byte* pixels, uint glFormat, bool bInvert, uint HostFbo)
        {
            var ___ret = __Internal.ReceiveImage(__Instance, pixels, glFormat, bInvert, HostFbo);
            return ___ret;
        }

        // DEBUG: void SetFrameCount(bool bEnable)
        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void HoldFps(int fps)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void SetFrameSync(const char* SenderName)
        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        // DEBUG: bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var ___ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return ___ret;
        }

        // DEBUG: void EnableFrameSync(bool bSync = true)
        public void EnableFrameSync(bool bSync)
        {
            __Internal.EnableFrameSync(__Instance, bSync);
        }

        // DEBUG: int ReadMemoryBuffer(const char* name, char* data, int maxlength)
        public int ReadMemoryBuffer(string name, sbyte* data, int maxlength)
        {
            var ___ret = __Internal.ReadMemoryBuffer(__Instance, name, data, maxlength);
            return ___ret;
        }

        // DEBUG: int GetMemoryBufferSize(const char* name)
        public int GetMemoryBufferSize(string name)
        {
            var ___ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return ___ret;
        }

        // DEBUG: bool BindSharedTexture()
        public bool BindSharedTexture()
        {
            var ___ret = __Internal.BindSharedTexture(__Instance);
            return ___ret;
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var ___ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return ___ret;
        }

        // DEBUG: bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool GetActiveSender(char* sendername)
        public bool GetActiveSender(sbyte* sendername)
        {
            var ___ret = __Internal.GetActiveSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool SetActiveSender(const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var ___ret = __Internal.SetActiveSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars = 256)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: bool GetAdapterInfo(char* description, char* output, int maxchars)
        public bool GetAdapterInfo(sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, description, output, maxchars);
            return ___ret;
        }

        // DEBUG: bool GetAdapterInfo(int index, char* description, char* output, int maxchars)
        public bool GetAdapterInfo(int index, sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, index, description, output, maxchars);
            return ___ret;
        }

        // DEBUG: int GetPerformancePreference(const char* path = nullptr)
        public int GetPerformancePreference(string path)
        {
            var ___ret = __Internal.GetPerformancePreference(__Instance, path);
            return ___ret;
        }

        // DEBUG: bool SetPerformancePreference(int preference, const char* path = nullptr)
        public bool SetPerformancePreference(int preference, string path)
        {
            var ___ret = __Internal.SetPerformancePreference(__Instance, preference, path);
            return ___ret;
        }

        // DEBUG: bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars)
        public bool GetPreferredAdapterName(int preference, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetPreferredAdapterName(__Instance, preference, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: bool SetPreferredAdapter(int preference)
        public bool SetPreferredAdapter(int preference)
        {
            var ___ret = __Internal.SetPreferredAdapter(__Instance, preference);
            return ___ret;
        }

        // DEBUG: bool IsApplicationPath(const char* path)
        public bool IsApplicationPath(string path)
        {
            var ___ret = __Internal.IsApplicationPath(__Instance, path);
            return ___ret;
        }

        // DEBUG: bool SetDX9(bool bDX9 = true)
        public bool SetDX9(bool bDX9)
        {
            var ___ret = __Internal.SetDX9(__Instance, bDX9);
            return ___ret;
        }

        // DEBUG: bool SetMemoryShareMode(bool bMem = true)
        public bool SetMemoryShareMode(bool bMem)
        {
            var ___ret = __Internal.SetMemoryShareMode(__Instance, bMem);
            return ___ret;
        }

        // DEBUG: bool SetCPUmode(bool bCPU)
        public bool SetCPUmode(bool bCPU)
        {
            var ___ret = __Internal.SetCPUmode(__Instance, bCPU);
            return ___ret;
        }

        // DEBUG: bool GetHostPath(const char *sendername, char *hostpath, int maxchars)
        public bool GetHostPath(string sendername, sbyte* hostpath, int maxchars)
        {
            var ___ret = __Internal.GetHostPath(__Instance, sendername, hostpath, maxchars);
            return ___ret;
        }

        // DEBUG: bool SetVerticalSync(bool bSync = true)
        public bool SetVerticalSync(bool bSync)
        {
            var ___ret = __Internal.SetVerticalSync(__Instance, bSync);
            return ___ret;
        }

        // DEBUG: bool CreateOpenGL()
        public bool CreateOpenGL()
        {
            var ___ret = __Internal.CreateOpenGL(__Instance);
            return ___ret;
        }

        // DEBUG: bool CloseOpenGL()
        public bool CloseOpenGL()
        {
            var ___ret = __Internal.CloseOpenGL(__Instance);
            return ___ret;
        }

        // DEBUG: bool CopyTexture(GLuint SourceID, GLuint SourceTarget,
        // DEBUG: 		GLuint DestID, GLuint DestTarget,
        // DEBUG: 		unsigned int width, unsigned int height,
        // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0)
        public bool CopyTexture(uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.CopyTexture(__Instance, SourceID, SourceTarget, DestID, DestTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool ReadTextureData(GLuint SourceID, GLuint SourceTarget,
        // DEBUG: 		void* data, unsigned int width, unsigned int height, unsigned int rowpitch,
        // DEBUG: 		GLenum dataformat, GLenum datatype, bool bInvert = false, GLuint HostFBO = false)
        public bool ReadTextureData(uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadTextureData(__Instance, SourceID, SourceTarget, data, width, height, rowpitch, dataformat, datatype, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: GLint GLformat(GLuint TextureID, GLuint TextureTarget)
        public int GLformat(uint TextureID, uint TextureTarget)
        {
            var ___ret = __Internal.GLformat(__Instance, TextureID, TextureTarget);
            return ___ret;
        }

        // DEBUG: std::string GLformatName(GLint glformat = 0)
        public string GLformatName(int glformat)
        {
            var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.GLformatName(__Instance, new IntPtr(&___ret), glformat);
            var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
            var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
            __basicStringRet0.Dispose();
            return __retString0;
        }

        // DEBUG: bool CreateReceiver(char* Sendername, unsigned int &width, unsigned int &height)
        public bool CreateReceiver(sbyte* Sendername, ref uint width, ref uint height)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.CreateReceiver(__Instance, Sendername, __arg1, __arg2);
                    return ___ret;
                }
            }
        }

        // DEBUG: bool CheckReceiver(char* Sendername, unsigned int &width, unsigned int &height, bool &bConnected)
        public bool CheckReceiver(sbyte* Sendername, ref uint width, ref uint height, ref bool bConnected)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (bool* __bConnected3 = &bConnected)
                    {
                        var __arg3 = __bConnected3;
                        var ___ret = __Internal.CheckReceiver(__Instance, Sendername, __arg1, __arg2, __arg3);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool ReceiveTexture(char* Sendername, unsigned int &width, unsigned int &height, GLuint TextureID = 0, GLuint TextureTarget = 0, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReceiveTexture(sbyte* Sendername, ref uint width, ref uint height, uint TextureID, uint TextureTarget, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.ReceiveTexture(__Instance, Sendername, __arg1, __arg2, TextureID, TextureTarget, bInvert, HostFBO);
                    return ___ret;
                }
            }
        }

        // DEBUG: bool ReceiveImage(char* Sendername, unsigned int &width, unsigned int &height, unsigned char* pixels, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReceiveImage(sbyte* Sendername, ref uint width, ref uint height, byte* pixels, uint glFormat, bool bInvert, uint HostFBO)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    var ___ret = __Internal.ReceiveImage(__Instance, Sendername, __arg1, __arg2, pixels, glFormat, bInvert, HostFBO);
                    return ___ret;
                }
            }
        }

        // DEBUG: bool SelectSenderPanel(const char* message = nullptr)
        public bool SelectSenderPanel(string message)
        {
            var ___ret = __Internal.SelectSenderPanel(__Instance, message);
            return ___ret;
        }

        // DEBUG: bool CheckSenderPanel(char *sendername, int maxchars = 256)
        public bool CheckSenderPanel(sbyte* sendername, int maxchars)
        {
            var ___ret = __Internal.CheckSenderPanel(__Instance, sendername, maxchars);
            return ___ret;
        }

        public global::SpoutDX.Spout Spout
        {
            get
            {
                return global::SpoutDX.Spout.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spout));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spout = *(global::SpoutDX.Spout.__Internal*) value.__Instance;
            }
        }

        public bool IsUpdated
        {
            get
            {
                var ___ret = __Internal.IsUpdated(__Instance);
                return ___ret;
            }
        }

        public bool IsConnected
        {
            get
            {
                var ___ret = __Internal.IsConnected(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameNew
        {
            get
            {
                var ___ret = __Internal.IsFrameNew(__Instance);
                return ___ret;
            }
        }

        public string SenderName
        {
            get
            {
                var ___ret = __Internal.GetSenderName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public uint SenderWidth
        {
            get
            {
                var ___ret = __Internal.GetSenderWidth(__Instance);
                return ___ret;
            }
        }

        public uint SenderHeight
        {
            get
            {
                var ___ret = __Internal.GetSenderHeight(__Instance);
                return ___ret;
            }
        }

        public uint SenderFormat
        {
            get
            {
                var ___ret = __Internal.GetSenderFormat(__Instance);
                return ___ret;
            }
        }

        public double SenderFps
        {
            get
            {
                var ___ret = __Internal.GetSenderFps(__Instance);
                return ___ret;
            }
        }

        public int SenderFrame
        {
            get
            {
                var ___ret = __Internal.GetSenderFrame(__Instance);
                return ___ret;
            }
        }

        public __IntPtr SenderHandle
        {
            get
            {
                var ___ret = __Internal.GetSenderHandle(__Instance);
                return ___ret;
            }
        }

        public bool SenderCPU
        {
            get
            {
                var ___ret = __Internal.GetSenderCPU(__Instance);
                return ___ret;
            }
        }

        public bool SenderGLDX
        {
            get
            {
                var ___ret = __Internal.GetSenderGLDX(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameCountEnabled(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameSyncEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameSyncEnabled(__Instance);
                return ___ret;
            }
        }

        public bool UnBindSharedTexture
        {
            get
            {
                var ___ret = __Internal.UnBindSharedTexture(__Instance);
                return ___ret;
            }
        }

        public uint SharedTextureID
        {
            get
            {
                var ___ret = __Internal.GetSharedTextureID(__Instance);
                return ___ret;
            }
        }

        public bool AutoShare
        {
            get
            {
                var ___ret = __Internal.GetAutoShare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAutoShare(__Instance, value);
            }
        }

        public bool CPUshare
        {
            get
            {
                var ___ret = __Internal.GetCPUshare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUshare(__Instance, value);
            }
        }

        public bool IsGLDXready
        {
            get
            {
                var ___ret = __Internal.IsGLDXready(__Instance);
                return ___ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var ___ret = __Internal.GetSenderCount(__Instance);
                return ___ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var ___ret = __Internal.GetNumAdapters(__Instance);
                return ___ret;
            }
        }

        public sbyte* AdapterName
        {
            get
            {
                var ___ret = __Internal.AdapterName(__Instance);
                return ___ret;
            }
        }

        public int Adapter
        {
            get
            {
                var ___ret = __Internal.GetAdapter(__Instance);
                return ___ret;
            }
        }

        public bool IsPreferenceAvailable
        {
            get
            {
                var ___ret = __Internal.IsPreferenceAvailable(__Instance);
                return ___ret;
            }
        }

        public bool BufferMode
        {
            get
            {
                var ___ret = __Internal.GetBufferMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBufferMode(__Instance, value);
            }
        }

        public int Buffers
        {
            get
            {
                var ___ret = __Internal.GetBuffers(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBuffers(__Instance, value);
            }
        }

        public int MaxSenders
        {
            get
            {
                var ___ret = __Internal.GetMaxSenders(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var ___ret = __Internal.GetDX9(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetDX9(__Instance, value);
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var ___ret = __Internal.GetMemoryShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMemoryShareMode(__Instance, value);
            }
        }

        public bool CPUmode
        {
            get
            {
                var ___ret = __Internal.GetCPUmode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUmode(__Instance, value);
            }
        }

        public int ShareMode
        {
            get
            {
                var ___ret = __Internal.GetShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetShareMode(__Instance, value);
            }
        }

        public int VerticalSync
        {
            get
            {
                var ___ret = __Internal.GetVerticalSync(__Instance);
                return ___ret;
            }
        }

        public int SpoutVersion
        {
            get
            {
                var ___ret = __Internal.GetSpoutVersion(__Instance);
                return ___ret;
            }
        }
    }

    // DEBUG: class SPOUT_DLLEXP SpoutSender {
    // DEBUG: 
    // DEBUG: 	public:
    // DEBUG: 
    // DEBUG: 	SpoutSender();
    // DEBUG:     ~SpoutSender();
    // DEBUG: 
    // DEBUG: 	// Set name for sender creation
    // DEBUG: 	//   If no name is specified, the executable name is used.  
    // DEBUG: 	void SetSenderName(const char* sendername = nullptr);
    // DEBUG: 	// Set the sender DX11 shared texture format
    // DEBUG: 	void SetSenderFormat(DWORD dwFormat);
    // DEBUG: 	// Close sender and free resources
    // DEBUG: 	//   A sender is created or updated by all sending functions
    // DEBUG: 	void ReleaseSender();
    // DEBUG: 
    // DEBUG: 	// Send OpenGL framebuffer
    // DEBUG: 	//   The fbo must be bound for read.
    // DEBUG: 	//   The sending texture can be larger than the size that the sender is set up for
    // DEBUG: 	//   For example, if the application is using only a portion of the allocated texture space,  
    // DEBUG: 	//   such as for Freeframe plugins. (The 2.006 equivalent is DrawToSharedTexture)
    // DEBUG: 	//   To send the default OpenGL framebuffer, specify FboID = 0.
    // DEBUG: 	//   If width and height are also 0, the function determines the viewport size.
    // DEBUG: 	bool SendFbo(GLuint FboID, unsigned int width, unsigned int height, bool bInvert = true);
    // DEBUG: 	// Send OpenGL texture
    // DEBUG: 	bool SendTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0);
    // DEBUG: 	// Send image pixels
    // DEBUG: 	bool SendImage(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Sender status
    // DEBUG: 	bool IsInitialized();
    // DEBUG: 	// Sender name
    // DEBUG: 	const char * GetName();
    // DEBUG: 	// Sender width
    // DEBUG: 	unsigned int GetWidth();
    // DEBUG: 	// Sender height
    // DEBUG: 	unsigned int GetHeight();
    // DEBUG: 	// Sender frame rate
    // DEBUG: 	double GetFps();
    // DEBUG: 	// Sender frame number
    // DEBUG: 	long GetFrame();
    // DEBUG: 	// Sender share handle
    // DEBUG: 	HANDLE GetHandle();
    // DEBUG: 	// Sender sharing method
    // DEBUG: 	bool GetCPU();
    // DEBUG: 	// Sender GL/DX hardware compatibility
    // DEBUG: 	bool GetGLDX();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Frame count
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Enable or disable frame counting globally
    // DEBUG: 	void SetFrameCount(bool bEnable);
    // DEBUG: 	// Disable frame counting specifically for this application
    // DEBUG: 	void DisableFrameCount();
    // DEBUG: 	// Return frame count status
    // DEBUG: 	bool IsFrameCountEnabled();
    // DEBUG: 	// Frame rate control
    // DEBUG: 	void HoldFps(int fps);
    // DEBUG: 	// Signal sync event 
    // DEBUG: 	void SetFrameSync(const char* SenderName);
    // DEBUG: 	// Wait or test for a sync event
    // DEBUG: 	bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0);
    // DEBUG: 	// Enable / disable frame sync
    // DEBUG: 	void EnableFrameSync(bool bSync = true);
    // DEBUG: 	// Check for frame sync option
    // DEBUG: 	bool IsFrameSyncEnabled();
    // DEBUG: 
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Data sharing
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Write data
    // DEBUG: 	bool WriteMemoryBuffer(const char *name, const char* data, int length);
    // DEBUG: 	// Create a shared memory buffer
    // DEBUG: 	bool CreateMemoryBuffer(const char *name, int length);
    // DEBUG: 	// Delete a shared memory buffer
    // DEBUG: 	bool DeleteMemoryBuffer();
    // DEBUG: 	// Get the size of a shared memory buffer
    // DEBUG: 	int GetMemoryBufferSize(const char* name);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL shared texture access
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Bind OpenGL shared texture
    // DEBUG: 	bool BindSharedTexture();
    // DEBUG: 	// Un-bind OpenGL shared texture
    // DEBUG: 	bool UnBindSharedTexture();
    // DEBUG: 	// OpenGL shared texture ID
    // DEBUG: 	GLuint GetSharedTextureID();
    // DEBUG: 	
    // DEBUG: 	//
    // DEBUG: 	// Graphics compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user Auto GPU/CPU share
    // DEBUG: 	bool GetAutoShare();
    // DEBUG: 	// Set application Auto GPU/CPU share
    // DEBUG: 	void SetAutoShare(bool bAuto = true);
    // DEBUG: 	// Get user CPU share
    // DEBUG: 	bool GetCPUshare();
    // DEBUG: 	// Set application CPU share
    // DEBUG: 	// (re-test GL/DX compatibility if set to false)
    // DEBUG: 	void SetCPUshare(bool bCPU = true);
    // DEBUG: 
    // DEBUG: 	// OpenGL texture share compatibility
    // DEBUG: 	bool IsGLDXready();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Sender names
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Number of senders
    // DEBUG: 	int GetSenderCount();
    // DEBUG: 	// Sender item name
    // DEBUG: 	bool GetSender(int index, char* sendername, int MaxSize = 256);
    // DEBUG: 	// Sender information
    // DEBUG: 	bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat);
    // DEBUG: 	// Current active sender
    // DEBUG: 	bool GetActiveSender(char* sendername);
    // DEBUG: 	// Set sender as active
    // DEBUG: 	bool SetActiveSender(const char* sendername);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Adapter functions
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The number of graphics adapters in the system
    // DEBUG: 	int GetNumAdapters();
    // DEBUG: 	// Get adapter item name
    // DEBUG: 	bool GetAdapterName(int index, char *adaptername, int maxchars = 256);
    // DEBUG: 	// Current adapter name
    // DEBUG: 	char * AdapterName();
    // DEBUG: 	// Get current adapter index
    // DEBUG: 	int GetAdapter();
    // DEBUG: 	// Get the description and output display name of the current adapter
    // DEBUG: 	bool GetAdapterInfo(char* description, char* output, int maxchars);
    // DEBUG: 	// Get the description and output display name for a given adapter
    // DEBUG: 	bool GetAdapterInfo(int index, char* description, char* output, int maxchars);
    // DEBUG: // Windows 10 Vers 1803, build 17134 or later
    // DEBUG: #ifdef NTDDI_WIN10_RS4
    // DEBUG: 	// Get the Windows graphics preference for an application
    // DEBUG: 	int GetPerformancePreference(const char* path = nullptr);
    // DEBUG: 	// Set the Windows graphics preference for an application
    // DEBUG: 	bool SetPerformancePreference(int preference, const char* path = nullptr);
    // DEBUG: 	// Get the graphics adapter name for a Windows preference
    // DEBUG: 	bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars);
    // DEBUG: 	// Set graphics adapter index for a Windows preference
    // DEBUG: 	bool SetPreferredAdapter(int preference);
    // DEBUG: 	// Availability of Windows graphics preference
    // DEBUG: 	bool IsPreferenceAvailable();
    // DEBUG: 	// Is the path a valid application
    // DEBUG: 	bool IsApplicationPath(const char* path);
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// User settings recorded in the registry by "SpoutSettings"
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user buffering mode
    // DEBUG: 	bool GetBufferMode();
    // DEBUG: 	// Set application buffering mode
    // DEBUG: 	void SetBufferMode(bool bActive = true);
    // DEBUG: 	// Get user number of pixel buffers
    // DEBUG: 	int GetBuffers();
    // DEBUG: 	// Set application number of pixel buffers
    // DEBUG: 	void SetBuffers(int nBuffers);
    // DEBUG: 	// Get user Maximum senders allowed
    // DEBUG: 	int GetMaxSenders();
    // DEBUG: 	// Set user Maximum senders allowed
    // DEBUG: 	void SetMaxSenders(int maxSenders);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get user DX9 mode
    // DEBUG: 	bool GetDX9();
    // DEBUG: 	// Set user DX9 mode
    // DEBUG: 	bool SetDX9(bool bDX9 = true);
    // DEBUG: 	// Get user memory share mode
    // DEBUG: 	bool GetMemoryShareMode();
    // DEBUG: 	// Set user memory share mode
    // DEBUG: 	bool SetMemoryShareMode(bool bMem = true);
    // DEBUG: 	// Get user CPU mode
    // DEBUG: 	bool GetCPUmode();
    // DEBUG: 	// Set user CPU mode
    // DEBUG: 	bool SetCPUmode(bool bCPU);
    // DEBUG: 	// Get user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	int GetShareMode();
    // DEBUG: 	// Set user share mode
    // DEBUG: 	//  0 - texture, 1 - memory, 2 - CPU
    // DEBUG: 	void SetShareMode(int mode);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Information
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// The path of the host that produced the sender
    // DEBUG: 	bool GetHostPath(const char *sendername, char *hostpath, int maxchars);
    // DEBUG: 	// Vertical sync status
    // DEBUG: 	int  GetVerticalSync();
    // DEBUG: 	// Lock to monitor vertical sync
    // DEBUG: 	bool SetVerticalSync(int interval = 1);
    // DEBUG: 	// Get Spout version
    // DEBUG: 	int GetSpoutVersion();
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// OpenGL utilities
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create an OpenGL window and context for situations where there is none.
    // DEBUG: 	//   Not used if applications already have an OpenGL context.
    // DEBUG: 	//   Always call CloseOpenGL afterwards.
    // DEBUG: 	bool CreateOpenGL();
    // DEBUG: 	// Close OpenGL window
    // DEBUG: 	bool CloseOpenGL();
    // DEBUG: 	// Copy OpenGL texture with optional invert
    // DEBUG: 	//   Textures must be the same size
    // DEBUG: 	bool CopyTexture(GLuint SourceID, GLuint SourceTarget,
    // DEBUG: 		GLuint DestID, GLuint DestTarget,
    // DEBUG: 		unsigned int width, unsigned int height,
    // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 	// Copy OpenGL texture data to a pixel buffer
    // DEBUG: 	bool ReadTextureData(GLuint SourceID, GLuint SourceTarget,
    // DEBUG: 		void* data, unsigned int width, unsigned int height, unsigned int rowpitch,
    // DEBUG: 		GLenum dataformat, GLenum datatype, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// Formats
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Get sender DX11 shared texture format
    // DEBUG: 	DXGI_FORMAT GetDX11format();
    // DEBUG: 	// Set sender DX11 shared texture format
    // DEBUG: 	void SetDX11format(DXGI_FORMAT textureformat);
    // DEBUG: 	// Return OpenGL compatible DX11 format
    // DEBUG: 	DXGI_FORMAT DX11format(GLint glformat);
    // DEBUG: 	// Return DX11 compatible OpenGL format
    // DEBUG: 	GLint GLDXformat(DXGI_FORMAT textureformat = DXGI_FORMAT_UNKNOWN);
    // DEBUG: 	// Return OpenGL texture internal format
    // DEBUG: 	GLint GLformat(GLuint TextureID, GLuint TextureTarget);
    // DEBUG: 	// Return OpenGL texture format description
    // DEBUG: 	std::string GLformatName(GLint glformat = 0);
    // DEBUG: 
    // DEBUG: 	//
    // DEBUG: 	// 2.006 compatibility
    // DEBUG: 	//
    // DEBUG: 
    // DEBUG: 	// Create a sender
    // DEBUG: 	bool CreateSender(const char *Sendername, unsigned int width = 0, unsigned int height = 0, DWORD dwFormat = 0);
    // DEBUG: 	// Update a sender
    // DEBUG: 	bool UpdateSender(const char* Sendername, unsigned int width, unsigned int height);
    // DEBUG: 
    // DEBUG: 	// Legacy OpenGL DrawTo function
    // DEBUG: 	// See _SpoutCommon.h_ #define legacyOpenGL
    // DEBUG: #ifdef legacyOpenGL
    // DEBUG: 	// Render a texture to the shared texture. 
    // DEBUG: 	bool DrawToSharedTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, float max_x = 1.0, float max_y = 1.0, float aspect = 1.0, bool bInvert = false, GLuint HostFBO = 0);
    // DEBUG: #endif
    // DEBUG: 
    // DEBUG: 	// For access to all functions
    // DEBUG: 	Spout spout;
    // DEBUG: 
    // DEBUG: protected :
    // DEBUG: 
    // DEBUG: 
    // DEBUG: }
    public unsafe partial class SpoutSender : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 2000)]
        public partial struct __Internal
        {
            internal global::SpoutDX.Spout.__Internal spout;

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSender@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??0SpoutSender@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "??1SpoutSender@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderName@SpoutSender@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderName(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetSenderFormat@SpoutSender@@QEAAXK@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSenderFormat(__IntPtr __instance, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReleaseSender@SpoutSender@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseSender(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendFbo@SpoutSender@@QEAA_NIII_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendFbo(__IntPtr __instance, uint FboID, uint width, uint height, bool bInvert);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendTexture@SpoutSender@@QEAA_NIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendTexture(__IntPtr __instance, uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SendImage@SpoutSender@@QEAA_NPEBEIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SendImage(__IntPtr __instance, byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameCount@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameCount(__IntPtr __instance, bool bEnable);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DisableFrameCount@SpoutSender@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisableFrameCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?HoldFps@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HoldFps(__IntPtr __instance, int fps);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetFrameSync@SpoutSender@@QEAAXPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WaitFrameSync@SpoutSender@@QEAA_NPEBDK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WaitFrameSync(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string SenderName, uint dwTimeout);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?EnableFrameSync@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EnableFrameSync(__IntPtr __instance, bool bSync);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?WriteMemoryBuffer@SpoutSender@@QEAA_NPEBD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WriteMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string data, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateMemoryBuffer@SpoutSender@@QEAA_NPEBDH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateMemoryBuffer(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?DeleteMemoryBuffer@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteMemoryBuffer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryBufferSize@SpoutSender@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemoryBufferSize(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?BindSharedTexture@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSender@SpoutSender@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSender(__IntPtr __instance, int index, sbyte* sendername, int MaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderInfo@SpoutSender@@QEAA_NPEBDAEAI1AEAPEAXAEAK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSenderInfo(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, uint* width, uint* height, __IntPtr* dxShareHandle, uint* dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetActiveSender@SpoutSender@@QEAA_NPEAD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActiveSender(__IntPtr __instance, sbyte* sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetActiveSender@SpoutSender@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetActiveSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterName@SpoutSender@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterName(__IntPtr __instance, int index, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutSender@@QEAA_NPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapterInfo@SpoutSender@@QEAA_NHPEAD0H@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAdapterInfo(__IntPtr __instance, int index, sbyte* description, sbyte* output, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPerformancePreference@SpoutSender@@QEAAHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPerformancePreference(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPerformancePreference@SpoutSender@@QEAA_NHPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPerformancePreference(__IntPtr __instance, int preference, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetPreferredAdapterName@SpoutSender@@QEAA_NHPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPreferredAdapterName(__IntPtr __instance, int preference, sbyte* adaptername, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetPreferredAdapter@SpoutSender@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPreferredAdapter(__IntPtr __instance, int preference);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsApplicationPath@SpoutSender@@QEAA_NPEBD@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsApplicationPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetDX9@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDX9(__IntPtr __instance, bool bDX9);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMemoryShareMode@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetMemoryShareMode(__IntPtr __instance, bool bMem);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUmode@SpoutSender@@QEAA_N_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetCPUmode(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHostPath@SpoutSender@@QEAA_NPEBDPEADH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHostPath(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string sendername, sbyte* hostpath, int maxchars);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetVerticalSync@SpoutSender@@QEAA_NH@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetVerticalSync(__IntPtr __instance, int interval);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateOpenGL@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CloseOpenGL@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseOpenGL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CopyTexture@SpoutSender@@QEAA_NIIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyTexture(__IntPtr __instance, uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?ReadTextureData@SpoutSender@@QEAA_NIIPEAXIIIII_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReadTextureData(__IntPtr __instance, uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformat@SpoutSender@@QEAAHII@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GLformat(__IntPtr __instance, uint TextureID, uint TextureTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GLformatName@SpoutSender@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GLformatName(__IntPtr __instance, __IntPtr @return, int glformat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?CreateSender@SpoutSender@@QEAA_NPEBDIIK@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CreateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height, uint dwFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UpdateSender@SpoutSender@@QEAA_NPEBDII@Z", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateSender(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Sendername, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsInitialized@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsInitialized(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetName@SpoutSender@@QEAAPEBDXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetWidth@SpoutSender@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWidth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHeight@SpoutSender@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetHeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFps@SpoutSender@@QEAANXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double GetFps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetFrame@SpoutSender@@QEAAJXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFrame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetHandle@SpoutSender@@QEAAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetHandle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPU@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPU(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetGLDX@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetGLDX(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameCountEnabled@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameCountEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsFrameSyncEnabled@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrameSyncEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?UnBindSharedTexture@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UnBindSharedTexture(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSharedTextureID@SpoutSender@@QEAAIXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSharedTextureID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAutoShare@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoShare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetAutoShare@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoShare(__IntPtr __instance, bool bAuto);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUshare@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUshare(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetCPUshare@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCPUshare(__IntPtr __instance, bool bCPU);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsGLDXready@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGLDXready(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSenderCount@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSenderCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetNumAdapters@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAdapters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?AdapterName@SpoutSender@@QEAAPEADXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* AdapterName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetAdapter@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAdapter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?IsPreferenceAvailable@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPreferenceAvailable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBufferMode@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBufferMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBufferMode@SpoutSender@@QEAAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBufferMode(__IntPtr __instance, bool bActive);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetBuffers@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBuffers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetBuffers@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBuffers(__IntPtr __instance, int nBuffers);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMaxSenders@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMaxSenders(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetMaxSenders@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSenders(__IntPtr __instance, int maxSenders);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetDX9@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDX9(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetMemoryShareMode@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetMemoryShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetCPUmode@SpoutSender@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetCPUmode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetShareMode@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetShareMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?SetShareMode@SpoutSender@@QEAAXH@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetShareMode(__IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetVerticalSync@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetVerticalSync(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("Spout", EntryPoint = "?GetSpoutVersion@SpoutSender@@QEAAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpoutVersion(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutSender>> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::System.WeakReference<global::SpoutDX.SpoutSender>>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SpoutDX.SpoutSender managed)
        {
            NativeToManagedMap[native] = new global::System.WeakReference<global::SpoutDX.SpoutSender>(managed);
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SpoutDX.SpoutSender managed)
        {
    
            managed = default;
            return NativeToManagedMap.TryGetValue(native, out var wr) && wr.TryGetTarget(out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SpoutSender __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SpoutSender(native.ToPointer(), skipVTables);
        }

        internal static SpoutSender __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SpoutSender)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SpoutSender __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SpoutSender(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::SpoutDX.SpoutSender.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private SpoutSender(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SpoutSender(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        // DEBUG: SpoutSender()
        public SpoutSender()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutSender.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
        }

        // DEBUG: SpoutSender
        public SpoutSender(global::SpoutDX.SpoutSender _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::SpoutDX.SpoutSender.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        ~SpoutSender()
        {
            Dispose(false, callNativeDtor : __ownsNativeInstance );
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            GC.SuppressFinalize(this);
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (callNativeDtor)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        // DEBUG: void SetSenderName(const char* sendername = nullptr)
        public void SetSenderName(string sendername)
        {
            __Internal.SetSenderName(__Instance, sendername);
        }

        // DEBUG: void SetSenderFormat(DWORD dwFormat)
        public void SetSenderFormat(uint dwFormat)
        {
            __Internal.SetSenderFormat(__Instance, dwFormat);
        }

        // DEBUG: void ReleaseSender()
        public void ReleaseSender()
        {
            __Internal.ReleaseSender(__Instance);
        }

        // DEBUG: bool SendFbo(GLuint FboID, unsigned int width, unsigned int height, bool bInvert = true)
        public bool SendFbo(uint FboID, uint width, uint height, bool bInvert)
        {
            var ___ret = __Internal.SendFbo(__Instance, FboID, width, height, bInvert);
            return ___ret;
        }

        // DEBUG: bool SendTexture(GLuint TextureID, GLuint TextureTarget, unsigned int width, unsigned int height, bool bInvert = true, GLuint HostFBO = 0)
        public bool SendTexture(uint TextureID, uint TextureTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SendTexture(__Instance, TextureID, TextureTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool SendImage(const unsigned char* pixels, unsigned int width, unsigned int height, GLenum glFormat = GL_RGBA, bool bInvert = false, GLuint HostFBO = 0)
        public bool SendImage(byte* pixels, uint width, uint height, uint glFormat, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.SendImage(__Instance, pixels, width, height, glFormat, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: void SetFrameCount(bool bEnable)
        public void SetFrameCount(bool bEnable)
        {
            __Internal.SetFrameCount(__Instance, bEnable);
        }

        // DEBUG: void DisableFrameCount()
        public void DisableFrameCount()
        {
            __Internal.DisableFrameCount(__Instance);
        }

        // DEBUG: void HoldFps(int fps)
        public void HoldFps(int fps)
        {
            __Internal.HoldFps(__Instance, fps);
        }

        // DEBUG: void SetFrameSync(const char* SenderName)
        public void SetFrameSync(string SenderName)
        {
            __Internal.SetFrameSync(__Instance, SenderName);
        }

        // DEBUG: bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0)
        public bool WaitFrameSync(string SenderName, uint dwTimeout)
        {
            var ___ret = __Internal.WaitFrameSync(__Instance, SenderName, dwTimeout);
            return ___ret;
        }

        // DEBUG: void EnableFrameSync(bool bSync = true)
        public void EnableFrameSync(bool bSync)
        {
            __Internal.EnableFrameSync(__Instance, bSync);
        }

        // DEBUG: bool WriteMemoryBuffer(const char *name, const char* data, int length)
        public bool WriteMemoryBuffer(string name, string data, int length)
        {
            var ___ret = __Internal.WriteMemoryBuffer(__Instance, name, data, length);
            return ___ret;
        }

        // DEBUG: bool CreateMemoryBuffer(const char *name, int length)
        public bool CreateMemoryBuffer(string name, int length)
        {
            var ___ret = __Internal.CreateMemoryBuffer(__Instance, name, length);
            return ___ret;
        }

        // DEBUG: bool DeleteMemoryBuffer()
        public bool DeleteMemoryBuffer()
        {
            var ___ret = __Internal.DeleteMemoryBuffer(__Instance);
            return ___ret;
        }

        // DEBUG: int GetMemoryBufferSize(const char* name)
        public int GetMemoryBufferSize(string name)
        {
            var ___ret = __Internal.GetMemoryBufferSize(__Instance, name);
            return ___ret;
        }

        // DEBUG: bool BindSharedTexture()
        public bool BindSharedTexture()
        {
            var ___ret = __Internal.BindSharedTexture(__Instance);
            return ___ret;
        }

        // DEBUG: bool GetSender(int index, char* sendername, int MaxSize = 256)
        public bool GetSender(int index, sbyte* sendername, int MaxSize)
        {
            var ___ret = __Internal.GetSender(__Instance, index, sendername, MaxSize);
            return ___ret;
        }

        // DEBUG: bool GetSenderInfo(const char* sendername, unsigned int &width, unsigned int &height, HANDLE &dxShareHandle, DWORD &dwFormat)
        public bool GetSenderInfo(string sendername, ref uint width, ref uint height, __IntPtr* dxShareHandle, ref uint dwFormat)
        {
            fixed (uint* __width1 = &width)
            {
                var __arg1 = __width1;
                fixed (uint* __height2 = &height)
                {
                    var __arg2 = __height2;
                    fixed (uint* __dwFormat4 = &dwFormat)
                    {
                        var __arg4 = __dwFormat4;
                        var ___ret = __Internal.GetSenderInfo(__Instance, sendername, __arg1, __arg2, dxShareHandle, __arg4);
                        return ___ret;
                    }
                }
            }
        }

        // DEBUG: bool GetActiveSender(char* sendername)
        public bool GetActiveSender(sbyte* sendername)
        {
            var ___ret = __Internal.GetActiveSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool SetActiveSender(const char* sendername)
        public bool SetActiveSender(string sendername)
        {
            var ___ret = __Internal.SetActiveSender(__Instance, sendername);
            return ___ret;
        }

        // DEBUG: bool GetAdapterName(int index, char *adaptername, int maxchars = 256)
        public bool GetAdapterName(int index, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetAdapterName(__Instance, index, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: bool GetAdapterInfo(char* description, char* output, int maxchars)
        public bool GetAdapterInfo(sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, description, output, maxchars);
            return ___ret;
        }

        // DEBUG: bool GetAdapterInfo(int index, char* description, char* output, int maxchars)
        public bool GetAdapterInfo(int index, sbyte* description, sbyte* output, int maxchars)
        {
            var ___ret = __Internal.GetAdapterInfo(__Instance, index, description, output, maxchars);
            return ___ret;
        }

        // DEBUG: int GetPerformancePreference(const char* path = nullptr)
        public int GetPerformancePreference(string path)
        {
            var ___ret = __Internal.GetPerformancePreference(__Instance, path);
            return ___ret;
        }

        // DEBUG: bool SetPerformancePreference(int preference, const char* path = nullptr)
        public bool SetPerformancePreference(int preference, string path)
        {
            var ___ret = __Internal.SetPerformancePreference(__Instance, preference, path);
            return ___ret;
        }

        // DEBUG: bool GetPreferredAdapterName(int preference, char* adaptername, int maxchars)
        public bool GetPreferredAdapterName(int preference, sbyte* adaptername, int maxchars)
        {
            var ___ret = __Internal.GetPreferredAdapterName(__Instance, preference, adaptername, maxchars);
            return ___ret;
        }

        // DEBUG: bool SetPreferredAdapter(int preference)
        public bool SetPreferredAdapter(int preference)
        {
            var ___ret = __Internal.SetPreferredAdapter(__Instance, preference);
            return ___ret;
        }

        // DEBUG: bool IsApplicationPath(const char* path)
        public bool IsApplicationPath(string path)
        {
            var ___ret = __Internal.IsApplicationPath(__Instance, path);
            return ___ret;
        }

        // DEBUG: bool SetDX9(bool bDX9 = true)
        public bool SetDX9(bool bDX9)
        {
            var ___ret = __Internal.SetDX9(__Instance, bDX9);
            return ___ret;
        }

        // DEBUG: bool SetMemoryShareMode(bool bMem = true)
        public bool SetMemoryShareMode(bool bMem)
        {
            var ___ret = __Internal.SetMemoryShareMode(__Instance, bMem);
            return ___ret;
        }

        // DEBUG: bool SetCPUmode(bool bCPU)
        public bool SetCPUmode(bool bCPU)
        {
            var ___ret = __Internal.SetCPUmode(__Instance, bCPU);
            return ___ret;
        }

        // DEBUG: bool GetHostPath(const char *sendername, char *hostpath, int maxchars)
        public bool GetHostPath(string sendername, sbyte* hostpath, int maxchars)
        {
            var ___ret = __Internal.GetHostPath(__Instance, sendername, hostpath, maxchars);
            return ___ret;
        }

        // DEBUG: bool SetVerticalSync(int interval = 1)
        public bool SetVerticalSync(int interval)
        {
            var ___ret = __Internal.SetVerticalSync(__Instance, interval);
            return ___ret;
        }

        // DEBUG: bool CreateOpenGL()
        public bool CreateOpenGL()
        {
            var ___ret = __Internal.CreateOpenGL(__Instance);
            return ___ret;
        }

        // DEBUG: bool CloseOpenGL()
        public bool CloseOpenGL()
        {
            var ___ret = __Internal.CloseOpenGL(__Instance);
            return ___ret;
        }

        // DEBUG: bool CopyTexture(GLuint SourceID, GLuint SourceTarget,
        // DEBUG: 		GLuint DestID, GLuint DestTarget,
        // DEBUG: 		unsigned int width, unsigned int height,
        // DEBUG: 		bool bInvert = false, GLuint HostFBO = 0)
        public bool CopyTexture(uint SourceID, uint SourceTarget, uint DestID, uint DestTarget, uint width, uint height, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.CopyTexture(__Instance, SourceID, SourceTarget, DestID, DestTarget, width, height, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: bool ReadTextureData(GLuint SourceID, GLuint SourceTarget,
        // DEBUG: 		void* data, unsigned int width, unsigned int height, unsigned int rowpitch,
        // DEBUG: 		GLenum dataformat, GLenum datatype, bool bInvert = false, GLuint HostFBO = 0)
        public bool ReadTextureData(uint SourceID, uint SourceTarget, __IntPtr data, uint width, uint height, uint rowpitch, uint dataformat, uint datatype, bool bInvert, uint HostFBO)
        {
            var ___ret = __Internal.ReadTextureData(__Instance, SourceID, SourceTarget, data, width, height, rowpitch, dataformat, datatype, bInvert, HostFBO);
            return ___ret;
        }

        // DEBUG: GLint GLformat(GLuint TextureID, GLuint TextureTarget)
        public int GLformat(uint TextureID, uint TextureTarget)
        {
            var ___ret = __Internal.GLformat(__Instance, TextureID, TextureTarget);
            return ___ret;
        }

        // DEBUG: std::string GLformatName(GLint glformat = 0)
        public string GLformatName(int glformat)
        {
            var ___ret = new global::Spout.Std.BasicString.__Internalc__N_std_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C();
            __Internal.GLformatName(__Instance, new IntPtr(&___ret), glformat);
            var __basicStringRet0 = global::Spout.Std.BasicString<sbyte, global::Spout.Std.CharTraits<sbyte>, global::Spout.Std.Allocator<sbyte>>.__CreateInstance(new __IntPtr(&___ret));
            var __retString0 = global::Spout.Std.BasicStringExtensions.Data(__basicStringRet0);
            __basicStringRet0.Dispose();
            return __retString0;
        }

        // DEBUG: bool CreateSender(const char *Sendername, unsigned int width = 0, unsigned int height = 0, DWORD dwFormat = 0)
        public bool CreateSender(string Sendername, uint width, uint height, uint dwFormat)
        {
            var ___ret = __Internal.CreateSender(__Instance, Sendername, width, height, dwFormat);
            return ___ret;
        }

        // DEBUG: bool UpdateSender(const char* Sendername, unsigned int width, unsigned int height)
        public bool UpdateSender(string Sendername, uint width, uint height)
        {
            var ___ret = __Internal.UpdateSender(__Instance, Sendername, width, height);
            return ___ret;
        }

        public global::SpoutDX.Spout Spout
        {
            get
            {
                return global::SpoutDX.Spout.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->spout));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->spout = *(global::SpoutDX.Spout.__Internal*) value.__Instance;
            }
        }

        public bool IsInitialized
        {
            get
            {
                var ___ret = __Internal.IsInitialized(__Instance);
                return ___ret;
            }
        }

        public string Name
        {
            get
            {
                var ___ret = __Internal.GetName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public uint Width
        {
            get
            {
                var ___ret = __Internal.GetWidth(__Instance);
                return ___ret;
            }
        }

        public uint Height
        {
            get
            {
                var ___ret = __Internal.GetHeight(__Instance);
                return ___ret;
            }
        }

        public double Fps
        {
            get
            {
                var ___ret = __Internal.GetFps(__Instance);
                return ___ret;
            }
        }

        public int Frame
        {
            get
            {
                var ___ret = __Internal.GetFrame(__Instance);
                return ___ret;
            }
        }

        public __IntPtr Handle
        {
            get
            {
                var ___ret = __Internal.GetHandle(__Instance);
                return ___ret;
            }
        }

        public bool CPU
        {
            get
            {
                var ___ret = __Internal.GetCPU(__Instance);
                return ___ret;
            }
        }

        public bool GLDX
        {
            get
            {
                var ___ret = __Internal.GetGLDX(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameCountEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameCountEnabled(__Instance);
                return ___ret;
            }
        }

        public bool IsFrameSyncEnabled
        {
            get
            {
                var ___ret = __Internal.IsFrameSyncEnabled(__Instance);
                return ___ret;
            }
        }

        public bool UnBindSharedTexture
        {
            get
            {
                var ___ret = __Internal.UnBindSharedTexture(__Instance);
                return ___ret;
            }
        }

        public uint SharedTextureID
        {
            get
            {
                var ___ret = __Internal.GetSharedTextureID(__Instance);
                return ___ret;
            }
        }

        public bool AutoShare
        {
            get
            {
                var ___ret = __Internal.GetAutoShare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetAutoShare(__Instance, value);
            }
        }

        public bool CPUshare
        {
            get
            {
                var ___ret = __Internal.GetCPUshare(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUshare(__Instance, value);
            }
        }

        public bool IsGLDXready
        {
            get
            {
                var ___ret = __Internal.IsGLDXready(__Instance);
                return ___ret;
            }
        }

        public int SenderCount
        {
            get
            {
                var ___ret = __Internal.GetSenderCount(__Instance);
                return ___ret;
            }
        }

        public int NumAdapters
        {
            get
            {
                var ___ret = __Internal.GetNumAdapters(__Instance);
                return ___ret;
            }
        }

        public sbyte* AdapterName
        {
            get
            {
                var ___ret = __Internal.AdapterName(__Instance);
                return ___ret;
            }
        }

        public int Adapter
        {
            get
            {
                var ___ret = __Internal.GetAdapter(__Instance);
                return ___ret;
            }
        }

        public bool IsPreferenceAvailable
        {
            get
            {
                var ___ret = __Internal.IsPreferenceAvailable(__Instance);
                return ___ret;
            }
        }

        public bool BufferMode
        {
            get
            {
                var ___ret = __Internal.GetBufferMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBufferMode(__Instance, value);
            }
        }

        public int Buffers
        {
            get
            {
                var ___ret = __Internal.GetBuffers(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBuffers(__Instance, value);
            }
        }

        public int MaxSenders
        {
            get
            {
                var ___ret = __Internal.GetMaxSenders(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMaxSenders(__Instance, value);
            }
        }

        public bool DX9
        {
            get
            {
                var ___ret = __Internal.GetDX9(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetDX9(__Instance, value);
            }
        }

        public bool MemoryShareMode
        {
            get
            {
                var ___ret = __Internal.GetMemoryShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetMemoryShareMode(__Instance, value);
            }
        }

        public bool CPUmode
        {
            get
            {
                var ___ret = __Internal.GetCPUmode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetCPUmode(__Instance, value);
            }
        }

        public int ShareMode
        {
            get
            {
                var ___ret = __Internal.GetShareMode(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetShareMode(__Instance, value);
            }
        }

        public int VerticalSync
        {
            get
            {
                var ___ret = __Internal.GetVerticalSync(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetVerticalSync(__Instance, value);
            }
        }

        public int SpoutVersion
        {
            get
            {
                var ___ret = __Internal.GetSpoutVersion(__Instance);
                return ___ret;
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr___IntPtr___IntPtr___IntPtr(__IntPtr __instance, __IntPtr arg1, __IntPtr arg2, __IntPtr arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_uint___IntPtr(__IntPtr __instance, uint arg1, __IntPtr arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr___IntPtr(__IntPtr __instance, __IntPtr arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr___IntPtr_SpoutDX_D3D11COUNTER_TYPEPtr_uintPtr_sbytePtr_uintPtr_sbytePtr_uintPtr_sbytePtr_uintPtr(__IntPtr __instance, __IntPtr arg1, global::SpoutDX.D3D11COUNTER_TYPE* arg2, uint* arg3, sbyte* arg4, uint* arg5, sbyte* arg6, uint* arg7, sbyte* arg8, uint* arg9);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_SpoutDX_D3D11FEATURE___IntPtr_uint(__IntPtr __instance, global::SpoutDX.D3D11FEATURE arg1, __IntPtr arg2, uint arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate global::SpoutDX.D3D_FEATURE_LEVEL Func_SpoutDX_D3D_FEATURE_LEVEL___IntPtr(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate uint Func_uint___IntPtr(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_uint(__IntPtr __instance, uint arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_uint_uint_int(__IntPtr __instance, uint arg1, uint arg2, int arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_uint_uint(__IntPtr __instance, uint arg1, uint arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_uint_uint_uint_int_uint(__IntPtr __instance, uint arg1, uint arg2, uint arg3, int arg4, uint arg5);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_uint_uint_uint_uint(__IntPtr __instance, uint arg1, uint arg2, uint arg3, uint arg4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_SpoutDX_D3D_PRIMITIVE_TOPOLOGY(__IntPtr __instance, global::SpoutDX.D3D_PRIMITIVE_TOPOLOGY arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_uint_uint_uint(__IntPtr __instance, uint arg1, uint arg2, uint arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_uint___IntPtr(__IntPtr __instance, uint arg1, __IntPtr arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_SpoutDX_D3D_PRIMITIVE_TOPOLOGYPtr(__IntPtr __instance, global::SpoutDX.D3D_PRIMITIVE_TOPOLOGY* arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_uintPtr___IntPtr(__IntPtr __instance, uint* arg1, __IntPtr arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate global::SpoutDX.D3D11DEVICE_CONTEXT_TYPE Func_SpoutDX_D3D11DEVICE_CONTEXT_TYPE___IntPtr(__IntPtr __instance);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_uint(__IntPtr __instance, uint arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_uint___IntPtr_uintPtr(__IntPtr __instance, uint arg1, __IntPtr arg2, uint* arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr___IntPtr(__IntPtr __instance, __IntPtr arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_uint_charPtrPtr(__IntPtr __instance, uint arg1, char** arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_uintPtr(__IntPtr __instance, uint* arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_int(__IntPtr __instance, int arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_wstring(__IntPtr __instance, [MarshalAs(UnmanagedType.LPWStr)] string arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr___IntPtr_uint(__IntPtr __instance, __IntPtr arg1, uint arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr___IntPtr_int_uint(__IntPtr __instance, __IntPtr arg1, int arg2, uint arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_shortPtr(__IntPtr __instance, short* arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_intPtr(__IntPtr __instance, int* arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_ulongPtr(__IntPtr __instance, ulong* arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_ulong(__IntPtr __instance, ulong arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_uint_ulong_long_longPtr(__IntPtr __instance, uint arg1, ulong arg2, long arg3, long* arg4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_intPtr_uint(__IntPtr __instance, int* arg1, uint arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_charPtrPtr(__IntPtr __instance, char** arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr___IntPtr_int(__IntPtr __instance, __IntPtr arg1, int arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_int_charPtrPtr(__IntPtr __instance, int arg1, char** arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_uint_uint___IntPtr_uintPtr(__IntPtr __instance, uint arg1, uint arg2, __IntPtr arg3, uint* arg4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr___IntPtr_int_int(__IntPtr __instance, __IntPtr arg1, int arg2, int arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr___IntPtr___IntPtr(__IntPtr __instance, __IntPtr arg1, __IntPtr arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_uint_int(__IntPtr __instance, uint arg1, int arg2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr___IntPtr___IntPtr_uintPtr(__IntPtr __instance, __IntPtr arg1, __IntPtr arg2, uint* arg3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate int Func_int___IntPtr_SpoutDX_D3D_INCLUDE_TYPE_string8___IntPtr___IntPtrPtr_uintPtr(__IntPtr __instance, global::SpoutDX.D3D_INCLUDE_TYPE arg1, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string arg2, __IntPtr arg3, __IntPtr* arg4, uint* arg5);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_int(__IntPtr __instance, int arg1);
    }
}
namespace SpoutDX.__Symbols
{
    internal class SpoutDX
    {
        public static IntPtr _D3D11_DEFAULT__3UCD3D11_DEFAULT__B { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0000_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0000_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0001_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0001_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0002_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0002_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0003_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0003_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0004_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0004_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0005_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0005_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0006_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0006_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0007_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0007_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0008_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0008_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0009_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0009_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0010_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0010_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0011_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0011_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0012_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0012_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0013_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0013_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0021_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0021_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0022_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0022_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0023_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0023_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0025_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0025_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0026_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0026_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0029_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0029_v0_0_s_ifspec { get; }
        public static IntPtr _D3D11_VIDEO_DEFAULT__3UCD3D11_VIDEO_DEFAULT__B { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0030_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0030_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0031_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0031_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0032_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0032_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0033_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0033_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0034_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0034_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0035_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0035_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0036_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0036_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0037_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0037_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0040_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0040_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0041_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11_0000_0041_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0000_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0000_v0_0_s_ifspec { get; }
        public static IntPtr _IOleControlTypes_v1_0_c_ifspec { get; }
        public static IntPtr _IOleControlTypes_v1_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0001_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0001_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0005_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0005_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0036_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0036_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0037_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0037_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0038_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0038_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0039_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0039_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0040_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0040_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0041_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_ocidl_0000_0041_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3dcommon_0000_0000_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3dcommon_0000_0000_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3dcommon_0000_0001_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3dcommon_0000_0001_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3dcommon_0000_0002_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3dcommon_0000_0002_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0001_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0001_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0005_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0005_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0006_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d11sdklayers_0000_0006_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_1_0000_0000_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_1_0000_0000_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_1_0000_0001_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_1_0000_0001_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_1_0000_0002_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_1_0000_0002_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_1_0000_0003_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_1_0000_0003_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0000_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0000_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0001_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0001_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0002_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0002_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0003_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0003_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0004_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0004_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0005_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0005_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0006_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0006_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0007_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0007_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0008_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0008_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0009_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0009_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0010_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0010_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0011_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0011_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0012_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0012_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0017_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0017_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0018_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0018_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0019_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0019_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0021_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0021_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0023_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0023_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0024_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10_0000_0024_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_s_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_c_ifspec { get; }
        public static IntPtr __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_s_ifspec { get; }
        public static IntPtr _wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA { get; }
        public static IntPtr _wglDXCloseDeviceNV__3P6AHPEAX_ZEA { get; }
        public static IntPtr _wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA { get; }
        public static IntPtr _wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA { get; }
        public static IntPtr _wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA { get; }
        public static IntPtr _wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA { get; }
        public static IntPtr _wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA { get; }
        public static IntPtr _glBindFramebufferEXT__3P6AXII_ZEA { get; }
        public static IntPtr _glBindRenderbufferEXT__3P6AXII_ZEA { get; }
        public static IntPtr _glCheckFramebufferStatusEXT__3P6AII_ZEA { get; }
        public static IntPtr _glCheckNamedFramebufferStatusEXT__3P6AIII_ZEA { get; }
        public static IntPtr _glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glFramebufferRenderbufferEXT__3P6AXIIII_ZEA { get; }
        public static IntPtr _glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA { get; }
        public static IntPtr _glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA { get; }
        public static IntPtr _glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA { get; }
        public static IntPtr _glGenFramebuffersEXT__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glGenRenderbuffersEXT__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glGenerateMipmapEXT__3P6AXI_ZEA { get; }
        public static IntPtr _glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA { get; }
        public static IntPtr _glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glIsFramebufferEXT__3P6AEI_ZEA { get; }
        public static IntPtr _glIsRenderbufferEXT__3P6AEI_ZEA { get; }
        public static IntPtr _glRenderbufferStorageEXT__3P6AXIIHH_ZEA { get; }
        public static IntPtr _glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA { get; }
        public static IntPtr _wglSwapIntervalEXT__3P6AHH_ZEA { get; }
        public static IntPtr _wglGetSwapIntervalEXT__3P6AHXZEA { get; }
        public static IntPtr _glGenBuffers__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glDeleteBuffers__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glBindBuffer__3P6AXII_ZEA { get; }
        public static IntPtr _glBufferData__3P6AXI_JPEBXI_ZEA { get; }
        public static IntPtr _glBufferStorage__3P6AXI_JPEBXI_ZEA { get; }
        public static IntPtr _glMapBuffer__3P6APEAXII_ZEA { get; }
        public static IntPtr _glMapBufferRange__3P6APEAXI_J0I_ZEA { get; }
        public static IntPtr _glUnmapBuffer__3P6AEI_ZEA { get; }
        public static IntPtr _glGetBufferParameteriv__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glGetTextureParameteriv__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA { get; }
        public static IntPtr _glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA { get; }
        public static IntPtr _glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA { get; }
        public static IntPtr _glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA { get; }
        public static IntPtr _glGetInternalFormativ__3P6AXIIIHPEAH_ZEA { get; }
        public static IntPtr _glCreateProgram__3P6AIXZEA { get; }
        public static IntPtr _glCreateShader__3P6AII_ZEA { get; }
        public static IntPtr _glShaderSource__3P6AXIHPEBQEBDPEBH_ZEA { get; }
        public static IntPtr _glCompileShader__3P6AXI_ZEA { get; }
        public static IntPtr _glAttachShader__3P6AXII_ZEA { get; }
        public static IntPtr _glLinkProgram__3P6AXI_ZEA { get; }
        public static IntPtr _glGetProgramiv__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glGetProgramInfoLog__3P6AXIHPEAHPEAD_ZEA { get; }
        public static IntPtr _glGetShaderInfoLog__3P6AXIHPEAHPEAD_ZEA { get; }
        public static IntPtr _glGetIntegeri_v__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glDetachShader__3P6AXII_ZEA { get; }
        public static IntPtr _glUseProgram__3P6AXI_ZEA { get; }
        public static IntPtr _glBindImageTexture__3P6AXIIHEHII_ZEA { get; }
        public static IntPtr _glDispatchCompute__3P6AXIII_ZEA { get; }
        public static IntPtr _glDeleteProgram__3P6AXI_ZEA { get; }
        public static IntPtr _glDeleteShader__3P6AXI_ZEA { get; }
        public static IntPtr _glMemoryBarrier__3P6AXI_ZEA { get; }
        public static IntPtr _glActiveTexture__3P6AXI_ZEA { get; }
        public static IntPtr _glUniform1i__3P6AXHH_ZEA { get; }
        public static IntPtr _glUniform1f__3P6AXHM_ZEA { get; }
        public static IntPtr _glGetUniformLocation__3P6AHIPEBD_ZEA { get; }
        public static IntPtr _glTextureStorage2D__3P6AXIHIHH_ZEA { get; }
        public static IntPtr _glCreateTextures__3P6AXIHPEAI_ZEA { get; }
        public static IntPtr _glCreateMemoryObjectsEXT__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glDeleteMemoryObjectsEXT__3P6AXHPEBI_ZEA { get; }
        public static IntPtr _glTexStorageMem2DEXT__3P6AXIHIHHI_K_ZEA { get; }
        public static IntPtr _glTextureStorageMem2DEXT__3P6AXIHIHHI_K_ZEA { get; }
        public static IntPtr _glImportMemoryWin32HandleEXT__3P6AXI_KIPEAX_ZEA { get; }
        public static IntPtr _glBufferStorageMemEXT__3P6AXI_JI_K_ZEA { get; }
        public static IntPtr _glMemoryObjectParameterivEXT__3P6AXIIPEBH_ZEA { get; }
        public static IntPtr _glGetMemoryObjectParameterivEXT__3P6AXIIPEAH_ZEA { get; }
        public static IntPtr _glIsMemoryObjectEXT__3P6AEI_ZEA { get; }
        public static IntPtr _glCreateBuffers__3P6AXHPEAI_ZEA { get; }
        public static IntPtr _glBindBufferBase__3P6AXIII_ZEA { get; }
        static SpoutDX()
        {
            var path = "SpoutDX";
            var image = CppSharp.SymbolResolver.LoadImage(ref path);
            if (image == IntPtr.Zero) throw new global::System.DllNotFoundException(path);
            _D3D11_DEFAULT__3UCD3D11_DEFAULT__B = CppSharp.SymbolResolver.ResolveSymbol(image, "?D3D11_DEFAULT@@3UCD3D11_DEFAULT@@B");
            __MIDL_itf_d3d11_0000_0000_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0000_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0000_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0000_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0001_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0001_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0001_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0001_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0002_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0002_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0002_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0002_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0003_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0003_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0003_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0003_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0004_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0004_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0004_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0004_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0005_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0005_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0005_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0005_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0006_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0006_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0006_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0006_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0007_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0007_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0007_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0007_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0008_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0008_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0008_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0008_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0009_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0009_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0009_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0009_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0010_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0010_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0010_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0010_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0011_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0011_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0011_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0011_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0012_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0012_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0012_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0012_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0013_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0013_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0013_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0013_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0021_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0021_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0021_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0021_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0022_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0022_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0022_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0022_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0023_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0023_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0023_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0023_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0025_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0025_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0025_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0025_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0026_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0026_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0026_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0026_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0029_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0029_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0029_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0029_v0_0_s_ifspec");
            _D3D11_VIDEO_DEFAULT__3UCD3D11_VIDEO_DEFAULT__B = CppSharp.SymbolResolver.ResolveSymbol(image, "?D3D11_VIDEO_DEFAULT@@3UCD3D11_VIDEO_DEFAULT@@B");
            __MIDL_itf_d3d11_0000_0030_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0030_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0030_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0030_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0031_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0031_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0031_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0031_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0032_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0032_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0032_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0032_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0033_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0033_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0033_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0033_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0034_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0034_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0034_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0034_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0035_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0035_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0035_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0035_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0036_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0036_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0036_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0036_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0037_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0037_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0037_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0037_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0040_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0040_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0040_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0040_v0_0_s_ifspec");
            __MIDL_itf_d3d11_0000_0041_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0041_v0_0_c_ifspec");
            __MIDL_itf_d3d11_0000_0041_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11_0000_0041_v0_0_s_ifspec");
            __MIDL_itf_ocidl_0000_0000_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0000_v0_0_c_ifspec");
            __MIDL_itf_ocidl_0000_0000_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0000_v0_0_s_ifspec");
            _IOleControlTypes_v1_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "IOleControlTypes_v1_0_c_ifspec");
            _IOleControlTypes_v1_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "IOleControlTypes_v1_0_s_ifspec");
            __MIDL_itf_ocidl_0000_0001_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0001_v0_0_c_ifspec");
            __MIDL_itf_ocidl_0000_0001_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0001_v0_0_s_ifspec");
            __MIDL_itf_ocidl_0000_0005_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0005_v0_0_c_ifspec");
            __MIDL_itf_ocidl_0000_0005_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0005_v0_0_s_ifspec");
            __MIDL_itf_ocidl_0000_0036_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0036_v0_0_c_ifspec");
            __MIDL_itf_ocidl_0000_0036_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0036_v0_0_s_ifspec");
            __MIDL_itf_ocidl_0000_0037_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0037_v0_0_c_ifspec");
            __MIDL_itf_ocidl_0000_0037_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0037_v0_0_s_ifspec");
            __MIDL_itf_ocidl_0000_0038_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0038_v0_0_c_ifspec");
            __MIDL_itf_ocidl_0000_0038_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0038_v0_0_s_ifspec");
            __MIDL_itf_ocidl_0000_0039_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0039_v0_0_c_ifspec");
            __MIDL_itf_ocidl_0000_0039_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0039_v0_0_s_ifspec");
            __MIDL_itf_ocidl_0000_0040_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0040_v0_0_c_ifspec");
            __MIDL_itf_ocidl_0000_0040_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0040_v0_0_s_ifspec");
            __MIDL_itf_ocidl_0000_0041_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0041_v0_0_c_ifspec");
            __MIDL_itf_ocidl_0000_0041_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_ocidl_0000_0041_v0_0_s_ifspec");
            __MIDL_itf_d3dcommon_0000_0000_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3dcommon_0000_0000_v0_0_c_ifspec");
            __MIDL_itf_d3dcommon_0000_0000_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3dcommon_0000_0000_v0_0_s_ifspec");
            __MIDL_itf_d3dcommon_0000_0001_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3dcommon_0000_0001_v0_0_c_ifspec");
            __MIDL_itf_d3dcommon_0000_0001_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3dcommon_0000_0001_v0_0_s_ifspec");
            __MIDL_itf_d3dcommon_0000_0002_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3dcommon_0000_0002_v0_0_c_ifspec");
            __MIDL_itf_d3dcommon_0000_0002_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3dcommon_0000_0002_v0_0_s_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0000_v0_0_c_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0000_v0_0_s_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0001_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0001_v0_0_c_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0001_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0001_v0_0_s_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0002_v0_0_c_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0002_v0_0_s_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0005_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0005_v0_0_c_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0005_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0005_v0_0_s_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0006_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0006_v0_0_c_ifspec");
            __MIDL_itf_d3d11sdklayers_0000_0006_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d11sdklayers_0000_0006_v0_0_s_ifspec");
            __MIDL_itf_d3d10_1_0000_0000_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_1_0000_0000_v0_0_c_ifspec");
            __MIDL_itf_d3d10_1_0000_0000_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_1_0000_0000_v0_0_s_ifspec");
            __MIDL_itf_d3d10_1_0000_0001_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_1_0000_0001_v0_0_c_ifspec");
            __MIDL_itf_d3d10_1_0000_0001_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_1_0000_0001_v0_0_s_ifspec");
            __MIDL_itf_d3d10_1_0000_0002_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_1_0000_0002_v0_0_c_ifspec");
            __MIDL_itf_d3d10_1_0000_0002_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_1_0000_0002_v0_0_s_ifspec");
            __MIDL_itf_d3d10_1_0000_0003_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_1_0000_0003_v0_0_c_ifspec");
            __MIDL_itf_d3d10_1_0000_0003_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_1_0000_0003_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0000_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0000_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0000_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0000_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0001_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0001_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0001_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0001_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0002_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0002_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0002_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0002_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0003_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0003_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0003_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0003_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0004_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0004_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0004_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0004_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0005_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0005_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0005_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0005_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0006_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0006_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0006_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0006_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0007_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0007_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0007_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0007_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0008_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0008_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0008_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0008_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0009_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0009_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0009_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0009_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0010_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0010_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0010_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0010_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0011_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0011_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0011_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0011_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0012_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0012_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0012_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0012_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0017_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0017_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0017_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0017_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0018_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0018_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0018_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0018_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0019_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0019_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0019_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0019_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0021_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0021_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0021_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0021_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0023_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0023_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0023_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0023_v0_0_s_ifspec");
            __MIDL_itf_d3d10_0000_0024_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0024_v0_0_c_ifspec");
            __MIDL_itf_d3d10_0000_0024_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10_0000_0024_v0_0_s_ifspec");
            __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10sdklayers_0000_0000_v0_0_c_ifspec");
            __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10sdklayers_0000_0000_v0_0_s_ifspec");
            __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10sdklayers_0000_0002_v0_0_c_ifspec");
            __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10sdklayers_0000_0002_v0_0_s_ifspec");
            __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_c_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10sdklayers_0000_0003_v0_0_c_ifspec");
            __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_s_ifspec = CppSharp.SymbolResolver.ResolveSymbol(image, "__MIDL_itf_d3d10sdklayers_0000_0003_v0_0_s_ifspec");
            _wglDXOpenDeviceNV__3P6APEAXPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXOpenDeviceNV@@3P6APEAXPEAX@ZEA");
            _wglDXCloseDeviceNV__3P6AHPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXCloseDeviceNV@@3P6AHPEAX@ZEA");
            _wglDXRegisterObjectNV__3P6APEAXPEAX0III_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXRegisterObjectNV@@3P6APEAXPEAX0III@ZEA");
            _wglDXUnregisterObjectNV__3P6AHPEAX0_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXUnregisterObjectNV@@3P6AHPEAX0@ZEA");
            _wglDXSetResourceShareHandleNV__3P6AHPEAX0_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXSetResourceShareHandleNV@@3P6AHPEAX0@ZEA");
            _wglDXLockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXLockObjectsNV@@3P6AHPEAXHPEAPEAX@ZEA");
            _wglDXUnlockObjectsNV__3P6AHPEAXHPEAPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglDXUnlockObjectsNV@@3P6AHPEAXHPEAPEAX@ZEA");
            _glBindFramebufferEXT__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindFramebufferEXT@@3P6AXII@ZEA");
            _glBindRenderbufferEXT__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindRenderbufferEXT@@3P6AXII@ZEA");
            _glCheckFramebufferStatusEXT__3P6AII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCheckFramebufferStatusEXT@@3P6AII@ZEA");
            _glCheckNamedFramebufferStatusEXT__3P6AIII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCheckNamedFramebufferStatusEXT@@3P6AIII@ZEA");
            _glDeleteFramebuffersEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteFramebuffersEXT@@3P6AXHPEBI@ZEA");
            _glDeleteRenderBuffersEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteRenderBuffersEXT@@3P6AXHPEBI@ZEA");
            _glFramebufferRenderbufferEXT__3P6AXIIII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferRenderbufferEXT@@3P6AXIIII@ZEA");
            _glFramebufferTexture1DEXT__3P6AXIIIIH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferTexture1DEXT@@3P6AXIIIIH@ZEA");
            _glFramebufferTexture2DEXT__3P6AXIIIIH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferTexture2DEXT@@3P6AXIIIIH@ZEA");
            _glFramebufferTexture3DEXT__3P6AXIIIIHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFramebufferTexture3DEXT@@3P6AXIIIIHH@ZEA");
            _glGenFramebuffersEXT__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenFramebuffersEXT@@3P6AXHPEAI@ZEA");
            _glGenRenderbuffersEXT__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenRenderbuffersEXT@@3P6AXHPEAI@ZEA");
            _glGenerateMipmapEXT__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenerateMipmapEXT@@3P6AXI@ZEA");
            _glGetFramebufferAttachmentParameterivEXT__3P6AXIIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetFramebufferAttachmentParameterivEXT@@3P6AXIIIPEAH@ZEA");
            _glGetRenderbufferParameterivEXT__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetRenderbufferParameterivEXT@@3P6AXIIPEAH@ZEA");
            _glIsFramebufferEXT__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glIsFramebufferEXT@@3P6AEI@ZEA");
            _glIsRenderbufferEXT__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glIsRenderbufferEXT@@3P6AEI@ZEA");
            _glRenderbufferStorageEXT__3P6AXIIHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glRenderbufferStorageEXT@@3P6AXIIHH@ZEA");
            _glBlitFramebufferEXT__3P6AXHHHHHHHHII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBlitFramebufferEXT@@3P6AXHHHHHHHHII@ZEA");
            _wglSwapIntervalEXT__3P6AHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglSwapIntervalEXT@@3P6AHH@ZEA");
            _wglGetSwapIntervalEXT__3P6AHXZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?wglGetSwapIntervalEXT@@3P6AHXZEA");
            _glGenBuffers__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGenBuffers@@3P6AXHPEAI@ZEA");
            _glDeleteBuffers__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteBuffers@@3P6AXHPEBI@ZEA");
            _glBindBuffer__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindBuffer@@3P6AXII@ZEA");
            _glBufferData__3P6AXI_JPEBXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBufferData@@3P6AXI_JPEBXI@ZEA");
            _glBufferStorage__3P6AXI_JPEBXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBufferStorage@@3P6AXI_JPEBXI@ZEA");
            _glMapBuffer__3P6APEAXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMapBuffer@@3P6APEAXII@ZEA");
            _glMapBufferRange__3P6APEAXI_J0I_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMapBufferRange@@3P6APEAXI_J0I@ZEA");
            _glUnmapBuffer__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glUnmapBuffer@@3P6AEI@ZEA");
            _glGetBufferParameteriv__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetBufferParameteriv@@3P6AXIIPEAH@ZEA");
            _glGetTextureParameteriv__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetTextureParameteriv@@3P6AXIIPEAH@ZEA");
            _glClientWaitSyncEXT__3P6AIPEAU__GLsync__I_K_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glClientWaitSyncEXT@@3P6AIPEAU__GLsync@@I_K@ZEA");
            _glDeleteSyncEXT__3P6AXPEAU__GLsync___ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteSyncEXT@@3P6AXPEAU__GLsync@@@ZEA");
            _glFenceSyncEXT__3P6APEAU__GLsync__II_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glFenceSyncEXT@@3P6APEAU__GLsync@@II@ZEA");
            _glCopyImageSubData__3P6AXIIHHHHIIHHHHHHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCopyImageSubData@@3P6AXIIHHHHIIHHHHHHH@ZEA");
            _glGetInternalFormativ__3P6AXIIIHPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetInternalFormativ@@3P6AXIIIHPEAH@ZEA");
            _glCreateProgram__3P6AIXZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateProgram@@3P6AIXZEA");
            _glCreateShader__3P6AII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateShader@@3P6AII@ZEA");
            _glShaderSource__3P6AXIHPEBQEBDPEBH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glShaderSource@@3P6AXIHPEBQEBDPEBH@ZEA");
            _glCompileShader__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCompileShader@@3P6AXI@ZEA");
            _glAttachShader__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glAttachShader@@3P6AXII@ZEA");
            _glLinkProgram__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glLinkProgram@@3P6AXI@ZEA");
            _glGetProgramiv__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetProgramiv@@3P6AXIIPEAH@ZEA");
            _glGetProgramInfoLog__3P6AXIHPEAHPEAD_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetProgramInfoLog@@3P6AXIHPEAHPEAD@ZEA");
            _glGetShaderInfoLog__3P6AXIHPEAHPEAD_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetShaderInfoLog@@3P6AXIHPEAHPEAD@ZEA");
            _glGetIntegeri_v__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetIntegeri_v@@3P6AXIIPEAH@ZEA");
            _glDetachShader__3P6AXII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDetachShader@@3P6AXII@ZEA");
            _glUseProgram__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glUseProgram@@3P6AXI@ZEA");
            _glBindImageTexture__3P6AXIIHEHII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindImageTexture@@3P6AXIIHEHII@ZEA");
            _glDispatchCompute__3P6AXIII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDispatchCompute@@3P6AXIII@ZEA");
            _glDeleteProgram__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteProgram@@3P6AXI@ZEA");
            _glDeleteShader__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteShader@@3P6AXI@ZEA");
            _glMemoryBarrier__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMemoryBarrier@@3P6AXI@ZEA");
            _glActiveTexture__3P6AXI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glActiveTexture@@3P6AXI@ZEA");
            _glUniform1i__3P6AXHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glUniform1i@@3P6AXHH@ZEA");
            _glUniform1f__3P6AXHM_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glUniform1f@@3P6AXHM@ZEA");
            _glGetUniformLocation__3P6AHIPEBD_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetUniformLocation@@3P6AHIPEBD@ZEA");
            _glTextureStorage2D__3P6AXIHIHH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glTextureStorage2D@@3P6AXIHIHH@ZEA");
            _glCreateTextures__3P6AXIHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateTextures@@3P6AXIHPEAI@ZEA");
            _glCreateMemoryObjectsEXT__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateMemoryObjectsEXT@@3P6AXHPEAI@ZEA");
            _glDeleteMemoryObjectsEXT__3P6AXHPEBI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glDeleteMemoryObjectsEXT@@3P6AXHPEBI@ZEA");
            _glTexStorageMem2DEXT__3P6AXIHIHHI_K_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glTexStorageMem2DEXT@@3P6AXIHIHHI_K@ZEA");
            _glTextureStorageMem2DEXT__3P6AXIHIHHI_K_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glTextureStorageMem2DEXT@@3P6AXIHIHHI_K@ZEA");
            _glImportMemoryWin32HandleEXT__3P6AXI_KIPEAX_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glImportMemoryWin32HandleEXT@@3P6AXI_KIPEAX@ZEA");
            _glBufferStorageMemEXT__3P6AXI_JI_K_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBufferStorageMemEXT@@3P6AXI_JI_K@ZEA");
            _glMemoryObjectParameterivEXT__3P6AXIIPEBH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glMemoryObjectParameterivEXT@@3P6AXIIPEBH@ZEA");
            _glGetMemoryObjectParameterivEXT__3P6AXIIPEAH_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glGetMemoryObjectParameterivEXT@@3P6AXIIPEAH@ZEA");
            _glIsMemoryObjectEXT__3P6AEI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glIsMemoryObjectEXT@@3P6AEI@ZEA");
            _glCreateBuffers__3P6AXHPEAI_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glCreateBuffers@@3P6AXHPEAI@ZEA");
            _glBindBufferBase__3P6AXIII_ZEA = CppSharp.SymbolResolver.ResolveSymbol(image, "?glBindBufferBase@@3P6AXIII@ZEA");
        }
    }
}

